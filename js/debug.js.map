{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js6/debug.js","js6/test.js","js6/test2.js","libs/PubSub/pubsub.js","libs/svg.js/svg.js"],"names":[],"mappings":"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","file":"debug.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","var math = require('test');\nwindow.pubsub = require('PubSub/pubsub')\nconsole.log(\"2π = \" + math.sum(math.pi, math.pi));\nvar a = require('test2');\n// import View from './view';\n// import Game from './game';\n// import map from './map';\n// window.View = View;\n// window.Game = Game;\n// window.map = map;\n","console.log(\"importing test.js\")\nmodule.exports.sum =  function sum(a,b){\n  return a+b;\n}\nexports.pi=3.14;\nvar SVG = require('svg.js/svg');\nconsole.log(\"!!!\");\nconsole.log(SVG);\n// var svg=SVG(\"main\");\n// var rect = svg.rect(100, 100).attr({ fill: '#f06'})\n// class App {\n//   constructor(url,id){\n//     this.svg=SVG(id);\n//     this.status=\"initializing\";\n//     this.rest={};\n//   }\n// }\n","var math =  require(\"test\");\nexports.pi2 = math.pi*2;\n",";(function() {\n    'use strict';\n\n    function checkEvent(event) {\n        if (Object.prototype.toString.call(event) !== '[object String]') {\n            throw new TypeError('Event is not a string.');\n        }\n    }\n\n    function checkHandler(handler) {\n        if (typeof handler !== 'function') {\n            throw new TypeError('Handler is not a function');\n        }\n    }\n\n    var handlers = {};\n    var pubsub = { };\n\n    pubsub.publish = pubsub.pub = function(event) {\n\n        checkEvent(event);\n\n        if (!handlers[event]) {\n            return;\n        }\n\n        var ctx = { event: event, args: Array.prototype.slice.call(arguments, 1) };\n\n        for (var i = 0, l = handlers[event].length; i < l; i++) {\n            handlers[event][i].apply(ctx, ctx.args);\n        }\n    };\n\n    pubsub.subscribe = pubsub.sub = function(event, handler) {\n        checkEvent(event);\n        checkHandler(handler);\n        (handlers[event] = handlers[event] || []).push(handler);\n    };\n\n    pubsub.unsubscribe = pubsub.unsub = function() {\n        var args = Array.prototype.slice.call(arguments),\n            event, handler, i, l;\n\n        if (args.length >= 2) {\n            event = args[0];\n            handler = args[1];\n\n            checkEvent(event);\n            checkHandler(handler);\n\n            if (!handlers[event]) {\n                return;\n            }\n\n            for (i = 0, l = handlers[event].length; i < l; i++) {\n                if (handlers[event][i] === handler) {\n                    handlers[event].splice(i, 1);\n                }\n            }\n        } else {\n            handler = args[0];\n\n            checkHandler(handler);\n\n            for (event in handlers) {\n                for (i = 0, l = handlers[event].length; i < l; i++) {\n                    if (handlers[event][i] === handler) {\n                        handlers[event].splice(i, 1);\n                    }\n                }\n            }\n        }\n    };\n\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return pubsub;\n        });\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = pubsub;\n    } else {\n        window.PubSub = pubsub;\n    }\n}());","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.2.1\n* http://www.svgjs.com\n*\n* @copyright Wout Fierens <wout@impinc.co.uk>\n* @license MIT\n*\n* BUILT: Wed Nov 18 2015 14:42:33 GMT+0100 (Mitteleuropäische Zeit)\n*/;\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) };\n  } else {\n    root.SVG = factory(root, root.document);\n  }\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\n\n// The main wrapping element\nvar SVG = this.SVG = function(element) {\n  if (SVG.supported) {\n    element = new SVG.Doc(element)\n\n    if (!SVG.parser)\n      SVG.prepare(element)\n\n    return element\n  }\n}\n\n// Default namespaces\nSVG.ns    = 'http://www.w3.org/2000/svg'\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\nSVG.xlink = 'http://www.w3.org/1999/xlink'\nSVG.svgjs = 'http://svgjs.com/svgjs'\n\n// Svg support test\nSVG.supported = (function() {\n  return !! document.createElementNS &&\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\n})()\n\n// Don't bother to continue if SVG is not supported\nif (!SVG.supported) return false\n\n// Element id sequence\nSVG.did  = 1000\n\n// Get next named element id\nSVG.eid = function(name) {\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\n}\n\n// Method for element creation\nSVG.create = function(name) {\n  // create element\n  var element = document.createElementNS(this.ns, name)\n\n  // apply unique id\n  element.setAttribute('id', this.eid(name))\n\n  return element\n}\n\n// Method for extending objects\nSVG.extend = function() {\n  var modules, methods, key, i\n\n  // Get list of modules\n  modules = [].slice.call(arguments)\n\n  // Get object with extensions\n  methods = modules.pop()\n\n  for (i = modules.length - 1; i >= 0; i--)\n    if (modules[i])\n      for (key in methods)\n        modules[i].prototype[key] = methods[key]\n\n  // Make sure SVG.Set inherits any newly added methods\n  if (SVG.Set && SVG.Set.inherit)\n    SVG.Set.inherit()\n}\n\n// Invent new element\nSVG.invent = function(config) {\n  // Create element initializer\n  var initializer = typeof config.create == 'function' ?\n    config.create :\n    function() {\n      this.constructor.call(this, SVG.create(config.create))\n    }\n\n  // Inherit prototype\n  if (config.inherit)\n    initializer.prototype = new config.inherit\n\n  // Extend with methods\n  if (config.extend)\n    SVG.extend(initializer, config.extend)\n\n  // Attach construct method to parent\n  if (config.construct)\n    SVG.extend(config.parent || SVG.Container, config.construct)\n\n  return initializer\n}\n\n// Adopt existing svg elements\nSVG.adopt = function(node) {\n  // make sure a node isn't already adopted\n  if (node.instance) return node.instance\n\n  // initialize variables\n  var element\n\n  // adopt with element-specific settings\n  if (node.nodeName == 'svg')\n    element = node.parentNode instanceof SVGElement ? new SVG.Nested : new SVG.Doc\n  else if (node.nodeName == 'linearGradient')\n    element = new SVG.Gradient('linear')\n  else if (node.nodeName == 'radialGradient')\n    element = new SVG.Gradient('radial')\n  else if (SVG[capitalize(node.nodeName)])\n    element = new SVG[capitalize(node.nodeName)]\n  else\n    element = new SVG.Element(node)\n\n  // ensure references\n  element.type  = node.nodeName\n  element.node  = node\n  node.instance = element\n\n  // SVG.Class specific preparations\n  if (element instanceof SVG.Doc)\n    element.namespace().defs()\n\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\n\n  return element\n}\n\n// Initialize parsing element\nSVG.prepare = function(element) {\n  // Select document body and create invisible svg element\n  var body = document.getElementsByTagName('body')[0]\n    , draw = (body ? new SVG.Doc(body) : element.nested()).size(2, 0)\n    , path = SVG.create('path')\n\n  // Insert parsers\n  draw.node.appendChild(path)\n\n  // Create parser object\n  SVG.parser = {\n    body: body || element.parent()\n  , draw: draw.style('opacity:0;position:fixed;left:100%;top:100%;overflow:hidden')\n  , poly: draw.polyline().node\n  , path: path\n  }\n}\n\n// Storage for regular expressions\nSVG.regex = {\n  // Parse unit value\n  unit:             /^(-?[\\d\\.]+)([a-z%]{0,2})$/\n\n  // Parse hex value\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n\n  // Parse rgb value\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\n\n  // Parse reference id\n, reference:        /#([a-z0-9\\-_]+)/i\n\n  // Parse matrix wrapper\n, matrix:           /matrix\\(|\\)/g\n\n  // Elements of a matrix\n, matrixElements:   /,*\\s+|,/\n\n  // Whitespace\n, whitespace:       /\\s/g\n\n  // Test hex value\n, isHex:            /^#[a-f0-9]{3,6}$/i\n\n  // Test rgb value\n, isRgb:            /^rgb\\(/\n\n  // Test css declaration\n, isCss:            /[^:]+:[^;]+;?/\n\n  // Test for blank string\n, isBlank:          /^(\\s+)?$/\n\n  // Test for numeric string\n, isNumber:         /^-?[\\d\\.]+$/\n\n  // Test for percent value\n, isPercent:        /^-?[\\d\\.]+%$/\n\n  // Test for image url\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\n\n  // The following regex are used to parse the d attribute of a path\n\n  // Replaces all negative exponents\n, negExp:           /e\\-/gi\n\n  // Replaces all comma\n, comma:            /,/g\n\n  // Replaces all hyphens\n, hyphen:           /\\-/g\n\n  // Replaces and tests for all path letters\n, pathLetters:      /[MLHVCSQTAZ]/gi\n\n  // yes we need this one, too\n, isPathLetter:     /[MLHVCSQTAZ]/i\n\n  // split at whitespaces\n, whitespaces:      /\\s+/\n\n  // matches X\n, X:                /X/g\n}\nSVG.utils = {\n    // Map function\n    map: function(array, block) {\n    var i\n      , il = array.length\n      , result = []\n\n    for (i = 0; i < il; i++)\n      result.push(block(array[i]))\n\n    return result\n  }\n\n  // Degrees to radians\n, radians: function(d) {\n    return d % 360 * Math.PI / 180\n  }\n  // Radians to degrees\n, degrees: function(r) {\n    return r * 180 / Math.PI % 360\n  }\n, filterSVGElements: function(p) {\n    return [].filter.call(p, function(el){ return el instanceof SVGElement })\n  }\n\n}\n\nSVG.defaults = {\n  // Default attribute values\n  attrs: {\n    // fill and stroke\n    'fill-opacity':     1\n  , 'stroke-opacity':   1\n  , 'stroke-width':     0\n  , 'stroke-linejoin':  'miter'\n  , 'stroke-linecap':   'butt'\n  , fill:               '#000000'\n  , stroke:             '#000000'\n  , opacity:            1\n    // position\n  , x:                  0\n  , y:                  0\n  , cx:                 0\n  , cy:                 0\n    // size\n  , width:              0\n  , height:             0\n    // radius\n  , r:                  0\n  , rx:                 0\n  , ry:                 0\n    // gradient\n  , offset:             0\n  , 'stop-opacity':     1\n  , 'stop-color':       '#000000'\n    // text\n  , 'font-size':        16\n  , 'font-family':      'Helvetica, Arial, sans-serif'\n  , 'text-anchor':      'start'\n  }\n\n}\n// Module for color convertions\nSVG.Color = function(color) {\n  var match\n\n  // initialize defaults\n  this.r = 0\n  this.g = 0\n  this.b = 0\n\n  // parse color\n  if (typeof color === 'string') {\n    if (SVG.regex.isRgb.test(color)) {\n      // get rgb values\n      match = SVG.regex.rgb.exec(color.replace(/\\s/g,''))\n\n      // parse numeric values\n      this.r = parseInt(match[1])\n      this.g = parseInt(match[2])\n      this.b = parseInt(match[3])\n\n    } else if (SVG.regex.isHex.test(color)) {\n      // get hex values\n      match = SVG.regex.hex.exec(fullHex(color))\n\n      // parse numeric values\n      this.r = parseInt(match[1], 16)\n      this.g = parseInt(match[2], 16)\n      this.b = parseInt(match[3], 16)\n\n    }\n\n  } else if (typeof color === 'object') {\n    this.r = color.r\n    this.g = color.g\n    this.b = color.b\n\n  }\n\n}\n\nSVG.extend(SVG.Color, {\n  // Default to hex conversion\n  toString: function() {\n    return this.toHex()\n  }\n  // Build hex value\n, toHex: function() {\n    return '#'\n      + compToHex(this.r)\n      + compToHex(this.g)\n      + compToHex(this.b)\n  }\n  // Build rgb value\n, toRgb: function() {\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\n  }\n  // Calculate true brightness\n, brightness: function() {\n    return (this.r / 255 * 0.30)\n         + (this.g / 255 * 0.59)\n         + (this.b / 255 * 0.11)\n  }\n  // Make color morphable\n, morph: function(color) {\n    this.destination = new SVG.Color(color)\n\n    return this\n  }\n  // Get morphed color at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // normalise pos\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\n\n    // generate morphed color\n    return new SVG.Color({\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\n    })\n  }\n\n})\n\n// Testers\n\n// Test if given value is a color string\nSVG.Color.test = function(color) {\n  color += ''\n  return SVG.regex.isHex.test(color)\n      || SVG.regex.isRgb.test(color)\n}\n\n// Test if given value is a rgb object\nSVG.Color.isRgb = function(color) {\n  return color && typeof color.r == 'number'\n               && typeof color.g == 'number'\n               && typeof color.b == 'number'\n}\n\n// Test if given value is a color\nSVG.Color.isColor = function(color) {\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\n}\n// Module for array conversion\nSVG.Array = function(array, fallback) {\n  array = (array || []).valueOf()\n\n  // if array is empty and fallback is provided, use fallback\n  if (array.length == 0 && fallback)\n    array = fallback.valueOf()\n\n  // parse array\n  this.value = this.parse(array)\n}\n\nSVG.extend(SVG.Array, {\n  // Make array morphable\n  morph: function(array) {\n    this.destination = this.parse(array)\n\n    // normalize length of arrays\n    if (this.value.length != this.destination.length) {\n      var lastValue       = this.value[this.value.length - 1]\n        , lastDestination = this.destination[this.destination.length - 1]\n\n      while(this.value.length > this.destination.length)\n        this.destination.push(lastDestination)\n      while(this.value.length < this.destination.length)\n        this.value.push(lastValue)\n    }\n\n    return this\n  }\n  // Clean up any duplicate points\n, settle: function() {\n    // find all unique values\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\n      if (seen.indexOf(this.value[i]) == -1)\n        seen.push(this.value[i])\n\n    // set new value\n    return this.value = seen\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed array\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\n\n    return new SVG.Array(array)\n  }\n  // Convert array to string\n, toString: function() {\n    return this.value.join(' ')\n  }\n  // Real value\n, valueOf: function() {\n    return this.value\n  }\n  // Parse whitespace separated string\n, parse: function(array) {\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    return this.split(array)\n  }\n  // Strip unnecessary whitespace\n, split: function(string) {\n    return string.trim().split(/\\s+/)\n  }\n  // Reverse array\n, reverse: function() {\n    this.value.reverse()\n\n    return this\n  }\n\n})\n// Poly points array\nSVG.PointArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [[0,0]])\n}\n\n// Inherit from SVG.Array\nSVG.PointArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PointArray, {\n  // Convert array to string\n  toString: function() {\n    // convert to a poly point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i].join(','))\n\n    return array.join(' ')\n  }\n  // Convert array to line object\n, toLine: function() {\n    return {\n      x1: this.value[0][0]\n    , y1: this.value[0][1]\n    , x2: this.value[1][0]\n    , y2: this.value[1][1]\n    }\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push([\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\n      ])\n\n    return new SVG.PointArray(array)\n  }\n  // Parse point string\n, parse: function(array) {\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    // split points\n    array = this.split(array)\n\n    // parse points\n    for (var i = 0, il = array.length, p, points = []; i < il; i++) {\n      p = array[i].split(',')\n      points.push([parseFloat(p[0]), parseFloat(p[1])])\n    }\n\n    return points\n  }\n  // Move point string\n, move: function(x, y) {\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y))\n      for (var i = this.value.length - 1; i >= 0; i--)\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\n\n    return this\n  }\n  // Resize poly string\n, size: function(width, height) {\n    var i, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\n      this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n  // Get bounding box of points\n, bbox: function() {\n    SVG.parser.poly.setAttribute('points', this.toString())\n\n    return SVG.parser.poly.getBBox()\n  }\n\n})\n// Path points array\nSVG.PathArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [['M', 0, 0]])\n}\n\n// Inherit from SVG.Array\nSVG.PathArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PathArray, {\n  // Convert array to string\n  toString: function() {\n    return arrayToString(this.value)\n  }\n  // Move path string\n, move: function(x, y) {\n    // get bounding box of current situation\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0]\n\n        if (l == 'M' || l == 'L' || l == 'T')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n\n        } else if (l == 'H')  {\n          this.value[i][1] += x\n\n        } else if (l == 'V')  {\n          this.value[i][1] += y\n\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n          this.value[i][3] += x\n          this.value[i][4] += y\n\n          if (l == 'C')  {\n            this.value[i][5] += x\n            this.value[i][6] += y\n          }\n\n        } else if (l == 'A')  {\n          this.value[i][6] += x\n          this.value[i][7] += y\n        }\n\n      }\n    }\n\n    return this\n  }\n  // Resize path string\n, size: function(width, height) {\n    // get bounding box of current situation\n    var i, l, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      l = this.value[i][0]\n\n      if (l == 'M' || l == 'L' || l == 'T')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'H')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n\n      } else if (l == 'V')  {\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\n\n        if (l == 'C')  {\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\n        }\n\n      } else if (l == 'A')  {\n        // resize radii\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\n        this.value[i][2] = (this.value[i][2] * height) / box.height\n\n        // move position values\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\n      }\n\n    }\n\n    return this\n  }\n  // Absolutize and parse path to array\n, parse: function(array) {\n    // if it's already a patharray, no need to parse it\n    if (array instanceof SVG.PathArray) return array.valueOf()\n\n    // prepare for parsing\n    var i, x0, y0, s, seg, arr\n      , x = 0\n      , y = 0\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7 }\n\n    if(typeof array == 'string'){\n\n      array = array\n        .replace(SVG.regex.negExp, 'X')         // replace all negative exponents with certain char\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, ' -')        // add space before hyphen\n        .replace(SVG.regex.comma, ' ')          // unify all spaces\n        .replace(SVG.regex.X, 'e-')             // add back the expoent\n        .trim()                                 // trim\n        .split(SVG.regex.whitespaces)           // split into array\n\n    }else{\n      array = array.reduce(function(prev, curr){\n        return [].concat.apply(prev, curr)\n      }, [])\n    }\n\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n    var arr = []\n\n    do{\n\n      // Test if we have a path letter\n      if(SVG.regex.isPathLetter.test(array[0])){\n        s = array[0]\n        array.shift()\n      // If last letter was a move command and we got no new, it defaults to [L]ine\n      }else if(s.toUpperCase() == 'M'){\n        s = 'L'\n      }\n\n      // add path letter as first element\n      seg = [s.toUpperCase()]\n\n      // push all necessary parameters to segment\n      for(i = 0; i < paramCnt[seg[0]]; ++i){\n        seg.push(parseFloat(array.shift()))\n      }\n\n      // upper case\n      if(s == seg[0]){\n\n        if(s == 'M' || s == 'L' || s == 'C' || s == 'Q'){\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n        }else if(s == 'V'){\n          y = seg[1]\n        }else if(s == 'H'){\n          x = seg[1]\n        }else if(s == 'A'){\n          x = seg[6]\n          y = seg[7]\n        }\n\n      // lower case\n      }else{\n\n        // convert relative to absolute values\n        if(s == 'm' || s == 'l' || s == 'c' || s == 's' || s == 'q' || s == 't'){\n\n          seg[1] += x\n          seg[2] += y\n\n          if(seg[3] != null){\n            seg[3] += x\n            seg[4] += y\n          }\n\n          if(seg[5] != null){\n            seg[5] += x\n            seg[6] += y\n          }\n\n          // move pointer\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n\n        }else if(s == 'v'){\n          seg[1] += y\n          y = seg[1]\n        }else if(s == 'h'){\n          seg[1] += x\n          x = seg[1]\n        }else if(s == 'a'){\n          seg[6] += x\n          seg[7] += y\n          x = seg[6]\n          y = seg[7]\n        }\n\n      }\n\n      if(seg[0] == 'M'){\n        x0 = x\n        y0 = y\n      }\n\n      if(seg[0] == 'Z'){\n        x = x0\n        y = y0\n      }\n\n      arr.push(seg)\n\n    }while(array.length)\n\n    return arr\n\n  }\n  // Get bounding box of path\n, bbox: function() {\n    SVG.parser.path.setAttribute('d', this.toString())\n\n    return SVG.parser.path.getBBox()\n  }\n\n})\n// Module for unit convertions\nSVG.Number = SVG.invent({\n  // Initialize\n  create: function(value, unit) {\n    // initialize defaults\n    this.value = 0\n    this.unit  = unit || ''\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\n\n    } else if (typeof value === 'string') {\n      unit = value.match(SVG.regex.unit)\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1])\n\n        // normalize\n        if (unit[2] == '%')\n          this.value /= 100\n        else if (unit[2] == 's')\n          this.value *= 1000\n\n        // store unit\n        this.unit = unit[2]\n      }\n\n    } else {\n      if (value instanceof SVG.Number) {\n        this.value = value.valueOf()\n        this.unit  = value.unit\n      }\n    }\n\n  }\n  // Add methods\n, extend: {\n    // Stringalize\n    toString: function() {\n      return (\n        this.unit == '%' ?\n          ~~(this.value * 1e8) / 1e6:\n        this.unit == 's' ?\n          this.value / 1e3 :\n          this.value\n      ) + this.unit\n    }\n  , // Convert to primitive\n    valueOf: function() {\n      return this.value\n    }\n    // Add number\n  , plus: function(number) {\n      return new SVG.Number(this + new SVG.Number(number), this.unit)\n    }\n    // Subtract number\n  , minus: function(number) {\n      return this.plus(-new SVG.Number(number))\n    }\n    // Multiply number\n  , times: function(number) {\n      return new SVG.Number(this * new SVG.Number(number), this.unit)\n    }\n    // Divide number\n  , divide: function(number) {\n      return new SVG.Number(this / new SVG.Number(number), this.unit)\n    }\n    // Convert to different unit\n  , to: function(unit) {\n      var number = new SVG.Number(this)\n\n      if (typeof unit === 'string')\n        number.unit = unit\n\n      return number\n    }\n    // Make number morphable\n  , morph: function(number) {\n      this.destination = new SVG.Number(number)\n\n      return this\n    }\n    // Get morphed number at given position\n  , at: function(pos) {\n      // Make sure a destination is defined\n      if (!this.destination) return this\n\n      // Generate new morphed number\n      return new SVG.Number(this.destination)\n          .minus(this)\n          .times(pos)\n          .plus(this)\n    }\n\n  }\n})\n\nSVG.ViewBox = function(element) {\n  var x, y, width, height\n    , wm   = 1 // width multiplier\n    , hm   = 1 // height multiplier\n    , box  = element.bbox()\n    , view = (element.attr('viewBox') || '').match(/-?[\\d\\.]+/g)\n    , we   = element\n    , he   = element\n\n  // get dimensions of current node\n  width  = new SVG.Number(element.width())\n  height = new SVG.Number(element.height())\n\n  // find nearest non-percentual dimensions\n  while (width.unit == '%') {\n    wm *= width.value\n    width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\n    we = we.parent()\n  }\n  while (height.unit == '%') {\n    hm *= height.value\n    height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\n    he = he.parent()\n  }\n\n  // ensure defaults\n  this.x      = box.x\n  this.y      = box.y\n  this.width  = width  * wm\n  this.height = height * hm\n  this.zoom   = 1\n\n  if (view) {\n    // get width and height from viewbox\n    x      = parseFloat(view[0])\n    y      = parseFloat(view[1])\n    width  = parseFloat(view[2])\n    height = parseFloat(view[3])\n\n    // calculate zoom accoring to viewbox\n    this.zoom = ((this.width / this.height) > (width / height)) ?\n      this.height / height :\n      this.width  / width\n\n    // calculate real pixel dimensions on parent SVG.Doc element\n    this.x      = x\n    this.y      = y\n    this.width  = width\n    this.height = height\n\n  }\n\n}\n\n//\nSVG.extend(SVG.ViewBox, {\n  // Parse viewbox to string\n  toString: function() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\n  }\n\n})\n\nSVG.Element = SVG.invent({\n  // Initialize node\n  create: function(node) {\n    // make stroke value accessible dynamically\n    this._stroke = SVG.defaults.attrs.stroke\n\n    // initialize data object\n    this.dom = {}\n\n    // create circular reference\n    if (this.node = node) {\n      this.type = node.nodeName\n      this.node.instance = this\n\n      // store current attribute value\n      this._stroke = node.getAttribute('stroke') || this._stroke\n    }\n  }\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return this.attr('y', y)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\n    }\n    // Move element to given x and y values\n  , move: function(x, y) {\n      return this.x(x).y(y)\n    }\n    // Move element by its center\n  , center: function(x, y) {\n      return this.cx(x).cy(y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return this.attr('width', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('height', height)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this\n        .width(new SVG.Number(p.width))\n        .height(new SVG.Number(p.height))\n    }\n    // Clone element\n  , clone: function() {\n      // clone element and assign new id\n      var clone = assignNewId(this.node.cloneNode(true))\n\n      // insert the clone after myself\n      this.after(clone)\n\n      return clone\n    }\n    // Remove element\n  , remove: function() {\n      if (this.parent())\n        this.parent().removeElement(this)\n\n      return this\n    }\n    // Replace element\n  , replace: function(element) {\n      this.after(element).remove()\n\n      return element\n    }\n    // Add element to given container and return self\n  , addTo: function(parent) {\n      return parent.put(this)\n    }\n    // Add element to given container and return container\n  , putIn: function(parent) {\n      return parent.add(this)\n    }\n    // Get / set id\n  , id: function(id) {\n      return this.attr('id', id)\n    }\n    // Checks whether the given point inside the bounding box of the element\n  , inside: function(x, y) {\n      var box = this.bbox()\n\n      return x > box.x\n          && y > box.y\n          && x < box.x + box.width\n          && y < box.y + box.height\n    }\n    // Show element\n  , show: function() {\n      return this.style('display', '')\n    }\n    // Hide element\n  , hide: function() {\n      return this.style('display', 'none')\n    }\n    // Is element visible?\n  , visible: function() {\n      return this.style('display') != 'none'\n    }\n    // Return id on string conversion\n  , toString: function() {\n      return this.attr('id')\n    }\n    // Return array of classes on the node\n  , classes: function() {\n      var attr = this.attr('class')\n\n      return attr == null ? [] : attr.trim().split(/\\s+/)\n    }\n    // Return true if class exists on the node, false otherwise\n  , hasClass: function(name) {\n      return this.classes().indexOf(name) != -1\n    }\n    // Add class to the node\n  , addClass: function(name) {\n      if (!this.hasClass(name)) {\n        var array = this.classes()\n        array.push(name)\n        this.attr('class', array.join(' '))\n      }\n\n      return this\n    }\n    // Remove class from the node\n  , removeClass: function(name) {\n      if (this.hasClass(name)) {\n        this.attr('class', this.classes().filter(function(c) {\n          return c != name\n        }).join(' '))\n      }\n\n      return this\n    }\n    // Toggle the presence of a class on the node\n  , toggleClass: function(name) {\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\n    }\n    // Get referenced element form attribute value\n  , reference: function(attr) {\n      return SVG.get(this.attr(attr))\n    }\n    // Returns the parent element instance\n  , parent: function(type) {\n      var parent = this\n\n      // check for parent\n      if(!parent.node.parentNode) return null\n\n      // get parent element\n      parent = SVG.adopt(parent.node.parentNode)\n\n      if(!type) return parent\n\n      // loop trough ancestors if type is given\n      while(parent.node instanceof SVGElement){\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\n        parent = SVG.adopt(parent.node.parentNode)\n      }\n    }\n    // Get parent document\n  , doc: function() {\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\n    }\n    // return array of all ancestors of given type up to the root svg\n  , parents: function(type) {\n      var parents = [], parent = this\n\n      do{\n        parent = parent.parent(type)\n        if(!parent || !parent.node) break\n\n        parents.push(parent)\n      } while(parent.parent)\n\n      return parents\n    }\n    // matches the element vs a css selector\n  , matches: function(selector){\n      return matches(this.node, selector)\n    }\n    // Returns the svg node to call native svg methods on it\n  , native: function() {\n      return this.node\n    }\n    // Import raw svg\n  , svg: function(svg) {\n      // create temporary holder\n      var well = document.createElement('svg')\n\n      // act as a setter if svg is given\n      if (svg && this instanceof SVG.Parent) {\n        // dump raw svg\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<(\\w+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\n\n        // transplant nodes\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n          this.node.appendChild(well.firstChild.firstChild)\n\n      // otherwise act as a getter\n      } else {\n        // create a wrapping svg element in case of partial content\n        well.appendChild(svg = document.createElement('svg'))\n\n        // write svgjs data to the dom\n        this.writeDataToDom()\n\n        // insert a copy of this node\n        svg.appendChild(this.node.cloneNode(true))\n\n        // return target element\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\n      }\n\n      return this\n    }\n  // write svgjs data to the dom\n  , writeDataToDom: function() {\n\n      // dump variables recursively\n      if(this.each || this.lines){\n        var fn = this.each ? this : this.lines();\n        fn.each(function(){\n          this.writeDataToDom()\n        })\n      }\n\n      // remove previously set data\n      this.node.removeAttribute('svgjs:data')\n\n      if(Object.keys(this.dom).length)\n        this.node.setAttributeNS(SVG.svgjs, 'svgjs:data', JSON.stringify(this.dom))\n\n      return this\n    }\n  // set given data to the elements data property\n  , setData: function(o){\n      this.dom = o\n      return this\n    }\n  }\n})\n\nSVG.FX = SVG.invent({\n  // Initialize FX object\n  create: function(element) {\n    // store target element\n    this.target = element\n  }\n\n  // Add class methods\n, extend: {\n    // Add animation parameters and start animation\n    animate: function(d, ease, delay) {\n      var akeys, skeys, key\n        , element = this.target\n        , fx = this\n\n      // dissect object if one is passed\n      if (typeof d == 'object') {\n        delay = d.delay\n        ease = d.ease\n        d = d.duration\n      }\n\n      // ensure default duration and easing\n      d = d == '=' ? d : d == null ? 1000 : new SVG.Number(d).valueOf()\n      ease = ease || '<>'\n\n      // process values\n      fx.at = function(pos) {\n        var i\n\n        // normalise pos\n        pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\n\n        // collect attribute keys\n        if (akeys == null) {\n          akeys = []\n          for (key in fx.attrs)\n            akeys.push(key)\n\n          // make sure morphable elements are scaled, translated and morphed all together\n          if (element.morphArray && (fx.destination.plot || akeys.indexOf('points') > -1)) {\n            // get destination\n            var box\n              , p = new element.morphArray(fx.destination.plot || fx.attrs.points || element.array())\n\n            // add size\n            if (fx.destination.size)\n              p.size(fx.destination.size.width.to, fx.destination.size.height.to)\n\n            // add movement\n            box = p.bbox()\n            if (fx.destination.x)\n              p.move(fx.destination.x.to, box.y)\n            else if (fx.destination.cx)\n              p.move(fx.destination.cx.to - box.width / 2, box.y)\n\n            box = p.bbox()\n            if (fx.destination.y)\n              p.move(box.x, fx.destination.y.to)\n            else if (fx.destination.cy)\n              p.move(box.x, fx.destination.cy.to - box.height / 2)\n\n            // reset destination values\n            fx.destination = {\n              plot: element.array().morph(p)\n            }\n          }\n        }\n\n        // collect style keys\n        if (skeys == null) {\n          skeys = []\n          for (key in fx.styles)\n            skeys.push(key)\n        }\n\n        // apply easing\n        pos = ease == '<>' ?\n          (-Math.cos(pos * Math.PI) / 2) + 0.5 :\n        ease == '>' ?\n          Math.sin(pos * Math.PI / 2) :\n        ease == '<' ?\n          -Math.cos(pos * Math.PI / 2) + 1 :\n        ease == '-' ?\n          pos :\n        typeof ease == 'function' ?\n          ease(pos) :\n          pos\n\n        // run plot function\n        if (fx.destination.plot) {\n          element.plot(fx.destination.plot.at(pos))\n\n        } else {\n          // run all x-position properties\n          if (fx.destination.x)\n            element.x(fx.destination.x.at(pos))\n          else if (fx.destination.cx)\n            element.cx(fx.destination.cx.at(pos))\n\n          // run all y-position properties\n          if (fx.destination.y)\n            element.y(fx.destination.y.at(pos))\n          else if (fx.destination.cy)\n            element.cy(fx.destination.cy.at(pos))\n\n          // run all size properties\n          if (fx.destination.size)\n            element.size(fx.destination.size.width.at(pos), fx.destination.size.height.at(pos))\n        }\n\n        // run all viewbox properties\n        if (fx.destination.viewbox)\n          element.viewbox(\n            fx.destination.viewbox.x.at(pos)\n          , fx.destination.viewbox.y.at(pos)\n          , fx.destination.viewbox.width.at(pos)\n          , fx.destination.viewbox.height.at(pos)\n          )\n\n        // run leading property\n        if (fx.destination.leading)\n          element.leading(fx.destination.leading.at(pos))\n\n        // animate attributes\n        for (i = akeys.length - 1; i >= 0; i--)\n          element.attr(akeys[i], at(fx.attrs[akeys[i]], pos))\n\n        // animate styles\n        for (i = skeys.length - 1; i >= 0; i--)\n          element.style(skeys[i], at(fx.styles[skeys[i]], pos))\n\n        // callback for each keyframe\n        if (fx.situation.during)\n          fx.situation.during.call(element, pos, function(from, to) {\n            return at({ from: from, to: to }, pos)\n          })\n      }\n\n      if (typeof d === 'number') {\n        // delay animation\n        this.timeout = setTimeout(function() {\n          var start = new Date().getTime()\n\n          // initialize situation object\n          fx.situation.start    = start\n          fx.situation.play     = true\n          fx.situation.finish   = start + d\n          fx.situation.duration = d\n          fx.situation.ease     = ease\n\n          // render function\n          fx.render = function() {\n\n            if (fx.situation.play === true) {\n              // calculate pos\n              var time = new Date().getTime()\n                , pos = time > fx.situation.finish ? 1 : (time - fx.situation.start) / d\n\n              // reverse pos if animation is reversed\n              if (fx.situation.reversing)\n                pos = -pos + 1\n\n              // process values\n              fx.at(pos)\n\n              // finish off animation\n              if (time > fx.situation.finish) {\n                if (fx.destination.plot)\n                  element.plot(new SVG.PointArray(fx.destination.plot.destination).settle())\n\n                if (fx.situation.loop === true || (typeof fx.situation.loop == 'number' && fx.situation.loop > 0)) {\n                  // register reverse\n                  if (fx.situation.reverse)\n                    fx.situation.reversing = !fx.situation.reversing\n\n                  if (typeof fx.situation.loop == 'number') {\n                    // reduce loop count\n                    if (!fx.situation.reverse || fx.situation.reversing)\n                      --fx.situation.loop\n\n                    // remove last loop if reverse is disabled\n                    if (!fx.situation.reverse && fx.situation.loop == 1)\n                      --fx.situation.loop\n                  }\n\n                  fx.animate(d, ease, delay)\n                } else {\n                  fx.situation.after ? fx.situation.after.apply(element, [fx]) : fx.stop()\n                }\n\n              } else {\n                fx.animationFrame = requestAnimationFrame(fx.render)\n              }\n            } else {\n              fx.animationFrame = requestAnimationFrame(fx.render)\n            }\n\n          }\n\n          // start animation\n          fx.render()\n\n        }, new SVG.Number(delay).valueOf())\n      }\n\n      return this\n    }\n    // Get bounding box of target element\n  , bbox: function() {\n      return this.target.bbox()\n    }\n    // Add animatable attributes\n  , attr: function(a, v) {\n      // apply attributes individually\n      if (typeof a == 'object') {\n        for (var key in a)\n          this.attr(key, a[key])\n\n      } else {\n        // get the current state\n        var from = this.target.attr(a)\n\n        // detect format\n        if (a == 'transform') {\n          // merge given transformation with an existing one\n          if (this.attrs[a])\n            v = this.attrs[a].destination.multiply(v)\n\n          // prepare matrix for morphing\n          this.attrs[a] = (new SVG.Matrix(this.target)).morph(v)\n\n          // add parametric rotation values\n          if (this.param) {\n            // get initial rotation\n            v = this.target.transform('rotation')\n\n            // add param\n            this.attrs[a].param = {\n              from: this.target.param || { rotation: v, cx: this.param.cx, cy: this.param.cy }\n            , to:   this.param\n            }\n          }\n\n        } else {\n          this.attrs[a] = SVG.Color.isColor(v) ?\n            // prepare color for morphing\n            new SVG.Color(from).morph(v) :\n          SVG.regex.unit.test(v) ?\n            // prepare number for morphing\n            new SVG.Number(from).morph(v) :\n            // prepare for plain morphing\n            { from: from, to: v }\n        }\n      }\n\n      return this\n    }\n    // Add animatable styles\n  , style: function(s, v) {\n      if (typeof s == 'object')\n        for (var key in s)\n          this.style(key, s[key])\n\n      else\n        this.styles[s] = { from: this.target.style(s), to: v }\n\n      return this\n    }\n    // Animatable x-axis\n  , x: function(x) {\n      this.destination.x = new SVG.Number(this.target.x()).morph(x)\n\n      return this\n    }\n    // Animatable y-axis\n  , y: function(y) {\n      this.destination.y = new SVG.Number(this.target.y()).morph(y)\n\n      return this\n    }\n    // Animatable center x-axis\n  , cx: function(x) {\n      this.destination.cx = new SVG.Number(this.target.cx()).morph(x)\n\n      return this\n    }\n    // Animatable center y-axis\n  , cy: function(y) {\n      this.destination.cy = new SVG.Number(this.target.cy()).morph(y)\n\n      return this\n    }\n    // Add animatable move\n  , move: function(x, y) {\n      return this.x(x).y(y)\n    }\n    // Add animatable center\n  , center: function(x, y) {\n      return this.cx(x).cy(y)\n    }\n    // Add animatable size\n  , size: function(width, height) {\n      if (this.target instanceof SVG.Text) {\n        // animate font size for Text elements\n        this.attr('font-size', width)\n\n      } else {\n        // animate bbox based size for all other elements\n        var box = this.target.bbox()\n\n        this.destination.size = {\n          width:  new SVG.Number(box.width).morph(width)\n        , height: new SVG.Number(box.height).morph(height)\n        }\n      }\n\n      return this\n    }\n    // Add animatable plot\n  , plot: function(p) {\n      this.destination.plot = p\n\n      return this\n    }\n    // Add leading method\n  , leading: function(value) {\n      if (this.target.destination.leading)\n        this.destination.leading = new SVG.Number(this.target.destination.leading).morph(value)\n\n      return this\n    }\n    // Add animatable viewbox\n  , viewbox: function(x, y, width, height) {\n      if (this.target instanceof SVG.Container) {\n        var box = this.target.viewbox()\n\n        this.destination.viewbox = {\n          x:      new SVG.Number(box.x).morph(x)\n        , y:      new SVG.Number(box.y).morph(y)\n        , width:  new SVG.Number(box.width).morph(width)\n        , height: new SVG.Number(box.height).morph(height)\n        }\n      }\n\n      return this\n    }\n    // Add animateable gradient update\n  , update: function(o) {\n      if (this.target instanceof SVG.Stop) {\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n        if (o.color   != null) this.attr('stop-color', o.color)\n        if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\n      }\n\n      return this\n    }\n    // Add callback for each keyframe\n  , during: function(during) {\n      this.situation.during = during\n\n      return this\n    }\n    // Callback after animation\n  , after: function(after) {\n      this.situation.after = after\n\n      return this\n    }\n    // Make loopable\n  , loop: function(times, reverse) {\n      // store current loop and total loops\n      this.situation.loop = this.situation.loops = times || true\n\n      // make reversable\n      this.situation.reverse = !!reverse\n\n      return this\n    }\n    // Stop running animation\n  , stop: function(fulfill) {\n      // fulfill animation\n      if (fulfill === true) {\n\n        this.animate(0)\n\n        if (this.situation.after)\n          this.situation.after.apply(this.target, [this])\n\n      } else {\n        // stop current animation\n        clearTimeout(this.timeout)\n        cancelAnimationFrame(this.animationFrame);\n\n        // reset storage for properties\n        this.attrs       = {}\n        this.styles      = {}\n        this.situation   = {}\n        this.destination = {}\n      }\n\n      return this\n    }\n    // Pause running animation\n  , pause: function() {\n      if (this.situation.play === true) {\n        this.situation.play  = false\n        this.situation.pause = new Date().getTime()\n      }\n\n      return this\n    }\n    // Play running animation\n  , play: function() {\n      if (this.situation.play === false) {\n        var pause = new Date().getTime() - this.situation.pause\n\n        this.situation.finish += pause\n        this.situation.start  += pause\n        this.situation.play    = true\n      }\n\n      return this\n    }\n\n  }\n\n  // Define parent class\n, parent: SVG.Element\n\n  // Add method to parent elements\n, construct: {\n    // Get fx module or create a new one, then animate with given duration and ease\n    animate: function(d, ease, delay) {\n      return (this.fx || (this.fx = new SVG.FX(this))).stop().animate(d, ease, delay)\n    }\n    // Stop current animation; this is an alias to the fx instance\n  , stop: function(fulfill) {\n      if (this.fx)\n        this.fx.stop(fulfill)\n\n      return this\n    }\n    // Pause current animation\n  , pause: function() {\n      if (this.fx)\n        this.fx.pause()\n\n      return this\n    }\n    // Play paused current animation\n  , play: function() {\n      if (this.fx)\n        this.fx.play()\n\n      return this\n    }\n\n  }\n})\n\nSVG.BBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var box\n\n      // yes this is ugly, but Firefox can be a bitch when it comes to elements that are not yet rendered\n      try {\n        // find native bbox\n        box = element.node.getBBox()\n      } catch(e) {\n        if(element instanceof SVG.Shape){\n          var clone = element.clone().addTo(SVG.parser.draw)\n          box = clone.bbox()\n          clone.remove()\n        }else{\n          box = {\n            x:      element.node.clientLeft\n          , y:      element.node.clientTop\n          , width:  element.node.clientWidth\n          , height: element.node.clientHeight\n          }\n        }\n      }\n\n      // plain x and y\n      this.x = box.x\n      this.y = box.y\n\n      // plain width and height\n      this.width  = box.width\n      this.height = box.height\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get bounding box\n    bbox: function() {\n      return new SVG.BBox(this)\n    }\n  }\n\n})\n\nSVG.TBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var t   = element.ctm().extract()\n        , box = element.bbox()\n\n      // width and height including transformations\n      this.width  = box.width  * t.scaleX\n      this.height = box.height * t.scaleY\n\n      // x and y including transformations\n      this.x = box.x + t.x\n      this.y = box.y + t.y\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get transformed bounding box\n    tbox: function() {\n      return new SVG.TBox(this)\n    }\n  }\n\n})\n\n\nSVG.RBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    if (element) {\n      var e    = element.doc().parent()\n        , box  = element.node.getBoundingClientRect()\n        , zoom = 1\n\n      // get screen offset\n      this.x = box.left\n      this.y = box.top\n\n      // subtract parent offset\n      this.x -= e.offsetLeft\n      this.y -= e.offsetTop\n\n      while (e = e.offsetParent) {\n        this.x -= e.offsetLeft\n        this.y -= e.offsetTop\n      }\n\n      // calculate cumulative zoom from svg documents\n      e = element\n      while (e.parent && (e = e.parent())) {\n        if (e.viewbox) {\n          zoom *= e.viewbox().zoom\n          this.x -= e.x() || 0\n          this.y -= e.y() || 0\n        }\n      }\n\n      // recalculate viewbox distortion\n      this.width  = box.width  /= zoom\n      this.height = box.height /= zoom\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += window.scrollX\n    this.y += window.scrollY\n  }\n\n  // define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get rect box\n    rbox: function() {\n      return new SVG.RBox(this)\n    }\n  }\n\n})\n\n// Add universal merge method\n;[SVG.BBox, SVG.TBox, SVG.RBox].forEach(function(c) {\n\n  SVG.extend(c, {\n    // Merge rect box with another, return a new instance\n    merge: function(box) {\n      var b = new c()\n\n      // merge boxes\n      b.x      = Math.min(this.x, box.x)\n      b.y      = Math.min(this.y, box.y)\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\n\n      return fullBox(b)\n    }\n\n  })\n\n})\n\nSVG.Matrix = SVG.invent({\n  // Initialize\n  create: function(source) {\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\n\n    // ensure source as object\n    source = source instanceof SVG.Element ?\n      source.matrixify() :\n    typeof source === 'string' ?\n      stringToMatrix(source) :\n    arguments.length == 6 ?\n      arrayToMatrix([].slice.call(arguments)) :\n    typeof source === 'object' ?\n      source : base\n\n    // merge source\n    for (i = abcdef.length - 1; i >= 0; i--)\n      this[abcdef[i]] = source && typeof source[abcdef[i]] === 'number' ?\n        source[abcdef[i]] : base[abcdef[i]]\n  }\n\n  // Add methods\n, extend: {\n    // Extract individual transformations\n    extract: function() {\n      // find delta transform points\n      var px    = deltaTransformPoint(this, 0, 1)\n        , py    = deltaTransformPoint(this, 1, 0)\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\n\n      return {\n        // translation\n        x:        this.e\n      , y:        this.f\n        // skew\n      , skewX:    -skewX\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\n        // scale\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\n        // rotation\n      , rotation: skewX\n      }\n    }\n    // Clone matrix\n  , clone: function() {\n      return new SVG.Matrix(this)\n    }\n    // Morph one matrix into another\n  , morph: function(matrix) {\n      // store new destination\n      this.destination = new SVG.Matrix(matrix)\n\n      return this\n    }\n    // Get morphed matrix at a given position\n  , at: function(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this\n\n      // calculate morphed matrix at a given position\n      var matrix = new SVG.Matrix({\n        a: this.a + (this.destination.a - this.a) * pos\n      , b: this.b + (this.destination.b - this.b) * pos\n      , c: this.c + (this.destination.c - this.c) * pos\n      , d: this.d + (this.destination.d - this.d) * pos\n      , e: this.e + (this.destination.e - this.e) * pos\n      , f: this.f + (this.destination.f - this.f) * pos\n      })\n\n      // process parametric rotation if present\n      if (this.param && this.param.to) {\n        // calculate current parametric position\n        var param = {\n          rotation: this.param.from.rotation + (this.param.to.rotation - this.param.from.rotation) * pos\n        , cx:       this.param.from.cx\n        , cy:       this.param.from.cy\n        }\n\n        // rotate matrix\n        matrix = matrix.rotate(\n          (this.param.to.rotation - this.param.from.rotation * 2) * pos\n        , param.cx\n        , param.cy\n        )\n\n        // store current parametric values\n        matrix.param = param\n      }\n\n      return matrix\n    }\n    // Multiplies by given matrix\n  , multiply: function(matrix) {\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\n    }\n    // Inverses matrix\n  , inverse: function() {\n      return new SVG.Matrix(this.native().inverse())\n    }\n    // Translate matrix\n  , translate: function(x, y) {\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\n    }\n    // Scale matrix\n  , scale: function(x, y, cx, cy) {\n      // support universal scale\n      if (arguments.length == 1 || arguments.length == 3)\n        y = x\n      if (arguments.length == 3) {\n        cy = cx\n        cx = y\n      }\n\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\n    }\n    // Rotate matrix\n  , rotate: function(r, cx, cy) {\n      // convert degrees to radians\n      r = SVG.utils.radians(r)\n\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\n    }\n    // Flip matrix on x or y, at a given offset\n  , flip: function(a, o) {\n      return a == 'x' ? this.scale(-1, 1, o, 0) : this.scale(1, -1, 0, o)\n    }\n    // Skew\n  , skew: function(x, y, cx, cy) {\n      return this.around(cx, cy, this.native().skewX(x || 0).skewY(y || 0))\n    }\n    // SkewX\n  , skewX: function(x, cx, cy) {\n      return this.around(cx, cy, this.native().skewX(x || 0))\n    }\n    // SkewY\n  , skewY: function(y, cx, cy) {\n      return this.around(cx, cy, this.native().skewY(y || 0))\n    }\n    // Transform around a center point\n  , around: function(cx, cy, matrix) {\n      return this\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\n        .multiply(matrix)\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\n    }\n    // Convert to native SVGMatrix\n  , native: function() {\n      // create new matrix\n      var matrix = SVG.parser.draw.node.createSVGMatrix()\n\n      // update with current values\n      for (var i = abcdef.length - 1; i >= 0; i--)\n        matrix[abcdef[i]] = this[abcdef[i]]\n\n      return matrix\n    }\n    // Convert matrix to string\n  , toString: function() {\n      return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')'\n    }\n  }\n\n  // Define parent\n, parent: SVG.Element\n\n  // Add parent method\n, construct: {\n    // Get current matrix\n    ctm: function() {\n      return new SVG.Matrix(this.node.getCTM())\n    },\n    // Get current screen matrix\n    screenCTM: function() {\n      return new SVG.Matrix(this.node.getScreenCTM())\n    }\n\n  }\n\n})\nSVG.extend(SVG.Element, {\n  // Set svg element attribute\n  attr: function(a, v, n) {\n    // act as full getter\n    if (a == null) {\n      // get an object of attributes\n      a = {}\n      v = this.node.attributes\n      for (n = v.length - 1; n >= 0; n--)\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\n\n      return a\n\n    } else if (typeof a == 'object') {\n      // apply every attribute individually if an object is passed\n      for (v in a) this.attr(v, a[v])\n\n    } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a)\n\n    } else if (v == null) {\n      // act as a getter if the first and only argument is not an object\n      v = this.node.getAttribute(a)\n      return v == null ?\n        SVG.defaults.attrs[a] :\n      SVG.regex.isNumber.test(v) ?\n        parseFloat(v) : v\n\n    } else {\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n      if (a == 'stroke-width')\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\n      else if (a == 'stroke')\n        this._stroke = v\n\n      // convert image fill and stroke to patterns\n      if (a == 'fill' || a == 'stroke') {\n        if (SVG.regex.isImage.test(v))\n          v = this.doc().defs().image(v, 0, 0)\n\n        if (v instanceof SVG.Image)\n          v = this.doc().defs().pattern(0, 0, function() {\n            this.add(v)\n          })\n      }\n\n      // ensure correct numeric values (also accepts NaN and Infinity)\n      if (typeof v === 'number')\n        v = new SVG.Number(v)\n\n      // ensure full hex color\n      else if (SVG.Color.isColor(v))\n        v = new SVG.Color(v)\n\n      // parse array values\n      else if (Array.isArray(v))\n        v = new SVG.Array(v)\n\n      // store parametric transformation values locally\n      else if (v instanceof SVG.Matrix && v.param)\n        this.param = v.param\n\n      // if the passed attribute is leading...\n      if (a == 'leading') {\n        // ... call the leading method instead\n        if (this.leading)\n          this.leading(v)\n      } else {\n        // set given attribute on node\n        typeof n === 'string' ?\n          this.node.setAttributeNS(n, a, v.toString()) :\n          this.node.setAttribute(a, v.toString())\n      }\n\n      // rebuild if required\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\n        this.rebuild(a, v)\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, SVG.FX, {\n  // Add transformations\n  transform: function(o, relative) {\n    // get target in case of the fx module, otherwise reference this\n    var target = this.target || this\n      , matrix\n\n    // act as a getter\n    if (typeof o !== 'object') {\n      // get current matrix\n      matrix = new SVG.Matrix(target).extract()\n\n      // add parametric rotation\n      if (typeof this.param === 'object') {\n        matrix.rotation = this.param.rotation\n        matrix.cx       = this.param.cx\n        matrix.cy       = this.param.cy\n      }\n\n      return typeof o === 'string' ? matrix[o] : matrix\n    }\n\n    // get current matrix\n    matrix = this instanceof SVG.FX && this.attrs.transform ?\n      this.attrs.transform :\n      new SVG.Matrix(target)\n\n    // ensure relative flag\n    relative = !!relative || !!o.relative\n\n    // act on matrix\n    if (o.a != null) {\n      matrix = relative ?\n        // relative\n        matrix.multiply(new SVG.Matrix(o)) :\n        // absolute\n        new SVG.Matrix(o)\n\n    // act on rotation\n    } else if (o.rotation != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // relativize rotation value\n      if (relative) {\n        o.rotation += this.param && this.param.rotation != null ?\n          this.param.rotation :\n          matrix.extract().rotation\n      }\n\n      // store parametric values\n      this.param = o\n\n      // apply transformation\n      if (this instanceof SVG.Element) {\n        matrix = relative ?\n          // relative\n          matrix.rotate(o.rotation, o.cx, o.cy) :\n          // absolute\n          matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\n      }\n\n    // act on scale\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure scale values on both axes\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\n\n      if (!relative) {\n        // absolute; multiply inversed values\n        var e = matrix.extract()\n        o.scaleX = o.scaleX * 1 / e.scaleX\n        o.scaleY = o.scaleY * 1 / e.scaleY\n      }\n\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\n\n    // act on skew\n    } else if (o.skewX != null || o.skewY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure skew values on both axes\n      o.skewX = o.skewX != null ? o.skewX : 0\n      o.skewY = o.skewY != null ? o.skewY : 0\n\n      if (!relative) {\n        // absolute; reset skew values\n        var e = matrix.extract()\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\n      }\n\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\n\n    // act on flip\n    } else if (o.flip) {\n      matrix = matrix.flip(\n        o.flip\n      , o.offset == null ? target.bbox()['c' + o.flip] : o.offset\n      )\n\n    // act on translate\n    } else if (o.x != null || o.y != null) {\n      if (relative) {\n        // relative\n        matrix = matrix.translate(o.x, o.y)\n      } else {\n        // absolute\n        if (o.x != null) matrix.e = o.x\n        if (o.y != null) matrix.f = o.y\n      }\n    }\n\n    return this.attr(this instanceof SVG.Pattern ? 'patternTransform' : this instanceof SVG.Gradient ? 'gradientTransform' : 'transform', matrix)\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Reset all transformations\n  untransform: function() {\n    return this.attr('transform', null)\n  },\n  // merge the whole transformation chain into one matrix\n  matrixify: function() {\n\n    var matrix = (this.attr('transform') || '')\n      // split transformations\n      .split(/\\)\\s*/).slice(0,-1).map(function(str){\n        // generate key => value pairs\n        var kv = str.trim().split('(')\n        return [kv[0], kv[1].split(SVG.regex.matrixElements).map(function(str){ return parseFloat(str) })]\n      })\n      // calculate every transformation into one matrix\n      .reduce(function(matrix, transform){\n\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\n        return matrix[transform[0]].apply(matrix, transform[1])\n\n      }, new SVG.Matrix())\n    // apply calculated matrix to element\n    this.attr('transform', matrix)\n\n    return matrix\n  },\n  // add an element to another parent without changing the visual representation on the screen\n  toParent: function(parent) {\n    if(this == parent) return this\n    var ctm = this.screenCTM()\n    var temp = parent.rect(1,1)\n    var pCtm = temp.screenCTM().inverse()\n    temp.remove()\n\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\n\n    return this\n  },\n  // same as above with parent equals root-svg\n  toDoc: function() {\n    return this.toParent(this.doc())\n  }\n\n})\n\nSVG.extend(SVG.Element, {\n  // Dynamic style generator\n  style: function(s, v) {\n    if (arguments.length == 0) {\n      // get full style\n      return this.node.style.cssText || ''\n\n    } else if (arguments.length < 2) {\n      // apply every style individually if an object is passed\n      if (typeof s == 'object') {\n        for (v in s) this.style(v, s[v])\n\n      } else if (SVG.regex.isCss.test(s)) {\n        // parse css string\n        s = s.split(';')\n\n        // apply every definition individually\n        for (var i = 0; i < s.length; i++) {\n          v = s[i].split(':')\n          this.style(v[0].replace(/\\s+/g, ''), v[1])\n        }\n      } else {\n        // act as a getter if the first and only argument is not an object\n        return this.node.style[camelCase(s)]\n      }\n\n    } else {\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\n    }\n\n    return this\n  }\n})\nSVG.Parent = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // Returns all child elements\n    children: function() {\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\n        return SVG.adopt(node)\n      })\n    }\n    // Add given element at a position\n  , add: function(element, i) {\n      if (!this.has(element)) {\n        // define insertion index if none given\n        i = i == null ? this.children().length : i\n\n        // add element references\n        this.node.insertBefore(element.node, this.node.childNodes[i] || null)\n      }\n\n      return this\n    }\n    // Basically does the same as `add()` but returns the added element instead\n  , put: function(element, i) {\n      this.add(element, i)\n      return element\n    }\n    // Checks if the given element is a child\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // Gets index of given element\n  , index: function(element) {\n      return this.children().indexOf(element)\n    }\n    // Get a element at the given index\n  , get: function(i) {\n      return this.children()[i]\n    }\n    // Get first child, skipping the defs node\n  , first: function() {\n      return this.children()[0]\n    }\n    // Get the last child\n  , last: function() {\n      return this.children()[this.children().length - 1]\n    }\n    // Iterates over all children and invokes a given block\n  , each: function(block, deep) {\n      var i, il\n        , children = this.children()\n\n      for (i = 0, il = children.length; i < il; i++) {\n        if (children[i] instanceof SVG.Element)\n          block.apply(children[i], [i, children])\n\n        if (deep && (children[i] instanceof SVG.Container))\n          children[i].each(block, deep)\n      }\n\n      return this\n    }\n    // Remove a given child\n  , removeElement: function(element) {\n      this.node.removeChild(element.node)\n\n      return this\n    }\n    // Remove all elements in this container\n  , clear: function() {\n      // remove children\n      while(this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // remove defs reference\n      delete this._defs\n\n      return this\n    }\n  , // Get defs\n    defs: function() {\n      return this.doc().defs()\n    }\n  }\n\n})\n\nSVG.extend(SVG.Parent, {\n\n  ungroup: function(parent, depth) {\n    if(depth === 0 || this instanceof SVG.Defs) return this\n\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\n    depth = depth || Infinity\n\n    this.each(function(){\n      if(this instanceof SVG.Defs) return this\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\n      return this.toParent(parent)\n    })\n\n    this.node.firstChild || this.remove()\n\n    return this\n  },\n\n  flatten: function(parent, depth) {\n    return this.ungroup(parent, depth)\n  }\n\n})\nSVG.Container = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Parent\n\n  // Add class methods\n, extend: {\n    // Get the viewBox and calculate the zoom value\n    viewbox: function(v) {\n      if (arguments.length == 0)\n        // act as a getter if there are no arguments\n        return new SVG.ViewBox(this)\n\n      // otherwise act as a setter\n      v = arguments.length == 1 ?\n        [v.x, v.y, v.width, v.height] :\n        [].slice.call(arguments)\n\n      return this.attr('viewBox', v)\n    }\n  }\n\n})\n// Add events to elements\n;[  'click'\n  , 'dblclick'\n  , 'mousedown'\n  , 'mouseup'\n  , 'mouseover'\n  , 'mouseout'\n  , 'mousemove'\n  // , 'mouseenter' -> not supported by IE\n  // , 'mouseleave' -> not supported by IE\n  , 'touchstart'\n  , 'touchmove'\n  , 'touchleave'\n  , 'touchend'\n  , 'touchcancel' ].forEach(function(event) {\n\n  // add event to SVG.Element\n  SVG.Element.prototype[event] = function(f) {\n    var self = this\n\n    // bind event to element rather than element node\n    this.node['on' + event] = typeof f == 'function' ?\n      function() { return f.apply(self, arguments) } : null\n\n    return this\n  }\n\n})\n\n// Initialize listeners stack\nSVG.listeners = []\nSVG.handlerMap = []\n\n// Add event binder in the SVG namespace\nSVG.on = function(node, event, listener, binding) {\n  // create listener, get object-index\n  var l     = listener.bind(binding || node.instance || node)\n    , index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1\n    , ev    = event.split('.')[0]\n    , ns    = event.split('.')[1] || '*'\n\n\n  // ensure valid object\n  SVG.listeners[index]         = SVG.listeners[index]         || {}\n  SVG.listeners[index][ev]     = SVG.listeners[index][ev]     || {}\n  SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {}\n\n  // reference listener\n  SVG.listeners[index][ev][ns][listener] = l\n\n  // add listener\n  node.addEventListener(ev, l, false)\n}\n\n// Add event unbinder in the SVG namespace\nSVG.off = function(node, event, listener) {\n  var index = SVG.handlerMap.indexOf(node)\n    , ev    = event && event.split('.')[0]\n    , ns    = event && event.split('.')[1]\n\n  if(index == -1) return\n\n  if (listener) {\n    // remove listener reference\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\n      // remove listener\n      node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false)\n\n      delete SVG.listeners[index][ev][ns || '*'][listener]\n    }\n\n  } else if (ns && ev) {\n    // remove all listeners for a namespaced event\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\n      for (listener in SVG.listeners[index][ev][ns])\n        SVG.off(node, [ev, ns].join('.'), listener)\n\n      delete SVG.listeners[index][ev][ns]\n    }\n\n  } else if (ns){\n    // remove all listeners for a specific namespace\n    for(event in SVG.listeners[index]){\n        for(namespace in SVG.listeners[index][event]){\n            if(ns === namespace){\n                SVG.off(node, [event, ns].join('.'))\n            }\n        }\n    }\n\n  } else if (ev) {\n    // remove all listeners for the event\n    if (SVG.listeners[index][ev]) {\n      for (namespace in SVG.listeners[index][ev])\n        SVG.off(node, [ev, namespace].join('.'))\n\n      delete SVG.listeners[index][ev]\n    }\n\n  } else {\n    // remove all listeners on a given node\n    for (event in SVG.listeners[index])\n      SVG.off(node, event)\n\n    delete SVG.listeners[index]\n\n  }\n}\n\n//\nSVG.extend(SVG.Element, {\n  // Bind given event to listener\n  on: function(event, listener, binding) {\n    SVG.on(this.node, event, listener, binding)\n\n    return this\n  }\n  // Unbind event from listener\n, off: function(event, listener) {\n    SVG.off(this.node, event, listener)\n\n    return this\n  }\n  // Fire given event\n, fire: function(event, data) {\n\n    // Dispatch event\n    if(event instanceof Event){\n        this.node.dispatchEvent(event)\n    }else{\n        this.node.dispatchEvent(new CustomEvent(event, {detail:data}))\n    }\n\n    return this\n  }\n})\n\nSVG.Defs = SVG.invent({\n  // Initialize node\n  create: 'defs'\n\n  // Inherit from\n, inherit: SVG.Container\n\n})\nSVG.G = SVG.invent({\n  // Initialize node\n  create: 'g'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.transform('x') : this.transform({ x: -this.x() + x }, true)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.transform('y') : this.transform({ y: -this.y() + y }, true)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.tbox().cx : this.x(x - this.tbox().width / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.tbox().cy : this.y(y - this.tbox().height / 2)\n    }\n  , gbox: function() {\n\n      var bbox  = this.bbox()\n        , trans = this.transform()\n\n      bbox.x  += trans.x\n      bbox.x2 += trans.x\n      bbox.cx += trans.x\n\n      bbox.y  += trans.y\n      bbox.y2 += trans.y\n      bbox.cy += trans.y\n\n      return bbox\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a group element\n    group: function() {\n      return this.put(new SVG.G)\n    }\n  }\n})\n// ### This module adds backward / forward functionality to elements.\n\n//\nSVG.extend(SVG.Element, {\n  // Get all siblings, including myself\n  siblings: function() {\n    return this.parent().children()\n  }\n  // Get the curent position siblings\n, position: function() {\n    return this.parent().index(this)\n  }\n  // Get the next element (will return null if there is none)\n, next: function() {\n    return this.siblings()[this.position() + 1]\n  }\n  // Get the next element (will return null if there is none)\n, previous: function() {\n    return this.siblings()[this.position() - 1]\n  }\n  // Send given element one step forward\n, forward: function() {\n    var i = this.position() + 1\n      , p = this.parent()\n\n    // move node one step forward\n    p.removeElement(this).add(this, i)\n\n    // make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element one step backward\n, backward: function() {\n    var i = this.position()\n\n    if (i > 0)\n      this.parent().removeElement(this).add(this, i - 1)\n\n    return this\n  }\n  // Send given element all the way to the front\n, front: function() {\n    var p = this.parent()\n\n    // Move node forward\n    p.node.appendChild(this.node)\n\n    // Make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element all the way to the back\n, back: function() {\n    if (this.position() > 0)\n      this.parent().removeElement(this).add(this, 0)\n\n    return this\n  }\n  // Inserts a given element before the targeted element\n, before: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i)\n\n    return this\n  }\n  // Insters a given element after the targeted element\n, after: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i + 1)\n\n    return this\n  }\n\n})\nSVG.Mask = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('mask'))\n\n    // keep references to masked elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unmask all masked elements and remove itself\n    remove: function() {\n      // unmask all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unmask()\n      delete this.targets\n\n      // remove mask from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create masking element\n    mask: function() {\n      return this.defs().put(new SVG.Mask)\n    }\n  }\n})\n\n\nSVG.extend(SVG.Element, {\n  // Distribute mask to svg element\n  maskWith: function(element) {\n    // use given mask or create a new one\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\n\n    // store reverence on self in mask\n    this.masker.targets.push(this)\n\n    // apply mask\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\n  }\n  // Unmask element\n, unmask: function() {\n    delete this.masker\n    return this.attr('mask', null)\n  }\n\n})\n\nSVG.ClipPath = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('clipPath'))\n\n    // keep references to clipped elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unclip all clipped elements and remove itself\n    remove: function() {\n      // unclip all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unclip()\n      delete this.targets\n\n      // remove clipPath from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create clipping element\n    clip: function() {\n      return this.defs().put(new SVG.ClipPath)\n    }\n  }\n})\n\n//\nSVG.extend(SVG.Element, {\n  // Distribute clipPath to svg element\n  clipWith: function(element) {\n    // use given clip or create a new one\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\n\n    // store reverence on self in mask\n    this.clipper.targets.push(this)\n\n    // apply mask\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\n  }\n  // Unclip element\n, unclip: function() {\n    delete this.clipper\n    return this.attr('clip-path', null)\n  }\n\n})\nSVG.Gradient = SVG.invent({\n  // Initialize node\n  create: function(type) {\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\n\n    // store type\n    this.type = type\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add a color stop\n    at: function(offset, color, opacity) {\n      return this.put(new SVG.Stop).update(offset, color, opacity)\n    }\n    // Update gradient\n  , update: function(block) {\n      // remove all stops\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'gradientTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create gradient element in defs\n    gradient: function(type, block) {\n      return this.defs().gradient(type, block)\n    }\n  }\n})\n\n// Add animatable methods to both gradient and fx module\nSVG.extend(SVG.Gradient, SVG.FX, {\n  // From position\n  from: function(x, y) {\n    return (this.target || this).type == 'radial' ?\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\n  }\n  // To position\n, to: function(x, y) {\n    return (this.target || this).type == 'radial' ?\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\n  }\n})\n\n// Base gradient generation\nSVG.extend(SVG.Defs, {\n  // define gradient\n  gradient: function(type, block) {\n    return this.put(new SVG.Gradient(type)).update(block)\n  }\n\n})\n\nSVG.Stop = SVG.invent({\n  // Initialize node\n  create: 'stop'\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // add color stops\n    update: function(o) {\n      if (typeof o == 'number' || o instanceof SVG.Number) {\n        o = {\n          offset:  arguments[0]\n        , color:   arguments[1]\n        , opacity: arguments[2]\n        }\n      }\n\n      // set attributes\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n      if (o.color   != null) this.attr('stop-color', o.color)\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\n\n      return this\n    }\n  }\n\n})\n\nSVG.Pattern = SVG.invent({\n  // Initialize node\n  create: 'pattern'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Return the fill id\n    fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Update pattern by rebuilding\n  , update: function(block) {\n      // remove content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'patternTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create pattern element in defs\n    pattern: function(width, height, block) {\n      return this.defs().pattern(width, height, block)\n    }\n  }\n})\n\nSVG.extend(SVG.Defs, {\n  // Define gradient\n  pattern: function(width, height, block) {\n    return this.put(new SVG.Pattern).update(block).attr({\n      x:            0\n    , y:            0\n    , width:        width\n    , height:       height\n    , patternUnits: 'userSpaceOnUse'\n    })\n  }\n\n})\nSVG.Doc = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    if (element) {\n      // ensure the presence of a dom element\n      element = typeof element == 'string' ?\n        document.getElementById(element) :\n        element\n\n      // If the target is an svg element, use that element as the main wrapper.\n      // This allows svg.js to work with svg documents as well.\n      if (element.nodeName == 'svg') {\n        this.constructor.call(this, element)\n      } else {\n        this.constructor.call(this, SVG.create('svg'))\n        element.appendChild(this.node)\n      }\n\n      // set svg element attributes and ensure defs node\n      this.namespace().size('100%', '100%').defs()\n    }\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add namespaces\n    namespace: function() {\n      return this\n        .attr({ xmlns: SVG.ns, version: '1.1' })\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\n    }\n    // Creates and returns defs element\n  , defs: function() {\n      if (!this._defs) {\n        var defs\n\n        // Find or create a defs element in this instance\n        if (defs = this.node.getElementsByTagName('defs')[0])\n          this._defs = SVG.adopt(defs)\n        else\n          this._defs = new SVG.Defs\n\n        // Make sure the defs node is at the end of the stack\n        this.node.appendChild(this._defs.node)\n      }\n\n      return this._defs\n    }\n    // custom parent method\n  , parent: function() {\n      return this.node.parentNode.nodeName == '#document' ? null : this.node.parentNode\n    }\n    // Fix for possible sub-pixel offset. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n  , spof: function(spof) {\n      var pos = this.node.getScreenCTM()\n\n      if (pos)\n        this\n          .style('left', (-pos.e % 1) + 'px')\n          .style('top',  (-pos.f % 1) + 'px')\n\n      return this\n    }\n\n      // Removes the doc from the DOM\n  , remove: function() {\n      if(this.parent()) {\n        this.parent().removeChild(this.node);\n      }\n\n      return this;\n    }\n  }\n\n})\n\nSVG.Shape = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n})\n\nSVG.Bare = SVG.invent({\n  // Initialize\n  create: function(element, inherit) {\n    // construct element\n    this.constructor.call(this, SVG.create(element))\n\n    // inherit custom methods\n    if (inherit)\n      for (var method in inherit.prototype)\n        if (typeof inherit.prototype[method] === 'function')\n          this[method] = inherit.prototype[method]\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add methods\n, extend: {\n    // Insert some plain text\n    words: function(text) {\n      // remove contents\n      while (this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // create text node\n      this.node.appendChild(document.createTextNode(text))\n\n      return this\n    }\n  }\n})\n\n\nSVG.extend(SVG.Parent, {\n  // Create an element that is not described by SVG.js\n  element: function(element, inherit) {\n    return this.put(new SVG.Bare(element, inherit))\n  }\n  // Add symbol element\n, symbol: function() {\n    return this.defs().element('symbol', SVG.Container)\n  }\n\n})\nSVG.Use = SVG.invent({\n  // Initialize node\n  create: 'use'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Use element as a reference\n    element: function(element, file) {\n      // Set lined element\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a use element\n    use: function(element, file) {\n      return this.put(new SVG.Use).element(element, file)\n    }\n  }\n})\nSVG.Rect = SVG.invent({\n  // Initialize node\n  create: 'rect'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a rect element\n    rect: function(width, height) {\n      return this.put(new SVG.Rect()).size(width, height)\n    }\n  }\n})\nSVG.Circle = SVG.invent({\n  // Initialize node\n  create: 'circle'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create circle element, based on ellipse\n    circle: function(size) {\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Circle, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('r', rx)\n  }\n  // Alias radius x value\n, ry: function(ry) {\n    return this.rx(ry)\n  }\n})\n\nSVG.Ellipse = SVG.invent({\n  // Initialize node\n  create: 'ellipse'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create an ellipse\n    ellipse: function(width, height) {\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('rx', rx)\n  }\n  // Radius y value\n, ry: function(ry) {\n    return this.attr('ry', ry)\n  }\n})\n\n// Add common method\nSVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\n    }\n    // Custom size function\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this\n        .rx(new SVG.Number(p.width).divide(2))\n        .ry(new SVG.Number(p.height).divide(2))\n    }\n})\nSVG.Line = SVG.invent({\n  // Initialize node\n  create: 'line'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Get array\n    array: function() {\n      return new SVG.PointArray([\n        [ this.attr('x1'), this.attr('y1') ]\n      , [ this.attr('x2'), this.attr('y2') ]\n      ])\n    }\n    // Overwrite native plot() method\n  , plot: function(x1, y1, x2, y2) {\n      if (arguments.length == 4)\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\n      else\n        x1 = new SVG.PointArray(x1).toLine()\n\n      return this.attr(x1)\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr(this.array().move(x, y).toLine())\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this.attr(this.array().size(p.width, p.height).toLine())\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a line element\n    line: function(x1, y1, x2, y2) {\n      return this.put(new SVG.Line).plot(x1, y1, x2, y2)\n    }\n  }\n})\n\nSVG.Polyline = SVG.invent({\n  // Initialize node\n  create: 'polyline'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polyline element\n    polyline: function(p) {\n      return this.put(new SVG.Polyline).plot(p)\n    }\n  }\n})\n\nSVG.Polygon = SVG.invent({\n  // Initialize node\n  create: 'polygon'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polygon element\n    polygon: function(p) {\n      return this.put(new SVG.Polygon).plot(p)\n    }\n  }\n})\n\n// Add polygon-specific functions\nSVG.extend(SVG.Polyline, SVG.Polygon, {\n  // Get array\n  array: function() {\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\n  }\n  // Plot new path\n, plot: function(p) {\n    return this.attr('points', (this._array = new SVG.PointArray(p)))\n  }\n  // Move by left top corner\n, move: function(x, y) {\n    return this.attr('points', this.array().move(x, y))\n  }\n  // Set element size to given width and height\n, size: function(width, height) {\n    var p = proportionalSize(this.bbox(), width, height)\n\n    return this.attr('points', this.array().size(p.width, p.height))\n  }\n\n})\n// unify all point to point elements\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n  // Define morphable array\n  morphArray:  SVG.PointArray\n  // Move by left top corner over x-axis\n, x: function(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n  }\n  // Move by left top corner over y-axis\n, y: function(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n  }\n  // Set width of element\n, width: function(width) {\n    var b = this.bbox()\n\n    return width == null ? b.width : this.size(width, b.height)\n  }\n  // Set height of element\n, height: function(height) {\n    var b = this.bbox()\n\n    return height == null ? b.height : this.size(b.width, height)\n  }\n})\nSVG.Path = SVG.invent({\n  // Initialize node\n  create: 'path'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Define morphable array\n    morphArray:  SVG.PathArray\n    // Get array\n  , array: function() {\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\n    }\n    // Plot new poly points\n  , plot: function(p) {\n      return this.attr('d', (this._array = new SVG.PathArray(p)))\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr('d', this.array().move(x, y))\n    }\n    // Move by left top corner over x-axis\n  , x: function(x) {\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n    }\n    // Move by left top corner over y-axis\n  , y: function(y) {\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this.attr('d', this.array().size(p.width, p.height))\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create a wrapped path element\n    path: function(d) {\n      return this.put(new SVG.Path).plot(d)\n    }\n  }\n})\nSVG.Image = SVG.invent({\n  // Initialize node\n  create: 'image'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // (re)load image\n    load: function(url) {\n      if (!url) return this\n\n      var self = this\n        , img  = document.createElement('img')\n\n      // preload image\n      img.onload = function() {\n        var p = self.parent(SVG.Pattern)\n\n        // ensure image size\n        if (self.width() == 0 && self.height() == 0)\n          self.size(img.width, img.height)\n\n        // ensure pattern size if not set\n        if (p && p.width() == 0 && p.height() == 0)\n          p.size(self.width(), self.height())\n\n        // callback\n        if (typeof self._loaded === 'function')\n          self._loaded.call(self, {\n            width:  img.width\n          , height: img.height\n          , ratio:  img.width / img.height\n          , url:    url\n          })\n      }\n\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\n    }\n    // Add loaded callback\n  , loaded: function(loaded) {\n      this._loaded = loaded\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // create image element, load image and set its size\n    image: function(source, width, height) {\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\n    }\n  }\n\n})\nSVG.Text = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('text'))\n\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\n    this._rebuild = true                      // enable automatic updating of dy values\n    this._build   = false                     // disable build mode for adding multiple lines\n\n    // set default font\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\n  }\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    clone: function(){\n      // clone element and assign new id\n      var clone = assignNewId(this.node.cloneNode(true))\n\n      // insert the clone after myself\n      this.after(clone)\n\n      return clone\n    }\n    // Move over x-axis\n  , x: function(x) {\n      // act as getter\n      if (x == null)\n        return this.attr('x')\n\n      // move lines as well if no textPath is present\n      if (!this.textPath)\n        this.lines().each(function() { if (this.dom.newLined) this.x(x) })\n\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      var oy = this.attr('y')\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\n\n      // act as getter\n      if (y == null)\n        return typeof oy === 'number' ? oy - o : oy\n\n      return this.attr('y', typeof y === 'number' ? y + o : y)\n    }\n    // Move center over x-axis\n  , cx: function(x) {\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\n    }\n    // Move center over y-axis\n  , cy: function(y) {\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\n    }\n    // Set the text content\n  , text: function(text) {\n      // act as getter\n      if (typeof text === 'undefined'){\n        var text = ''\n        var children = this.node.childNodes\n        for(var i = 0, len = children.length; i < len; ++i){\n\n          // add newline if its not the first child and newLined is set to true\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\n            text += '\\n'\n          }\n\n          // add content of this node\n          text += children[i].textContent\n        }\n\n        return text\n      }\n\n      // remove existing content\n      this.clear().build(true)\n\n      if (typeof text === 'function') {\n        // call block\n        text.call(this, this)\n\n      } else {\n        // store text and make sure text is not blank\n        text = text.split('\\n')\n\n        // build new lines\n        for (var i = 0, il = text.length; i < il; i++)\n          this.tspan(text[i]).newLine()\n      }\n\n      // disable build mode and rebuild lines\n      return this.build(false).rebuild()\n    }\n    // Set font size\n  , size: function(size) {\n      return this.attr('font-size', size).rebuild()\n    }\n    // Set / get leading\n  , leading: function(value) {\n      // act as getter\n      if (value == null)\n        return this.dom.leading\n\n      // act as setter\n      this.dom.leading = new SVG.Number(value)\n\n      return this.rebuild()\n    }\n    // Get all the first level lines\n  , lines: function() {\n      // filter tspans and map them to SVG.js instances\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(el){\n        return SVG.adopt(el)\n      })\n\n      // return an instance of SVG.set\n      return new SVG.Set(lines)\n    }\n    // Rebuild appearance type\n  , rebuild: function(rebuild) {\n      // store new rebuild flag if given\n      if (typeof rebuild == 'boolean')\n        this._rebuild = rebuild\n\n      // define position of all lines\n      if (this._rebuild) {\n        var self = this\n\n        this.lines().each(function() {\n          if (this.dom.newLined) {\n            if (!this.textPath)\n              this.attr('x', self.attr('x'))\n\n            this.attr('dy', self.dom.leading * new SVG.Number(self.attr('font-size')))\n          }\n        })\n\n        this.fire('rebuild')\n      }\n\n      return this\n    }\n    // Enable / disable build mode\n  , build: function(build) {\n      this._build = !!build\n      return this\n    }\n    // overwrite method from parent to set data properly\n  , setData: function(o){\n      this.dom = o\n      this.dom.leading = o.leading ? new SVG.Number(o.leading.value, o.leading.unit) : new SVG.Number(1.3)\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create text element\n    text: function(text) {\n      return this.put(new SVG.Text).text(text)\n    }\n    // Create plain text element\n  , plain: function(text) {\n      return this.put(new SVG.Text).plain(text)\n    }\n  }\n\n})\n\nSVG.Tspan = SVG.invent({\n  // Initialize node\n  create: 'tspan'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Set text content\n    text: function(text) {\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\n\n      return this\n    }\n    // Shortcut dx\n  , dx: function(dx) {\n      return this.attr('dx', dx)\n    }\n    // Shortcut dy\n  , dy: function(dy) {\n      return this.attr('dy', dy)\n    }\n    // Create new line\n  , newLine: function() {\n      // fetch text parent\n      var t = this.parent(SVG.Text)\n\n      // mark new line\n      this.dom.newLined = true\n\n      // apply new hy¡n\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\n    }\n  }\n\n})\n\nSVG.extend(SVG.Text, SVG.Tspan, {\n  // Create plain text node\n  plain: function(text) {\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // create text node\n    this.node.appendChild(document.createTextNode(text))\n\n    return this\n  }\n  // Create a tspan\n, tspan: function(text) {\n    var node  = (this.textPath && this.textPath() || this).node\n      , tspan = new SVG.Tspan\n\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // add new tspan\n    node.appendChild(tspan.node)\n\n    return tspan.text(text)\n  }\n  // Clear all lines\n, clear: function() {\n    var node = (this.textPath && this.textPath() || this).node\n\n    // remove existing child nodes\n    while (node.hasChildNodes())\n      node.removeChild(node.lastChild)\n\n    return this\n  }\n  // Get length of text element\n, length: function() {\n    return this.node.getComputedTextLength()\n  }\n})\n\nSVG.TextPath = SVG.invent({\n  // Initialize node\n  create: 'textPath'\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Define parent class\n, parent: SVG.Text\n\n  // Add parent method\n, construct: {\n    // Create path for text to run on\n    path: function(d) {\n      // create textPath element\n      var path  = new SVG.TextPath\n        , track = this.doc().defs().path(d)\n\n      // move lines to textpath\n      while (this.node.hasChildNodes())\n        path.node.appendChild(this.node.firstChild)\n\n      // add textPath element as child node\n      this.node.appendChild(path.node)\n\n      // link textPath to path and add content\n      path.attr('href', '#' + track, SVG.xlink)\n\n      return this\n    }\n    // Plot path if any\n  , plot: function(d) {\n      var track = this.track()\n\n      if (track)\n        track.plot(d)\n\n      return this\n    }\n    // Get the path track element\n  , track: function() {\n      var path = this.textPath()\n\n      if (path)\n        return path.reference('href')\n    }\n    // Get the textPath child\n  , textPath: function() {\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\n        return SVG.adopt(this.node.firstChild)\n    }\n  }\n})\nSVG.Nested = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('svg'))\n\n    this.style('overflow', 'visible')\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add parent method\n, construct: {\n    // Create nested svg document\n    nested: function() {\n      return this.put(new SVG.Nested)\n    }\n  }\n})\nSVG.A = SVG.invent({\n  // Initialize node\n  create: 'a'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Link url\n    to: function(url) {\n      return this.attr('href', url, SVG.xlink)\n    }\n    // Link show attribute\n  , show: function(target) {\n      return this.attr('show', target, SVG.xlink)\n    }\n    // Link target attribute\n  , target: function(target) {\n      return this.attr('target', target)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a hyperlink element\n    link: function(url) {\n      return this.put(new SVG.A).to(url)\n    }\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Create a hyperlink element\n  linkTo: function(url) {\n    var link = new SVG.A\n\n    if (typeof url == 'function')\n      url.call(link, link)\n    else\n      link.to(url)\n\n    return this.parent().put(link).put(this)\n  }\n\n})\nSVG.Marker = SVG.invent({\n  // Initialize node\n  create: 'marker'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Set width of element\n    width: function(width) {\n      return this.attr('markerWidth', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('markerHeight', height)\n    }\n    // Set marker refX and refY\n  , ref: function(x, y) {\n      return this.attr('refX', x).attr('refY', y)\n    }\n    // Update marker\n  , update: function(block) {\n      // remove all content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , toString: function() {\n      return 'url(#' + this.id() + ')'\n    }\n  }\n\n  // Add parent method\n, construct: {\n    marker: function(width, height, block) {\n      // Create marker element in defs\n      return this.defs().marker(width, height, block)\n    }\n  }\n\n})\n\nSVG.extend(SVG.Defs, {\n  // Create marker\n  marker: function(width, height, block) {\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n    return this.put(new SVG.Marker)\n      .size(width, height)\n      .ref(width / 2, height / 2)\n      .viewbox(0, 0, width, height)\n      .attr('orient', 'auto')\n      .update(block)\n  }\n\n})\n\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n  // Create and attach markers\n  marker: function(marker, width, height, block) {\n    var attr = ['marker']\n\n    // Build attribute name\n    if (marker != 'all') attr.push(marker)\n    attr = attr.join('-')\n\n    // Set marker attribute\n    marker = arguments[1] instanceof SVG.Marker ?\n      arguments[1] :\n      this.doc().marker(width, height, block)\n\n    return this.attr(attr, marker)\n  }\n\n})\n// Define list of available attributes for stroke and fill\nvar sugar = {\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\n, fill:   ['color', 'opacity', 'rule']\n, prefix: function(t, a) {\n    return a == 'color' ? t : t + '-' + a\n  }\n}\n\n// Add sugar for fill and stroke\n;['fill', 'stroke'].forEach(function(m) {\n  var i, extension = {}\n\n  extension[m] = function(o) {\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\n      this.attr(m, o)\n\n    else\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--)\n        if (o[sugar[m][i]] != null)\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\n\n    return this\n  }\n\n  SVG.extend(SVG.Element, SVG.FX, extension)\n\n})\n\nSVG.extend(SVG.Element, SVG.FX, {\n  // Map rotation to transform\n  rotate: function(d, cx, cy) {\n    return this.transform({ rotation: d, cx: cx, cy: cy })\n  }\n  // Map skew to transform\n, skew: function(x, y, cx, cy) {\n    return this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\n  }\n  // Map scale to transform\n, scale: function(x, y, cx, cy) {\n    return arguments.length == 1  || arguments.length == 3 ?\n      this.transform({ scale: x, cx: y, cy: cx }) :\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\n  }\n  // Map translate to transform\n, translate: function(x, y) {\n    return this.transform({ x: x, y: y })\n  }\n  // Map flip to transform\n, flip: function(a, o) {\n    return this.transform({ flip: a, offset: o })\n  }\n  // Map matrix to transform\n, matrix: function(m) {\n    return this.attr('transform', new SVG.Matrix(m))\n  }\n  // Opacity\n, opacity: function(value) {\n    return this.attr('opacity', value)\n  }\n  // Relative move over x axis\n, dx: function(x) {\n    return this.x((this.target || this).x() + x)\n  }\n  // Relative move over y axis\n, dy: function(y) {\n    return this.y((this.target || this).y() + y)\n  }\n  // Relative move over x and y axes\n, dmove: function(x, y) {\n    return this.dx(x).dy(y)\n  }\n})\n\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n  // Add x and y radius\n  radius: function(x, y) {\n    var type = (this.target || this).type;\n    return type == 'radial' || type == 'circle' ?\n      this.attr({ 'r': new SVG.Number(x) }) :\n      this.rx(x).ry(y == null ? x : y)\n  }\n})\n\nSVG.extend(SVG.Path, {\n  // Get path length\n  length: function() {\n    return this.node.getTotalLength()\n  }\n  // Get point at length\n, pointAt: function(length) {\n    return this.node.getPointAtLength(length)\n  }\n})\n\nSVG.extend(SVG.Parent, SVG.Text, SVG.FX, {\n  // Set font\n  font: function(o) {\n    for (var k in o)\n      k == 'leading' ?\n        this.leading(o[k]) :\n      k == 'anchor' ?\n        this.attr('text-anchor', o[k]) :\n      k == 'size' || k == 'family' || k == 'weight' || k == 'stretch' || k == 'variant' || k == 'style' ?\n        this.attr('font-'+ k, o[k]) :\n        this.attr(k, o[k])\n\n    return this\n  }\n})\n\n\nSVG.Set = SVG.invent({\n  // Initialize\n  create: function(members) {\n    // Set initial state\n    Array.isArray(members) ? this.members = members : this.clear()\n  }\n\n  // Add class methods\n, extend: {\n    // Add element to set\n    add: function() {\n      var i, il, elements = [].slice.call(arguments)\n\n      for (i = 0, il = elements.length; i < il; i++)\n        this.members.push(elements[i])\n\n      return this\n    }\n    // Remove element from set\n  , remove: function(element) {\n      var i = this.index(element)\n\n      // remove given child\n      if (i > -1)\n        this.members.splice(i, 1)\n\n      return this\n    }\n    // Iterate over all members\n  , each: function(block) {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        block.apply(this.members[i], [i, this.members])\n\n      return this\n    }\n    // Restore to defaults\n  , clear: function() {\n      // initialize store\n      this.members = []\n\n      return this\n    }\n    // Get the length of a set\n  , length: function() {\n      return this.members.length\n    }\n    // Checks if a given element is present in set\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // retuns index of given element in set\n  , index: function(element) {\n      return this.members.indexOf(element)\n    }\n    // Get member at given index\n  , get: function(i) {\n      return this.members[i]\n    }\n    // Get first member\n  , first: function() {\n      return this.get(0)\n    }\n    // Get last member\n  , last: function() {\n      return this.get(this.members.length - 1)\n    }\n    // Default value\n  , valueOf: function() {\n      return this.members\n    }\n    // Get the bounding box of all members included or empty box if set has no items\n  , bbox: function(){\n      var box = new SVG.BBox()\n\n      // return an empty box of there are no members\n      if (this.members.length == 0)\n        return box\n\n      // get the first rbox and update the target bbox\n      var rbox = this.members[0].rbox()\n      box.x      = rbox.x\n      box.y      = rbox.y\n      box.width  = rbox.width\n      box.height = rbox.height\n\n      this.each(function() {\n        // user rbox for correct position and visual representation\n        box = box.merge(this.rbox())\n      })\n\n      return box\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a new set\n    set: function(members) {\n      return new SVG.Set(members)\n    }\n  }\n})\n\nSVG.FX.Set = SVG.invent({\n  // Initialize node\n  create: function(set) {\n    // store reference to set\n    this.set = set\n  }\n\n})\n\n// Alias methods\nSVG.Set.inherit = function() {\n  var m\n    , methods = []\n\n  // gather shape methods\n  for(var m in SVG.Shape.prototype)\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply shape aliasses\n  methods.forEach(function(method) {\n    SVG.Set.prototype[method] = function() {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        if (this.members[i] && typeof this.members[i][method] == 'function')\n          this.members[i][method].apply(this.members[i], arguments)\n\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\n    }\n  })\n\n  // clear methods for the next round\n  methods = []\n\n  // gather fx methods\n  for(var m in SVG.FX.prototype)\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply fx aliasses\n  methods.forEach(function(method) {\n    SVG.FX.Set.prototype[method] = function() {\n      for (var i = 0, il = this.set.members.length; i < il; i++)\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\n\n      return this\n    }\n  })\n}\n\n\n\n\nSVG.extend(SVG.Element, {\n  // Store data values on svg nodes\n  data: function(a, v, r) {\n    if (typeof a == 'object') {\n      for (v in a)\n        this.data(v, a[v])\n\n    } else if (arguments.length < 2) {\n      try {\n        return JSON.parse(this.attr('data-' + a))\n      } catch(e) {\n        return this.attr('data-' + a)\n      }\n\n    } else {\n      this.attr(\n        'data-' + a\n      , v === null ?\n          null :\n        r === true || typeof v === 'string' || typeof v === 'number' ?\n          v :\n          JSON.stringify(v)\n      )\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, {\n  // Remember arbitrary data\n  remember: function(k, v) {\n    // remember every item in an object individually\n    if (typeof arguments[0] == 'object')\n      for (var v in k)\n        this.remember(v, k[v])\n\n    // retrieve memory\n    else if (arguments.length == 1)\n      return this.memory()[k]\n\n    // store memory\n    else\n      this.memory()[k] = v\n\n    return this\n  }\n\n  // Erase a given memory\n, forget: function() {\n    if (arguments.length == 0)\n      this._memory = {}\n    else\n      for (var i = arguments.length - 1; i >= 0; i--)\n        delete this.memory()[arguments[i]]\n\n    return this\n  }\n\n  // Initialize or return local memory object\n, memory: function() {\n    return this._memory || (this._memory = {})\n  }\n\n})\n// Method for getting an element by id\nSVG.get = function(id) {\n  var node = document.getElementById(idFromReference(id) || id)\n  return SVG.adopt(node)\n}\n\n// Select elements by query string\nSVG.select = function(query, parent) {\n  return new SVG.Set(\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\n      return SVG.adopt(node)\n    })\n  )\n}\n\nSVG.extend(SVG.Parent, {\n  // Scoped select method\n  select: function(query) {\n    return SVG.select(query, this.node)\n  }\n\n})\n// tests if a given selector matches an element\nfunction matches(el, selector) {\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n}\n\n// Convert dash-separated-string to camelCase\nfunction camelCase(s) {\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\n    return g.toUpperCase()\n  })\n}\n\n// Capitalize first letter of a string\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Ensure to six-based hex\nfunction fullHex(hex) {\n  return hex.length == 4 ?\n    [ '#',\n      hex.substring(1, 2), hex.substring(1, 2)\n    , hex.substring(2, 3), hex.substring(2, 3)\n    , hex.substring(3, 4), hex.substring(3, 4)\n    ].join('') : hex\n}\n\n// Component to hex value\nfunction compToHex(comp) {\n  var hex = comp.toString(16)\n  return hex.length == 1 ? '0' + hex : hex\n}\n\n// Calculate proportional width and height values when necessary\nfunction proportionalSize(box, width, height) {\n  if (height == null)\n    height = box.height / box.width * width\n  else if (width == null)\n    width = box.width / box.height * height\n\n  return {\n    width:  width\n  , height: height\n  }\n}\n\n// Delta transform point\nfunction deltaTransformPoint(matrix, x, y) {\n  return {\n    x: x * matrix.a + y * matrix.c + 0\n  , y: x * matrix.b + y * matrix.d + 0\n  }\n}\n\n// Map matrix array to object\nfunction arrayToMatrix(a) {\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\n}\n\n// Parse matrix if required\nfunction parseMatrix(matrix) {\n  if (!(matrix instanceof SVG.Matrix))\n    matrix = new SVG.Matrix(matrix)\n\n  return matrix\n}\n\n// Add centre point to transform object\nfunction ensureCentre(o, target) {\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\n}\n\n// Convert string to matrix\nfunction stringToMatrix(source) {\n  // remove matrix wrapper and split to individual numbers\n  source = source\n    .replace(SVG.regex.whitespace, '')\n    .replace(SVG.regex.matrix, '')\n    .split(SVG.regex.matrixElements)\n\n  // convert string values to floats and convert to a matrix-formatted object\n  return arrayToMatrix(\n    SVG.utils.map(source, function(n) {\n      return parseFloat(n)\n    })\n  )\n}\n\n// Calculate position according to from and to\nfunction at(o, pos) {\n  // number recalculation (don't bother converting to SVG.Number for performance reasons)\n  return typeof o.from == 'number' ?\n    o.from + (o.to - o.from) * pos :\n\n  // instance recalculation\n  o instanceof SVG.Color || o instanceof SVG.Number || o instanceof SVG.Matrix ? o.at(pos) :\n\n  // for all other values wait until pos has reached 1 to return the final value\n  pos < 1 ? o.from : o.to\n}\n\n// PathArray Helpers\nfunction arrayToString(a) {\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\n// Deep new id assignment\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\n    if (node.childNodes[i] instanceof SVGElement)\n      assignNewId(node.childNodes[i])\n\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\n}\n\n// Add more bounding box properties\nfunction fullBox(b) {\n  if (b.x == null) {\n    b.x      = 0\n    b.y      = 0\n    b.width  = 0\n    b.height = 0\n  }\n\n  b.w  = b.width\n  b.h  = b.height\n  b.x2 = b.x + b.width\n  b.y2 = b.y + b.height\n  b.cx = b.x + b.width / 2\n  b.cy = b.y + b.height / 2\n\n  return b\n}\n\n// Get id from reference string\nfunction idFromReference(url) {\n  var m = url.toString().match(SVG.regex.reference)\n\n  if (m) return m[1]\n}\n\n// Create matrix array for looping\nvar abcdef = 'abcdef'.split('')\n// Add CustomEvent to IE9 and IE10\nif (typeof CustomEvent !== 'function') {\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n  var CustomEvent = function(event, options) {\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\n    var e = document.createEvent('CustomEvent')\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\n    return e\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n}\n\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n(function(w) {\n  var lastTime = 0\n  var vendors = ['moz', 'webkit']\n\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\n  }\n\n  w.requestAnimationFrame = w.requestAnimationFrame ||\n    function(callback) {\n      var currTime = new Date().getTime()\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\n\n      var id = w.setTimeout(function() {\n        callback(currTime + timeToCall)\n      }, timeToCall)\n\n      lastTime = currTime + timeToCall\n      return id\n    }\n\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n\n}(window))\n\nreturn SVG\n\n}));"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
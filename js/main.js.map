{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js6/blob_to_buffer.js","js6/conn.js","js6/consts.js","js6/game.js","js6/main.js","js6/map.js","js6/test.js","js6/view.js","libs/svg.js/svg.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/@protobufjs/aspromise/index.js","node_modules/@protobufjs/base64/index.js","node_modules/@protobufjs/codegen/index.js","node_modules/@protobufjs/eventemitter/index.js","node_modules/@protobufjs/fetch/index.js","node_modules/@protobufjs/float/index.js","node_modules/@protobufjs/inquire/index.js","node_modules/@protobufjs/path/index.js","node_modules/@protobufjs/pool/index.js","node_modules/@protobufjs/utf8/index.js","node_modules/browserify/node_modules/events/events.js","node_modules/protobufjs/index.js","node_modules/protobufjs/src/common.js","node_modules/protobufjs/src/converter.js","node_modules/protobufjs/src/decoder.js","node_modules/protobufjs/src/encoder.js","node_modules/protobufjs/src/enum.js","node_modules/protobufjs/src/field.js","node_modules/protobufjs/src/index-light.js","node_modules/protobufjs/src/index-minimal.js","node_modules/protobufjs/src/index.js","node_modules/protobufjs/src/mapfield.js","node_modules/protobufjs/src/message.js","node_modules/protobufjs/src/method.js","node_modules/protobufjs/src/namespace.js","node_modules/protobufjs/src/object.js","node_modules/protobufjs/src/oneof.js","node_modules/protobufjs/src/parse.js","node_modules/protobufjs/src/reader.js","node_modules/protobufjs/src/reader_buffer.js","node_modules/protobufjs/src/root.js","node_modules/protobufjs/src/roots.js","node_modules/protobufjs/src/rpc.js","node_modules/protobufjs/src/rpc/service.js","node_modules/protobufjs/src/service.js","node_modules/protobufjs/src/tokenize.js","node_modules/protobufjs/src/type.js","node_modules/protobufjs/src/types.js","node_modules/protobufjs/src/util.js","node_modules/protobufjs/src/util/longbits.js","node_modules/protobufjs/src/util/minimal.js","node_modules/protobufjs/src/verifier.js","node_modules/protobufjs/src/wrappers.js","node_modules/protobufjs/src/writer.js","node_modules/protobufjs/src/writer_buffer.js","node_modules/regenerator-runtime/runtime.js","node_modules/seedrandom/lib/xor128.js","node_modules/underscore/underscore.js"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnnjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzgrnrnxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvjbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxtvrlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvkplxhLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACncA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjttBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjfile":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = function blobToBuffer(blob, cb) {\n  if(blob == undefined) {\n    return cb(new Uint8Array())\n  }\n  const fileReader = new FileReader();\n  fileReader.onloadend  = function(event) { \n    const uint8ArrayNew = new Uint8Array(event.target.result);\n    cb(uint8ArrayNew)\n  }\n  fileReader.readAsArrayBuffer(blob);\n}\n","\nconst {D,B,H} = require('consts');\n\nconst View = require('view');\nconst Game = require('game');\nconst map = require('map');\nconst blobToBuffer = require('blob_to_buffer')\nconst protobuf = require(\"protobufjs\");\n//TODO\nconst CommandsP = $.get(\"https://raw.githubusercontent.com/lijiaqigreat/personal_server/master/protobuf/command.proto\").then(protoFile => {\n  return protobuf.parse(protoFile).root.lookup(\"Commands\");\n});\n\nconst keyMap = {\n  ArrowRight: D.EAST,\n  ArrowDown: D.SOUTH,\n  ArrowLeft: D.WEST,\n  ArrowUp: D.NORTH\n}\n\nmodule.exports = function(id, url){\n  var param = {\n    width: 20,\n    height: 20,\n    version: 1,\n  }\n  const ws = new WebSocket(url);\n  ws.onopen = async () => {\n    const game = new Game(map(param).game);\n    window.game = game;\n    const Commands = await CommandsP;\n    var inited = 0;\n    var debugi = 0;\n    ws.onmessage = (event) => {\n      new Promise((resolve, reject) => {\n        blobToBuffer(event.data, resolve);\n      }).then(buffer => {\n        const cs = Commands.decode(buffer).commands;\n        const time1 = new Date();\n        for(var t=0;t<cs.length;t++){\n          try {\n          game.handleCommand2(cs[t]);\n          } catch(err) {console.err(err);}\n        }\n        const time2 = new Date();\n        if(inited != \"initialized\") {\n          clearTimeout(inited);\n          inited = setTimeout(() => {\n            inited = \"initialized\";\n            console.log(\"init view\");\n            const view = new View($(\"#main\")[0],game);\n            window.view = view;\n            $(\"body\").on(\"keydown\", (e) => {\n              const dir = keyMap[e.key];\n              if(dir != undefined) {\n                ws.send(new Uint8Array([dir]));\n              }\n            });\n          }, 100);\n        }\n      });\n    }\n\n  };\n  return ws;\n}\n","var D_EAST  = 0;\nvar D_SOUTH = 1;\nvar D_WEST  = 2;\nvar D_NORTH = 3;\nvar D_OTHER = 4;\nvar D_OP_MASK = 2;\n\nvar BT_EMPTY = 0;\nvar BT_SNAKE = 1;\nexports.D = {\n  EAST   : 0,\n  SOUTH  : 1,\n  WEST   : 2,\n  NORTH  : 3,\n  OTHER  : 4,\n  OTHER_T: 6,\n  OP_MASK: 2,\n};\nexports.B = {\n  EMPTY: 0,\n  SNAKE: 1,\n  FOOD : 2,\n  BLOCK: 3,\n};\nexports.H = {\n  applyDirection({x,y},d){\n    switch(d){\n      case D_NORTH: y-=1; break;\n      case D_SOUTH: y+=1; break;\n      case D_WEST: x-=1; break;\n      case D_EAST: x+=1; break;\n      default: break;\n    }\n    return {x,y};\n  },\n  cloneBox(b){\n    return [b[0],$.extend({},b[1])];\n  }\n};\n","const {D,B,H} = require('consts');\nconst {EventEmitter} = require('events');\nconst xor128 = require('seedrandom/lib/xor128');\nconst _ = require(\"underscore\");\nconst blobToBuffer = require('blob_to_buffer')\nmodule.exports = class Game extends EventEmitter{\n  constructor(json){\n    super();\n    if(json.version != 1)\n      throw \"wrong version\";\n    this.json = json;\n    const user2index = new Map();\n    const random = xor128(\"\", {state: json.seed});\n    _.each(json.snakes, (snake, index) => {\n      if(snake){\n        user2index.set(snake.name, index);\n      }\n    });\n    this.cache = {\n      user2index,\n      random,\n      //TODO\n      food: 0,\n    };\n  }\n  tick(){\n    const _this = this;\n    var json = this.json;\n    json.snakes.forEach(function(snake){\n      if(snake === undefined){\n        return;\n      }\n      if(--snake.tick !== 0){\n        return;\n      }\n      snake.tick = 1; //TODO\n      var p1 = snake.head;\n      var b1 = _this.getBox(snake.head);\n      if(b1[1].h == D.OTHER){\n        return;\n      }\n      var p2 = H.applyDirection(p1,b1[1].h);\n      var b2 = _this.getBox(p2);\n      switch(b2[0]){\n      case B.FOOD:\n        snake.remain += b2[1].q;\n        _this.setBox(p2,[ B.EMPTY, {} ])\n        //TODO\n        if(_this.cache.food>=0) {\n          _this.setBox(_this.randomFreeLocation(), [ B.FOOD, {q: 1} ]);\n        } else {\n          _this.cache.food++;\n        }\n      case B.EMPTY:\n        _this.setBox(p2,[ B.SNAKE, {\n          h:b1[1].h,\n          t:b1[1].h ^ D.OP_MASK,\n          s:snake.index\n        }])\n        snake.head = p2;\n        if(snake.remain > 0){\n          snake.remain--;\n          snake.length++;\n          return;\n        }\n        p1 = snake.tail;\n        b1 = _this.getBox(p1);\n        p2 = H.applyDirection(p1, b1[1].h);\n        b2 = _this.getBox(p2);\n        snake.tail = p2;\n        _this.setBox(p1,[ B.EMPTY, {}]);\n        break;\n      case B.BLOCK:\n      case B.SNAKE:\n        destroySnake(_this,snake);\n        const {x, y} = _this.randomFreeLocation();\n        _this.join({x, y, name: snake.name, remain: 3});\n        break;\n      }\n    })\n  }\n  randomFreeLocation() {\n    while(true) {\n      const r = randomRange(this.cache.random, this.json.width * this.json.height);\n      if(this.json.grid[r][0] == B.EMPTY) { return {x: r % this.json.width, y: (r/this.json.width)|0 } }\n    }\n  }\n  setSeed(seed) {\n    this.cache.random = xor128(seed, {state: true});\n  }\n  handleCommand2(cmd) {\n    const c = cmd[cmd.command];\n    switch(cmd.command) {\n      case \"tickCommand\":\n        if(c.randomSeed.length > 0){\n          this.setSeed(c.randomSeed);\n        }\n        this.tick();\n        break;\n      case \"idCommand\":\n        if(c.oldId == \"\" && c.newId != \"\") {\n          const {x, y} = this.randomFreeLocation();\n          this.join({x, y, name: c.newId, remain: 3});\n        } else if (c.oldId != \"\" && c.newId == \"\") {\n          var snake = this.json.snakes[this.cache.user2index.get(c.oldId)]\n          if(snake == undefined){\n            throw \"snake not exist\";\n          }\n          destroySnake(this,snake);\n        } else {\n          throw \"unknown error\";\n        }\n        break;\n      case \"writerCommand\":\n        const dir = c.command[0];\n        if(dir >= 4) {\n          throw \"unknown dir\";\n        }\n        var json = game.json;\n        var snake = json.snakes[this.cache.user2index.get(c.id)];\n        var box1 = game.getBox(snake.head);\n        if(box1[1].t == dir){\n          throw \"move oppo\";\n        }\n\n        box1[1].h = dir;\n    }\n  }\n\n  handleCommands(cmds){\n    cmds.forEach((cmd) => {\n      try{\n        handlers[cmd[0]](cmd[1],this);\n      }catch(e){\n        console.error(\"illegal command: \"+JSON.stringify(cmd));\n        console.error(e);\n      }\n    });\n  }\n  getBox({x,y}){\n    var index = y*this.json.width+x;\n    return this.json.grid[index];\n  }\n  getSnakeSize(){\n    return this.cache.user2index.size;\n  }\n  setSnake(index,snake){\n    const oldSnake = this.json.snakes[index];\n    if(this.json.snakes[index] != undefined){\n      this.cache.user2index.delete(oldSnake.name);\n    }\n    if(snake != undefined){\n      this.cache.user2index.set(snake.name, index);\n    }\n    this.json.snakes[index]=snake;\n  }\n  join(data) {\n    var {x,y} = data;\n    var box = this.getBox({x,y});\n    var json = this.json;\n\n    if(box[0] != B.EMPTY){\n      throw \"box taken\";\n    }\n    var index = findNextEmpty(json.snakes);\n\n    var snake={\n      age: 0,\n      index,\n      head: {x,y},\n      length: 1,\n      name: data.name,\n      remain: data.remain,\n      tail: {x,y},\n      tick: 1,\n      pretty: data.pretty\n    };\n    this.setSnake(index,snake);\n\n    this.setBox({x,y},[ B.SNAKE, {\n      h:D.OTHER,\n      s:snake.index,\n      t:D.OTHER_T,\n    }]);\n    //TODO\n    if(this.cache.food>=0) {\n      this.setBox(this.randomFreeLocation(), [ B.FOOD, {q: 1} ]);\n    } else {\n      this.cache.food++;\n    }\n  }\n  setBox({x,y},b2){\n    var index = y*this.json.width+x;\n    var b1 = this.json.grid[index];\n    this.json.grid[index] = b2;\n    this.emit(\"box\",{x,y},b1,b2);\n  }\n};\nvar handlers = {\n  tick(data,game){\n    game.tick();\n  },\n  join(data,game){\n    game.join(data);\n  },\n  direction(data,game){\n    var json = game.json;\n    var snake = json.snakes[data.s];\n    var box1 = game.getBox(snake.head);\n    if(box1[1].t == data.d){\n      throw \"move oppo\";\n    }\n\n    box1[1].h = data.d;\n  },\n  food(data,game){\n    var b1 = game.getBox(data);\n    if(b1[0] != B.EMPTY){\n      throw \"box taken\";\n    }\n    game.setBox(data,[ B.FOOD, {\n      q: data.q\n    }]);\n  },\n  leave(data,game){\n    var snake = game.json.snakes[data.s]\n    if(snake == undefined){\n      throw \"snake not exist\";\n    }\n    destroySnake(game,snake);\n  }\n};\nfunction findNextEmpty(list){\n  var t=0;\n  while(list[t] != undefined){\n    t++;\n  }\n  return t;\n};\nfunction destroySnake(game,snake){\n  var p1 = snake.head;\n  var b1 = game.getBox(snake.head);\n  while(b1[0] == B.SNAKE && b1[1].s == snake.index){\n    game.setBox(p1,[ B.EMPTY,{}]);\n    p1 = H.applyDirection(p1, b1[1].t);\n    b1 = game.getBox(p1);\n  }\n  game.cache.food--;\n  game.setSnake(snake.index,undefined);\n}\n\nfunction randomRange(rand, range) {\n  const max = ((4294967296 / range) | 0) * range;\n  while(true) {\n    const next = rand.int32()+2147483648;\n    if(next < max) { return next % range; }\n  }\n  \n}\n","// var math = require('./test');\n// window.pubsub = require('../vendor/pubsub.js')\n// console.log(\"2π = \" + math.sum(math.pi, math.pi));\n// var a = require('./test2');\nvar tmpp = require('test');\nconst View = require('view');\nconst Game = require('game');\nconst map = require('map');\nconst conn = require('conn');\nwindow._ = require('underscore');\nwindow.protobuf = require(\"protobufjs\");\nwindow.xor128 = require('seedrandom/lib/xor128');\n// window.blobToBuffer = require(\"blob-to-buffer\");\n\n$('#button').on('click', () => {\n  conn($('#name').value(), $('#url').value());\n});\nvar param = {\n  width: 20,\n  height: 20,\n  version: 1,\n}\n// var game = new Game(map(param).game);\n// var view = new View($(\"#main\")[0],game);\nvar {D,B,H} = require('./consts.js');\nwindow.cmds = {\n  \"j222\":[\n    \"join\",\n    {\n      \"name\": \"j22\",\n      \"remain\":2,\n      \"x\":2,\n      \"y\":2,\n    }\n  ],\n  \"j242\":[\n    \"join\",\n    {\n      \"name\": \"j24\",\n      \"remain\":2,\n      \"x\":2,\n      \"y\":4,\n    }\n  ],\n  \"d0E\":[\n    \"direction\",\n    {\n      s:0,\n      d:D.EAST,\n    }\n  ],\n  \"d0W\":[\n    \"direction\",\n    {\n      s:0,\n      d:D.WEST,\n    }\n  ],\n  \"d0S\":[\n    \"direction\",\n    {\n      s:0,\n      d:D.SOUTH,\n    }\n  ],\n  \"t0\":[\n    \"tick\",\n    {}\n  ],\n  \"f242\":[\n    \"food\",{\n      x: 2,\n      y: 4,\n      q: 2\n    }\n  ],\n  \"l0\":[\n    \"leave\",{\n      s:0\n    }\n  ],\n  \"l1\":[\n    \"leave\",{\n      s:1\n    }\n  ]\n}\n\n// window.game = game;\n// window.view = view;\nwindow.conn = conn;\n\n\n// import Game from './game';\n// import map from './map';\n// window.View = View;\n// window.Game = Game;\n","var {B} = require('consts');\n\nmodule.exports = function(param){\n  var size=param.width * param.height;\n  var grid = [];\n  for(var t=0;t<size;t++){\n    grid[t]=[B.EMPTY,{}];\n  }\n  for(var t=0;t<param.width;t++) {\n    grid[t] = [B.BLOCK, {}]\n    grid[size-1-t] = [B.BLOCK, {}]\n  }\n  for(var t=0;t<param.height;t++) {\n    grid[t*param.width] = [B.BLOCK, {}]\n    grid[size-1-t*param.width] = [B.BLOCK, {}]\n  }\n\n\n  var game = {\n    version:1,\n    config: {\n      startRemain: 5,\n    },\n    seed: {\n      x: 1,\n      y: 2,\n      z: 3,\n      w: 4,\n    },\n    width: param.width,\n    height: param.height,\n    grid: grid,\n    snakes: [],\n    tick: 0,\n  };\n  return {game};\n};\n","console.log(\"importing test.js\")\nmodule.exports.sum =  function sum(a,b){\n  return a+b;\n}\nexports.pi=3.14;\nvar SVG = require('svg.js/svg');\nconsole.log(\"!!!\");\nconsole.log(SVG);\n// var svg=SVG(\"main\");\n// var rect = svg.rect(100, 100).attr({ fill: '#f06'})\n// class App {\n//   constructor(url,id){\n//     this.svg=SVG(id);\n//     this.status=\"initializing\";\n//     this.rest={};\n//   }\n// }\n","var {B} = require('consts');\nvar SVG = require('svg.js/svg');\n//view listens game\nmodule.exports = class View{\n  constructor(el,game){\n    this.svg=SVG(el);\n    this.main = this.svg.group();\n    this.main.scale(10);\n    this.game=game;\n    this.grid = [];\n    this.init();\n    // this.symbols = [];\n    // this.symbols[B.EMPTY] = this.svg.symbol()\n    // this.symbols[B.SNAKE] = this.svg.symbol()\n    $(window).on(\"resize\", (e) => {\n      this.svg.size(window.width(),window.height());\n    })\n    game.on('box',(p,b1,b2) => {\n      this.setBox(p,b1,b2);\n    });\n  }\n  init(){\n    for(var t1 = 0;t1 < this.game.json.height;t1++){\n      this.grid[t1] = [];\n      for(var t2 = 0;t2 < this.game.json.width;t2++){\n        var group = this.main.group();\n        group.translate(t2,t1);\n        this.grid[t1*this.game.json.width+t2] = group;\n        this.setBox({x:t2, y:t1},undefined,this.game.json.grid[t1*this.game.json.width+t2]);\n      }\n    }\n  }\n  setBox(p,b1,b2){\n    var vbox = this.grid[p.y*this.game.json.width+p.x];\n    vbox.children().forEach((e) => e.remove())\n    switch(b2[0]){\n    case B.EMPTY:break;\n    case B.SNAKE:\n      var rect = vbox.rect(1,1);\n      rect.fill({color:colors[b2[1].s]});\n      break;\n    case B.FOOD:\n      var circle = vbox.circle(1);\n      circle.fill({color:\"#f00\"});\n      break;\n    case B.BLOCK:\n      var rect = vbox.rect(1,1);\n      rect.fill({color:\"#aaa\"});\n      break;\n    }\n  }\n}\n\nconst colors = [\n  \"#000\",\n  \"#00f\",\n  \"#0f0\",\n  \"#f442d9\",\n  \"#db7f00\",\n  \"#019ec1\",\n]\n","/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.2.1\n* http://www.svgjs.com\n*\n* @copyright Wout Fierens <wout@impinc.co.uk>\n* @license MIT\n*\n* BUILT: Wed Nov 18 2015 14:42:33 GMT+0100 (Mitteleuropäische Zeit)\n*/;\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    module.exports = root.document ? factory(root, root.document) : function(w){ return factory(w, w.document) };\n  } else {\n    root.SVG = factory(root, root.document);\n  }\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\n\n// The main wrapping element\nvar SVG = this.SVG = function(element) {\n  if (SVG.supported) {\n    element = new SVG.Doc(element)\n\n    if (!SVG.parser)\n      SVG.prepare(element)\n\n    return element\n  }\n}\n\n// Default namespaces\nSVG.ns    = 'http://www.w3.org/2000/svg'\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\nSVG.xlink = 'http://www.w3.org/1999/xlink'\nSVG.svgjs = 'http://svgjs.com/svgjs'\n\n// Svg support test\nSVG.supported = (function() {\n  return !! document.createElementNS &&\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\n})()\n\n// Don't bother to continue if SVG is not supported\nif (!SVG.supported) return false\n\n// Element id sequence\nSVG.did  = 1000\n\n// Get next named element id\nSVG.eid = function(name) {\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\n}\n\n// Method for element creation\nSVG.create = function(name) {\n  // create element\n  var element = document.createElementNS(this.ns, name)\n\n  // apply unique id\n  element.setAttribute('id', this.eid(name))\n\n  return element\n}\n\n// Method for extending objects\nSVG.extend = function() {\n  var modules, methods, key, i\n\n  // Get list of modules\n  modules = [].slice.call(arguments)\n\n  // Get object with extensions\n  methods = modules.pop()\n\n  for (i = modules.length - 1; i >= 0; i--)\n    if (modules[i])\n      for (key in methods)\n        modules[i].prototype[key] = methods[key]\n\n  // Make sure SVG.Set inherits any newly added methods\n  if (SVG.Set && SVG.Set.inherit)\n    SVG.Set.inherit()\n}\n\n// Invent new element\nSVG.invent = function(config) {\n  // Create element initializer\n  var initializer = typeof config.create == 'function' ?\n    config.create :\n    function() {\n      this.constructor.call(this, SVG.create(config.create))\n    }\n\n  // Inherit prototype\n  if (config.inherit)\n    initializer.prototype = new config.inherit\n\n  // Extend with methods\n  if (config.extend)\n    SVG.extend(initializer, config.extend)\n\n  // Attach construct method to parent\n  if (config.construct)\n    SVG.extend(config.parent || SVG.Container, config.construct)\n\n  return initializer\n}\n\n// Adopt existing svg elements\nSVG.adopt = function(node) {\n  // make sure a node isn't already adopted\n  if (node.instance) return node.instance\n\n  // initialize variables\n  var element\n\n  // adopt with element-specific settings\n  if (node.nodeName == 'svg')\n    element = node.parentNode instanceof SVGElement ? new SVG.Nested : new SVG.Doc\n  else if (node.nodeName == 'linearGradient')\n    element = new SVG.Gradient('linear')\n  else if (node.nodeName == 'radialGradient')\n    element = new SVG.Gradient('radial')\n  else if (SVG[capitalize(node.nodeName)])\n    element = new SVG[capitalize(node.nodeName)]\n  else\n    element = new SVG.Element(node)\n\n  // ensure references\n  element.type  = node.nodeName\n  element.node  = node\n  node.instance = element\n\n  // SVG.Class specific preparations\n  if (element instanceof SVG.Doc)\n    element.namespace().defs()\n\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\n\n  return element\n}\n\n// Initialize parsing element\nSVG.prepare = function(element) {\n  // Select document body and create invisible svg element\n  var body = document.getElementsByTagName('body')[0]\n    , draw = (body ? new SVG.Doc(body) : element.nested()).size(2, 0)\n    , path = SVG.create('path')\n\n  // Insert parsers\n  draw.node.appendChild(path)\n\n  // Create parser object\n  SVG.parser = {\n    body: body || element.parent()\n  , draw: draw.style('opacity:0;position:fixed;left:100%;top:100%;overflow:hidden')\n  , poly: draw.polyline().node\n  , path: path\n  }\n}\n\n// Storage for regular expressions\nSVG.regex = {\n  // Parse unit value\n  unit:             /^(-?[\\d\\.]+)([a-z%]{0,2})$/\n\n  // Parse hex value\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n\n  // Parse rgb value\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\n\n  // Parse reference id\n, reference:        /#([a-z0-9\\-_]+)/i\n\n  // Parse matrix wrapper\n, matrix:           /matrix\\(|\\)/g\n\n  // Elements of a matrix\n, matrixElements:   /,*\\s+|,/\n\n  // Whitespace\n, whitespace:       /\\s/g\n\n  // Test hex value\n, isHex:            /^#[a-f0-9]{3,6}$/i\n\n  // Test rgb value\n, isRgb:            /^rgb\\(/\n\n  // Test css declaration\n, isCss:            /[^:]+:[^;]+;?/\n\n  // Test for blank string\n, isBlank:          /^(\\s+)?$/\n\n  // Test for numeric string\n, isNumber:         /^-?[\\d\\.]+$/\n\n  // Test for percent value\n, isPercent:        /^-?[\\d\\.]+%$/\n\n  // Test for image url\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\n\n  // The following regex are used to parse the d attribute of a path\n\n  // Replaces all negative exponents\n, negExp:           /e\\-/gi\n\n  // Replaces all comma\n, comma:            /,/g\n\n  // Replaces all hyphens\n, hyphen:           /\\-/g\n\n  // Replaces and tests for all path letters\n, pathLetters:      /[MLHVCSQTAZ]/gi\n\n  // yes we need this one, too\n, isPathLetter:     /[MLHVCSQTAZ]/i\n\n  // split at whitespaces\n, whitespaces:      /\\s+/\n\n  // matches X\n, X:                /X/g\n}\nSVG.utils = {\n    // Map function\n    map: function(array, block) {\n    var i\n      , il = array.length\n      , result = []\n\n    for (i = 0; i < il; i++)\n      result.push(block(array[i]))\n\n    return result\n  }\n\n  // Degrees to radians\n, radians: function(d) {\n    return d % 360 * Math.PI / 180\n  }\n  // Radians to degrees\n, degrees: function(r) {\n    return r * 180 / Math.PI % 360\n  }\n, filterSVGElements: function(p) {\n    return [].filter.call(p, function(el){ return el instanceof SVGElement })\n  }\n\n}\n\nSVG.defaults = {\n  // Default attribute values\n  attrs: {\n    // fill and stroke\n    'fill-opacity':     1\n  , 'stroke-opacity':   1\n  , 'stroke-width':     0\n  , 'stroke-linejoin':  'miter'\n  , 'stroke-linecap':   'butt'\n  , fill:               '#000000'\n  , stroke:             '#000000'\n  , opacity:            1\n    // position\n  , x:                  0\n  , y:                  0\n  , cx:                 0\n  , cy:                 0\n    // size\n  , width:              0\n  , height:             0\n    // radius\n  , r:                  0\n  , rx:                 0\n  , ry:                 0\n    // gradient\n  , offset:             0\n  , 'stop-opacity':     1\n  , 'stop-color':       '#000000'\n    // text\n  , 'font-size':        16\n  , 'font-family':      'Helvetica, Arial, sans-serif'\n  , 'text-anchor':      'start'\n  }\n\n}\n// Module for color convertions\nSVG.Color = function(color) {\n  var match\n\n  // initialize defaults\n  this.r = 0\n  this.g = 0\n  this.b = 0\n\n  // parse color\n  if (typeof color === 'string') {\n    if (SVG.regex.isRgb.test(color)) {\n      // get rgb values\n      match = SVG.regex.rgb.exec(color.replace(/\\s/g,''))\n\n      // parse numeric values\n      this.r = parseInt(match[1])\n      this.g = parseInt(match[2])\n      this.b = parseInt(match[3])\n\n    } else if (SVG.regex.isHex.test(color)) {\n      // get hex values\n      match = SVG.regex.hex.exec(fullHex(color))\n\n      // parse numeric values\n      this.r = parseInt(match[1], 16)\n      this.g = parseInt(match[2], 16)\n      this.b = parseInt(match[3], 16)\n\n    }\n\n  } else if (typeof color === 'object') {\n    this.r = color.r\n    this.g = color.g\n    this.b = color.b\n\n  }\n\n}\n\nSVG.extend(SVG.Color, {\n  // Default to hex conversion\n  toString: function() {\n    return this.toHex()\n  }\n  // Build hex value\n, toHex: function() {\n    return '#'\n      + compToHex(this.r)\n      + compToHex(this.g)\n      + compToHex(this.b)\n  }\n  // Build rgb value\n, toRgb: function() {\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\n  }\n  // Calculate true brightness\n, brightness: function() {\n    return (this.r / 255 * 0.30)\n         + (this.g / 255 * 0.59)\n         + (this.b / 255 * 0.11)\n  }\n  // Make color morphable\n, morph: function(color) {\n    this.destination = new SVG.Color(color)\n\n    return this\n  }\n  // Get morphed color at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // normalise pos\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\n\n    // generate morphed color\n    return new SVG.Color({\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\n    })\n  }\n\n})\n\n// Testers\n\n// Test if given value is a color string\nSVG.Color.test = function(color) {\n  color += ''\n  return SVG.regex.isHex.test(color)\n      || SVG.regex.isRgb.test(color)\n}\n\n// Test if given value is a rgb object\nSVG.Color.isRgb = function(color) {\n  return color && typeof color.r == 'number'\n               && typeof color.g == 'number'\n               && typeof color.b == 'number'\n}\n\n// Test if given value is a color\nSVG.Color.isColor = function(color) {\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\n}\n// Module for array conversion\nSVG.Array = function(array, fallback) {\n  array = (array || []).valueOf()\n\n  // if array is empty and fallback is provided, use fallback\n  if (array.length == 0 && fallback)\n    array = fallback.valueOf()\n\n  // parse array\n  this.value = this.parse(array)\n}\n\nSVG.extend(SVG.Array, {\n  // Make array morphable\n  morph: function(array) {\n    this.destination = this.parse(array)\n\n    // normalize length of arrays\n    if (this.value.length != this.destination.length) {\n      var lastValue       = this.value[this.value.length - 1]\n        , lastDestination = this.destination[this.destination.length - 1]\n\n      while(this.value.length > this.destination.length)\n        this.destination.push(lastDestination)\n      while(this.value.length < this.destination.length)\n        this.value.push(lastValue)\n    }\n\n    return this\n  }\n  // Clean up any duplicate points\n, settle: function() {\n    // find all unique values\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\n      if (seen.indexOf(this.value[i]) == -1)\n        seen.push(this.value[i])\n\n    // set new value\n    return this.value = seen\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed array\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\n\n    return new SVG.Array(array)\n  }\n  // Convert array to string\n, toString: function() {\n    return this.value.join(' ')\n  }\n  // Real value\n, valueOf: function() {\n    return this.value\n  }\n  // Parse whitespace separated string\n, parse: function(array) {\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    return this.split(array)\n  }\n  // Strip unnecessary whitespace\n, split: function(string) {\n    return string.trim().split(/\\s+/)\n  }\n  // Reverse array\n, reverse: function() {\n    this.value.reverse()\n\n    return this\n  }\n\n})\n// Poly points array\nSVG.PointArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [[0,0]])\n}\n\n// Inherit from SVG.Array\nSVG.PointArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PointArray, {\n  // Convert array to string\n  toString: function() {\n    // convert to a poly point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push(this.value[i].join(','))\n\n    return array.join(' ')\n  }\n  // Convert array to line object\n, toLine: function() {\n    return {\n      x1: this.value[0][0]\n    , y1: this.value[0][1]\n    , x2: this.value[1][0]\n    , y2: this.value[1][1]\n    }\n  }\n  // Get morphed array at given position\n, at: function(pos) {\n    // make sure a destination is defined\n    if (!this.destination) return this\n\n    // generate morphed point string\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\n      array.push([\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\n      ])\n\n    return new SVG.PointArray(array)\n  }\n  // Parse point string\n, parse: function(array) {\n    array = array.valueOf()\n\n    // if already is an array, no need to parse it\n    if (Array.isArray(array)) return array\n\n    // split points\n    array = this.split(array)\n\n    // parse points\n    for (var i = 0, il = array.length, p, points = []; i < il; i++) {\n      p = array[i].split(',')\n      points.push([parseFloat(p[0]), parseFloat(p[1])])\n    }\n\n    return points\n  }\n  // Move point string\n, move: function(x, y) {\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    // move every point\n    if (!isNaN(x) && !isNaN(y))\n      for (var i = this.value.length - 1; i >= 0; i--)\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\n\n    return this\n  }\n  // Resize poly string\n, size: function(width, height) {\n    var i, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\n      this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n    }\n\n    return this\n  }\n  // Get bounding box of points\n, bbox: function() {\n    SVG.parser.poly.setAttribute('points', this.toString())\n\n    return SVG.parser.poly.getBBox()\n  }\n\n})\n// Path points array\nSVG.PathArray = function(array, fallback) {\n  this.constructor.call(this, array, fallback || [['M', 0, 0]])\n}\n\n// Inherit from SVG.Array\nSVG.PathArray.prototype = new SVG.Array\n\nSVG.extend(SVG.PathArray, {\n  // Convert array to string\n  toString: function() {\n    return arrayToString(this.value)\n  }\n  // Move path string\n, move: function(x, y) {\n    // get bounding box of current situation\n    var box = this.bbox()\n\n    // get relative offset\n    x -= box.x\n    y -= box.y\n\n    if (!isNaN(x) && !isNaN(y)) {\n      // move every point\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0]\n\n        if (l == 'M' || l == 'L' || l == 'T')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n\n        } else if (l == 'H')  {\n          this.value[i][1] += x\n\n        } else if (l == 'V')  {\n          this.value[i][1] += y\n\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\n          this.value[i][1] += x\n          this.value[i][2] += y\n          this.value[i][3] += x\n          this.value[i][4] += y\n\n          if (l == 'C')  {\n            this.value[i][5] += x\n            this.value[i][6] += y\n          }\n\n        } else if (l == 'A')  {\n          this.value[i][6] += x\n          this.value[i][7] += y\n        }\n\n      }\n    }\n\n    return this\n  }\n  // Resize path string\n, size: function(width, height) {\n    // get bounding box of current situation\n    var i, l, box = this.bbox()\n\n    // recalculate position of all points according to new size\n    for (i = this.value.length - 1; i >= 0; i--) {\n      l = this.value[i][0]\n\n      if (l == 'M' || l == 'L' || l == 'T')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'H')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n\n      } else if (l == 'V')  {\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\n\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\n\n        if (l == 'C')  {\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\n        }\n\n      } else if (l == 'A')  {\n        // resize radii\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\n        this.value[i][2] = (this.value[i][2] * height) / box.height\n\n        // move position values\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\n      }\n\n    }\n\n    return this\n  }\n  // Absolutize and parse path to array\n, parse: function(array) {\n    // if it's already a patharray, no need to parse it\n    if (array instanceof SVG.PathArray) return array.valueOf()\n\n    // prepare for parsing\n    var i, x0, y0, s, seg, arr\n      , x = 0\n      , y = 0\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7 }\n\n    if(typeof array == 'string'){\n\n      array = array\n        .replace(SVG.regex.negExp, 'X')         // replace all negative exponents with certain char\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, ' -')        // add space before hyphen\n        .replace(SVG.regex.comma, ' ')          // unify all spaces\n        .replace(SVG.regex.X, 'e-')             // add back the expoent\n        .trim()                                 // trim\n        .split(SVG.regex.whitespaces)           // split into array\n\n    }else{\n      array = array.reduce(function(prev, curr){\n        return [].concat.apply(prev, curr)\n      }, [])\n    }\n\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n    var arr = []\n\n    do{\n\n      // Test if we have a path letter\n      if(SVG.regex.isPathLetter.test(array[0])){\n        s = array[0]\n        array.shift()\n      // If last letter was a move command and we got no new, it defaults to [L]ine\n      }else if(s.toUpperCase() == 'M'){\n        s = 'L'\n      }\n\n      // add path letter as first element\n      seg = [s.toUpperCase()]\n\n      // push all necessary parameters to segment\n      for(i = 0; i < paramCnt[seg[0]]; ++i){\n        seg.push(parseFloat(array.shift()))\n      }\n\n      // upper case\n      if(s == seg[0]){\n\n        if(s == 'M' || s == 'L' || s == 'C' || s == 'Q'){\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n        }else if(s == 'V'){\n          y = seg[1]\n        }else if(s == 'H'){\n          x = seg[1]\n        }else if(s == 'A'){\n          x = seg[6]\n          y = seg[7]\n        }\n\n      // lower case\n      }else{\n\n        // convert relative to absolute values\n        if(s == 'm' || s == 'l' || s == 'c' || s == 's' || s == 'q' || s == 't'){\n\n          seg[1] += x\n          seg[2] += y\n\n          if(seg[3] != null){\n            seg[3] += x\n            seg[4] += y\n          }\n\n          if(seg[5] != null){\n            seg[5] += x\n            seg[6] += y\n          }\n\n          // move pointer\n          x = seg[paramCnt[seg[0]]-1]\n          y = seg[paramCnt[seg[0]]]\n\n        }else if(s == 'v'){\n          seg[1] += y\n          y = seg[1]\n        }else if(s == 'h'){\n          seg[1] += x\n          x = seg[1]\n        }else if(s == 'a'){\n          seg[6] += x\n          seg[7] += y\n          x = seg[6]\n          y = seg[7]\n        }\n\n      }\n\n      if(seg[0] == 'M'){\n        x0 = x\n        y0 = y\n      }\n\n      if(seg[0] == 'Z'){\n        x = x0\n        y = y0\n      }\n\n      arr.push(seg)\n\n    }while(array.length)\n\n    return arr\n\n  }\n  // Get bounding box of path\n, bbox: function() {\n    SVG.parser.path.setAttribute('d', this.toString())\n\n    return SVG.parser.path.getBBox()\n  }\n\n})\n// Module for unit convertions\nSVG.Number = SVG.invent({\n  // Initialize\n  create: function(value, unit) {\n    // initialize defaults\n    this.value = 0\n    this.unit  = unit || ''\n\n    // parse value\n    if (typeof value === 'number') {\n      // ensure a valid numeric value\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\n\n    } else if (typeof value === 'string') {\n      unit = value.match(SVG.regex.unit)\n\n      if (unit) {\n        // make value numeric\n        this.value = parseFloat(unit[1])\n\n        // normalize\n        if (unit[2] == '%')\n          this.value /= 100\n        else if (unit[2] == 's')\n          this.value *= 1000\n\n        // store unit\n        this.unit = unit[2]\n      }\n\n    } else {\n      if (value instanceof SVG.Number) {\n        this.value = value.valueOf()\n        this.unit  = value.unit\n      }\n    }\n\n  }\n  // Add methods\n, extend: {\n    // Stringalize\n    toString: function() {\n      return (\n        this.unit == '%' ?\n          ~~(this.value * 1e8) / 1e6:\n        this.unit == 's' ?\n          this.value / 1e3 :\n          this.value\n      ) + this.unit\n    }\n  , // Convert to primitive\n    valueOf: function() {\n      return this.value\n    }\n    // Add number\n  , plus: function(number) {\n      return new SVG.Number(this + new SVG.Number(number), this.unit)\n    }\n    // Subtract number\n  , minus: function(number) {\n      return this.plus(-new SVG.Number(number))\n    }\n    // Multiply number\n  , times: function(number) {\n      return new SVG.Number(this * new SVG.Number(number), this.unit)\n    }\n    // Divide number\n  , divide: function(number) {\n      return new SVG.Number(this / new SVG.Number(number), this.unit)\n    }\n    // Convert to different unit\n  , to: function(unit) {\n      var number = new SVG.Number(this)\n\n      if (typeof unit === 'string')\n        number.unit = unit\n\n      return number\n    }\n    // Make number morphable\n  , morph: function(number) {\n      this.destination = new SVG.Number(number)\n\n      return this\n    }\n    // Get morphed number at given position\n  , at: function(pos) {\n      // Make sure a destination is defined\n      if (!this.destination) return this\n\n      // Generate new morphed number\n      return new SVG.Number(this.destination)\n          .minus(this)\n          .times(pos)\n          .plus(this)\n    }\n\n  }\n})\n\nSVG.ViewBox = function(element) {\n  var x, y, width, height\n    , wm   = 1 // width multiplier\n    , hm   = 1 // height multiplier\n    , box  = element.bbox()\n    , view = (element.attr('viewBox') || '').match(/-?[\\d\\.]+/g)\n    , we   = element\n    , he   = element\n\n  // get dimensions of current node\n  width  = new SVG.Number(element.width())\n  height = new SVG.Number(element.height())\n\n  // find nearest non-percentual dimensions\n  while (width.unit == '%') {\n    wm *= width.value\n    width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\n    we = we.parent()\n  }\n  while (height.unit == '%') {\n    hm *= height.value\n    height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\n    he = he.parent()\n  }\n\n  // ensure defaults\n  this.x      = box.x\n  this.y      = box.y\n  this.width  = width  * wm\n  this.height = height * hm\n  this.zoom   = 1\n\n  if (view) {\n    // get width and height from viewbox\n    x      = parseFloat(view[0])\n    y      = parseFloat(view[1])\n    width  = parseFloat(view[2])\n    height = parseFloat(view[3])\n\n    // calculate zoom accoring to viewbox\n    this.zoom = ((this.width / this.height) > (width / height)) ?\n      this.height / height :\n      this.width  / width\n\n    // calculate real pixel dimensions on parent SVG.Doc element\n    this.x      = x\n    this.y      = y\n    this.width  = width\n    this.height = height\n\n  }\n\n}\n\n//\nSVG.extend(SVG.ViewBox, {\n  // Parse viewbox to string\n  toString: function() {\n    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\n  }\n\n})\n\nSVG.Element = SVG.invent({\n  // Initialize node\n  create: function(node) {\n    // make stroke value accessible dynamically\n    this._stroke = SVG.defaults.attrs.stroke\n\n    // initialize data object\n    this.dom = {}\n\n    // create circular reference\n    if (this.node = node) {\n      this.type = node.nodeName\n      this.node.instance = this\n\n      // store current attribute value\n      this._stroke = node.getAttribute('stroke') || this._stroke\n    }\n  }\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return this.attr('y', y)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\n    }\n    // Move element to given x and y values\n  , move: function(x, y) {\n      return this.x(x).y(y)\n    }\n    // Move element by its center\n  , center: function(x, y) {\n      return this.cx(x).cy(y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return this.attr('width', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('height', height)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this\n        .width(new SVG.Number(p.width))\n        .height(new SVG.Number(p.height))\n    }\n    // Clone element\n  , clone: function() {\n      // clone element and assign new id\n      var clone = assignNewId(this.node.cloneNode(true))\n\n      // insert the clone after myself\n      this.after(clone)\n\n      return clone\n    }\n    // Remove element\n  , remove: function() {\n      if (this.parent())\n        this.parent().removeElement(this)\n\n      return this\n    }\n    // Replace element\n  , replace: function(element) {\n      this.after(element).remove()\n\n      return element\n    }\n    // Add element to given container and return self\n  , addTo: function(parent) {\n      return parent.put(this)\n    }\n    // Add element to given container and return container\n  , putIn: function(parent) {\n      return parent.add(this)\n    }\n    // Get / set id\n  , id: function(id) {\n      return this.attr('id', id)\n    }\n    // Checks whether the given point inside the bounding box of the element\n  , inside: function(x, y) {\n      var box = this.bbox()\n\n      return x > box.x\n          && y > box.y\n          && x < box.x + box.width\n          && y < box.y + box.height\n    }\n    // Show element\n  , show: function() {\n      return this.style('display', '')\n    }\n    // Hide element\n  , hide: function() {\n      return this.style('display', 'none')\n    }\n    // Is element visible?\n  , visible: function() {\n      return this.style('display') != 'none'\n    }\n    // Return id on string conversion\n  , toString: function() {\n      return this.attr('id')\n    }\n    // Return array of classes on the node\n  , classes: function() {\n      var attr = this.attr('class')\n\n      return attr == null ? [] : attr.trim().split(/\\s+/)\n    }\n    // Return true if class exists on the node, false otherwise\n  , hasClass: function(name) {\n      return this.classes().indexOf(name) != -1\n    }\n    // Add class to the node\n  , addClass: function(name) {\n      if (!this.hasClass(name)) {\n        var array = this.classes()\n        array.push(name)\n        this.attr('class', array.join(' '))\n      }\n\n      return this\n    }\n    // Remove class from the node\n  , removeClass: function(name) {\n      if (this.hasClass(name)) {\n        this.attr('class', this.classes().filter(function(c) {\n          return c != name\n        }).join(' '))\n      }\n\n      return this\n    }\n    // Toggle the presence of a class on the node\n  , toggleClass: function(name) {\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\n    }\n    // Get referenced element form attribute value\n  , reference: function(attr) {\n      return SVG.get(this.attr(attr))\n    }\n    // Returns the parent element instance\n  , parent: function(type) {\n      var parent = this\n\n      // check for parent\n      if(!parent.node.parentNode) return null\n\n      // get parent element\n      parent = SVG.adopt(parent.node.parentNode)\n\n      if(!type) return parent\n\n      // loop trough ancestors if type is given\n      while(parent.node instanceof SVGElement){\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\n        parent = SVG.adopt(parent.node.parentNode)\n      }\n    }\n    // Get parent document\n  , doc: function() {\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\n    }\n    // return array of all ancestors of given type up to the root svg\n  , parents: function(type) {\n      var parents = [], parent = this\n\n      do{\n        parent = parent.parent(type)\n        if(!parent || !parent.node) break\n\n        parents.push(parent)\n      } while(parent.parent)\n\n      return parents\n    }\n    // matches the element vs a css selector\n  , matches: function(selector){\n      return matches(this.node, selector)\n    }\n    // Returns the svg node to call native svg methods on it\n  , native: function() {\n      return this.node\n    }\n    // Import raw svg\n  , svg: function(svg) {\n      // create temporary holder\n      var well = document.createElement('svg')\n\n      // act as a setter if svg is given\n      if (svg && this instanceof SVG.Parent) {\n        // dump raw svg\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<(\\w+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\n\n        // transplant nodes\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n          this.node.appendChild(well.firstChild.firstChild)\n\n      // otherwise act as a getter\n      } else {\n        // create a wrapping svg element in case of partial content\n        well.appendChild(svg = document.createElement('svg'))\n\n        // write svgjs data to the dom\n        this.writeDataToDom()\n\n        // insert a copy of this node\n        svg.appendChild(this.node.cloneNode(true))\n\n        // return target element\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\n      }\n\n      return this\n    }\n  // write svgjs data to the dom\n  , writeDataToDom: function() {\n\n      // dump variables recursively\n      if(this.each || this.lines){\n        var fn = this.each ? this : this.lines();\n        fn.each(function(){\n          this.writeDataToDom()\n        })\n      }\n\n      // remove previously set data\n      this.node.removeAttribute('svgjs:data')\n\n      if(Object.keys(this.dom).length)\n        this.node.setAttributeNS(SVG.svgjs, 'svgjs:data', JSON.stringify(this.dom))\n\n      return this\n    }\n  // set given data to the elements data property\n  , setData: function(o){\n      this.dom = o\n      return this\n    }\n  }\n})\n\nSVG.FX = SVG.invent({\n  // Initialize FX object\n  create: function(element) {\n    // store target element\n    this.target = element\n  }\n\n  // Add class methods\n, extend: {\n    // Add animation parameters and start animation\n    animate: function(d, ease, delay) {\n      var akeys, skeys, key\n        , element = this.target\n        , fx = this\n\n      // dissect object if one is passed\n      if (typeof d == 'object') {\n        delay = d.delay\n        ease = d.ease\n        d = d.duration\n      }\n\n      // ensure default duration and easing\n      d = d == '=' ? d : d == null ? 1000 : new SVG.Number(d).valueOf()\n      ease = ease || '<>'\n\n      // process values\n      fx.at = function(pos) {\n        var i\n\n        // normalise pos\n        pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\n\n        // collect attribute keys\n        if (akeys == null) {\n          akeys = []\n          for (key in fx.attrs)\n            akeys.push(key)\n\n          // make sure morphable elements are scaled, translated and morphed all together\n          if (element.morphArray && (fx.destination.plot || akeys.indexOf('points') > -1)) {\n            // get destination\n            var box\n              , p = new element.morphArray(fx.destination.plot || fx.attrs.points || element.array())\n\n            // add size\n            if (fx.destination.size)\n              p.size(fx.destination.size.width.to, fx.destination.size.height.to)\n\n            // add movement\n            box = p.bbox()\n            if (fx.destination.x)\n              p.move(fx.destination.x.to, box.y)\n            else if (fx.destination.cx)\n              p.move(fx.destination.cx.to - box.width / 2, box.y)\n\n            box = p.bbox()\n            if (fx.destination.y)\n              p.move(box.x, fx.destination.y.to)\n            else if (fx.destination.cy)\n              p.move(box.x, fx.destination.cy.to - box.height / 2)\n\n            // reset destination values\n            fx.destination = {\n              plot: element.array().morph(p)\n            }\n          }\n        }\n\n        // collect style keys\n        if (skeys == null) {\n          skeys = []\n          for (key in fx.styles)\n            skeys.push(key)\n        }\n\n        // apply easing\n        pos = ease == '<>' ?\n          (-Math.cos(pos * Math.PI) / 2) + 0.5 :\n        ease == '>' ?\n          Math.sin(pos * Math.PI / 2) :\n        ease == '<' ?\n          -Math.cos(pos * Math.PI / 2) + 1 :\n        ease == '-' ?\n          pos :\n        typeof ease == 'function' ?\n          ease(pos) :\n          pos\n\n        // run plot function\n        if (fx.destination.plot) {\n          element.plot(fx.destination.plot.at(pos))\n\n        } else {\n          // run all x-position properties\n          if (fx.destination.x)\n            element.x(fx.destination.x.at(pos))\n          else if (fx.destination.cx)\n            element.cx(fx.destination.cx.at(pos))\n\n          // run all y-position properties\n          if (fx.destination.y)\n            element.y(fx.destination.y.at(pos))\n          else if (fx.destination.cy)\n            element.cy(fx.destination.cy.at(pos))\n\n          // run all size properties\n          if (fx.destination.size)\n            element.size(fx.destination.size.width.at(pos), fx.destination.size.height.at(pos))\n        }\n\n        // run all viewbox properties\n        if (fx.destination.viewbox)\n          element.viewbox(\n            fx.destination.viewbox.x.at(pos)\n          , fx.destination.viewbox.y.at(pos)\n          , fx.destination.viewbox.width.at(pos)\n          , fx.destination.viewbox.height.at(pos)\n          )\n\n        // run leading property\n        if (fx.destination.leading)\n          element.leading(fx.destination.leading.at(pos))\n\n        // animate attributes\n        for (i = akeys.length - 1; i >= 0; i--)\n          element.attr(akeys[i], at(fx.attrs[akeys[i]], pos))\n\n        // animate styles\n        for (i = skeys.length - 1; i >= 0; i--)\n          element.style(skeys[i], at(fx.styles[skeys[i]], pos))\n\n        // callback for each keyframe\n        if (fx.situation.during)\n          fx.situation.during.call(element, pos, function(from, to) {\n            return at({ from: from, to: to }, pos)\n          })\n      }\n\n      if (typeof d === 'number') {\n        // delay animation\n        this.timeout = setTimeout(function() {\n          var start = new Date().getTime()\n\n          // initialize situation object\n          fx.situation.start    = start\n          fx.situation.play     = true\n          fx.situation.finish   = start + d\n          fx.situation.duration = d\n          fx.situation.ease     = ease\n\n          // render function\n          fx.render = function() {\n\n            if (fx.situation.play === true) {\n              // calculate pos\n              var time = new Date().getTime()\n                , pos = time > fx.situation.finish ? 1 : (time - fx.situation.start) / d\n\n              // reverse pos if animation is reversed\n              if (fx.situation.reversing)\n                pos = -pos + 1\n\n              // process values\n              fx.at(pos)\n\n              // finish off animation\n              if (time > fx.situation.finish) {\n                if (fx.destination.plot)\n                  element.plot(new SVG.PointArray(fx.destination.plot.destination).settle())\n\n                if (fx.situation.loop === true || (typeof fx.situation.loop == 'number' && fx.situation.loop > 0)) {\n                  // register reverse\n                  if (fx.situation.reverse)\n                    fx.situation.reversing = !fx.situation.reversing\n\n                  if (typeof fx.situation.loop == 'number') {\n                    // reduce loop count\n                    if (!fx.situation.reverse || fx.situation.reversing)\n                      --fx.situation.loop\n\n                    // remove last loop if reverse is disabled\n                    if (!fx.situation.reverse && fx.situation.loop == 1)\n                      --fx.situation.loop\n                  }\n\n                  fx.animate(d, ease, delay)\n                } else {\n                  fx.situation.after ? fx.situation.after.apply(element, [fx]) : fx.stop()\n                }\n\n              } else {\n                fx.animationFrame = requestAnimationFrame(fx.render)\n              }\n            } else {\n              fx.animationFrame = requestAnimationFrame(fx.render)\n            }\n\n          }\n\n          // start animation\n          fx.render()\n\n        }, new SVG.Number(delay).valueOf())\n      }\n\n      return this\n    }\n    // Get bounding box of target element\n  , bbox: function() {\n      return this.target.bbox()\n    }\n    // Add animatable attributes\n  , attr: function(a, v) {\n      // apply attributes individually\n      if (typeof a == 'object') {\n        for (var key in a)\n          this.attr(key, a[key])\n\n      } else {\n        // get the current state\n        var from = this.target.attr(a)\n\n        // detect format\n        if (a == 'transform') {\n          // merge given transformation with an existing one\n          if (this.attrs[a])\n            v = this.attrs[a].destination.multiply(v)\n\n          // prepare matrix for morphing\n          this.attrs[a] = (new SVG.Matrix(this.target)).morph(v)\n\n          // add parametric rotation values\n          if (this.param) {\n            // get initial rotation\n            v = this.target.transform('rotation')\n\n            // add param\n            this.attrs[a].param = {\n              from: this.target.param || { rotation: v, cx: this.param.cx, cy: this.param.cy }\n            , to:   this.param\n            }\n          }\n\n        } else {\n          this.attrs[a] = SVG.Color.isColor(v) ?\n            // prepare color for morphing\n            new SVG.Color(from).morph(v) :\n          SVG.regex.unit.test(v) ?\n            // prepare number for morphing\n            new SVG.Number(from).morph(v) :\n            // prepare for plain morphing\n            { from: from, to: v }\n        }\n      }\n\n      return this\n    }\n    // Add animatable styles\n  , style: function(s, v) {\n      if (typeof s == 'object')\n        for (var key in s)\n          this.style(key, s[key])\n\n      else\n        this.styles[s] = { from: this.target.style(s), to: v }\n\n      return this\n    }\n    // Animatable x-axis\n  , x: function(x) {\n      this.destination.x = new SVG.Number(this.target.x()).morph(x)\n\n      return this\n    }\n    // Animatable y-axis\n  , y: function(y) {\n      this.destination.y = new SVG.Number(this.target.y()).morph(y)\n\n      return this\n    }\n    // Animatable center x-axis\n  , cx: function(x) {\n      this.destination.cx = new SVG.Number(this.target.cx()).morph(x)\n\n      return this\n    }\n    // Animatable center y-axis\n  , cy: function(y) {\n      this.destination.cy = new SVG.Number(this.target.cy()).morph(y)\n\n      return this\n    }\n    // Add animatable move\n  , move: function(x, y) {\n      return this.x(x).y(y)\n    }\n    // Add animatable center\n  , center: function(x, y) {\n      return this.cx(x).cy(y)\n    }\n    // Add animatable size\n  , size: function(width, height) {\n      if (this.target instanceof SVG.Text) {\n        // animate font size for Text elements\n        this.attr('font-size', width)\n\n      } else {\n        // animate bbox based size for all other elements\n        var box = this.target.bbox()\n\n        this.destination.size = {\n          width:  new SVG.Number(box.width).morph(width)\n        , height: new SVG.Number(box.height).morph(height)\n        }\n      }\n\n      return this\n    }\n    // Add animatable plot\n  , plot: function(p) {\n      this.destination.plot = p\n\n      return this\n    }\n    // Add leading method\n  , leading: function(value) {\n      if (this.target.destination.leading)\n        this.destination.leading = new SVG.Number(this.target.destination.leading).morph(value)\n\n      return this\n    }\n    // Add animatable viewbox\n  , viewbox: function(x, y, width, height) {\n      if (this.target instanceof SVG.Container) {\n        var box = this.target.viewbox()\n\n        this.destination.viewbox = {\n          x:      new SVG.Number(box.x).morph(x)\n        , y:      new SVG.Number(box.y).morph(y)\n        , width:  new SVG.Number(box.width).morph(width)\n        , height: new SVG.Number(box.height).morph(height)\n        }\n      }\n\n      return this\n    }\n    // Add animateable gradient update\n  , update: function(o) {\n      if (this.target instanceof SVG.Stop) {\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n        if (o.color   != null) this.attr('stop-color', o.color)\n        if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\n      }\n\n      return this\n    }\n    // Add callback for each keyframe\n  , during: function(during) {\n      this.situation.during = during\n\n      return this\n    }\n    // Callback after animation\n  , after: function(after) {\n      this.situation.after = after\n\n      return this\n    }\n    // Make loopable\n  , loop: function(times, reverse) {\n      // store current loop and total loops\n      this.situation.loop = this.situation.loops = times || true\n\n      // make reversable\n      this.situation.reverse = !!reverse\n\n      return this\n    }\n    // Stop running animation\n  , stop: function(fulfill) {\n      // fulfill animation\n      if (fulfill === true) {\n\n        this.animate(0)\n\n        if (this.situation.after)\n          this.situation.after.apply(this.target, [this])\n\n      } else {\n        // stop current animation\n        clearTimeout(this.timeout)\n        cancelAnimationFrame(this.animationFrame);\n\n        // reset storage for properties\n        this.attrs       = {}\n        this.styles      = {}\n        this.situation   = {}\n        this.destination = {}\n      }\n\n      return this\n    }\n    // Pause running animation\n  , pause: function() {\n      if (this.situation.play === true) {\n        this.situation.play  = false\n        this.situation.pause = new Date().getTime()\n      }\n\n      return this\n    }\n    // Play running animation\n  , play: function() {\n      if (this.situation.play === false) {\n        var pause = new Date().getTime() - this.situation.pause\n\n        this.situation.finish += pause\n        this.situation.start  += pause\n        this.situation.play    = true\n      }\n\n      return this\n    }\n\n  }\n\n  // Define parent class\n, parent: SVG.Element\n\n  // Add method to parent elements\n, construct: {\n    // Get fx module or create a new one, then animate with given duration and ease\n    animate: function(d, ease, delay) {\n      return (this.fx || (this.fx = new SVG.FX(this))).stop().animate(d, ease, delay)\n    }\n    // Stop current animation; this is an alias to the fx instance\n  , stop: function(fulfill) {\n      if (this.fx)\n        this.fx.stop(fulfill)\n\n      return this\n    }\n    // Pause current animation\n  , pause: function() {\n      if (this.fx)\n        this.fx.pause()\n\n      return this\n    }\n    // Play paused current animation\n  , play: function() {\n      if (this.fx)\n        this.fx.play()\n\n      return this\n    }\n\n  }\n})\n\nSVG.BBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var box\n\n      // yes this is ugly, but Firefox can be a bitch when it comes to elements that are not yet rendered\n      try {\n        // find native bbox\n        box = element.node.getBBox()\n      } catch(e) {\n        if(element instanceof SVG.Shape){\n          var clone = element.clone().addTo(SVG.parser.draw)\n          box = clone.bbox()\n          clone.remove()\n        }else{\n          box = {\n            x:      element.node.clientLeft\n          , y:      element.node.clientTop\n          , width:  element.node.clientWidth\n          , height: element.node.clientHeight\n          }\n        }\n      }\n\n      // plain x and y\n      this.x = box.x\n      this.y = box.y\n\n      // plain width and height\n      this.width  = box.width\n      this.height = box.height\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get bounding box\n    bbox: function() {\n      return new SVG.BBox(this)\n    }\n  }\n\n})\n\nSVG.TBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    // get values if element is given\n    if (element) {\n      var t   = element.ctm().extract()\n        , box = element.bbox()\n\n      // width and height including transformations\n      this.width  = box.width  * t.scaleX\n      this.height = box.height * t.scaleY\n\n      // x and y including transformations\n      this.x = box.x + t.x\n      this.y = box.y + t.y\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n  }\n\n  // Define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get transformed bounding box\n    tbox: function() {\n      return new SVG.TBox(this)\n    }\n  }\n\n})\n\n\nSVG.RBox = SVG.invent({\n  // Initialize\n  create: function(element) {\n    if (element) {\n      var e    = element.doc().parent()\n        , box  = element.node.getBoundingClientRect()\n        , zoom = 1\n\n      // get screen offset\n      this.x = box.left\n      this.y = box.top\n\n      // subtract parent offset\n      this.x -= e.offsetLeft\n      this.y -= e.offsetTop\n\n      while (e = e.offsetParent) {\n        this.x -= e.offsetLeft\n        this.y -= e.offsetTop\n      }\n\n      // calculate cumulative zoom from svg documents\n      e = element\n      while (e.parent && (e = e.parent())) {\n        if (e.viewbox) {\n          zoom *= e.viewbox().zoom\n          this.x -= e.x() || 0\n          this.y -= e.y() || 0\n        }\n      }\n\n      // recalculate viewbox distortion\n      this.width  = box.width  /= zoom\n      this.height = box.height /= zoom\n    }\n\n    // add center, right and bottom\n    fullBox(this)\n\n    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n    this.x += window.scrollX\n    this.y += window.scrollY\n  }\n\n  // define Parent\n, parent: SVG.Element\n\n  // Constructor\n, construct: {\n    // Get rect box\n    rbox: function() {\n      return new SVG.RBox(this)\n    }\n  }\n\n})\n\n// Add universal merge method\n;[SVG.BBox, SVG.TBox, SVG.RBox].forEach(function(c) {\n\n  SVG.extend(c, {\n    // Merge rect box with another, return a new instance\n    merge: function(box) {\n      var b = new c()\n\n      // merge boxes\n      b.x      = Math.min(this.x, box.x)\n      b.y      = Math.min(this.y, box.y)\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\n\n      return fullBox(b)\n    }\n\n  })\n\n})\n\nSVG.Matrix = SVG.invent({\n  // Initialize\n  create: function(source) {\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\n\n    // ensure source as object\n    source = source instanceof SVG.Element ?\n      source.matrixify() :\n    typeof source === 'string' ?\n      stringToMatrix(source) :\n    arguments.length == 6 ?\n      arrayToMatrix([].slice.call(arguments)) :\n    typeof source === 'object' ?\n      source : base\n\n    // merge source\n    for (i = abcdef.length - 1; i >= 0; i--)\n      this[abcdef[i]] = source && typeof source[abcdef[i]] === 'number' ?\n        source[abcdef[i]] : base[abcdef[i]]\n  }\n\n  // Add methods\n, extend: {\n    // Extract individual transformations\n    extract: function() {\n      // find delta transform points\n      var px    = deltaTransformPoint(this, 0, 1)\n        , py    = deltaTransformPoint(this, 1, 0)\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\n\n      return {\n        // translation\n        x:        this.e\n      , y:        this.f\n        // skew\n      , skewX:    -skewX\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\n        // scale\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\n        // rotation\n      , rotation: skewX\n      }\n    }\n    // Clone matrix\n  , clone: function() {\n      return new SVG.Matrix(this)\n    }\n    // Morph one matrix into another\n  , morph: function(matrix) {\n      // store new destination\n      this.destination = new SVG.Matrix(matrix)\n\n      return this\n    }\n    // Get morphed matrix at a given position\n  , at: function(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this\n\n      // calculate morphed matrix at a given position\n      var matrix = new SVG.Matrix({\n        a: this.a + (this.destination.a - this.a) * pos\n      , b: this.b + (this.destination.b - this.b) * pos\n      , c: this.c + (this.destination.c - this.c) * pos\n      , d: this.d + (this.destination.d - this.d) * pos\n      , e: this.e + (this.destination.e - this.e) * pos\n      , f: this.f + (this.destination.f - this.f) * pos\n      })\n\n      // process parametric rotation if present\n      if (this.param && this.param.to) {\n        // calculate current parametric position\n        var param = {\n          rotation: this.param.from.rotation + (this.param.to.rotation - this.param.from.rotation) * pos\n        , cx:       this.param.from.cx\n        , cy:       this.param.from.cy\n        }\n\n        // rotate matrix\n        matrix = matrix.rotate(\n          (this.param.to.rotation - this.param.from.rotation * 2) * pos\n        , param.cx\n        , param.cy\n        )\n\n        // store current parametric values\n        matrix.param = param\n      }\n\n      return matrix\n    }\n    // Multiplies by given matrix\n  , multiply: function(matrix) {\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\n    }\n    // Inverses matrix\n  , inverse: function() {\n      return new SVG.Matrix(this.native().inverse())\n    }\n    // Translate matrix\n  , translate: function(x, y) {\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\n    }\n    // Scale matrix\n  , scale: function(x, y, cx, cy) {\n      // support universal scale\n      if (arguments.length == 1 || arguments.length == 3)\n        y = x\n      if (arguments.length == 3) {\n        cy = cx\n        cx = y\n      }\n\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\n    }\n    // Rotate matrix\n  , rotate: function(r, cx, cy) {\n      // convert degrees to radians\n      r = SVG.utils.radians(r)\n\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\n    }\n    // Flip matrix on x or y, at a given offset\n  , flip: function(a, o) {\n      return a == 'x' ? this.scale(-1, 1, o, 0) : this.scale(1, -1, 0, o)\n    }\n    // Skew\n  , skew: function(x, y, cx, cy) {\n      return this.around(cx, cy, this.native().skewX(x || 0).skewY(y || 0))\n    }\n    // SkewX\n  , skewX: function(x, cx, cy) {\n      return this.around(cx, cy, this.native().skewX(x || 0))\n    }\n    // SkewY\n  , skewY: function(y, cx, cy) {\n      return this.around(cx, cy, this.native().skewY(y || 0))\n    }\n    // Transform around a center point\n  , around: function(cx, cy, matrix) {\n      return this\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\n        .multiply(matrix)\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\n    }\n    // Convert to native SVGMatrix\n  , native: function() {\n      // create new matrix\n      var matrix = SVG.parser.draw.node.createSVGMatrix()\n\n      // update with current values\n      for (var i = abcdef.length - 1; i >= 0; i--)\n        matrix[abcdef[i]] = this[abcdef[i]]\n\n      return matrix\n    }\n    // Convert matrix to string\n  , toString: function() {\n      return 'matrix(' + this.a + ',' + this.b + ',' + this.c + ',' + this.d + ',' + this.e + ',' + this.f + ')'\n    }\n  }\n\n  // Define parent\n, parent: SVG.Element\n\n  // Add parent method\n, construct: {\n    // Get current matrix\n    ctm: function() {\n      return new SVG.Matrix(this.node.getCTM())\n    },\n    // Get current screen matrix\n    screenCTM: function() {\n      return new SVG.Matrix(this.node.getScreenCTM())\n    }\n\n  }\n\n})\nSVG.extend(SVG.Element, {\n  // Set svg element attribute\n  attr: function(a, v, n) {\n    // act as full getter\n    if (a == null) {\n      // get an object of attributes\n      a = {}\n      v = this.node.attributes\n      for (n = v.length - 1; n >= 0; n--)\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\n\n      return a\n\n    } else if (typeof a == 'object') {\n      // apply every attribute individually if an object is passed\n      for (v in a) this.attr(v, a[v])\n\n    } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a)\n\n    } else if (v == null) {\n      // act as a getter if the first and only argument is not an object\n      v = this.node.getAttribute(a)\n      return v == null ?\n        SVG.defaults.attrs[a] :\n      SVG.regex.isNumber.test(v) ?\n        parseFloat(v) : v\n\n    } else {\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n      if (a == 'stroke-width')\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\n      else if (a == 'stroke')\n        this._stroke = v\n\n      // convert image fill and stroke to patterns\n      if (a == 'fill' || a == 'stroke') {\n        if (SVG.regex.isImage.test(v))\n          v = this.doc().defs().image(v, 0, 0)\n\n        if (v instanceof SVG.Image)\n          v = this.doc().defs().pattern(0, 0, function() {\n            this.add(v)\n          })\n      }\n\n      // ensure correct numeric values (also accepts NaN and Infinity)\n      if (typeof v === 'number')\n        v = new SVG.Number(v)\n\n      // ensure full hex color\n      else if (SVG.Color.isColor(v))\n        v = new SVG.Color(v)\n\n      // parse array values\n      else if (Array.isArray(v))\n        v = new SVG.Array(v)\n\n      // store parametric transformation values locally\n      else if (v instanceof SVG.Matrix && v.param)\n        this.param = v.param\n\n      // if the passed attribute is leading...\n      if (a == 'leading') {\n        // ... call the leading method instead\n        if (this.leading)\n          this.leading(v)\n      } else {\n        // set given attribute on node\n        typeof n === 'string' ?\n          this.node.setAttributeNS(n, a, v.toString()) :\n          this.node.setAttribute(a, v.toString())\n      }\n\n      // rebuild if required\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\n        this.rebuild(a, v)\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, SVG.FX, {\n  // Add transformations\n  transform: function(o, relative) {\n    // get target in case of the fx module, otherwise reference this\n    var target = this.target || this\n      , matrix\n\n    // act as a getter\n    if (typeof o !== 'object') {\n      // get current matrix\n      matrix = new SVG.Matrix(target).extract()\n\n      // add parametric rotation\n      if (typeof this.param === 'object') {\n        matrix.rotation = this.param.rotation\n        matrix.cx       = this.param.cx\n        matrix.cy       = this.param.cy\n      }\n\n      return typeof o === 'string' ? matrix[o] : matrix\n    }\n\n    // get current matrix\n    matrix = this instanceof SVG.FX && this.attrs.transform ?\n      this.attrs.transform :\n      new SVG.Matrix(target)\n\n    // ensure relative flag\n    relative = !!relative || !!o.relative\n\n    // act on matrix\n    if (o.a != null) {\n      matrix = relative ?\n        // relative\n        matrix.multiply(new SVG.Matrix(o)) :\n        // absolute\n        new SVG.Matrix(o)\n\n    // act on rotation\n    } else if (o.rotation != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // relativize rotation value\n      if (relative) {\n        o.rotation += this.param && this.param.rotation != null ?\n          this.param.rotation :\n          matrix.extract().rotation\n      }\n\n      // store parametric values\n      this.param = o\n\n      // apply transformation\n      if (this instanceof SVG.Element) {\n        matrix = relative ?\n          // relative\n          matrix.rotate(o.rotation, o.cx, o.cy) :\n          // absolute\n          matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\n      }\n\n    // act on scale\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure scale values on both axes\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\n\n      if (!relative) {\n        // absolute; multiply inversed values\n        var e = matrix.extract()\n        o.scaleX = o.scaleX * 1 / e.scaleX\n        o.scaleY = o.scaleY * 1 / e.scaleY\n      }\n\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\n\n    // act on skew\n    } else if (o.skewX != null || o.skewY != null) {\n      // ensure centre point\n      ensureCentre(o, target)\n\n      // ensure skew values on both axes\n      o.skewX = o.skewX != null ? o.skewX : 0\n      o.skewY = o.skewY != null ? o.skewY : 0\n\n      if (!relative) {\n        // absolute; reset skew values\n        var e = matrix.extract()\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\n      }\n\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\n\n    // act on flip\n    } else if (o.flip) {\n      matrix = matrix.flip(\n        o.flip\n      , o.offset == null ? target.bbox()['c' + o.flip] : o.offset\n      )\n\n    // act on translate\n    } else if (o.x != null || o.y != null) {\n      if (relative) {\n        // relative\n        matrix = matrix.translate(o.x, o.y)\n      } else {\n        // absolute\n        if (o.x != null) matrix.e = o.x\n        if (o.y != null) matrix.f = o.y\n      }\n    }\n\n    return this.attr(this instanceof SVG.Pattern ? 'patternTransform' : this instanceof SVG.Gradient ? 'gradientTransform' : 'transform', matrix)\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Reset all transformations\n  untransform: function() {\n    return this.attr('transform', null)\n  },\n  // merge the whole transformation chain into one matrix\n  matrixify: function() {\n\n    var matrix = (this.attr('transform') || '')\n      // split transformations\n      .split(/\\)\\s*/).slice(0,-1).map(function(str){\n        // generate key => value pairs\n        var kv = str.trim().split('(')\n        return [kv[0], kv[1].split(SVG.regex.matrixElements).map(function(str){ return parseFloat(str) })]\n      })\n      // calculate every transformation into one matrix\n      .reduce(function(matrix, transform){\n\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\n        return matrix[transform[0]].apply(matrix, transform[1])\n\n      }, new SVG.Matrix())\n    // apply calculated matrix to element\n    this.attr('transform', matrix)\n\n    return matrix\n  },\n  // add an element to another parent without changing the visual representation on the screen\n  toParent: function(parent) {\n    if(this == parent) return this\n    var ctm = this.screenCTM()\n    var temp = parent.rect(1,1)\n    var pCtm = temp.screenCTM().inverse()\n    temp.remove()\n\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\n\n    return this\n  },\n  // same as above with parent equals root-svg\n  toDoc: function() {\n    return this.toParent(this.doc())\n  }\n\n})\n\nSVG.extend(SVG.Element, {\n  // Dynamic style generator\n  style: function(s, v) {\n    if (arguments.length == 0) {\n      // get full style\n      return this.node.style.cssText || ''\n\n    } else if (arguments.length < 2) {\n      // apply every style individually if an object is passed\n      if (typeof s == 'object') {\n        for (v in s) this.style(v, s[v])\n\n      } else if (SVG.regex.isCss.test(s)) {\n        // parse css string\n        s = s.split(';')\n\n        // apply every definition individually\n        for (var i = 0; i < s.length; i++) {\n          v = s[i].split(':')\n          this.style(v[0].replace(/\\s+/g, ''), v[1])\n        }\n      } else {\n        // act as a getter if the first and only argument is not an object\n        return this.node.style[camelCase(s)]\n      }\n\n    } else {\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\n    }\n\n    return this\n  }\n})\nSVG.Parent = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // Returns all child elements\n    children: function() {\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\n        return SVG.adopt(node)\n      })\n    }\n    // Add given element at a position\n  , add: function(element, i) {\n      if (!this.has(element)) {\n        // define insertion index if none given\n        i = i == null ? this.children().length : i\n\n        // add element references\n        this.node.insertBefore(element.node, this.node.childNodes[i] || null)\n      }\n\n      return this\n    }\n    // Basically does the same as `add()` but returns the added element instead\n  , put: function(element, i) {\n      this.add(element, i)\n      return element\n    }\n    // Checks if the given element is a child\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // Gets index of given element\n  , index: function(element) {\n      return this.children().indexOf(element)\n    }\n    // Get a element at the given index\n  , get: function(i) {\n      return this.children()[i]\n    }\n    // Get first child, skipping the defs node\n  , first: function() {\n      return this.children()[0]\n    }\n    // Get the last child\n  , last: function() {\n      return this.children()[this.children().length - 1]\n    }\n    // Iterates over all children and invokes a given block\n  , each: function(block, deep) {\n      var i, il\n        , children = this.children()\n\n      for (i = 0, il = children.length; i < il; i++) {\n        if (children[i] instanceof SVG.Element)\n          block.apply(children[i], [i, children])\n\n        if (deep && (children[i] instanceof SVG.Container))\n          children[i].each(block, deep)\n      }\n\n      return this\n    }\n    // Remove a given child\n  , removeElement: function(element) {\n      this.node.removeChild(element.node)\n\n      return this\n    }\n    // Remove all elements in this container\n  , clear: function() {\n      // remove children\n      while(this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // remove defs reference\n      delete this._defs\n\n      return this\n    }\n  , // Get defs\n    defs: function() {\n      return this.doc().defs()\n    }\n  }\n\n})\n\nSVG.extend(SVG.Parent, {\n\n  ungroup: function(parent, depth) {\n    if(depth === 0 || this instanceof SVG.Defs) return this\n\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\n    depth = depth || Infinity\n\n    this.each(function(){\n      if(this instanceof SVG.Defs) return this\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\n      return this.toParent(parent)\n    })\n\n    this.node.firstChild || this.remove()\n\n    return this\n  },\n\n  flatten: function(parent, depth) {\n    return this.ungroup(parent, depth)\n  }\n\n})\nSVG.Container = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Parent\n\n  // Add class methods\n, extend: {\n    // Get the viewBox and calculate the zoom value\n    viewbox: function(v) {\n      if (arguments.length == 0)\n        // act as a getter if there are no arguments\n        return new SVG.ViewBox(this)\n\n      // otherwise act as a setter\n      v = arguments.length == 1 ?\n        [v.x, v.y, v.width, v.height] :\n        [].slice.call(arguments)\n\n      return this.attr('viewBox', v)\n    }\n  }\n\n})\n// Add events to elements\n;[  'click'\n  , 'dblclick'\n  , 'mousedown'\n  , 'mouseup'\n  , 'mouseover'\n  , 'mouseout'\n  , 'mousemove'\n  // , 'mouseenter' -> not supported by IE\n  // , 'mouseleave' -> not supported by IE\n  , 'touchstart'\n  , 'touchmove'\n  , 'touchleave'\n  , 'touchend'\n  , 'touchcancel' ].forEach(function(event) {\n\n  // add event to SVG.Element\n  SVG.Element.prototype[event] = function(f) {\n    var self = this\n\n    // bind event to element rather than element node\n    this.node['on' + event] = typeof f == 'function' ?\n      function() { return f.apply(self, arguments) } : null\n\n    return this\n  }\n\n})\n\n// Initialize listeners stack\nSVG.listeners = []\nSVG.handlerMap = []\n\n// Add event binder in the SVG namespace\nSVG.on = function(node, event, listener, binding) {\n  // create listener, get object-index\n  var l     = listener.bind(binding || node.instance || node)\n    , index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1\n    , ev    = event.split('.')[0]\n    , ns    = event.split('.')[1] || '*'\n\n\n  // ensure valid object\n  SVG.listeners[index]         = SVG.listeners[index]         || {}\n  SVG.listeners[index][ev]     = SVG.listeners[index][ev]     || {}\n  SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {}\n\n  // reference listener\n  SVG.listeners[index][ev][ns][listener] = l\n\n  // add listener\n  node.addEventListener(ev, l, false)\n}\n\n// Add event unbinder in the SVG namespace\nSVG.off = function(node, event, listener) {\n  var index = SVG.handlerMap.indexOf(node)\n    , ev    = event && event.split('.')[0]\n    , ns    = event && event.split('.')[1]\n\n  if(index == -1) return\n\n  if (listener) {\n    // remove listener reference\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\n      // remove listener\n      node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false)\n\n      delete SVG.listeners[index][ev][ns || '*'][listener]\n    }\n\n  } else if (ns && ev) {\n    // remove all listeners for a namespaced event\n    if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\n      for (listener in SVG.listeners[index][ev][ns])\n        SVG.off(node, [ev, ns].join('.'), listener)\n\n      delete SVG.listeners[index][ev][ns]\n    }\n\n  } else if (ns){\n    // remove all listeners for a specific namespace\n    for(event in SVG.listeners[index]){\n        for(namespace in SVG.listeners[index][event]){\n            if(ns === namespace){\n                SVG.off(node, [event, ns].join('.'))\n            }\n        }\n    }\n\n  } else if (ev) {\n    // remove all listeners for the event\n    if (SVG.listeners[index][ev]) {\n      for (namespace in SVG.listeners[index][ev])\n        SVG.off(node, [ev, namespace].join('.'))\n\n      delete SVG.listeners[index][ev]\n    }\n\n  } else {\n    // remove all listeners on a given node\n    for (event in SVG.listeners[index])\n      SVG.off(node, event)\n\n    delete SVG.listeners[index]\n\n  }\n}\n\n//\nSVG.extend(SVG.Element, {\n  // Bind given event to listener\n  on: function(event, listener, binding) {\n    SVG.on(this.node, event, listener, binding)\n\n    return this\n  }\n  // Unbind event from listener\n, off: function(event, listener) {\n    SVG.off(this.node, event, listener)\n\n    return this\n  }\n  // Fire given event\n, fire: function(event, data) {\n\n    // Dispatch event\n    if(event instanceof Event){\n        this.node.dispatchEvent(event)\n    }else{\n        this.node.dispatchEvent(new CustomEvent(event, {detail:data}))\n    }\n\n    return this\n  }\n})\n\nSVG.Defs = SVG.invent({\n  // Initialize node\n  create: 'defs'\n\n  // Inherit from\n, inherit: SVG.Container\n\n})\nSVG.G = SVG.invent({\n  // Initialize node\n  create: 'g'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.transform('x') : this.transform({ x: -this.x() + x }, true)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.transform('y') : this.transform({ y: -this.y() + y }, true)\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.tbox().cx : this.x(x - this.tbox().width / 2)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.tbox().cy : this.y(y - this.tbox().height / 2)\n    }\n  , gbox: function() {\n\n      var bbox  = this.bbox()\n        , trans = this.transform()\n\n      bbox.x  += trans.x\n      bbox.x2 += trans.x\n      bbox.cx += trans.x\n\n      bbox.y  += trans.y\n      bbox.y2 += trans.y\n      bbox.cy += trans.y\n\n      return bbox\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a group element\n    group: function() {\n      return this.put(new SVG.G)\n    }\n  }\n})\n// ### This module adds backward / forward functionality to elements.\n\n//\nSVG.extend(SVG.Element, {\n  // Get all siblings, including myself\n  siblings: function() {\n    return this.parent().children()\n  }\n  // Get the curent position siblings\n, position: function() {\n    return this.parent().index(this)\n  }\n  // Get the next element (will return null if there is none)\n, next: function() {\n    return this.siblings()[this.position() + 1]\n  }\n  // Get the next element (will return null if there is none)\n, previous: function() {\n    return this.siblings()[this.position() - 1]\n  }\n  // Send given element one step forward\n, forward: function() {\n    var i = this.position() + 1\n      , p = this.parent()\n\n    // move node one step forward\n    p.removeElement(this).add(this, i)\n\n    // make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element one step backward\n, backward: function() {\n    var i = this.position()\n\n    if (i > 0)\n      this.parent().removeElement(this).add(this, i - 1)\n\n    return this\n  }\n  // Send given element all the way to the front\n, front: function() {\n    var p = this.parent()\n\n    // Move node forward\n    p.node.appendChild(this.node)\n\n    // Make sure defs node is always at the top\n    if (p instanceof SVG.Doc)\n      p.node.appendChild(p.defs().node)\n\n    return this\n  }\n  // Send given element all the way to the back\n, back: function() {\n    if (this.position() > 0)\n      this.parent().removeElement(this).add(this, 0)\n\n    return this\n  }\n  // Inserts a given element before the targeted element\n, before: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i)\n\n    return this\n  }\n  // Insters a given element after the targeted element\n, after: function(element) {\n    element.remove()\n\n    var i = this.position()\n\n    this.parent().add(element, i + 1)\n\n    return this\n  }\n\n})\nSVG.Mask = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('mask'))\n\n    // keep references to masked elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unmask all masked elements and remove itself\n    remove: function() {\n      // unmask all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unmask()\n      delete this.targets\n\n      // remove mask from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create masking element\n    mask: function() {\n      return this.defs().put(new SVG.Mask)\n    }\n  }\n})\n\n\nSVG.extend(SVG.Element, {\n  // Distribute mask to svg element\n  maskWith: function(element) {\n    // use given mask or create a new one\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\n\n    // store reverence on self in mask\n    this.masker.targets.push(this)\n\n    // apply mask\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\n  }\n  // Unmask element\n, unmask: function() {\n    delete this.masker\n    return this.attr('mask', null)\n  }\n\n})\n\nSVG.ClipPath = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('clipPath'))\n\n    // keep references to clipped elements\n    this.targets = []\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Unclip all clipped elements and remove itself\n    remove: function() {\n      // unclip all targets\n      for (var i = this.targets.length - 1; i >= 0; i--)\n        if (this.targets[i])\n          this.targets[i].unclip()\n      delete this.targets\n\n      // remove clipPath from parent\n      this.parent().removeElement(this)\n\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create clipping element\n    clip: function() {\n      return this.defs().put(new SVG.ClipPath)\n    }\n  }\n})\n\n//\nSVG.extend(SVG.Element, {\n  // Distribute clipPath to svg element\n  clipWith: function(element) {\n    // use given clip or create a new one\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\n\n    // store reverence on self in mask\n    this.clipper.targets.push(this)\n\n    // apply mask\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\n  }\n  // Unclip element\n, unclip: function() {\n    delete this.clipper\n    return this.attr('clip-path', null)\n  }\n\n})\nSVG.Gradient = SVG.invent({\n  // Initialize node\n  create: function(type) {\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\n\n    // store type\n    this.type = type\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add a color stop\n    at: function(offset, color, opacity) {\n      return this.put(new SVG.Stop).update(offset, color, opacity)\n    }\n    // Update gradient\n  , update: function(block) {\n      // remove all stops\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'gradientTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create gradient element in defs\n    gradient: function(type, block) {\n      return this.defs().gradient(type, block)\n    }\n  }\n})\n\n// Add animatable methods to both gradient and fx module\nSVG.extend(SVG.Gradient, SVG.FX, {\n  // From position\n  from: function(x, y) {\n    return (this.target || this).type == 'radial' ?\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\n  }\n  // To position\n, to: function(x, y) {\n    return (this.target || this).type == 'radial' ?\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\n  }\n})\n\n// Base gradient generation\nSVG.extend(SVG.Defs, {\n  // define gradient\n  gradient: function(type, block) {\n    return this.put(new SVG.Gradient(type)).update(block)\n  }\n\n})\n\nSVG.Stop = SVG.invent({\n  // Initialize node\n  create: 'stop'\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add class methods\n, extend: {\n    // add color stops\n    update: function(o) {\n      if (typeof o == 'number' || o instanceof SVG.Number) {\n        o = {\n          offset:  arguments[0]\n        , color:   arguments[1]\n        , opacity: arguments[2]\n        }\n      }\n\n      // set attributes\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\n      if (o.color   != null) this.attr('stop-color', o.color)\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\n\n      return this\n    }\n  }\n\n})\n\nSVG.Pattern = SVG.invent({\n  // Initialize node\n  create: 'pattern'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Return the fill id\n    fill: function() {\n      return 'url(#' + this.id() + ')'\n    }\n    // Update pattern by rebuilding\n  , update: function(block) {\n      // remove content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Alias string convertion to fill\n  , toString: function() {\n      return this.fill()\n    }\n    // custom attr to handle transform\n  , attr: function(a, b, c) {\n      if(a == 'transform') a = 'patternTransform'\n      return SVG.Container.prototype.attr.call(this, a, b, c)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create pattern element in defs\n    pattern: function(width, height, block) {\n      return this.defs().pattern(width, height, block)\n    }\n  }\n})\n\nSVG.extend(SVG.Defs, {\n  // Define gradient\n  pattern: function(width, height, block) {\n    return this.put(new SVG.Pattern).update(block).attr({\n      x:            0\n    , y:            0\n    , width:        width\n    , height:       height\n    , patternUnits: 'userSpaceOnUse'\n    })\n  }\n\n})\nSVG.Doc = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    if (element) {\n      // ensure the presence of a dom element\n      element = typeof element == 'string' ?\n        document.getElementById(element) :\n        element\n\n      // If the target is an svg element, use that element as the main wrapper.\n      // This allows svg.js to work with svg documents as well.\n      if (element.nodeName == 'svg') {\n        this.constructor.call(this, element)\n      } else {\n        this.constructor.call(this, SVG.create('svg'))\n        element.appendChild(this.node)\n      }\n\n      // set svg element attributes and ensure defs node\n      this.namespace().size('100%', '100%').defs()\n    }\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Add namespaces\n    namespace: function() {\n      return this\n        .attr({ xmlns: SVG.ns, version: '1.1' })\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\n    }\n    // Creates and returns defs element\n  , defs: function() {\n      if (!this._defs) {\n        var defs\n\n        // Find or create a defs element in this instance\n        if (defs = this.node.getElementsByTagName('defs')[0])\n          this._defs = SVG.adopt(defs)\n        else\n          this._defs = new SVG.Defs\n\n        // Make sure the defs node is at the end of the stack\n        this.node.appendChild(this._defs.node)\n      }\n\n      return this._defs\n    }\n    // custom parent method\n  , parent: function() {\n      return this.node.parentNode.nodeName == '#document' ? null : this.node.parentNode\n    }\n    // Fix for possible sub-pixel offset. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n  , spof: function(spof) {\n      var pos = this.node.getScreenCTM()\n\n      if (pos)\n        this\n          .style('left', (-pos.e % 1) + 'px')\n          .style('top',  (-pos.f % 1) + 'px')\n\n      return this\n    }\n\n      // Removes the doc from the DOM\n  , remove: function() {\n      if(this.parent()) {\n        this.parent().removeChild(this.node);\n      }\n\n      return this;\n    }\n  }\n\n})\n\nSVG.Shape = SVG.invent({\n  // Initialize node\n  create: function(element) {\n    this.constructor.call(this, element)\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n})\n\nSVG.Bare = SVG.invent({\n  // Initialize\n  create: function(element, inherit) {\n    // construct element\n    this.constructor.call(this, SVG.create(element))\n\n    // inherit custom methods\n    if (inherit)\n      for (var method in inherit.prototype)\n        if (typeof inherit.prototype[method] === 'function')\n          this[method] = inherit.prototype[method]\n  }\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Add methods\n, extend: {\n    // Insert some plain text\n    words: function(text) {\n      // remove contents\n      while (this.node.hasChildNodes())\n        this.node.removeChild(this.node.lastChild)\n\n      // create text node\n      this.node.appendChild(document.createTextNode(text))\n\n      return this\n    }\n  }\n})\n\n\nSVG.extend(SVG.Parent, {\n  // Create an element that is not described by SVG.js\n  element: function(element, inherit) {\n    return this.put(new SVG.Bare(element, inherit))\n  }\n  // Add symbol element\n, symbol: function() {\n    return this.defs().element('symbol', SVG.Container)\n  }\n\n})\nSVG.Use = SVG.invent({\n  // Initialize node\n  create: 'use'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Use element as a reference\n    element: function(element, file) {\n      // Set lined element\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a use element\n    use: function(element, file) {\n      return this.put(new SVG.Use).element(element, file)\n    }\n  }\n})\nSVG.Rect = SVG.invent({\n  // Initialize node\n  create: 'rect'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a rect element\n    rect: function(width, height) {\n      return this.put(new SVG.Rect()).size(width, height)\n    }\n  }\n})\nSVG.Circle = SVG.invent({\n  // Initialize node\n  create: 'circle'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create circle element, based on ellipse\n    circle: function(size) {\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Circle, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('r', rx)\n  }\n  // Alias radius x value\n, ry: function(ry) {\n    return this.rx(ry)\n  }\n})\n\nSVG.Ellipse = SVG.invent({\n  // Initialize node\n  create: 'ellipse'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create an ellipse\n    ellipse: function(width, height) {\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\n    }\n  }\n})\n\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n  // Radius x value\n  rx: function(rx) {\n    return this.attr('rx', rx)\n  }\n  // Radius y value\n, ry: function(ry) {\n    return this.attr('ry', ry)\n  }\n})\n\n// Add common method\nSVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function(x) {\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\n    }\n    // Move over y-axis\n  , y: function(y) {\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\n    }\n    // Move by center over x-axis\n  , cx: function(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x)\n    }\n    // Move by center over y-axis\n  , cy: function(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y)\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\n    }\n    // Custom size function\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this\n        .rx(new SVG.Number(p.width).divide(2))\n        .ry(new SVG.Number(p.height).divide(2))\n    }\n})\nSVG.Line = SVG.invent({\n  // Initialize node\n  create: 'line'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Get array\n    array: function() {\n      return new SVG.PointArray([\n        [ this.attr('x1'), this.attr('y1') ]\n      , [ this.attr('x2'), this.attr('y2') ]\n      ])\n    }\n    // Overwrite native plot() method\n  , plot: function(x1, y1, x2, y2) {\n      if (arguments.length == 4)\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\n      else\n        x1 = new SVG.PointArray(x1).toLine()\n\n      return this.attr(x1)\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr(this.array().move(x, y).toLine())\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this.attr(this.array().size(p.width, p.height).toLine())\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a line element\n    line: function(x1, y1, x2, y2) {\n      return this.put(new SVG.Line).plot(x1, y1, x2, y2)\n    }\n  }\n})\n\nSVG.Polyline = SVG.invent({\n  // Initialize node\n  create: 'polyline'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polyline element\n    polyline: function(p) {\n      return this.put(new SVG.Polyline).plot(p)\n    }\n  }\n})\n\nSVG.Polygon = SVG.invent({\n  // Initialize node\n  create: 'polygon'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add parent method\n, construct: {\n    // Create a wrapped polygon element\n    polygon: function(p) {\n      return this.put(new SVG.Polygon).plot(p)\n    }\n  }\n})\n\n// Add polygon-specific functions\nSVG.extend(SVG.Polyline, SVG.Polygon, {\n  // Get array\n  array: function() {\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\n  }\n  // Plot new path\n, plot: function(p) {\n    return this.attr('points', (this._array = new SVG.PointArray(p)))\n  }\n  // Move by left top corner\n, move: function(x, y) {\n    return this.attr('points', this.array().move(x, y))\n  }\n  // Set element size to given width and height\n, size: function(width, height) {\n    var p = proportionalSize(this.bbox(), width, height)\n\n    return this.attr('points', this.array().size(p.width, p.height))\n  }\n\n})\n// unify all point to point elements\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n  // Define morphable array\n  morphArray:  SVG.PointArray\n  // Move by left top corner over x-axis\n, x: function(x) {\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n  }\n  // Move by left top corner over y-axis\n, y: function(y) {\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n  }\n  // Set width of element\n, width: function(width) {\n    var b = this.bbox()\n\n    return width == null ? b.width : this.size(width, b.height)\n  }\n  // Set height of element\n, height: function(height) {\n    var b = this.bbox()\n\n    return height == null ? b.height : this.size(b.width, height)\n  }\n})\nSVG.Path = SVG.invent({\n  // Initialize node\n  create: 'path'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Define morphable array\n    morphArray:  SVG.PathArray\n    // Get array\n  , array: function() {\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\n    }\n    // Plot new poly points\n  , plot: function(p) {\n      return this.attr('d', (this._array = new SVG.PathArray(p)))\n    }\n    // Move by left top corner\n  , move: function(x, y) {\n      return this.attr('d', this.array().move(x, y))\n    }\n    // Move by left top corner over x-axis\n  , x: function(x) {\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\n    }\n    // Move by left top corner over y-axis\n  , y: function(y) {\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\n    }\n    // Set element size to given width and height\n  , size: function(width, height) {\n      var p = proportionalSize(this.bbox(), width, height)\n\n      return this.attr('d', this.array().size(p.width, p.height))\n    }\n    // Set width of element\n  , width: function(width) {\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\n    }\n    // Set height of element\n  , height: function(height) {\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\n    }\n\n  }\n\n  // Add parent method\n, construct: {\n    // Create a wrapped path element\n    path: function(d) {\n      return this.put(new SVG.Path).plot(d)\n    }\n  }\n})\nSVG.Image = SVG.invent({\n  // Initialize node\n  create: 'image'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // (re)load image\n    load: function(url) {\n      if (!url) return this\n\n      var self = this\n        , img  = document.createElement('img')\n\n      // preload image\n      img.onload = function() {\n        var p = self.parent(SVG.Pattern)\n\n        // ensure image size\n        if (self.width() == 0 && self.height() == 0)\n          self.size(img.width, img.height)\n\n        // ensure pattern size if not set\n        if (p && p.width() == 0 && p.height() == 0)\n          p.size(self.width(), self.height())\n\n        // callback\n        if (typeof self._loaded === 'function')\n          self._loaded.call(self, {\n            width:  img.width\n          , height: img.height\n          , ratio:  img.width / img.height\n          , url:    url\n          })\n      }\n\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\n    }\n    // Add loaded callback\n  , loaded: function(loaded) {\n      this._loaded = loaded\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // create image element, load image and set its size\n    image: function(source, width, height) {\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\n    }\n  }\n\n})\nSVG.Text = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('text'))\n\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\n    this._rebuild = true                      // enable automatic updating of dy values\n    this._build   = false                     // disable build mode for adding multiple lines\n\n    // set default font\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\n  }\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    clone: function(){\n      // clone element and assign new id\n      var clone = assignNewId(this.node.cloneNode(true))\n\n      // insert the clone after myself\n      this.after(clone)\n\n      return clone\n    }\n    // Move over x-axis\n  , x: function(x) {\n      // act as getter\n      if (x == null)\n        return this.attr('x')\n\n      // move lines as well if no textPath is present\n      if (!this.textPath)\n        this.lines().each(function() { if (this.dom.newLined) this.x(x) })\n\n      return this.attr('x', x)\n    }\n    // Move over y-axis\n  , y: function(y) {\n      var oy = this.attr('y')\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\n\n      // act as getter\n      if (y == null)\n        return typeof oy === 'number' ? oy - o : oy\n\n      return this.attr('y', typeof y === 'number' ? y + o : y)\n    }\n    // Move center over x-axis\n  , cx: function(x) {\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\n    }\n    // Move center over y-axis\n  , cy: function(y) {\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\n    }\n    // Set the text content\n  , text: function(text) {\n      // act as getter\n      if (typeof text === 'undefined'){\n        var text = ''\n        var children = this.node.childNodes\n        for(var i = 0, len = children.length; i < len; ++i){\n\n          // add newline if its not the first child and newLined is set to true\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\n            text += '\\n'\n          }\n\n          // add content of this node\n          text += children[i].textContent\n        }\n\n        return text\n      }\n\n      // remove existing content\n      this.clear().build(true)\n\n      if (typeof text === 'function') {\n        // call block\n        text.call(this, this)\n\n      } else {\n        // store text and make sure text is not blank\n        text = text.split('\\n')\n\n        // build new lines\n        for (var i = 0, il = text.length; i < il; i++)\n          this.tspan(text[i]).newLine()\n      }\n\n      // disable build mode and rebuild lines\n      return this.build(false).rebuild()\n    }\n    // Set font size\n  , size: function(size) {\n      return this.attr('font-size', size).rebuild()\n    }\n    // Set / get leading\n  , leading: function(value) {\n      // act as getter\n      if (value == null)\n        return this.dom.leading\n\n      // act as setter\n      this.dom.leading = new SVG.Number(value)\n\n      return this.rebuild()\n    }\n    // Get all the first level lines\n  , lines: function() {\n      // filter tspans and map them to SVG.js instances\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(el){\n        return SVG.adopt(el)\n      })\n\n      // return an instance of SVG.set\n      return new SVG.Set(lines)\n    }\n    // Rebuild appearance type\n  , rebuild: function(rebuild) {\n      // store new rebuild flag if given\n      if (typeof rebuild == 'boolean')\n        this._rebuild = rebuild\n\n      // define position of all lines\n      if (this._rebuild) {\n        var self = this\n\n        this.lines().each(function() {\n          if (this.dom.newLined) {\n            if (!this.textPath)\n              this.attr('x', self.attr('x'))\n\n            this.attr('dy', self.dom.leading * new SVG.Number(self.attr('font-size')))\n          }\n        })\n\n        this.fire('rebuild')\n      }\n\n      return this\n    }\n    // Enable / disable build mode\n  , build: function(build) {\n      this._build = !!build\n      return this\n    }\n    // overwrite method from parent to set data properly\n  , setData: function(o){\n      this.dom = o\n      this.dom.leading = o.leading ? new SVG.Number(o.leading.value, o.leading.unit) : new SVG.Number(1.3)\n      return this\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create text element\n    text: function(text) {\n      return this.put(new SVG.Text).text(text)\n    }\n    // Create plain text element\n  , plain: function(text) {\n      return this.put(new SVG.Text).plain(text)\n    }\n  }\n\n})\n\nSVG.Tspan = SVG.invent({\n  // Initialize node\n  create: 'tspan'\n\n  // Inherit from\n, inherit: SVG.Shape\n\n  // Add class methods\n, extend: {\n    // Set text content\n    text: function(text) {\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\n\n      return this\n    }\n    // Shortcut dx\n  , dx: function(dx) {\n      return this.attr('dx', dx)\n    }\n    // Shortcut dy\n  , dy: function(dy) {\n      return this.attr('dy', dy)\n    }\n    // Create new line\n  , newLine: function() {\n      // fetch text parent\n      var t = this.parent(SVG.Text)\n\n      // mark new line\n      this.dom.newLined = true\n\n      // apply new hy¡n\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\n    }\n  }\n\n})\n\nSVG.extend(SVG.Text, SVG.Tspan, {\n  // Create plain text node\n  plain: function(text) {\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // create text node\n    this.node.appendChild(document.createTextNode(text))\n\n    return this\n  }\n  // Create a tspan\n, tspan: function(text) {\n    var node  = (this.textPath && this.textPath() || this).node\n      , tspan = new SVG.Tspan\n\n    // clear if build mode is disabled\n    if (this._build === false)\n      this.clear()\n\n    // add new tspan\n    node.appendChild(tspan.node)\n\n    return tspan.text(text)\n  }\n  // Clear all lines\n, clear: function() {\n    var node = (this.textPath && this.textPath() || this).node\n\n    // remove existing child nodes\n    while (node.hasChildNodes())\n      node.removeChild(node.lastChild)\n\n    return this\n  }\n  // Get length of text element\n, length: function() {\n    return this.node.getComputedTextLength()\n  }\n})\n\nSVG.TextPath = SVG.invent({\n  // Initialize node\n  create: 'textPath'\n\n  // Inherit from\n, inherit: SVG.Element\n\n  // Define parent class\n, parent: SVG.Text\n\n  // Add parent method\n, construct: {\n    // Create path for text to run on\n    path: function(d) {\n      // create textPath element\n      var path  = new SVG.TextPath\n        , track = this.doc().defs().path(d)\n\n      // move lines to textpath\n      while (this.node.hasChildNodes())\n        path.node.appendChild(this.node.firstChild)\n\n      // add textPath element as child node\n      this.node.appendChild(path.node)\n\n      // link textPath to path and add content\n      path.attr('href', '#' + track, SVG.xlink)\n\n      return this\n    }\n    // Plot path if any\n  , plot: function(d) {\n      var track = this.track()\n\n      if (track)\n        track.plot(d)\n\n      return this\n    }\n    // Get the path track element\n  , track: function() {\n      var path = this.textPath()\n\n      if (path)\n        return path.reference('href')\n    }\n    // Get the textPath child\n  , textPath: function() {\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\n        return SVG.adopt(this.node.firstChild)\n    }\n  }\n})\nSVG.Nested = SVG.invent({\n  // Initialize node\n  create: function() {\n    this.constructor.call(this, SVG.create('svg'))\n\n    this.style('overflow', 'visible')\n  }\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add parent method\n, construct: {\n    // Create nested svg document\n    nested: function() {\n      return this.put(new SVG.Nested)\n    }\n  }\n})\nSVG.A = SVG.invent({\n  // Initialize node\n  create: 'a'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Link url\n    to: function(url) {\n      return this.attr('href', url, SVG.xlink)\n    }\n    // Link show attribute\n  , show: function(target) {\n      return this.attr('show', target, SVG.xlink)\n    }\n    // Link target attribute\n  , target: function(target) {\n      return this.attr('target', target)\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a hyperlink element\n    link: function(url) {\n      return this.put(new SVG.A).to(url)\n    }\n  }\n})\n\nSVG.extend(SVG.Element, {\n  // Create a hyperlink element\n  linkTo: function(url) {\n    var link = new SVG.A\n\n    if (typeof url == 'function')\n      url.call(link, link)\n    else\n      link.to(url)\n\n    return this.parent().put(link).put(this)\n  }\n\n})\nSVG.Marker = SVG.invent({\n  // Initialize node\n  create: 'marker'\n\n  // Inherit from\n, inherit: SVG.Container\n\n  // Add class methods\n, extend: {\n    // Set width of element\n    width: function(width) {\n      return this.attr('markerWidth', width)\n    }\n    // Set height of element\n  , height: function(height) {\n      return this.attr('markerHeight', height)\n    }\n    // Set marker refX and refY\n  , ref: function(x, y) {\n      return this.attr('refX', x).attr('refY', y)\n    }\n    // Update marker\n  , update: function(block) {\n      // remove all content\n      this.clear()\n\n      // invoke passed block\n      if (typeof block == 'function')\n        block.call(this, this)\n\n      return this\n    }\n    // Return the fill id\n  , toString: function() {\n      return 'url(#' + this.id() + ')'\n    }\n  }\n\n  // Add parent method\n, construct: {\n    marker: function(width, height, block) {\n      // Create marker element in defs\n      return this.defs().marker(width, height, block)\n    }\n  }\n\n})\n\nSVG.extend(SVG.Defs, {\n  // Create marker\n  marker: function(width, height, block) {\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n    return this.put(new SVG.Marker)\n      .size(width, height)\n      .ref(width / 2, height / 2)\n      .viewbox(0, 0, width, height)\n      .attr('orient', 'auto')\n      .update(block)\n  }\n\n})\n\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n  // Create and attach markers\n  marker: function(marker, width, height, block) {\n    var attr = ['marker']\n\n    // Build attribute name\n    if (marker != 'all') attr.push(marker)\n    attr = attr.join('-')\n\n    // Set marker attribute\n    marker = arguments[1] instanceof SVG.Marker ?\n      arguments[1] :\n      this.doc().marker(width, height, block)\n\n    return this.attr(attr, marker)\n  }\n\n})\n// Define list of available attributes for stroke and fill\nvar sugar = {\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\n, fill:   ['color', 'opacity', 'rule']\n, prefix: function(t, a) {\n    return a == 'color' ? t : t + '-' + a\n  }\n}\n\n// Add sugar for fill and stroke\n;['fill', 'stroke'].forEach(function(m) {\n  var i, extension = {}\n\n  extension[m] = function(o) {\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\n      this.attr(m, o)\n\n    else\n      // set all attributes from sugar.fill and sugar.stroke list\n      for (i = sugar[m].length - 1; i >= 0; i--)\n        if (o[sugar[m][i]] != null)\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\n\n    return this\n  }\n\n  SVG.extend(SVG.Element, SVG.FX, extension)\n\n})\n\nSVG.extend(SVG.Element, SVG.FX, {\n  // Map rotation to transform\n  rotate: function(d, cx, cy) {\n    return this.transform({ rotation: d, cx: cx, cy: cy })\n  }\n  // Map skew to transform\n, skew: function(x, y, cx, cy) {\n    return this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\n  }\n  // Map scale to transform\n, scale: function(x, y, cx, cy) {\n    return arguments.length == 1  || arguments.length == 3 ?\n      this.transform({ scale: x, cx: y, cy: cx }) :\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\n  }\n  // Map translate to transform\n, translate: function(x, y) {\n    return this.transform({ x: x, y: y })\n  }\n  // Map flip to transform\n, flip: function(a, o) {\n    return this.transform({ flip: a, offset: o })\n  }\n  // Map matrix to transform\n, matrix: function(m) {\n    return this.attr('transform', new SVG.Matrix(m))\n  }\n  // Opacity\n, opacity: function(value) {\n    return this.attr('opacity', value)\n  }\n  // Relative move over x axis\n, dx: function(x) {\n    return this.x((this.target || this).x() + x)\n  }\n  // Relative move over y axis\n, dy: function(y) {\n    return this.y((this.target || this).y() + y)\n  }\n  // Relative move over x and y axes\n, dmove: function(x, y) {\n    return this.dx(x).dy(y)\n  }\n})\n\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n  // Add x and y radius\n  radius: function(x, y) {\n    var type = (this.target || this).type;\n    return type == 'radial' || type == 'circle' ?\n      this.attr({ 'r': new SVG.Number(x) }) :\n      this.rx(x).ry(y == null ? x : y)\n  }\n})\n\nSVG.extend(SVG.Path, {\n  // Get path length\n  length: function() {\n    return this.node.getTotalLength()\n  }\n  // Get point at length\n, pointAt: function(length) {\n    return this.node.getPointAtLength(length)\n  }\n})\n\nSVG.extend(SVG.Parent, SVG.Text, SVG.FX, {\n  // Set font\n  font: function(o) {\n    for (var k in o)\n      k == 'leading' ?\n        this.leading(o[k]) :\n      k == 'anchor' ?\n        this.attr('text-anchor', o[k]) :\n      k == 'size' || k == 'family' || k == 'weight' || k == 'stretch' || k == 'variant' || k == 'style' ?\n        this.attr('font-'+ k, o[k]) :\n        this.attr(k, o[k])\n\n    return this\n  }\n})\n\n\nSVG.Set = SVG.invent({\n  // Initialize\n  create: function(members) {\n    // Set initial state\n    Array.isArray(members) ? this.members = members : this.clear()\n  }\n\n  // Add class methods\n, extend: {\n    // Add element to set\n    add: function() {\n      var i, il, elements = [].slice.call(arguments)\n\n      for (i = 0, il = elements.length; i < il; i++)\n        this.members.push(elements[i])\n\n      return this\n    }\n    // Remove element from set\n  , remove: function(element) {\n      var i = this.index(element)\n\n      // remove given child\n      if (i > -1)\n        this.members.splice(i, 1)\n\n      return this\n    }\n    // Iterate over all members\n  , each: function(block) {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        block.apply(this.members[i], [i, this.members])\n\n      return this\n    }\n    // Restore to defaults\n  , clear: function() {\n      // initialize store\n      this.members = []\n\n      return this\n    }\n    // Get the length of a set\n  , length: function() {\n      return this.members.length\n    }\n    // Checks if a given element is present in set\n  , has: function(element) {\n      return this.index(element) >= 0\n    }\n    // retuns index of given element in set\n  , index: function(element) {\n      return this.members.indexOf(element)\n    }\n    // Get member at given index\n  , get: function(i) {\n      return this.members[i]\n    }\n    // Get first member\n  , first: function() {\n      return this.get(0)\n    }\n    // Get last member\n  , last: function() {\n      return this.get(this.members.length - 1)\n    }\n    // Default value\n  , valueOf: function() {\n      return this.members\n    }\n    // Get the bounding box of all members included or empty box if set has no items\n  , bbox: function(){\n      var box = new SVG.BBox()\n\n      // return an empty box of there are no members\n      if (this.members.length == 0)\n        return box\n\n      // get the first rbox and update the target bbox\n      var rbox = this.members[0].rbox()\n      box.x      = rbox.x\n      box.y      = rbox.y\n      box.width  = rbox.width\n      box.height = rbox.height\n\n      this.each(function() {\n        // user rbox for correct position and visual representation\n        box = box.merge(this.rbox())\n      })\n\n      return box\n    }\n  }\n\n  // Add parent method\n, construct: {\n    // Create a new set\n    set: function(members) {\n      return new SVG.Set(members)\n    }\n  }\n})\n\nSVG.FX.Set = SVG.invent({\n  // Initialize node\n  create: function(set) {\n    // store reference to set\n    this.set = set\n  }\n\n})\n\n// Alias methods\nSVG.Set.inherit = function() {\n  var m\n    , methods = []\n\n  // gather shape methods\n  for(var m in SVG.Shape.prototype)\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply shape aliasses\n  methods.forEach(function(method) {\n    SVG.Set.prototype[method] = function() {\n      for (var i = 0, il = this.members.length; i < il; i++)\n        if (this.members[i] && typeof this.members[i][method] == 'function')\n          this.members[i][method].apply(this.members[i], arguments)\n\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\n    }\n  })\n\n  // clear methods for the next round\n  methods = []\n\n  // gather fx methods\n  for(var m in SVG.FX.prototype)\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\n      methods.push(m)\n\n  // apply fx aliasses\n  methods.forEach(function(method) {\n    SVG.FX.Set.prototype[method] = function() {\n      for (var i = 0, il = this.set.members.length; i < il; i++)\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\n\n      return this\n    }\n  })\n}\n\n\n\n\nSVG.extend(SVG.Element, {\n  // Store data values on svg nodes\n  data: function(a, v, r) {\n    if (typeof a == 'object') {\n      for (v in a)\n        this.data(v, a[v])\n\n    } else if (arguments.length < 2) {\n      try {\n        return JSON.parse(this.attr('data-' + a))\n      } catch(e) {\n        return this.attr('data-' + a)\n      }\n\n    } else {\n      this.attr(\n        'data-' + a\n      , v === null ?\n          null :\n        r === true || typeof v === 'string' || typeof v === 'number' ?\n          v :\n          JSON.stringify(v)\n      )\n    }\n\n    return this\n  }\n})\nSVG.extend(SVG.Element, {\n  // Remember arbitrary data\n  remember: function(k, v) {\n    // remember every item in an object individually\n    if (typeof arguments[0] == 'object')\n      for (var v in k)\n        this.remember(v, k[v])\n\n    // retrieve memory\n    else if (arguments.length == 1)\n      return this.memory()[k]\n\n    // store memory\n    else\n      this.memory()[k] = v\n\n    return this\n  }\n\n  // Erase a given memory\n, forget: function() {\n    if (arguments.length == 0)\n      this._memory = {}\n    else\n      for (var i = arguments.length - 1; i >= 0; i--)\n        delete this.memory()[arguments[i]]\n\n    return this\n  }\n\n  // Initialize or return local memory object\n, memory: function() {\n    return this._memory || (this._memory = {})\n  }\n\n})\n// Method for getting an element by id\nSVG.get = function(id) {\n  var node = document.getElementById(idFromReference(id) || id)\n  return SVG.adopt(node)\n}\n\n// Select elements by query string\nSVG.select = function(query, parent) {\n  return new SVG.Set(\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\n      return SVG.adopt(node)\n    })\n  )\n}\n\nSVG.extend(SVG.Parent, {\n  // Scoped select method\n  select: function(query) {\n    return SVG.select(query, this.node)\n  }\n\n})\n// tests if a given selector matches an element\nfunction matches(el, selector) {\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n}\n\n// Convert dash-separated-string to camelCase\nfunction camelCase(s) {\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\n    return g.toUpperCase()\n  })\n}\n\n// Capitalize first letter of a string\nfunction capitalize(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Ensure to six-based hex\nfunction fullHex(hex) {\n  return hex.length == 4 ?\n    [ '#',\n      hex.substring(1, 2), hex.substring(1, 2)\n    , hex.substring(2, 3), hex.substring(2, 3)\n    , hex.substring(3, 4), hex.substring(3, 4)\n    ].join('') : hex\n}\n\n// Component to hex value\nfunction compToHex(comp) {\n  var hex = comp.toString(16)\n  return hex.length == 1 ? '0' + hex : hex\n}\n\n// Calculate proportional width and height values when necessary\nfunction proportionalSize(box, width, height) {\n  if (height == null)\n    height = box.height / box.width * width\n  else if (width == null)\n    width = box.width / box.height * height\n\n  return {\n    width:  width\n  , height: height\n  }\n}\n\n// Delta transform point\nfunction deltaTransformPoint(matrix, x, y) {\n  return {\n    x: x * matrix.a + y * matrix.c + 0\n  , y: x * matrix.b + y * matrix.d + 0\n  }\n}\n\n// Map matrix array to object\nfunction arrayToMatrix(a) {\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\n}\n\n// Parse matrix if required\nfunction parseMatrix(matrix) {\n  if (!(matrix instanceof SVG.Matrix))\n    matrix = new SVG.Matrix(matrix)\n\n  return matrix\n}\n\n// Add centre point to transform object\nfunction ensureCentre(o, target) {\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\n}\n\n// Convert string to matrix\nfunction stringToMatrix(source) {\n  // remove matrix wrapper and split to individual numbers\n  source = source\n    .replace(SVG.regex.whitespace, '')\n    .replace(SVG.regex.matrix, '')\n    .split(SVG.regex.matrixElements)\n\n  // convert string values to floats and convert to a matrix-formatted object\n  return arrayToMatrix(\n    SVG.utils.map(source, function(n) {\n      return parseFloat(n)\n    })\n  )\n}\n\n// Calculate position according to from and to\nfunction at(o, pos) {\n  // number recalculation (don't bother converting to SVG.Number for performance reasons)\n  return typeof o.from == 'number' ?\n    o.from + (o.to - o.from) * pos :\n\n  // instance recalculation\n  o instanceof SVG.Color || o instanceof SVG.Number || o instanceof SVG.Matrix ? o.at(pos) :\n\n  // for all other values wait until pos has reached 1 to return the final value\n  pos < 1 ? o.from : o.to\n}\n\n// PathArray Helpers\nfunction arrayToString(a) {\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\n    s += a[i][0]\n\n    if (a[i][1] != null) {\n      s += a[i][1]\n\n      if (a[i][2] != null) {\n        s += ' '\n        s += a[i][2]\n\n        if (a[i][3] != null) {\n          s += ' '\n          s += a[i][3]\n          s += ' '\n          s += a[i][4]\n\n          if (a[i][5] != null) {\n            s += ' '\n            s += a[i][5]\n            s += ' '\n            s += a[i][6]\n\n            if (a[i][7] != null) {\n              s += ' '\n              s += a[i][7]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return s + ' '\n}\n\n// Deep new id assignment\nfunction assignNewId(node) {\n  // do the same for SVG child nodes as well\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\n    if (node.childNodes[i] instanceof SVGElement)\n      assignNewId(node.childNodes[i])\n\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\n}\n\n// Add more bounding box properties\nfunction fullBox(b) {\n  if (b.x == null) {\n    b.x      = 0\n    b.y      = 0\n    b.width  = 0\n    b.height = 0\n  }\n\n  b.w  = b.width\n  b.h  = b.height\n  b.x2 = b.x + b.width\n  b.y2 = b.y + b.height\n  b.cx = b.x + b.width / 2\n  b.cy = b.y + b.height / 2\n\n  return b\n}\n\n// Get id from reference string\nfunction idFromReference(url) {\n  var m = url.toString().match(SVG.regex.reference)\n\n  if (m) return m[1]\n}\n\n// Create matrix array for looping\nvar abcdef = 'abcdef'.split('')\n// Add CustomEvent to IE9 and IE10\nif (typeof CustomEvent !== 'function') {\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n  var CustomEvent = function(event, options) {\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\n    var e = document.createEvent('CustomEvent')\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\n    return e\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n}\n\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n(function(w) {\n  var lastTime = 0\n  var vendors = ['moz', 'webkit']\n\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\n  }\n\n  w.requestAnimationFrame = w.requestAnimationFrame ||\n    function(callback) {\n      var currTime = new Date().getTime()\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\n\n      var id = w.setTimeout(function() {\n        callback(currTime + timeToCall)\n      }, timeToCall)\n\n      lastTime = currTime + timeToCall\n      return id\n    }\n\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n\n}(window))\n\nreturn SVG\n\n}));","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require(\"regenerator-runtime\");\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(\"@protobufjs/aspromise\"),\r\n    inquire   = require(\"@protobufjs/inquire\");\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","// full library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index\");\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {INamespace} google/protobuf/any.proto Any\r\n * @property {INamespace} google/protobuf/duration.proto Duration\r\n * @property {INamespace} google/protobuf/empty.proto Empty\r\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\r\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\r\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Any message.\r\n     * @interface IAny\r\n     * @type {Object}\r\n     * @property {string} [typeUrl]\r\n     * @property {Uint8Array} [bytes]\r\n     * @memberof common\r\n     */\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Duration message.\r\n     * @interface IDuration\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Timestamp message.\r\n     * @interface ITimestamp\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Empty message.\r\n     * @interface IEmpty\r\n     * @memberof common\r\n     */\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Struct message.\r\n     * @interface IStruct\r\n     * @type {Object}\r\n     * @property {Object.<string,IValue>} [fields]\r\n     * @memberof common\r\n     */\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Value message.\r\n     * @interface IValue\r\n     * @type {Object}\r\n     * @property {string} [kind]\r\n     * @property {0} [nullValue]\r\n     * @property {number} [numberValue]\r\n     * @property {string} [stringValue]\r\n     * @property {boolean} [boolValue]\r\n     * @property {IStruct} [structValue]\r\n     * @property {IListValue} [listValue]\r\n     * @memberof common\r\n     */\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.ListValue message.\r\n     * @interface IListValue\r\n     * @type {Object}\r\n     * @property {Array.<IValue>} [values]\r\n     * @memberof common\r\n     */\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.DoubleValue message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FloatValue message.\r\n     * @interface IFloatValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int64Value message.\r\n     * @interface IInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt64Value message.\r\n     * @interface IUInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int32Value message.\r\n     * @interface IInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt32Value message.\r\n     * @interface IUInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BoolValue message.\r\n     * @interface IBoolValue\r\n     * @type {Object}\r\n     * @property {boolean} [value]\r\n     * @memberof common\r\n     */\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.StringValue message.\r\n     * @interface IStringValue\r\n     * @type {Object}\r\n     * @property {string} [value]\r\n     * @memberof common\r\n     */\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BytesValue message.\r\n     * @interface IBytesValue\r\n     * @type {Object}\r\n     * @property {Uint8Array} [value]\r\n     * @memberof common\r\n     */\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"field_mask\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FieldMask message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FieldMask: {\r\n        fields: {\r\n            paths: {\r\n                rule: \"repeated\",\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Gets the root definition of the specified common proto file.\r\n *\r\n * Bundled definitions are:\r\n * - google/protobuf/any.proto\r\n * - google/protobuf/duration.proto\r\n * - google/protobuf/empty.proto\r\n * - google/protobuf/field_mask.proto\r\n * - google/protobuf/struct.proto\r\n * - google/protobuf/timestamp.proto\r\n * - google/protobuf/wrappers.proto\r\n *\r\n * @param {string} file Proto file name\r\n * @returns {INamespace|null} Root definition or `null` if not defined\r\n */\r\ncommon.get = function get(file) {\r\n    return common[file] || null;\r\n};\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(\"./enum\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) {\r\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\r\n                gen\r\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\r\n        (\"else{\")\r\n            (\"d%s=%s\", prop, arrayDefault)\r\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\r\n        (\"}\");\r\n            } else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(\"./enum\"),\r\n    types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(\"./enum\"),\r\n    types    = require(\"./types\"),\r\n    util     = require(\"./util\");\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(\"./namespace\"),\r\n    util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(\"./enum\"),\r\n    types = require(\"./types\"),\r\n    util  = require(\"./util\");\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-minimal\");\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(\"./encoder\");\r\nprotobuf.decoder          = require(\"./decoder\");\r\nprotobuf.verifier         = require(\"./verifier\");\r\nprotobuf.converter        = require(\"./converter\");\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(\"./object\");\r\nprotobuf.Namespace        = require(\"./namespace\");\r\nprotobuf.Root             = require(\"./root\");\r\nprotobuf.Enum             = require(\"./enum\");\r\nprotobuf.Type             = require(\"./type\");\r\nprotobuf.Field            = require(\"./field\");\r\nprotobuf.OneOf            = require(\"./oneof\");\r\nprotobuf.MapField         = require(\"./mapfield\");\r\nprotobuf.Service          = require(\"./service\");\r\nprotobuf.Method           = require(\"./method\");\r\n\r\n// Runtime\r\nprotobuf.Message          = require(\"./message\");\r\nprotobuf.wrappers         = require(\"./wrappers\");\r\n\r\n// Utility\r\nprotobuf.types            = require(\"./types\");\r\nprotobuf.util             = require(\"./util\");\r\n\r\n// Set up possibly cyclic reflection dependencies\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(\"./index-light\");\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(\"./tokenize\");\r\nprotobuf.parse            = require(\"./parse\");\r\nprotobuf.common           = require(\"./common\");\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(\"./field\");\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(\"./types\"),\r\n    util    = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object = object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n\r\n    /**\r\n     * Comment for this method\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options,\r\n        \"comment\"        , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Field    = require(\"./field\"),\r\n    util     = require(\"./util\");\r\n\r\nvar Type,    // cyclic\r\n    Service,\r\n    Enum;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array, toJSONOptions) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum: \" + name);\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type: \" + path);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nNamespace._configure = function(Type_, Service_, Enum_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n    Enum    = Enum_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(\"./object\");\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(\"./field\"),\r\n    util  = require(\"./util\");\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction OneOf(name, fieldNames, options, comment) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(\"./tokenize\"),\r\n    Root      = require(\"./root\"),\r\n    Type      = require(\"./type\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Enum      = require(\"./enum\"),\r\n    Service   = require(\"./service\"),\r\n    Method    = require(\"./method\"),\r\n    types     = require(\"./types\"),\r\n    util      = require(\"./util\");\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source, options.alternateCommentMode || false),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line;\r\n        if (obj) {\r\n            obj.comment = cmnt(); // try block-type comment\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && typeof obj.comment !== \"string\")\r\n                obj.comment = cmnt(trailingLine); // try line-type comment if no block\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n          switch(token) {\r\n            case \"option\":\r\n              parseOption(enm, token);\r\n              skip(\";\");\r\n              break;\r\n\r\n            case \"reserved\":\r\n              readRanges(enm.reserved || (enm.reserved = []), true);\r\n              break;\r\n\r\n            default:\r\n              parseEnumValue(enm, token);\r\n          }\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            do {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    if (peek() === \"{\")\r\n                        parseOptionValue(parent, name + \".\" + token);\r\n                    else\r\n                        setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n                skip(\",\", true);\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                case \"optional\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(\"./field\"),\r\n    Enum    = require(\"./enum\"),\r\n    OneOf   = require(\"./oneof\"),\r\n    util    = require(\"./util\");\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(\"./method\"),\r\n    util   = require(\"./util\"),\r\n    rpc    = require(\"./rpc\");\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    service.comment = json.comment;\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentAltRe = /^\\s*\\*?\\/*/,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @memberof tokenize\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\r\n\r\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {string|null} Comment text or `null` if none\r\n */\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n * @property {number} line Current line number\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source, alternateCommentMode) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0,\r\n        commentLineEmpty = false;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentLineEmpty = false;\r\n        var lookback;\r\n        if (alternateCommentMode) {\r\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\r\n        } else {\r\n            lookback = 3;  // \"///\" or \"/**\"\r\n        }\r\n        var commentOffset = start - lookback,\r\n            c;\r\n        do {\r\n            if (--commentOffset < 0 ||\r\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\r\n                commentLineEmpty = true;\r\n                break;\r\n            }\r\n        } while (c === \" \" || c === \"\\t\");\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i]\r\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\r\n                .trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    function isDoubleSlashCommentLine(startOffset) {\r\n        var endOffset = findEndOfLine(startOffset);\r\n\r\n        // see if remaining line matches comment pattern\r\n        var lineText = source.substring(startOffset, endOffset);\r\n        // look for 1 or 2 slashes since startOffset would already point past\r\n        // the first slash that started the comment.\r\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\r\n        return isComment;\r\n    }\r\n\r\n    function findEndOfLine(cursor) {\r\n        // find end of cursor's line\r\n        var endOffset = cursor;\r\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\r\n            endOffset++;\r\n        }\r\n        return endOffset;\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {string|null} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isDoc;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length) {\r\n                    throw illegal(\"comment\");\r\n                }\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    if (!alternateCommentMode) {\r\n                        // check for triple-slash comment\r\n                        isDoc = charAt(start = offset + 1) === \"/\";\r\n\r\n                        while (charAt(++offset) !== \"\\n\") {\r\n                            if (offset === length) {\r\n                                return null;\r\n                            }\r\n                        }\r\n                        ++offset;\r\n                        if (isDoc) {\r\n                            setComment(start, offset - 1);\r\n                        }\r\n                        ++line;\r\n                        repeat = true;\r\n                    } else {\r\n                        // check for double-slash comments, consolidating consecutive lines\r\n                        start = offset;\r\n                        isDoc = false;\r\n                        if (isDoubleSlashCommentLine(offset)) {\r\n                            isDoc = true;\r\n                            do {\r\n                                offset = findEndOfLine(offset);\r\n                                if (offset === length) {\r\n                                    break;\r\n                                }\r\n                                offset++;\r\n                            } while (isDoubleSlashCommentLine(offset));\r\n                        } else {\r\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\r\n                        }\r\n                        if (isDoc) {\r\n                            setComment(start, offset);\r\n                        }\r\n                        line++;\r\n                        repeat = true;\r\n                    }\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\r\n                    start = offset + 1;\r\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\") {\r\n                            ++line;\r\n                        }\r\n                        if (++offset === length) {\r\n                            throw illegal(\"comment\");\r\n                        }\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isDoc) {\r\n                        setComment(start, offset - 2);\r\n                    }\r\n                    repeat = true;\r\n                } else {\r\n                    return \"/\";\r\n                }\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {string|null} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\r\n     * @returns {string|null} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret = null;\r\n        if (trailingLine === undefined) {\r\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\r\n                ret = commentText;\r\n            }\r\n        } else {\r\n            /* istanbul ignore else */\r\n            if (commentLine < trailingLine) {\r\n                peek();\r\n            }\r\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\r\n                ret = commentText;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    return Object.defineProperty({\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        cmnt: cmnt\r\n    }, \"line\", {\r\n        get: function() { return line; }\r\n    });\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(\"./namespace\");\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    OneOf     = require(\"./oneof\"),\r\n    Field     = require(\"./field\"),\r\n    MapField  = require(\"./mapfield\"),\r\n    Service   = require(\"./service\"),\r\n    Message   = require(\"./message\"),\r\n    Reader    = require(\"./reader\"),\r\n    Writer    = require(\"./writer\"),\r\n    util      = require(\"./util\"),\r\n    encoder   = require(\"./encoder\"),\r\n    decoder   = require(\"./decoder\"),\r\n    verifier  = require(\"./verifier\"),\r\n    converter = require(\"./converter\"),\r\n    wrappers  = require(\"./wrappers\");\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    if (json.comment)\r\n        type.comment = json.comment;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined,\r\n        \"comment\"    , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(\"./util\");\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(\"./util/minimal\");\r\n\r\nvar roots = require(\"./roots\");\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(\"@protobufjs/codegen\");\r\nutil.fetch   = require(\"@protobufjs/fetch\");\r\nutil.path    = require(\"@protobufjs/path\");\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(\"./type\");\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(\"./enum\");\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(\"./root\"))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(\"./enum\"),\r\n    util      = require(\"./util\");\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else {\r\n            gen\r\n            (\"{\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"}\");\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(\"./message\");\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create({\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if (typeof exports != 'undefined' && !exports.nodeType) {\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define == 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqczYvYmxvYl90b19idWZmZXIuanMiLCJqczYvY29ubi5qcyIsImpzNi9jb25zdHMuanMiLCJqczYvZ2FtZS5qcyIsImpzNi9tYWluLmpzIiwianM2L21hcC5qcyIsImpzNi90ZXN0LmpzIiwianM2L3ZpZXcuanMiLCJsaWJzL3N2Zy5qcy9zdmcuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYXNwcm9taXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2Jhc2U2NC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9jb2RlZ2VuL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2V2ZW50ZW1pdHRlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9mZXRjaC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9mbG9hdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9pbnF1aXJlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL3BhdGgvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcG9vbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy91dGY4L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9jb21tb24uanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvY29udmVydGVyLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2RlY29kZXIuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvZW5jb2Rlci5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9lbnVtLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2ZpZWxkLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LWxpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LW1pbmltYWwuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWFwZmllbGQuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWVzc2FnZS5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9tZXRob2QuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbmFtZXNwYWNlLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL29iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9vbmVvZi5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9wYXJzZS5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXIuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyX2J1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290LmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3Jvb3RzLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JwYy5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9ycGMvc2VydmljZS5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9zZXJ2aWNlLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3Rva2VuaXplLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3R5cGUuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdHlwZXMuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL2xvbmdiaXRzLmpzIiwibm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3V0aWwvbWluaW1hbC5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy92ZXJpZmllci5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy93cmFwcGVycy5qcyIsIm5vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy93cml0ZXIuanMiLCJub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvc2VlZHJhbmRvbS9saWIveG9yMTI4LmpzIiwibm9kZV9tb2R1bGVzL3VuZGVyc2NvcmUvdW5kZXJzY29yZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBUyxZQUFULENBQXNCLElBQXRCLEVBQTRCLEVBQTVCLEVBQWdDO0FBQy9DLE1BQUcsSUFBSSxJQUFJLFNBQVgsRUFBc0I7QUFDcEIsV0FBTyxFQUFFLENBQUMsSUFBSSxVQUFKLEVBQUQsQ0FBVDtBQUNEOztBQUNELE1BQU0sVUFBVSxHQUFHLElBQUksVUFBSixFQUFuQjs7QUFDQSxFQUFBLFVBQVUsQ0FBQyxTQUFYLEdBQXdCLFVBQVMsS0FBVCxFQUFnQjtBQUN0QyxRQUFNLGFBQWEsR0FBRyxJQUFJLFVBQUosQ0FBZSxLQUFLLENBQUMsTUFBTixDQUFhLE1BQTVCLENBQXRCO0FBQ0EsSUFBQSxFQUFFLENBQUMsYUFBRCxDQUFGO0FBQ0QsR0FIRDs7QUFJQSxFQUFBLFVBQVUsQ0FBQyxpQkFBWCxDQUE2QixJQUE3QjtBQUNELENBVkQ7Ozs7Ozs7Ozs7O2VDQ2dCLE9BQU8sQ0FBQyxRQUFELEM7SUFBaEIsQyxZQUFBLEM7SUFBRSxDLFlBQUEsQztJQUFFLEMsWUFBQSxDOztBQUVYLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxnQkFBRCxDQUE1Qjs7QUFDQSxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBRCxDQUF4QixDLENBQ0E7OztBQUNBLElBQU0sU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFGLENBQU0sOEZBQU4sRUFBc0csSUFBdEcsQ0FBMkcsVUFBQSxTQUFTLEVBQUk7QUFDeEksU0FBTyxRQUFRLENBQUMsS0FBVCxDQUFlLFNBQWYsRUFBMEIsSUFBMUIsQ0FBK0IsTUFBL0IsQ0FBc0MsVUFBdEMsQ0FBUDtBQUNELENBRmlCLENBQWxCO0FBSUEsSUFBTSxNQUFNLEdBQUc7QUFDYixFQUFBLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFERDtBQUViLEVBQUEsU0FBUyxFQUFFLENBQUMsQ0FBQyxLQUZBO0FBR2IsRUFBQSxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBSEE7QUFJYixFQUFBLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFKRSxDQUFmOztBQU9BLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFVBQVMsRUFBVCxFQUFhLEdBQWIsRUFBaUI7QUFDaEMsTUFBSSxLQUFLLEdBQUc7QUFDVixJQUFBLEtBQUssRUFBRSxFQURHO0FBRVYsSUFBQSxNQUFNLEVBQUUsRUFGRTtBQUdWLElBQUEsT0FBTyxFQUFFO0FBSEMsR0FBWjtBQUtBLE1BQU0sRUFBRSxHQUFHLElBQUksU0FBSixDQUFjLEdBQWQsQ0FBWDtBQUNBLEVBQUEsRUFBRSxDQUFDLE1BQUg7QUFBQTtBQUFBO0FBQUE7QUFBQSwrQkFBWTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDSixZQUFBLElBREksR0FDRyxJQUFJLElBQUosQ0FBUyxHQUFHLENBQUMsS0FBRCxDQUFILENBQVcsSUFBcEIsQ0FESDtBQUVWLFlBQUEsTUFBTSxDQUFDLElBQVAsR0FBYyxJQUFkO0FBRlU7QUFBQSxtQkFHYSxTQUhiOztBQUFBO0FBR0osWUFBQSxRQUhJO0FBSU4sWUFBQSxNQUpNLEdBSUcsQ0FKSDtBQUtOLFlBQUEsTUFMTSxHQUtHLENBTEg7O0FBTVYsWUFBQSxFQUFFLENBQUMsU0FBSCxHQUFlLFVBQUMsS0FBRCxFQUFXO0FBQ3hCLGtCQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQXFCO0FBQy9CLGdCQUFBLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBUCxFQUFhLE9BQWIsQ0FBWjtBQUNELGVBRkQsRUFFRyxJQUZILENBRVEsVUFBQSxNQUFNLEVBQUk7QUFDaEIsb0JBQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFULENBQWdCLE1BQWhCLEVBQXdCLFFBQW5DO0FBQ0Esb0JBQU0sS0FBSyxHQUFHLElBQUksSUFBSixFQUFkOztBQUNBLHFCQUFJLElBQUksQ0FBQyxHQUFDLENBQVYsRUFBWSxDQUFDLEdBQUMsRUFBRSxDQUFDLE1BQWpCLEVBQXdCLENBQUMsRUFBekIsRUFBNEI7QUFDMUIsc0JBQUk7QUFDSixvQkFBQSxJQUFJLENBQUMsY0FBTCxDQUFvQixFQUFFLENBQUMsQ0FBRCxDQUF0QjtBQUNDLG1CQUZELENBRUUsT0FBTSxHQUFOLEVBQVc7QUFBQyxvQkFBQSxPQUFPLENBQUMsR0FBUixDQUFZLEdBQVo7QUFBa0I7QUFDakM7O0FBQ0Qsb0JBQU0sS0FBSyxHQUFHLElBQUksSUFBSixFQUFkOztBQUNBLG9CQUFHLE1BQU0sSUFBSSxhQUFiLEVBQTRCO0FBQzFCLGtCQUFBLFlBQVksQ0FBQyxNQUFELENBQVo7QUFDQSxrQkFBQSxNQUFNLEdBQUcsVUFBVSxDQUFDLFlBQU07QUFDeEIsb0JBQUEsTUFBTSxHQUFHLGFBQVQ7QUFDQSxvQkFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFdBQVo7QUFDQSx3QkFBTSxJQUFJLEdBQUcsSUFBSSxJQUFKLENBQVMsQ0FBQyxDQUFDLE9BQUQsQ0FBRCxDQUFXLENBQVgsQ0FBVCxFQUF1QixJQUF2QixDQUFiO0FBQ0Esb0JBQUEsTUFBTSxDQUFDLElBQVAsR0FBYyxJQUFkO0FBQ0Esb0JBQUEsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVLEVBQVYsQ0FBYSxTQUFiLEVBQXdCLFVBQUMsQ0FBRCxFQUFPO0FBQzdCLDBCQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUgsQ0FBbEI7O0FBQ0EsMEJBQUcsR0FBRyxJQUFJLFNBQVYsRUFBcUI7QUFDbkIsd0JBQUEsRUFBRSxDQUFDLElBQUgsQ0FBUSxJQUFJLFVBQUosQ0FBZSxDQUFDLEdBQUQsQ0FBZixDQUFSO0FBQ0Q7QUFDRixxQkFMRDtBQU1ELG1CQVhrQixFQVdoQixHQVhnQixDQUFuQjtBQVlEO0FBQ0YsZUExQkQ7QUEyQkQsYUE1QkQ7O0FBTlU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBWjtBQXFDQSxTQUFPLEVBQVA7QUFDRCxDQTdDRDs7Ozs7QUNwQkEsSUFBSSxNQUFNLEdBQUksQ0FBZDtBQUNBLElBQUksT0FBTyxHQUFHLENBQWQ7QUFDQSxJQUFJLE1BQU0sR0FBSSxDQUFkO0FBQ0EsSUFBSSxPQUFPLEdBQUcsQ0FBZDtBQUNBLElBQUksT0FBTyxHQUFHLENBQWQ7QUFDQSxJQUFJLFNBQVMsR0FBRyxDQUFoQjtBQUVBLElBQUksUUFBUSxHQUFHLENBQWY7QUFDQSxJQUFJLFFBQVEsR0FBRyxDQUFmO0FBQ0EsT0FBTyxDQUFDLENBQVIsR0FBWTtBQUNWLEVBQUEsSUFBSSxFQUFLLENBREM7QUFFVixFQUFBLEtBQUssRUFBSSxDQUZDO0FBR1YsRUFBQSxJQUFJLEVBQUssQ0FIQztBQUlWLEVBQUEsS0FBSyxFQUFJLENBSkM7QUFLVixFQUFBLEtBQUssRUFBSSxDQUxDO0FBTVYsRUFBQSxPQUFPLEVBQUUsQ0FOQztBQU9WLEVBQUEsT0FBTyxFQUFFO0FBUEMsQ0FBWjtBQVNBLE9BQU8sQ0FBQyxDQUFSLEdBQVk7QUFDVixFQUFBLEtBQUssRUFBRSxDQURHO0FBRVYsRUFBQSxLQUFLLEVBQUUsQ0FGRztBQUdWLEVBQUEsSUFBSSxFQUFHLENBSEc7QUFJVixFQUFBLEtBQUssRUFBRTtBQUpHLENBQVo7QUFNQSxPQUFPLENBQUMsQ0FBUixHQUFZO0FBQ1YsRUFBQSxjQURVLGdDQUNXLENBRFgsRUFDYTtBQUFBLFFBQVAsQ0FBTyxRQUFQLENBQU87QUFBQSxRQUFMLENBQUssUUFBTCxDQUFLOztBQUNyQixZQUFPLENBQVA7QUFDRSxXQUFLLE9BQUw7QUFBYyxRQUFBLENBQUMsSUFBRSxDQUFIO0FBQU07O0FBQ3BCLFdBQUssT0FBTDtBQUFjLFFBQUEsQ0FBQyxJQUFFLENBQUg7QUFBTTs7QUFDcEIsV0FBSyxNQUFMO0FBQWEsUUFBQSxDQUFDLElBQUUsQ0FBSDtBQUFNOztBQUNuQixXQUFLLE1BQUw7QUFBYSxRQUFBLENBQUMsSUFBRSxDQUFIO0FBQU07O0FBQ25CO0FBQVM7QUFMWDs7QUFPQSxXQUFPO0FBQUMsTUFBQSxDQUFDLEVBQUQsQ0FBRDtBQUFHLE1BQUEsQ0FBQyxFQUFEO0FBQUgsS0FBUDtBQUNELEdBVlM7QUFXVixFQUFBLFFBWFUsb0JBV0QsQ0FYQyxFQVdDO0FBQ1QsV0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFELENBQUYsRUFBTSxDQUFDLENBQUMsTUFBRixDQUFTLEVBQVQsRUFBWSxDQUFDLENBQUMsQ0FBRCxDQUFiLENBQU4sQ0FBUDtBQUNEO0FBYlMsQ0FBWjs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUN4QmdCLE9BQU8sQ0FBQyxRQUFELEM7SUFBaEIsQyxZQUFBLEM7SUFBRSxDLFlBQUEsQztJQUFFLEMsWUFBQSxDOztnQkFDWSxPQUFPLENBQUMsUUFBRCxDO0lBQXZCLFksYUFBQSxZOztBQUNQLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyx1QkFBRCxDQUF0Qjs7QUFDQSxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsWUFBRCxDQUFqQjs7QUFDQSxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBQ0EsTUFBTSxDQUFDLE9BQVA7QUFBQTtBQUFBO0FBQUE7O0FBQ0UsZ0JBQVksSUFBWixFQUFpQjtBQUFBOztBQUFBO0FBQ2Y7QUFDQSxRQUFHLElBQUksQ0FBQyxPQUFMLElBQWdCLENBQW5CLEVBQ0UsTUFBTSxlQUFOO0FBQ0YsV0FBSyxJQUFMLEdBQVksSUFBWjtBQUNBLFFBQU0sVUFBVSxHQUFHLElBQUksR0FBSixFQUFuQjtBQUNBLFFBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxFQUFELEVBQUs7QUFBQyxNQUFBLEtBQUssRUFBRSxJQUFJLENBQUM7QUFBYixLQUFMLENBQXJCOztBQUNBLElBQUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFJLENBQUMsTUFBWixFQUFvQixVQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWtCO0FBQ3BDLFVBQUcsS0FBSCxFQUFTO0FBQ1AsUUFBQSxVQUFVLENBQUMsR0FBWCxDQUFlLEtBQUssQ0FBQyxJQUFyQixFQUEyQixLQUEzQjtBQUNEO0FBQ0YsS0FKRDs7QUFLQSxXQUFLLEtBQUwsR0FBYTtBQUNYLE1BQUEsVUFBVSxFQUFWLFVBRFc7QUFFWCxNQUFBLE1BQU0sRUFBTixNQUZXO0FBR1g7QUFDQSxNQUFBLElBQUksRUFBRTtBQUpLLEtBQWI7QUFaZTtBQWtCaEI7O0FBbkJIO0FBQUE7QUFBQSwyQkFvQlE7QUFDSixVQUFNLEtBQUssR0FBRyxJQUFkOztBQUNBLFVBQUksSUFBSSxHQUFHLEtBQUssSUFBaEI7QUFDQSxNQUFBLElBQUksQ0FBQyxNQUFMLENBQVksT0FBWixDQUFvQixVQUFTLEtBQVQsRUFBZTtBQUNqQyxZQUFHLEtBQUssS0FBSyxTQUFiLEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBQ0QsWUFBRyxFQUFFLEtBQUssQ0FBQyxJQUFSLEtBQWlCLENBQXBCLEVBQXNCO0FBQ3BCO0FBQ0Q7O0FBQ0QsUUFBQSxLQUFLLENBQUMsSUFBTixHQUFhLENBQWIsQ0FQaUMsQ0FPakI7O0FBQ2hCLFlBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFmOztBQUNBLFlBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFOLENBQWEsS0FBSyxDQUFDLElBQW5CLENBQVQ7O0FBQ0EsWUFBRyxFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBTixJQUFXLENBQUMsQ0FBQyxLQUFoQixFQUFzQjtBQUNwQjtBQUNEOztBQUNELFlBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxjQUFGLENBQWlCLEVBQWpCLEVBQW9CLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUExQixDQUFUOztBQUNBLFlBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFOLENBQWEsRUFBYixDQUFUOztBQUNBLGdCQUFPLEVBQUUsQ0FBQyxDQUFELENBQVQ7QUFDQSxlQUFLLENBQUMsQ0FBQyxJQUFQO0FBQ0UsWUFBQSxLQUFLLENBQUMsTUFBTixJQUFnQixFQUFFLENBQUMsQ0FBRCxDQUFGLENBQU0sQ0FBdEI7O0FBQ0EsWUFBQSxLQUFLLENBQUMsTUFBTixDQUFhLEVBQWIsRUFBZ0IsQ0FBRSxDQUFDLENBQUMsS0FBSixFQUFXLEVBQVgsQ0FBaEIsRUFGRixDQUdFOzs7QUFDQSxnQkFBRyxLQUFLLENBQUMsS0FBTixDQUFZLElBQVosSUFBa0IsQ0FBckIsRUFBd0I7QUFDdEIsY0FBQSxLQUFLLENBQUMsTUFBTixDQUFhLEtBQUssQ0FBQyxrQkFBTixFQUFiLEVBQXlDLENBQUUsQ0FBQyxDQUFDLElBQUosRUFBVTtBQUFDLGdCQUFBLENBQUMsRUFBRTtBQUFKLGVBQVYsQ0FBekM7QUFDRCxhQUZELE1BRU87QUFDTCxjQUFBLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBWjtBQUNEOztBQUNILGVBQUssQ0FBQyxDQUFDLEtBQVA7QUFDRSxZQUFBLEtBQUssQ0FBQyxNQUFOLENBQWEsRUFBYixFQUFnQixDQUFFLENBQUMsQ0FBQyxLQUFKLEVBQVc7QUFDekIsY0FBQSxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBRGlCO0FBRXpCLGNBQUEsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFOLEdBQVUsQ0FBQyxDQUFDLE9BRlc7QUFHekIsY0FBQSxDQUFDLEVBQUMsS0FBSyxDQUFDO0FBSGlCLGFBQVgsQ0FBaEI7O0FBS0EsWUFBQSxLQUFLLENBQUMsSUFBTixHQUFhLEVBQWI7O0FBQ0EsZ0JBQUcsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFsQixFQUFvQjtBQUNsQixjQUFBLEtBQUssQ0FBQyxNQUFOO0FBQ0EsY0FBQSxLQUFLLENBQUMsTUFBTjtBQUNBO0FBQ0Q7O0FBQ0QsWUFBQSxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQVg7QUFDQSxZQUFBLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTixDQUFhLEVBQWIsQ0FBTDtBQUNBLFlBQUEsRUFBRSxHQUFHLENBQUMsQ0FBQyxjQUFGLENBQWlCLEVBQWpCLEVBQXFCLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUEzQixDQUFMO0FBQ0EsWUFBQSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU4sQ0FBYSxFQUFiLENBQUw7QUFDQSxZQUFBLEtBQUssQ0FBQyxJQUFOLEdBQWEsRUFBYjs7QUFDQSxZQUFBLEtBQUssQ0FBQyxNQUFOLENBQWEsRUFBYixFQUFnQixDQUFFLENBQUMsQ0FBQyxLQUFKLEVBQVcsRUFBWCxDQUFoQjs7QUFDQTs7QUFDRixlQUFLLENBQUMsQ0FBQyxLQUFQO0FBQ0EsZUFBSyxDQUFDLENBQUMsS0FBUDtBQUNFLFlBQUEsWUFBWSxDQUFDLEtBQUQsRUFBTyxLQUFQLENBQVo7O0FBREYsd0NBRWlCLEtBQUssQ0FBQyxrQkFBTixFQUZqQjtBQUFBLGdCQUVTLENBRlQseUJBRVMsQ0FGVDtBQUFBLGdCQUVZLENBRloseUJBRVksQ0FGWjs7QUFHRSxZQUFBLEtBQUssQ0FBQyxJQUFOLENBQVc7QUFBQyxjQUFBLENBQUMsRUFBRCxDQUFEO0FBQUksY0FBQSxDQUFDLEVBQUQsQ0FBSjtBQUFPLGNBQUEsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFuQjtBQUF5QixjQUFBLE1BQU0sRUFBRTtBQUFqQyxhQUFYOztBQUNBO0FBbENGO0FBb0NELE9BbkREO0FBb0REO0FBM0VIO0FBQUE7QUFBQSx5Q0E0RXVCO0FBQ25CLGFBQU0sSUFBTixFQUFZO0FBQ1YsWUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssS0FBTCxDQUFXLE1BQVosRUFBb0IsS0FBSyxJQUFMLENBQVUsS0FBVixHQUFrQixLQUFLLElBQUwsQ0FBVSxNQUFoRCxDQUFyQjs7QUFDQSxZQUFHLEtBQUssSUFBTCxDQUFVLElBQVYsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEtBQXdCLENBQUMsQ0FBQyxLQUE3QixFQUFvQztBQUFFLGlCQUFPO0FBQUMsWUFBQSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBTCxDQUFVLEtBQWxCO0FBQXlCLFlBQUEsQ0FBQyxFQUFHLENBQUMsR0FBQyxLQUFLLElBQUwsQ0FBVSxLQUFiLEdBQW9CO0FBQWhELFdBQVA7QUFBNEQ7QUFDbkc7QUFDRjtBQWpGSDtBQUFBO0FBQUEsNEJBa0ZVLElBbEZWLEVBa0ZnQjtBQUNaLFdBQUssS0FBTCxDQUFXLE1BQVgsR0FBb0IsTUFBTSxDQUFDLElBQUQsRUFBTztBQUFDLFFBQUEsS0FBSyxFQUFFO0FBQVIsT0FBUCxDQUExQjtBQUNEO0FBcEZIO0FBQUE7QUFBQSxtQ0FxRmlCLEdBckZqQixFQXFGc0I7QUFDbEIsVUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFMLENBQWI7O0FBQ0EsY0FBTyxHQUFHLENBQUMsT0FBWDtBQUNFLGFBQUssYUFBTDtBQUNFLGNBQUcsQ0FBQyxDQUFDLFVBQUYsQ0FBYSxNQUFiLEdBQXNCLENBQXpCLEVBQTJCO0FBQ3pCLGlCQUFLLE9BQUwsQ0FBYSxDQUFDLENBQUMsVUFBZjtBQUNEOztBQUNELGVBQUssSUFBTDtBQUNBOztBQUNGLGFBQUssV0FBTDtBQUNFLGNBQUcsQ0FBQyxDQUFDLEtBQUYsSUFBVyxFQUFYLElBQWlCLENBQUMsQ0FBQyxLQUFGLElBQVcsRUFBL0IsRUFBbUM7QUFBQSx5Q0FDbEIsS0FBSyxrQkFBTCxFQURrQjtBQUFBLGdCQUMxQixDQUQwQiwwQkFDMUIsQ0FEMEI7QUFBQSxnQkFDdkIsQ0FEdUIsMEJBQ3ZCLENBRHVCOztBQUVqQyxpQkFBSyxJQUFMLENBQVU7QUFBQyxjQUFBLENBQUMsRUFBRCxDQUFEO0FBQUksY0FBQSxDQUFDLEVBQUQsQ0FBSjtBQUFPLGNBQUEsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFmO0FBQXNCLGNBQUEsTUFBTSxFQUFFO0FBQTlCLGFBQVY7QUFDRCxXQUhELE1BR08sSUFBSSxDQUFDLENBQUMsS0FBRixJQUFXLEVBQVgsSUFBaUIsQ0FBQyxDQUFDLEtBQUYsSUFBVyxFQUFoQyxFQUFvQztBQUN6QyxnQkFBSSxLQUFLLEdBQUcsS0FBSyxJQUFMLENBQVUsTUFBVixDQUFpQixLQUFLLEtBQUwsQ0FBVyxVQUFYLENBQXNCLEdBQXRCLENBQTBCLENBQUMsQ0FBQyxLQUE1QixDQUFqQixDQUFaOztBQUNBLGdCQUFHLEtBQUssSUFBSSxTQUFaLEVBQXNCO0FBQ3BCLG9CQUFNLGlCQUFOO0FBQ0Q7O0FBQ0QsWUFBQSxZQUFZLENBQUMsSUFBRCxFQUFNLEtBQU4sQ0FBWjtBQUNELFdBTk0sTUFNQTtBQUNMLGtCQUFNLGVBQU47QUFDRDs7QUFDRDs7QUFDRixhQUFLLGVBQUw7QUFDRSxjQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBRixDQUFVLENBQVYsQ0FBWjs7QUFDQSxjQUFHLEdBQUcsSUFBSSxDQUFWLEVBQWE7QUFDWCxrQkFBTSxhQUFOO0FBQ0Q7O0FBQ0QsY0FBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQWhCO0FBQ0EsY0FBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQUwsQ0FBWSxLQUFLLEtBQUwsQ0FBVyxVQUFYLENBQXNCLEdBQXRCLENBQTBCLENBQUMsQ0FBQyxFQUE1QixDQUFaLENBQVo7QUFDQSxjQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTCxDQUFZLEtBQUssQ0FBQyxJQUFsQixDQUFYOztBQUNBLGNBQUcsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLENBQVIsSUFBYSxHQUFoQixFQUFvQjtBQUNsQixrQkFBTSxXQUFOO0FBQ0Q7O0FBRUQsVUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVEsQ0FBUixHQUFZLEdBQVo7QUFqQ0o7QUFtQ0Q7QUExSEg7QUFBQTtBQUFBLG1DQTRIaUIsSUE1SGpCLEVBNEhzQjtBQUFBOztBQUNsQixNQUFBLElBQUksQ0FBQyxPQUFMLENBQWEsVUFBQyxHQUFELEVBQVM7QUFDcEIsWUFBRztBQUNELFVBQUEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBUixDQUFpQixHQUFHLENBQUMsQ0FBRCxDQUFwQixFQUF3QixNQUF4QjtBQUNELFNBRkQsQ0FFQyxPQUFNLENBQU4sRUFBUTtBQUNQLFVBQUEsT0FBTyxDQUFDLEtBQVIsQ0FBYyxzQkFBb0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxHQUFmLENBQWxDO0FBQ0EsVUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLENBQWQ7QUFDRDtBQUNGLE9BUEQ7QUFRRDtBQXJJSDtBQUFBO0FBQUEsaUNBc0llO0FBQUEsVUFBTCxDQUFLLFFBQUwsQ0FBSztBQUFBLFVBQUgsQ0FBRyxRQUFILENBQUc7QUFDWCxVQUFJLEtBQUssR0FBRyxDQUFDLEdBQUMsS0FBSyxJQUFMLENBQVUsS0FBWixHQUFrQixDQUE5QjtBQUNBLGFBQU8sS0FBSyxJQUFMLENBQVUsSUFBVixDQUFlLEtBQWYsQ0FBUDtBQUNEO0FBeklIO0FBQUE7QUFBQSxtQ0EwSWdCO0FBQ1osYUFBTyxLQUFLLEtBQUwsQ0FBVyxVQUFYLENBQXNCLElBQTdCO0FBQ0Q7QUE1SUg7QUFBQTtBQUFBLDZCQTZJVyxLQTdJWCxFQTZJaUIsS0E3SWpCLEVBNkl1QjtBQUNuQixVQUFNLFFBQVEsR0FBRyxLQUFLLElBQUwsQ0FBVSxNQUFWLENBQWlCLEtBQWpCLENBQWpCOztBQUNBLFVBQUcsS0FBSyxJQUFMLENBQVUsTUFBVixDQUFpQixLQUFqQixLQUEyQixTQUE5QixFQUF3QztBQUN0QyxhQUFLLEtBQUwsQ0FBVyxVQUFYLFdBQTZCLFFBQVEsQ0FBQyxJQUF0QztBQUNEOztBQUNELFVBQUcsS0FBSyxJQUFJLFNBQVosRUFBc0I7QUFDcEIsYUFBSyxLQUFMLENBQVcsVUFBWCxDQUFzQixHQUF0QixDQUEwQixLQUFLLENBQUMsSUFBaEMsRUFBc0MsS0FBdEM7QUFDRDs7QUFDRCxXQUFLLElBQUwsQ0FBVSxNQUFWLENBQWlCLEtBQWpCLElBQXdCLEtBQXhCO0FBQ0Q7QUF0Skg7QUFBQTtBQUFBLHlCQXVKTyxJQXZKUCxFQXVKYTtBQUFBLFVBQ0osQ0FESSxHQUNHLElBREgsQ0FDSixDQURJO0FBQUEsVUFDRixDQURFLEdBQ0csSUFESCxDQUNGLENBREU7QUFFVCxVQUFJLEdBQUcsR0FBRyxLQUFLLE1BQUwsQ0FBWTtBQUFDLFFBQUEsQ0FBQyxFQUFELENBQUQ7QUFBRyxRQUFBLENBQUMsRUFBRDtBQUFILE9BQVosQ0FBVjtBQUNBLFVBQUksSUFBSSxHQUFHLEtBQUssSUFBaEI7O0FBRUEsVUFBRyxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsQ0FBQyxDQUFDLEtBQWYsRUFBcUI7QUFDbkIsY0FBTSxXQUFOO0FBQ0Q7O0FBQ0QsVUFBSSxLQUFLLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFOLENBQXpCO0FBRUEsVUFBSSxLQUFLLEdBQUM7QUFDUixRQUFBLEdBQUcsRUFBRSxDQURHO0FBRVIsUUFBQSxLQUFLLEVBQUwsS0FGUTtBQUdSLFFBQUEsSUFBSSxFQUFFO0FBQUMsVUFBQSxDQUFDLEVBQUQsQ0FBRDtBQUFHLFVBQUEsQ0FBQyxFQUFEO0FBQUgsU0FIRTtBQUlSLFFBQUEsTUFBTSxFQUFFLENBSkE7QUFLUixRQUFBLElBQUksRUFBRSxJQUFJLENBQUMsSUFMSDtBQU1SLFFBQUEsTUFBTSxFQUFFLElBQUksQ0FBQyxNQU5MO0FBT1IsUUFBQSxJQUFJLEVBQUU7QUFBQyxVQUFBLENBQUMsRUFBRCxDQUFEO0FBQUcsVUFBQSxDQUFDLEVBQUQ7QUFBSCxTQVBFO0FBUVIsUUFBQSxJQUFJLEVBQUUsQ0FSRTtBQVNSLFFBQUEsTUFBTSxFQUFFLElBQUksQ0FBQztBQVRMLE9BQVY7QUFXQSxXQUFLLFFBQUwsQ0FBYyxLQUFkLEVBQW9CLEtBQXBCO0FBRUEsV0FBSyxNQUFMLENBQVk7QUFBQyxRQUFBLENBQUMsRUFBRCxDQUFEO0FBQUcsUUFBQSxDQUFDLEVBQUQ7QUFBSCxPQUFaLEVBQWtCLENBQUUsQ0FBQyxDQUFDLEtBQUosRUFBVztBQUMzQixRQUFBLENBQUMsRUFBQyxDQUFDLENBQUMsS0FEdUI7QUFFM0IsUUFBQSxDQUFDLEVBQUMsS0FBSyxDQUFDLEtBRm1CO0FBRzNCLFFBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUh1QixPQUFYLENBQWxCLEVBdkJTLENBNEJUOztBQUNBLFVBQUcsS0FBSyxLQUFMLENBQVcsSUFBWCxJQUFpQixDQUFwQixFQUF1QjtBQUNyQixhQUFLLE1BQUwsQ0FBWSxLQUFLLGtCQUFMLEVBQVosRUFBdUMsQ0FBRSxDQUFDLENBQUMsSUFBSixFQUFVO0FBQUMsVUFBQSxDQUFDLEVBQUU7QUFBSixTQUFWLENBQXZDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBSyxLQUFMLENBQVcsSUFBWDtBQUNEO0FBQ0Y7QUF6TEg7QUFBQTtBQUFBLGtDQTBMZSxFQTFMZixFQTBMa0I7QUFBQSxVQUFSLENBQVEsU0FBUixDQUFRO0FBQUEsVUFBTixDQUFNLFNBQU4sQ0FBTTtBQUNkLFVBQUksS0FBSyxHQUFHLENBQUMsR0FBQyxLQUFLLElBQUwsQ0FBVSxLQUFaLEdBQWtCLENBQTlCO0FBQ0EsVUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFMLENBQVUsSUFBVixDQUFlLEtBQWYsQ0FBVDtBQUNBLFdBQUssSUFBTCxDQUFVLElBQVYsQ0FBZSxLQUFmLElBQXdCLEVBQXhCO0FBQ0EsV0FBSyxJQUFMLENBQVUsS0FBVixFQUFnQjtBQUFDLFFBQUEsQ0FBQyxFQUFELENBQUQ7QUFBRyxRQUFBLENBQUMsRUFBRDtBQUFILE9BQWhCLEVBQXNCLEVBQXRCLEVBQXlCLEVBQXpCO0FBQ0Q7QUEvTEg7QUFBQTtBQUFBLEVBQW9DLFlBQXBDOztBQWlNQSxJQUFJLFFBQVEsR0FBRztBQUNiLEVBQUEsSUFEYSxnQkFDUixJQURRLEVBQ0gsSUFERyxFQUNFO0FBQ2IsSUFBQSxJQUFJLENBQUMsSUFBTDtBQUNELEdBSFk7QUFJYixFQUFBLElBSmEsZ0JBSVIsSUFKUSxFQUlILElBSkcsRUFJRTtBQUNiLElBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWO0FBQ0QsR0FOWTtBQU9iLEVBQUEsU0FQYSxxQkFPSCxJQVBHLEVBT0UsSUFQRixFQU9PO0FBQ2xCLFFBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFoQjtBQUNBLFFBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFMLENBQVksSUFBSSxDQUFDLENBQWpCLENBQVo7QUFDQSxRQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTCxDQUFZLEtBQUssQ0FBQyxJQUFsQixDQUFYOztBQUNBLFFBQUcsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFRLENBQVIsSUFBYSxJQUFJLENBQUMsQ0FBckIsRUFBdUI7QUFDckIsWUFBTSxXQUFOO0FBQ0Q7O0FBRUQsSUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVEsQ0FBUixHQUFZLElBQUksQ0FBQyxDQUFqQjtBQUNELEdBaEJZO0FBaUJiLEVBQUEsSUFqQmEsZ0JBaUJSLElBakJRLEVBaUJILElBakJHLEVBaUJFO0FBQ2IsUUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFaLENBQVQ7O0FBQ0EsUUFBRyxFQUFFLENBQUMsQ0FBRCxDQUFGLElBQVMsQ0FBQyxDQUFDLEtBQWQsRUFBb0I7QUFDbEIsWUFBTSxXQUFOO0FBQ0Q7O0FBQ0QsSUFBQSxJQUFJLENBQUMsTUFBTCxDQUFZLElBQVosRUFBaUIsQ0FBRSxDQUFDLENBQUMsSUFBSixFQUFVO0FBQ3pCLE1BQUEsQ0FBQyxFQUFFLElBQUksQ0FBQztBQURpQixLQUFWLENBQWpCO0FBR0QsR0F6Qlk7QUEwQmIsRUFBQSxLQTFCYSxpQkEwQlAsSUExQk8sRUEwQkYsSUExQkUsRUEwQkc7QUFDZCxRQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBTCxDQUFVLE1BQVYsQ0FBaUIsSUFBSSxDQUFDLENBQXRCLENBQVo7O0FBQ0EsUUFBRyxLQUFLLElBQUksU0FBWixFQUFzQjtBQUNwQixZQUFNLGlCQUFOO0FBQ0Q7O0FBQ0QsSUFBQSxZQUFZLENBQUMsSUFBRCxFQUFNLEtBQU4sQ0FBWjtBQUNEO0FBaENZLENBQWY7O0FBa0NBLFNBQVMsYUFBVCxDQUF1QixJQUF2QixFQUE0QjtBQUMxQixNQUFJLENBQUMsR0FBQyxDQUFOOztBQUNBLFNBQU0sSUFBSSxDQUFDLENBQUQsQ0FBSixJQUFXLFNBQWpCLEVBQTJCO0FBQ3pCLElBQUEsQ0FBQztBQUNGOztBQUNELFNBQU8sQ0FBUDtBQUNEOztBQUFBOztBQUNELFNBQVMsWUFBVCxDQUFzQixJQUF0QixFQUEyQixLQUEzQixFQUFpQztBQUMvQixNQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBZjtBQUNBLE1BQUksRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFMLENBQVksS0FBSyxDQUFDLElBQWxCLENBQVQ7O0FBQ0EsU0FBTSxFQUFFLENBQUMsQ0FBRCxDQUFGLElBQVMsQ0FBQyxDQUFDLEtBQVgsSUFBb0IsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQU4sSUFBVyxLQUFLLENBQUMsS0FBM0MsRUFBaUQ7QUFDL0MsSUFBQSxJQUFJLENBQUMsTUFBTCxDQUFZLEVBQVosRUFBZSxDQUFFLENBQUMsQ0FBQyxLQUFKLEVBQVUsRUFBVixDQUFmO0FBQ0EsSUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUFDLGNBQUYsQ0FBaUIsRUFBakIsRUFBcUIsRUFBRSxDQUFDLENBQUQsQ0FBRixDQUFNLENBQTNCLENBQUw7QUFDQSxJQUFBLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTCxDQUFZLEVBQVosQ0FBTDtBQUNEOztBQUNELEVBQUEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFYO0FBQ0EsRUFBQSxJQUFJLENBQUMsUUFBTCxDQUFjLEtBQUssQ0FBQyxLQUFwQixFQUEwQixTQUExQjtBQUNEOztBQUVELFNBQVMsV0FBVCxDQUFxQixJQUFyQixFQUEyQixLQUEzQixFQUFrQztBQUNoQyxNQUFNLEdBQUcsR0FBRyxDQUFFLGFBQWEsS0FBZCxHQUF1QixDQUF4QixJQUE2QixLQUF6Qzs7QUFDQSxTQUFNLElBQU4sRUFBWTtBQUNWLFFBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFMLEtBQWEsVUFBMUI7O0FBQ0EsUUFBRyxJQUFJLEdBQUcsR0FBVixFQUFlO0FBQUUsYUFBTyxJQUFJLEdBQUcsS0FBZDtBQUFzQjtBQUN4QztBQUVGOzs7OztBQ2xRRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFELENBQWxCOztBQUNBLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU0sQ0FBQyxDQUFQLEdBQVcsT0FBTyxDQUFDLFlBQUQsQ0FBbEI7QUFDQSxNQUFNLENBQUMsUUFBUCxHQUFrQixPQUFPLENBQUMsWUFBRCxDQUF6QjtBQUNBLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLE9BQU8sQ0FBQyx1QkFBRCxDQUF2QixDLENBQ0E7O0FBRUEsQ0FBQyxDQUFDLFNBQUQsQ0FBRCxDQUFhLEVBQWIsQ0FBZ0IsT0FBaEIsRUFBeUIsWUFBTTtBQUM3QixFQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBRCxDQUFELENBQVcsS0FBWCxFQUFELEVBQXFCLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVSxLQUFWLEVBQXJCLENBQUo7QUFDRCxDQUZEO0FBR0EsSUFBSSxLQUFLLEdBQUc7QUFDVixFQUFBLEtBQUssRUFBRSxFQURHO0FBRVYsRUFBQSxNQUFNLEVBQUUsRUFGRTtBQUdWLEVBQUEsT0FBTyxFQUFFLENBSEMsQ0FLWjtBQUNBOztBQU5ZLENBQVo7O2VBT2MsT0FBTyxDQUFDLGFBQUQsQztJQUFoQixDLFlBQUEsQztJQUFFLEMsWUFBQSxDO0lBQUUsQyxZQUFBLEM7O0FBQ1QsTUFBTSxDQUFDLElBQVAsR0FBYztBQUNaLFVBQU8sQ0FDTCxNQURLLEVBRUw7QUFDRSxZQUFRLEtBRFY7QUFFRSxjQUFTLENBRlg7QUFHRSxTQUFJLENBSE47QUFJRSxTQUFJO0FBSk4sR0FGSyxDQURLO0FBVVosVUFBTyxDQUNMLE1BREssRUFFTDtBQUNFLFlBQVEsS0FEVjtBQUVFLGNBQVMsQ0FGWDtBQUdFLFNBQUksQ0FITjtBQUlFLFNBQUk7QUFKTixHQUZLLENBVks7QUFtQlosU0FBTSxDQUNKLFdBREksRUFFSjtBQUNFLElBQUEsQ0FBQyxFQUFDLENBREo7QUFFRSxJQUFBLENBQUMsRUFBQyxDQUFDLENBQUM7QUFGTixHQUZJLENBbkJNO0FBMEJaLFNBQU0sQ0FDSixXQURJLEVBRUo7QUFDRSxJQUFBLENBQUMsRUFBQyxDQURKO0FBRUUsSUFBQSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0FBRk4sR0FGSSxDQTFCTTtBQWlDWixTQUFNLENBQ0osV0FESSxFQUVKO0FBQ0UsSUFBQSxDQUFDLEVBQUMsQ0FESjtBQUVFLElBQUEsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUZOLEdBRkksQ0FqQ007QUF3Q1osUUFBSyxDQUNILE1BREcsRUFFSCxFQUZHLENBeENPO0FBNENaLFVBQU8sQ0FDTCxNQURLLEVBQ0U7QUFDTCxJQUFBLENBQUMsRUFBRSxDQURFO0FBRUwsSUFBQSxDQUFDLEVBQUUsQ0FGRTtBQUdMLElBQUEsQ0FBQyxFQUFFO0FBSEUsR0FERixDQTVDSztBQW1EWixRQUFLLENBQ0gsT0FERyxFQUNLO0FBQ04sSUFBQSxDQUFDLEVBQUM7QUFESSxHQURMLENBbkRPO0FBd0RaLFFBQUssQ0FDSCxPQURHLEVBQ0s7QUFDTixJQUFBLENBQUMsRUFBQztBQURJLEdBREwsQ0F4RE8sQ0ErRGQ7QUFDQTs7QUFoRWMsQ0FBZDtBQWlFQSxNQUFNLENBQUMsSUFBUCxHQUFjLElBQWQsQyxDQUdBO0FBQ0E7QUFDQTtBQUNBOzs7OztlQ2hHVSxPQUFPLENBQUMsUUFBRCxDO0lBQVosQyxZQUFBLEM7O0FBRUwsTUFBTSxDQUFDLE9BQVAsR0FBaUIsVUFBUyxLQUFULEVBQWU7QUFDOUIsTUFBSSxJQUFJLEdBQUMsS0FBSyxDQUFDLEtBQU4sR0FBYyxLQUFLLENBQUMsTUFBN0I7QUFDQSxNQUFJLElBQUksR0FBRyxFQUFYOztBQUNBLE9BQUksSUFBSSxDQUFDLEdBQUMsQ0FBVixFQUFZLENBQUMsR0FBQyxJQUFkLEVBQW1CLENBQUMsRUFBcEIsRUFBdUI7QUFDckIsSUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSCxFQUFTLEVBQVQsQ0FBUjtBQUNEOztBQUNELE9BQUksSUFBSSxDQUFDLEdBQUMsQ0FBVixFQUFZLENBQUMsR0FBQyxLQUFLLENBQUMsS0FBcEIsRUFBMEIsQ0FBQyxFQUEzQixFQUErQjtBQUM3QixJQUFBLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxDQUFDLENBQUMsQ0FBQyxLQUFILEVBQVUsRUFBVixDQUFWO0FBQ0EsSUFBQSxJQUFJLENBQUMsSUFBSSxHQUFDLENBQUwsR0FBTyxDQUFSLENBQUosR0FBaUIsQ0FBQyxDQUFDLENBQUMsS0FBSCxFQUFVLEVBQVYsQ0FBakI7QUFDRDs7QUFDRCxPQUFJLElBQUksQ0FBQyxHQUFDLENBQVYsRUFBWSxDQUFDLEdBQUMsS0FBSyxDQUFDLE1BQXBCLEVBQTJCLENBQUMsRUFBNUIsRUFBZ0M7QUFDOUIsSUFBQSxJQUFJLENBQUMsQ0FBQyxHQUFDLEtBQUssQ0FBQyxLQUFULENBQUosR0FBc0IsQ0FBQyxDQUFDLENBQUMsS0FBSCxFQUFVLEVBQVYsQ0FBdEI7QUFDQSxJQUFBLElBQUksQ0FBQyxJQUFJLEdBQUMsQ0FBTCxHQUFPLENBQUMsR0FBQyxLQUFLLENBQUMsS0FBaEIsQ0FBSixHQUE2QixDQUFDLENBQUMsQ0FBQyxLQUFILEVBQVUsRUFBVixDQUE3QjtBQUNEOztBQUdELE1BQUksSUFBSSxHQUFHO0FBQ1QsSUFBQSxPQUFPLEVBQUMsQ0FEQztBQUVULElBQUEsTUFBTSxFQUFFO0FBQ04sTUFBQSxXQUFXLEVBQUU7QUFEUCxLQUZDO0FBS1QsSUFBQSxJQUFJLEVBQUU7QUFDSixNQUFBLENBQUMsRUFBRSxDQURDO0FBRUosTUFBQSxDQUFDLEVBQUUsQ0FGQztBQUdKLE1BQUEsQ0FBQyxFQUFFLENBSEM7QUFJSixNQUFBLENBQUMsRUFBRTtBQUpDLEtBTEc7QUFXVCxJQUFBLEtBQUssRUFBRSxLQUFLLENBQUMsS0FYSjtBQVlULElBQUEsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQVpMO0FBYVQsSUFBQSxJQUFJLEVBQUUsSUFiRztBQWNULElBQUEsTUFBTSxFQUFFLEVBZEM7QUFlVCxJQUFBLElBQUksRUFBRTtBQWZHLEdBQVg7QUFpQkEsU0FBTztBQUFDLElBQUEsSUFBSSxFQUFKO0FBQUQsR0FBUDtBQUNELENBbENEOzs7OztBQ0ZBLE9BQU8sQ0FBQyxHQUFSLENBQVksbUJBQVo7O0FBQ0EsTUFBTSxDQUFDLE9BQVAsQ0FBZSxHQUFmLEdBQXNCLFNBQVMsR0FBVCxDQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCO0FBQ3JDLFNBQU8sQ0FBQyxHQUFDLENBQVQ7QUFDRCxDQUZEOztBQUdBLE9BQU8sQ0FBQyxFQUFSLEdBQVcsSUFBWDs7QUFDQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBRCxDQUFqQjs7QUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLEtBQVo7QUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLEdBQVosRSxDQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7ZUNoQlUsT0FBTyxDQUFDLFFBQUQsQztJQUFaLEMsWUFBQSxDOztBQUNMLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFELENBQWpCLEMsQ0FDQTs7O0FBQ0EsTUFBTSxDQUFDLE9BQVA7QUFBQTtBQUFBO0FBQ0UsZ0JBQVksRUFBWixFQUFlLElBQWYsRUFBb0I7QUFBQTs7QUFBQTtBQUNsQixTQUFLLEdBQUwsR0FBUyxHQUFHLENBQUMsRUFBRCxDQUFaO0FBQ0EsU0FBSyxJQUFMLEdBQVksS0FBSyxHQUFMLENBQVMsS0FBVCxFQUFaO0FBQ0EsU0FBSyxJQUFMLENBQVUsS0FBVixDQUFnQixFQUFoQjtBQUNBLFNBQUssSUFBTCxHQUFVLElBQVY7QUFDQSxTQUFLLElBQUwsR0FBWSxFQUFaO0FBQ0EsU0FBSyxJQUFMLEdBTmtCLENBT2xCO0FBQ0E7QUFDQTs7QUFDQSxJQUFBLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FBVSxFQUFWLENBQWEsUUFBYixFQUF1QixVQUFDLENBQUQsRUFBTztBQUM1QixNQUFBLEtBQUksQ0FBQyxHQUFMLENBQVMsSUFBVCxDQUFjLE1BQU0sQ0FBQyxLQUFQLEVBQWQsRUFBNkIsTUFBTSxDQUFDLE1BQVAsRUFBN0I7QUFDRCxLQUZEO0FBR0EsSUFBQSxJQUFJLENBQUMsRUFBTCxDQUFRLEtBQVIsRUFBYyxVQUFDLENBQUQsRUFBRyxFQUFILEVBQU0sRUFBTixFQUFhO0FBQ3pCLE1BQUEsS0FBSSxDQUFDLE1BQUwsQ0FBWSxDQUFaLEVBQWMsRUFBZCxFQUFpQixFQUFqQjtBQUNELEtBRkQ7QUFHRDs7QUFqQkg7QUFBQTtBQUFBLDJCQWtCUTtBQUNKLFdBQUksSUFBSSxFQUFFLEdBQUcsQ0FBYixFQUFlLEVBQUUsR0FBRyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsTUFBbkMsRUFBMEMsRUFBRSxFQUE1QyxFQUErQztBQUM3QyxhQUFLLElBQUwsQ0FBVSxFQUFWLElBQWdCLEVBQWhCOztBQUNBLGFBQUksSUFBSSxFQUFFLEdBQUcsQ0FBYixFQUFlLEVBQUUsR0FBRyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsS0FBbkMsRUFBeUMsRUFBRSxFQUEzQyxFQUE4QztBQUM1QyxjQUFJLEtBQUssR0FBRyxLQUFLLElBQUwsQ0FBVSxLQUFWLEVBQVo7QUFDQSxVQUFBLEtBQUssQ0FBQyxTQUFOLENBQWdCLEVBQWhCLEVBQW1CLEVBQW5CO0FBQ0EsZUFBSyxJQUFMLENBQVUsRUFBRSxHQUFDLEtBQUssSUFBTCxDQUFVLElBQVYsQ0FBZSxLQUFsQixHQUF3QixFQUFsQyxJQUF3QyxLQUF4QztBQUNBLGVBQUssTUFBTCxDQUFZO0FBQUMsWUFBQSxDQUFDLEVBQUMsRUFBSDtBQUFPLFlBQUEsQ0FBQyxFQUFDO0FBQVQsV0FBWixFQUF5QixTQUF6QixFQUFtQyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsSUFBZixDQUFvQixFQUFFLEdBQUMsS0FBSyxJQUFMLENBQVUsSUFBVixDQUFlLEtBQWxCLEdBQXdCLEVBQTVDLENBQW5DO0FBQ0Q7QUFDRjtBQUNGO0FBNUJIO0FBQUE7QUFBQSwyQkE2QlMsQ0E3QlQsRUE2QlcsRUE3QlgsRUE2QmMsRUE3QmQsRUE2QmlCO0FBQ2IsVUFBSSxJQUFJLEdBQUcsS0FBSyxJQUFMLENBQVUsQ0FBQyxDQUFDLENBQUYsR0FBSSxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsS0FBbkIsR0FBeUIsQ0FBQyxDQUFDLENBQXJDLENBQVg7QUFDQSxNQUFBLElBQUksQ0FBQyxRQUFMLEdBQWdCLE9BQWhCLENBQXdCLFVBQUMsQ0FBRDtBQUFBLGVBQU8sQ0FBQyxDQUFDLE1BQUYsRUFBUDtBQUFBLE9BQXhCOztBQUNBLGNBQU8sRUFBRSxDQUFDLENBQUQsQ0FBVDtBQUNBLGFBQUssQ0FBQyxDQUFDLEtBQVA7QUFBYTs7QUFDYixhQUFLLENBQUMsQ0FBQyxLQUFQO0FBQ0UsY0FBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUwsQ0FBVSxDQUFWLEVBQVksQ0FBWixDQUFYO0FBQ0EsVUFBQSxJQUFJLENBQUMsSUFBTCxDQUFVO0FBQUMsWUFBQSxLQUFLLEVBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxDQUFQO0FBQWIsV0FBVjtBQUNBOztBQUNGLGFBQUssQ0FBQyxDQUFDLElBQVA7QUFDRSxjQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTCxDQUFZLENBQVosQ0FBYjtBQUNBLFVBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWTtBQUFDLFlBQUEsS0FBSyxFQUFDO0FBQVAsV0FBWjtBQUNBOztBQUNGLGFBQUssQ0FBQyxDQUFDLEtBQVA7QUFDRSxjQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBTCxDQUFVLENBQVYsRUFBWSxDQUFaLENBQVg7QUFDQSxVQUFBLElBQUksQ0FBQyxJQUFMLENBQVU7QUFBQyxZQUFBLEtBQUssRUFBQztBQUFQLFdBQVY7QUFDQTtBQWJGO0FBZUQ7QUEvQ0g7QUFBQTtBQUFBOztBQWtEQSxJQUFNLE1BQU0sR0FBRyxDQUNiLE1BRGEsRUFFYixNQUZhLEVBR2IsTUFIYSxFQUliLFNBSmEsRUFLYixTQUxhLEVBTWIsU0FOYSxDQUFmOzs7QUNyREE7Ozs7Ozs7Ozs7QUFTRTs7QUFDRCxXQUFTLElBQVQsRUFBZSxPQUFmLEVBQXdCO0FBQ3ZCLE1BQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE1BQU0sQ0FBQyxHQUEzQyxFQUFnRDtBQUM5QyxJQUFBLE1BQU0sQ0FBQyxPQUFELENBQU47QUFDRCxHQUZELE1BRU8sSUFBSSxPQUFPLE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDdEMsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixJQUFJLENBQUMsUUFBTCxHQUFnQixPQUFPLENBQUMsSUFBRCxFQUFPLElBQUksQ0FBQyxRQUFaLENBQXZCLEdBQStDLFVBQVMsQ0FBVCxFQUFXO0FBQUUsYUFBTyxPQUFPLENBQUMsQ0FBRCxFQUFJLENBQUMsQ0FBQyxRQUFOLENBQWQ7QUFBK0IsS0FBNUc7QUFDRCxHQUZNLE1BRUE7QUFDTCxJQUFBLElBQUksQ0FBQyxHQUFMLEdBQVcsT0FBTyxDQUFDLElBQUQsRUFBTyxJQUFJLENBQUMsUUFBWixDQUFsQjtBQUNEO0FBQ0YsQ0FSQSxFQVFDLE9BQU8sTUFBUCxLQUFrQixXQUFsQixHQUFnQyxNQUFoQyxHQUF5QyxJQVIxQyxFQVFnRCxVQUFTLE1BQVQsRUFBaUIsUUFBakIsRUFBMkI7QUFFNUU7QUFDQSxNQUFJLEdBQUcsR0FBRyxLQUFLLEdBQUwsR0FBVyxVQUFTLE9BQVQsRUFBa0I7QUFDckMsUUFBSSxHQUFHLENBQUMsU0FBUixFQUFtQjtBQUNqQixNQUFBLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFSLENBQVksT0FBWixDQUFWO0FBRUEsVUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFULEVBQ0UsR0FBRyxDQUFDLE9BQUosQ0FBWSxPQUFaO0FBRUYsYUFBTyxPQUFQO0FBQ0Q7QUFDRixHQVRELENBSDRFLENBYzVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxFQUFKLEdBQVksNEJBQVo7QUFDQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLEdBQVksK0JBQVo7QUFDQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLEdBQVksOEJBQVo7QUFDQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLEdBQVksd0JBQVosQ0FsQjRFLENBb0I1RTs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxTQUFKLEdBQWlCLFlBQVc7QUFDMUIsV0FBTyxDQUFDLENBQUUsUUFBUSxDQUFDLGVBQVosSUFDQSxDQUFDLENBQUUsUUFBUSxDQUFDLGVBQVQsQ0FBeUIsR0FBRyxDQUFDLEVBQTdCLEVBQWdDLEtBQWhDLEVBQXVDLGFBRGpEO0FBRUQsR0FIZSxFQUFoQixDQXJCNEUsQ0EwQjVFOzs7QUFDQSxNQUFJLENBQUMsR0FBRyxDQUFDLFNBQVQsRUFBb0IsT0FBTyxLQUFQLENBM0J3RCxDQTZCNUU7O0FBQ0EsRUFBQSxHQUFHLENBQUMsR0FBSixHQUFXLElBQVgsQ0E5QjRFLENBZ0M1RTs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxHQUFKLEdBQVUsVUFBUyxJQUFULEVBQWU7QUFDdkIsV0FBTyxVQUFVLFVBQVUsQ0FBQyxJQUFELENBQXBCLEdBQThCLEdBQUcsQ0FBQyxHQUFKLEVBQXJDO0FBQ0QsR0FGRCxDQWpDNEUsQ0FxQzVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLEdBQWEsVUFBUyxJQUFULEVBQWU7QUFDMUI7QUFDQSxRQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsZUFBVCxDQUF5QixLQUFLLEVBQTlCLEVBQWtDLElBQWxDLENBQWQsQ0FGMEIsQ0FJMUI7O0FBQ0EsSUFBQSxPQUFPLENBQUMsWUFBUixDQUFxQixJQUFyQixFQUEyQixLQUFLLEdBQUwsQ0FBUyxJQUFULENBQTNCO0FBRUEsV0FBTyxPQUFQO0FBQ0QsR0FSRCxDQXRDNEUsQ0FnRDVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLEdBQWEsWUFBVztBQUN0QixRQUFJLE9BQUosRUFBYSxPQUFiLEVBQXNCLEdBQXRCLEVBQTJCLENBQTNCLENBRHNCLENBR3RCOztBQUNBLElBQUEsT0FBTyxHQUFHLEdBQUcsS0FBSCxDQUFTLElBQVQsQ0FBYyxTQUFkLENBQVYsQ0FKc0IsQ0FNdEI7O0FBQ0EsSUFBQSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQVIsRUFBVjs7QUFFQSxTQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBUixHQUFpQixDQUExQixFQUE2QixDQUFDLElBQUksQ0FBbEMsRUFBcUMsQ0FBQyxFQUF0QyxFQUNFLElBQUksT0FBTyxDQUFDLENBQUQsQ0FBWCxFQUNFLEtBQUssR0FBTCxJQUFZLE9BQVosRUFDRSxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVcsU0FBWCxDQUFxQixHQUFyQixJQUE0QixPQUFPLENBQUMsR0FBRCxDQUFuQyxDQVpnQixDQWN0Qjs7O0FBQ0EsUUFBSSxHQUFHLENBQUMsR0FBSixJQUFXLEdBQUcsQ0FBQyxHQUFKLENBQVEsT0FBdkIsRUFDRSxHQUFHLENBQUMsR0FBSixDQUFRLE9BQVI7QUFDSCxHQWpCRCxDQWpENEUsQ0FvRTVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLEdBQWEsVUFBUyxNQUFULEVBQWlCO0FBQzVCO0FBQ0EsUUFBSSxXQUFXLEdBQUcsT0FBTyxNQUFNLENBQUMsTUFBZCxJQUF3QixVQUF4QixHQUNoQixNQUFNLENBQUMsTUFEUyxHQUVoQixZQUFXO0FBQ1QsV0FBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCLEdBQUcsQ0FBQyxNQUFKLENBQVcsTUFBTSxDQUFDLE1BQWxCLENBQTVCO0FBQ0QsS0FKSCxDQUY0QixDQVE1Qjs7QUFDQSxRQUFJLE1BQU0sQ0FBQyxPQUFYLEVBQ0UsV0FBVyxDQUFDLFNBQVosR0FBd0IsSUFBSSxNQUFNLENBQUMsT0FBWCxFQUF4QixDQVYwQixDQVk1Qjs7QUFDQSxRQUFJLE1BQU0sQ0FBQyxNQUFYLEVBQ0UsR0FBRyxDQUFDLE1BQUosQ0FBVyxXQUFYLEVBQXdCLE1BQU0sQ0FBQyxNQUEvQixFQWQwQixDQWdCNUI7O0FBQ0EsUUFBSSxNQUFNLENBQUMsU0FBWCxFQUNFLEdBQUcsQ0FBQyxNQUFKLENBQVcsTUFBTSxDQUFDLE1BQVAsSUFBaUIsR0FBRyxDQUFDLFNBQWhDLEVBQTJDLE1BQU0sQ0FBQyxTQUFsRDtBQUVGLFdBQU8sV0FBUDtBQUNELEdBckJELENBckU0RSxDQTRGNUU7OztBQUNBLEVBQUEsR0FBRyxDQUFDLEtBQUosR0FBWSxVQUFTLElBQVQsRUFBZTtBQUN6QjtBQUNBLFFBQUksSUFBSSxDQUFDLFFBQVQsRUFBbUIsT0FBTyxJQUFJLENBQUMsUUFBWixDQUZNLENBSXpCOztBQUNBLFFBQUksT0FBSixDQUx5QixDQU96Qjs7QUFDQSxRQUFJLElBQUksQ0FBQyxRQUFMLElBQWlCLEtBQXJCLEVBQ0UsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFMLFlBQTJCLFVBQTNCLEdBQXdDLElBQUksR0FBRyxDQUFDLE1BQVIsRUFBeEMsR0FBeUQsSUFBSSxHQUFHLENBQUMsR0FBUixFQUFuRSxDQURGLEtBRUssSUFBSSxJQUFJLENBQUMsUUFBTCxJQUFpQixnQkFBckIsRUFDSCxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUixDQUFpQixRQUFqQixDQUFWLENBREcsS0FFQSxJQUFJLElBQUksQ0FBQyxRQUFMLElBQWlCLGdCQUFyQixFQUNILE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFSLENBQWlCLFFBQWpCLENBQVYsQ0FERyxLQUVBLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBTixDQUFYLENBQVAsRUFDSCxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFOLENBQVgsQ0FBUCxFQUFWLENBREcsS0FHSCxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBUixDQUFnQixJQUFoQixDQUFWLENBakJ1QixDQW1CekI7O0FBQ0EsSUFBQSxPQUFPLENBQUMsSUFBUixHQUFnQixJQUFJLENBQUMsUUFBckI7QUFDQSxJQUFBLE9BQU8sQ0FBQyxJQUFSLEdBQWdCLElBQWhCO0FBQ0EsSUFBQSxJQUFJLENBQUMsUUFBTCxHQUFnQixPQUFoQixDQXRCeUIsQ0F3QnpCOztBQUNBLFFBQUksT0FBTyxZQUFZLEdBQUcsQ0FBQyxHQUEzQixFQUNFLE9BQU8sQ0FBQyxTQUFSLEdBQW9CLElBQXBCLEdBMUJ1QixDQTRCekI7O0FBQ0EsSUFBQSxPQUFPLENBQUMsT0FBUixDQUFnQixJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxZQUFMLENBQWtCLFlBQWxCLENBQVgsS0FBK0MsRUFBL0Q7QUFFQSxXQUFPLE9BQVA7QUFDRCxHQWhDRCxDQTdGNEUsQ0ErSDVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxPQUFKLEdBQWMsVUFBUyxPQUFULEVBQWtCO0FBQzlCO0FBQ0EsUUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLENBQVg7QUFBQSxRQUNJLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFSLENBQVksSUFBWixDQUFILEdBQXVCLE9BQU8sQ0FBQyxNQUFSLEVBQTVCLEVBQThDLElBQTlDLENBQW1ELENBQW5ELEVBQXNELENBQXRELENBRFg7QUFBQSxRQUVJLElBQUksR0FBRyxHQUFHLENBQUMsTUFBSixDQUFXLE1BQVgsQ0FGWCxDQUY4QixDQU05Qjs7QUFDQSxJQUFBLElBQUksQ0FBQyxJQUFMLENBQVUsV0FBVixDQUFzQixJQUF0QixFQVA4QixDQVM5Qjs7QUFDQSxJQUFBLEdBQUcsQ0FBQyxNQUFKLEdBQWE7QUFDWCxNQUFBLElBQUksRUFBRSxJQUFJLElBQUksT0FBTyxDQUFDLE1BQVIsRUFESDtBQUVYLE1BQUEsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFMLENBQVcsNkRBQVgsQ0FGSztBQUdYLE1BQUEsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFMLEdBQWdCLElBSFg7QUFJWCxNQUFBLElBQUksRUFBRTtBQUpLLEtBQWI7QUFNRCxHQWhCRCxDQWhJNEUsQ0FrSjVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLEdBQVk7QUFDVjtBQUNBLElBQUEsSUFBSSxFQUFjLDRCQUZSLENBSVY7QUFKVTtBQUtWLElBQUEsR0FBRyxFQUFlLDJDQUxSLENBT1Y7QUFQVTtBQVFWLElBQUEsR0FBRyxFQUFlLDBCQVJSLENBVVY7QUFWVTtBQVdWLElBQUEsU0FBUyxFQUFTLGtCQVhSLENBYVY7QUFiVTtBQWNWLElBQUEsTUFBTSxFQUFZLGNBZFIsQ0FnQlY7QUFoQlU7QUFpQlYsSUFBQSxjQUFjLEVBQUksU0FqQlIsQ0FtQlY7QUFuQlU7QUFvQlYsSUFBQSxVQUFVLEVBQVEsS0FwQlIsQ0FzQlY7QUF0QlU7QUF1QlYsSUFBQSxLQUFLLEVBQWEsbUJBdkJSLENBeUJWO0FBekJVO0FBMEJWLElBQUEsS0FBSyxFQUFhLFFBMUJSLENBNEJWO0FBNUJVO0FBNkJWLElBQUEsS0FBSyxFQUFhLGVBN0JSLENBK0JWO0FBL0JVO0FBZ0NWLElBQUEsT0FBTyxFQUFXLFVBaENSLENBa0NWO0FBbENVO0FBbUNWLElBQUEsUUFBUSxFQUFVLGFBbkNSLENBcUNWO0FBckNVO0FBc0NWLElBQUEsU0FBUyxFQUFTLGNBdENSLENBd0NWO0FBeENVO0FBeUNWLElBQUEsT0FBTyxFQUFXLHVDQXpDUixDQTJDVjtBQUVBO0FBN0NVO0FBOENWLElBQUEsTUFBTSxFQUFZLE9BOUNSLENBZ0RWO0FBaERVO0FBaURWLElBQUEsS0FBSyxFQUFhLElBakRSLENBbURWO0FBbkRVO0FBb0RWLElBQUEsTUFBTSxFQUFZLEtBcERSLENBc0RWO0FBdERVO0FBdURWLElBQUEsV0FBVyxFQUFPLGdCQXZEUixDQXlEVjtBQXpEVTtBQTBEVixJQUFBLFlBQVksRUFBTSxlQTFEUixDQTREVjtBQTVEVTtBQTZEVixJQUFBLFdBQVcsRUFBTyxLQTdEUixDQStEVjtBQS9EVTtBQWdFVixJQUFBLENBQUMsRUFBaUI7QUFoRVIsR0FBWjtBQWtFQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLEdBQVk7QUFDUjtBQUNBLElBQUEsR0FBRyxFQUFFLFVBQVMsS0FBVCxFQUFnQixLQUFoQixFQUF1QjtBQUM1QixVQUFJLENBQUo7QUFBQSxVQUNJLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFEZjtBQUFBLFVBRUksTUFBTSxHQUFHLEVBRmI7O0FBSUEsV0FBSyxDQUFDLEdBQUcsQ0FBVCxFQUFZLENBQUMsR0FBRyxFQUFoQixFQUFvQixDQUFDLEVBQXJCLEVBQ0UsTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUFqQjs7QUFFRixhQUFPLE1BQVA7QUFDRCxLQVhTLENBYVY7QUFiVTtBQWNWLElBQUEsT0FBTyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ25CLGFBQU8sQ0FBQyxHQUFHLEdBQUosR0FBVSxJQUFJLENBQUMsRUFBZixHQUFvQixHQUEzQjtBQUNELEtBaEJTLENBaUJWO0FBakJVO0FBa0JWLElBQUEsT0FBTyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ25CLGFBQU8sQ0FBQyxHQUFHLEdBQUosR0FBVSxJQUFJLENBQUMsRUFBZixHQUFvQixHQUEzQjtBQUNELEtBcEJTO0FBcUJWLElBQUEsaUJBQWlCLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDN0IsYUFBTyxHQUFHLE1BQUgsQ0FBVSxJQUFWLENBQWUsQ0FBZixFQUFrQixVQUFTLEVBQVQsRUFBWTtBQUFFLGVBQU8sRUFBRSxZQUFZLFVBQXJCO0FBQWlDLE9BQWpFLENBQVA7QUFDRDtBQXZCUyxHQUFaO0FBMkJBLEVBQUEsR0FBRyxDQUFDLFFBQUosR0FBZTtBQUNiO0FBQ0EsSUFBQSxLQUFLLEVBQUU7QUFDTDtBQUNBLHNCQUFvQixDQUZmO0FBR0wsd0JBQW9CLENBSGY7QUFJTCxzQkFBb0IsQ0FKZjtBQUtMLHlCQUFvQixPQUxmO0FBTUwsd0JBQW9CLE1BTmY7QUFPTCxNQUFBLElBQUksRUFBZ0IsU0FQZjtBQVFMLE1BQUEsTUFBTSxFQUFjLFNBUmY7QUFTTCxNQUFBLE9BQU8sRUFBYSxDQVRmLENBVUw7QUFWSztBQVdMLE1BQUEsQ0FBQyxFQUFtQixDQVhmO0FBWUwsTUFBQSxDQUFDLEVBQW1CLENBWmY7QUFhTCxNQUFBLEVBQUUsRUFBa0IsQ0FiZjtBQWNMLE1BQUEsRUFBRSxFQUFrQixDQWRmLENBZUw7QUFmSztBQWdCTCxNQUFBLEtBQUssRUFBZSxDQWhCZjtBQWlCTCxNQUFBLE1BQU0sRUFBYyxDQWpCZixDQWtCTDtBQWxCSztBQW1CTCxNQUFBLENBQUMsRUFBbUIsQ0FuQmY7QUFvQkwsTUFBQSxFQUFFLEVBQWtCLENBcEJmO0FBcUJMLE1BQUEsRUFBRSxFQUFrQixDQXJCZixDQXNCTDtBQXRCSztBQXVCTCxNQUFBLE1BQU0sRUFBYyxDQXZCZjtBQXdCTCxzQkFBb0IsQ0F4QmY7QUF5Qkwsb0JBQW9CLFNBekJmLENBMEJMO0FBMUJLO0FBMkJMLG1CQUFvQixFQTNCZjtBQTRCTCxxQkFBb0IsOEJBNUJmO0FBNkJMLHFCQUFvQjtBQTdCZixLQUZNLENBbUNmOztBQW5DZSxHQUFmOztBQW9DQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLEdBQVksVUFBUyxLQUFULEVBQWdCO0FBQzFCLFFBQUksS0FBSixDQUQwQixDQUcxQjs7QUFDQSxTQUFLLENBQUwsR0FBUyxDQUFUO0FBQ0EsU0FBSyxDQUFMLEdBQVMsQ0FBVDtBQUNBLFNBQUssQ0FBTCxHQUFTLENBQVQsQ0FOMEIsQ0FRMUI7O0FBQ0EsUUFBSSxPQUFPLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsVUFBSSxHQUFHLENBQUMsS0FBSixDQUFVLEtBQVYsQ0FBZ0IsSUFBaEIsQ0FBcUIsS0FBckIsQ0FBSixFQUFpQztBQUMvQjtBQUNBLFFBQUEsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFKLENBQVUsR0FBVixDQUFjLElBQWQsQ0FBbUIsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFkLEVBQW9CLEVBQXBCLENBQW5CLENBQVIsQ0FGK0IsQ0FJL0I7O0FBQ0EsYUFBSyxDQUFMLEdBQVMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sQ0FBakI7QUFDQSxhQUFLLENBQUwsR0FBUyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUFqQjtBQUNBLGFBQUssQ0FBTCxHQUFTLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBRCxDQUFOLENBQWpCO0FBRUQsT0FURCxNQVNPLElBQUksR0FBRyxDQUFDLEtBQUosQ0FBVSxLQUFWLENBQWdCLElBQWhCLENBQXFCLEtBQXJCLENBQUosRUFBaUM7QUFDdEM7QUFDQSxRQUFBLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSixDQUFVLEdBQVYsQ0FBYyxJQUFkLENBQW1CLE9BQU8sQ0FBQyxLQUFELENBQTFCLENBQVIsQ0FGc0MsQ0FJdEM7O0FBQ0EsYUFBSyxDQUFMLEdBQVMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQWpCO0FBQ0EsYUFBSyxDQUFMLEdBQVMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQWpCO0FBQ0EsYUFBSyxDQUFMLEdBQVMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQWpCO0FBRUQ7QUFFRixLQXJCRCxNQXFCTyxJQUFJLE9BQU8sS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUNwQyxXQUFLLENBQUwsR0FBUyxLQUFLLENBQUMsQ0FBZjtBQUNBLFdBQUssQ0FBTCxHQUFTLEtBQUssQ0FBQyxDQUFmO0FBQ0EsV0FBSyxDQUFMLEdBQVMsS0FBSyxDQUFDLENBQWY7QUFFRDtBQUVGLEdBckNEOztBQXVDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLEtBQWYsRUFBc0I7QUFDcEI7QUFDQSxJQUFBLFFBQVEsRUFBRSxZQUFXO0FBQ25CLGFBQU8sS0FBSyxLQUFMLEVBQVA7QUFDRCxLQUptQixDQUtwQjtBQUxvQjtBQU1wQixJQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLGFBQU8sTUFDSCxTQUFTLENBQUMsS0FBSyxDQUFOLENBRE4sR0FFSCxTQUFTLENBQUMsS0FBSyxDQUFOLENBRk4sR0FHSCxTQUFTLENBQUMsS0FBSyxDQUFOLENBSGI7QUFJRCxLQVhtQixDQVlwQjtBQVpvQjtBQWFwQixJQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLGFBQU8sU0FBUyxDQUFDLEtBQUssQ0FBTixFQUFTLEtBQUssQ0FBZCxFQUFpQixLQUFLLENBQXRCLEVBQXlCLElBQXpCLEVBQVQsR0FBMkMsR0FBbEQ7QUFDRCxLQWZtQixDQWdCcEI7QUFoQm9CO0FBaUJwQixJQUFBLFVBQVUsRUFBRSxZQUFXO0FBQ3JCLGFBQVEsS0FBSyxDQUFMLEdBQVMsR0FBVCxHQUFlLElBQWhCLEdBQ0MsS0FBSyxDQUFMLEdBQVMsR0FBVCxHQUFlLElBRGhCLEdBRUMsS0FBSyxDQUFMLEdBQVMsR0FBVCxHQUFlLElBRnZCO0FBR0QsS0FyQm1CLENBc0JwQjtBQXRCb0I7QUF1QnBCLElBQUEsS0FBSyxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUNyQixXQUFLLFdBQUwsR0FBbUIsSUFBSSxHQUFHLENBQUMsS0FBUixDQUFjLEtBQWQsQ0FBbkI7QUFFQSxhQUFPLElBQVA7QUFDRCxLQTNCbUIsQ0E0QnBCO0FBNUJvQjtBQTZCcEIsSUFBQSxFQUFFLEVBQUUsVUFBUyxHQUFULEVBQWM7QUFDaEI7QUFDQSxVQUFJLENBQUMsS0FBSyxXQUFWLEVBQXVCLE9BQU8sSUFBUCxDQUZQLENBSWhCOztBQUNBLE1BQUEsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFOLEdBQVUsQ0FBVixHQUFjLEdBQUcsR0FBRyxDQUFOLEdBQVUsQ0FBVixHQUFjLEdBQWxDLENBTGdCLENBT2hCOztBQUNBLGFBQU8sSUFBSSxHQUFHLENBQUMsS0FBUixDQUFjO0FBQ25CLFFBQUEsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUwsR0FBUyxDQUFDLEtBQUssV0FBTCxDQUFpQixDQUFqQixHQUFxQixLQUFLLENBQTNCLElBQWdDLEdBQTNDLENBRGU7QUFFbkIsUUFBQSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBTCxHQUFTLENBQUMsS0FBSyxXQUFMLENBQWlCLENBQWpCLEdBQXFCLEtBQUssQ0FBM0IsSUFBZ0MsR0FBM0MsQ0FGZTtBQUduQixRQUFBLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFMLEdBQVMsQ0FBQyxLQUFLLFdBQUwsQ0FBaUIsQ0FBakIsR0FBcUIsS0FBSyxDQUEzQixJQUFnQyxHQUEzQztBQUhlLE9BQWQsQ0FBUDtBQUtEO0FBMUNtQixHQUF0QixFQTNUNEUsQ0F5VzVFO0FBRUE7O0FBQ0EsRUFBQSxHQUFHLENBQUMsS0FBSixDQUFVLElBQVYsR0FBaUIsVUFBUyxLQUFULEVBQWdCO0FBQy9CLElBQUEsS0FBSyxJQUFJLEVBQVQ7QUFDQSxXQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsS0FBVixDQUFnQixJQUFoQixDQUFxQixLQUFyQixLQUNBLEdBQUcsQ0FBQyxLQUFKLENBQVUsS0FBVixDQUFnQixJQUFoQixDQUFxQixLQUFyQixDQURQO0FBRUQsR0FKRCxDQTVXNEUsQ0FrWDVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLENBQVUsS0FBVixHQUFrQixVQUFTLEtBQVQsRUFBZ0I7QUFDaEMsV0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBYixJQUFrQixRQUEzQixJQUNTLE9BQU8sS0FBSyxDQUFDLENBQWIsSUFBa0IsUUFEM0IsSUFFUyxPQUFPLEtBQUssQ0FBQyxDQUFiLElBQWtCLFFBRmxDO0FBR0QsR0FKRCxDQW5YNEUsQ0F5WDVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxLQUFKLENBQVUsT0FBVixHQUFvQixVQUFTLEtBQVQsRUFBZ0I7QUFDbEMsV0FBTyxHQUFHLENBQUMsS0FBSixDQUFVLEtBQVYsQ0FBZ0IsS0FBaEIsS0FBMEIsR0FBRyxDQUFDLEtBQUosQ0FBVSxJQUFWLENBQWUsS0FBZixDQUFqQztBQUNELEdBRkQsQ0ExWDRFLENBNlg1RTs7O0FBQ0EsRUFBQSxHQUFHLENBQUMsS0FBSixHQUFZLFVBQVMsS0FBVCxFQUFnQixRQUFoQixFQUEwQjtBQUNwQyxJQUFBLEtBQUssR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFWLEVBQWMsT0FBZCxFQUFSLENBRG9DLENBR3BDOztBQUNBLFFBQUksS0FBSyxDQUFDLE1BQU4sSUFBZ0IsQ0FBaEIsSUFBcUIsUUFBekIsRUFDRSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQVQsRUFBUixDQUxrQyxDQU9wQzs7QUFDQSxTQUFLLEtBQUwsR0FBYSxLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQWI7QUFDRCxHQVREOztBQVdBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsS0FBZixFQUFzQjtBQUNwQjtBQUNBLElBQUEsS0FBSyxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUNyQixXQUFLLFdBQUwsR0FBbUIsS0FBSyxLQUFMLENBQVcsS0FBWCxDQUFuQixDQURxQixDQUdyQjs7QUFDQSxVQUFJLEtBQUssS0FBTCxDQUFXLE1BQVgsSUFBcUIsS0FBSyxXQUFMLENBQWlCLE1BQTFDLEVBQWtEO0FBQ2hELFlBQUksU0FBUyxHQUFTLEtBQUssS0FBTCxDQUFXLEtBQUssS0FBTCxDQUFXLE1BQVgsR0FBb0IsQ0FBL0IsQ0FBdEI7QUFBQSxZQUNJLGVBQWUsR0FBRyxLQUFLLFdBQUwsQ0FBaUIsS0FBSyxXQUFMLENBQWlCLE1BQWpCLEdBQTBCLENBQTNDLENBRHRCOztBQUdBLGVBQU0sS0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixLQUFLLFdBQUwsQ0FBaUIsTUFBM0MsRUFDRSxLQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsZUFBdEI7O0FBQ0YsZUFBTSxLQUFLLEtBQUwsQ0FBVyxNQUFYLEdBQW9CLEtBQUssV0FBTCxDQUFpQixNQUEzQyxFQUNFLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsU0FBaEI7QUFDSDs7QUFFRCxhQUFPLElBQVA7QUFDRCxLQWpCbUIsQ0FrQnBCO0FBbEJvQjtBQW1CcEIsSUFBQSxNQUFNLEVBQUUsWUFBVztBQUNqQjtBQUNBLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLEVBQUUsR0FBRyxLQUFLLEtBQUwsQ0FBVyxNQUEzQixFQUFtQyxJQUFJLEdBQUcsRUFBL0MsRUFBbUQsQ0FBQyxHQUFHLEVBQXZELEVBQTJELENBQUMsRUFBNUQsRUFDRSxJQUFJLElBQUksQ0FBQyxPQUFMLENBQWEsS0FBSyxLQUFMLENBQVcsQ0FBWCxDQUFiLEtBQStCLENBQUMsQ0FBcEMsRUFDRSxJQUFJLENBQUMsSUFBTCxDQUFVLEtBQUssS0FBTCxDQUFXLENBQVgsQ0FBVixFQUphLENBTWpCOzs7QUFDQSxhQUFPLEtBQUssS0FBTCxHQUFhLElBQXBCO0FBQ0QsS0EzQm1CLENBNEJwQjtBQTVCb0I7QUE2QnBCLElBQUEsRUFBRSxFQUFFLFVBQVMsR0FBVCxFQUFjO0FBQ2hCO0FBQ0EsVUFBSSxDQUFDLEtBQUssV0FBVixFQUF1QixPQUFPLElBQVAsQ0FGUCxDQUloQjs7QUFDQSxXQUFLLElBQUksQ0FBQyxHQUFHLENBQVIsRUFBVyxFQUFFLEdBQUcsS0FBSyxLQUFMLENBQVcsTUFBM0IsRUFBbUMsS0FBSyxHQUFHLEVBQWhELEVBQW9ELENBQUMsR0FBRyxFQUF4RCxFQUE0RCxDQUFDLEVBQTdELEVBQ0UsS0FBSyxDQUFDLElBQU4sQ0FBVyxLQUFLLEtBQUwsQ0FBVyxDQUFYLElBQWdCLENBQUMsS0FBSyxXQUFMLENBQWlCLENBQWpCLElBQXNCLEtBQUssS0FBTCxDQUFXLENBQVgsQ0FBdkIsSUFBd0MsR0FBbkU7O0FBRUYsYUFBTyxJQUFJLEdBQUcsQ0FBQyxLQUFSLENBQWMsS0FBZCxDQUFQO0FBQ0QsS0F0Q21CLENBdUNwQjtBQXZDb0I7QUF3Q3BCLElBQUEsUUFBUSxFQUFFLFlBQVc7QUFDbkIsYUFBTyxLQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCLEdBQWhCLENBQVA7QUFDRCxLQTFDbUIsQ0EyQ3BCO0FBM0NvQjtBQTRDcEIsSUFBQSxPQUFPLEVBQUUsWUFBVztBQUNsQixhQUFPLEtBQUssS0FBWjtBQUNELEtBOUNtQixDQStDcEI7QUEvQ29CO0FBZ0RwQixJQUFBLEtBQUssRUFBRSxVQUFTLEtBQVQsRUFBZ0I7QUFDckIsTUFBQSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU4sRUFBUixDQURxQixDQUdyQjs7QUFDQSxVQUFJLEtBQUssQ0FBQyxPQUFOLENBQWMsS0FBZCxDQUFKLEVBQTBCLE9BQU8sS0FBUDtBQUUxQixhQUFPLEtBQUssS0FBTCxDQUFXLEtBQVgsQ0FBUDtBQUNELEtBdkRtQixDQXdEcEI7QUF4RG9CO0FBeURwQixJQUFBLEtBQUssRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDdEIsYUFBTyxNQUFNLENBQUMsSUFBUCxHQUFjLEtBQWQsQ0FBb0IsS0FBcEIsQ0FBUDtBQUNELEtBM0RtQixDQTREcEI7QUE1RG9CO0FBNkRwQixJQUFBLE9BQU8sRUFBRSxZQUFXO0FBQ2xCLFdBQUssS0FBTCxDQUFXLE9BQVg7QUFFQSxhQUFPLElBQVA7QUFDRDtBQWpFbUIsR0FBdEIsRUF6WTRFLENBNmM1RTs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxVQUFKLEdBQWlCLFVBQVMsS0FBVCxFQUFnQixRQUFoQixFQUEwQjtBQUN6QyxTQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEIsS0FBNUIsRUFBbUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELENBQS9DO0FBQ0QsR0FGRCxDQTljNEUsQ0FrZDVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxVQUFKLENBQWUsU0FBZixHQUEyQixJQUFJLEdBQUcsQ0FBQyxLQUFSLEVBQTNCO0FBRUEsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxVQUFmLEVBQTJCO0FBQ3pCO0FBQ0EsSUFBQSxRQUFRLEVBQUUsWUFBVztBQUNuQjtBQUNBLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLEVBQUUsR0FBRyxLQUFLLEtBQUwsQ0FBVyxNQUEzQixFQUFtQyxLQUFLLEdBQUcsRUFBaEQsRUFBb0QsQ0FBQyxHQUFHLEVBQXhELEVBQTRELENBQUMsRUFBN0QsRUFDRSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxJQUFkLENBQW1CLEdBQW5CLENBQVg7O0FBRUYsYUFBTyxLQUFLLENBQUMsSUFBTixDQUFXLEdBQVgsQ0FBUDtBQUNELEtBUndCLENBU3pCO0FBVHlCO0FBVXpCLElBQUEsTUFBTSxFQUFFLFlBQVc7QUFDakIsYUFBTztBQUNMLFFBQUEsRUFBRSxFQUFFLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLENBREM7QUFFTCxRQUFBLEVBQUUsRUFBRSxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxDQUZDO0FBR0wsUUFBQSxFQUFFLEVBQUUsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsQ0FIQztBQUlMLFFBQUEsRUFBRSxFQUFFLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkO0FBSkMsT0FBUDtBQU1ELEtBakJ3QixDQWtCekI7QUFsQnlCO0FBbUJ6QixJQUFBLEVBQUUsRUFBRSxVQUFTLEdBQVQsRUFBYztBQUNoQjtBQUNBLFVBQUksQ0FBQyxLQUFLLFdBQVYsRUFBdUIsT0FBTyxJQUFQLENBRlAsQ0FJaEI7O0FBQ0EsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFSLEVBQVcsRUFBRSxHQUFHLEtBQUssS0FBTCxDQUFXLE1BQTNCLEVBQW1DLEtBQUssR0FBRyxFQUFoRCxFQUFvRCxDQUFDLEdBQUcsRUFBeEQsRUFBNEQsQ0FBQyxFQUE3RCxFQUNFLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FDVCxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFtQixDQUFDLEtBQUssV0FBTCxDQUFpQixDQUFqQixFQUFvQixDQUFwQixJQUF5QixLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxDQUExQixJQUE4QyxHQUR4RCxFQUVULEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLENBQUMsS0FBSyxXQUFMLENBQWlCLENBQWpCLEVBQW9CLENBQXBCLElBQXlCLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLENBQTFCLElBQThDLEdBRnhELENBQVg7O0FBS0YsYUFBTyxJQUFJLEdBQUcsQ0FBQyxVQUFSLENBQW1CLEtBQW5CLENBQVA7QUFDRCxLQS9Cd0IsQ0FnQ3pCO0FBaEN5QjtBQWlDekIsSUFBQSxLQUFLLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3JCLE1BQUEsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFOLEVBQVIsQ0FEcUIsQ0FHckI7O0FBQ0EsVUFBSSxLQUFLLENBQUMsT0FBTixDQUFjLEtBQWQsQ0FBSixFQUEwQixPQUFPLEtBQVAsQ0FKTCxDQU1yQjs7QUFDQSxNQUFBLEtBQUssR0FBRyxLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQVIsQ0FQcUIsQ0FTckI7O0FBQ0EsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFSLEVBQVcsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUF0QixFQUE4QixDQUE5QixFQUFpQyxNQUFNLEdBQUcsRUFBL0MsRUFBbUQsQ0FBQyxHQUFHLEVBQXZELEVBQTJELENBQUMsRUFBNUQsRUFBZ0U7QUFDOUQsUUFBQSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTLEtBQVQsQ0FBZSxHQUFmLENBQUo7QUFDQSxRQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFYLEVBQW1CLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFGLENBQTdCLENBQVo7QUFDRDs7QUFFRCxhQUFPLE1BQVA7QUFDRCxLQWpEd0IsQ0FrRHpCO0FBbER5QjtBQW1EekIsSUFBQSxJQUFJLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ25CLFVBQUksR0FBRyxHQUFHLEtBQUssSUFBTCxFQUFWLENBRG1CLENBR25COztBQUNBLE1BQUEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFUO0FBQ0EsTUFBQSxDQUFDLElBQUksR0FBRyxDQUFDLENBQVQsQ0FMbUIsQ0FPbkI7O0FBQ0EsVUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sSUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQXZCLEVBQ0UsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLEtBQUwsQ0FBVyxNQUFYLEdBQW9CLENBQWpDLEVBQW9DLENBQUMsSUFBSSxDQUF6QyxFQUE0QyxDQUFDLEVBQTdDLEVBQ0UsS0FBSyxLQUFMLENBQVcsQ0FBWCxJQUFnQixDQUFDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLENBQXBCLEVBQXVCLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLENBQTFDLENBQWhCO0FBRUosYUFBTyxJQUFQO0FBQ0QsS0FoRXdCLENBaUV6QjtBQWpFeUI7QUFrRXpCLElBQUEsSUFBSSxFQUFFLFVBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QjtBQUM1QixVQUFJLENBQUo7QUFBQSxVQUFPLEdBQUcsR0FBRyxLQUFLLElBQUwsRUFBYixDQUQ0QixDQUc1Qjs7QUFDQSxXQUFLLENBQUMsR0FBRyxLQUFLLEtBQUwsQ0FBVyxNQUFYLEdBQW9CLENBQTdCLEVBQWdDLENBQUMsSUFBSSxDQUFyQyxFQUF3QyxDQUFDLEVBQXpDLEVBQTZDO0FBQzNDLGFBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLENBQUMsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBbUIsR0FBRyxDQUFDLENBQXhCLElBQTZCLEtBQTlCLEdBQXdDLEdBQUcsQ0FBQyxLQUE1QyxHQUFxRCxHQUFHLENBQUMsQ0FBNUU7QUFDQSxhQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixDQUFDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLEdBQUcsQ0FBQyxDQUF4QixJQUE2QixNQUE5QixHQUF3QyxHQUFHLENBQUMsTUFBNUMsR0FBcUQsR0FBRyxDQUFDLENBQTVFO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0QsS0E1RXdCLENBNkV6QjtBQTdFeUI7QUE4RXpCLElBQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixNQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsSUFBWCxDQUFnQixZQUFoQixDQUE2QixRQUE3QixFQUF1QyxLQUFLLFFBQUwsRUFBdkM7QUFFQSxhQUFPLEdBQUcsQ0FBQyxNQUFKLENBQVcsSUFBWCxDQUFnQixPQUFoQixFQUFQO0FBQ0Q7QUFsRndCLEdBQTNCLEVBcmQ0RSxDQTBpQjVFOztBQUNBLEVBQUEsR0FBRyxDQUFDLFNBQUosR0FBZ0IsVUFBUyxLQUFULEVBQWdCLFFBQWhCLEVBQTBCO0FBQ3hDLFNBQUssV0FBTCxDQUFpQixJQUFqQixDQUFzQixJQUF0QixFQUE0QixLQUE1QixFQUFtQyxRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUQsRUFBTSxDQUFOLEVBQVMsQ0FBVCxDQUFELENBQS9DO0FBQ0QsR0FGRCxDQTNpQjRFLENBK2lCNUU7OztBQUNBLEVBQUEsR0FBRyxDQUFDLFNBQUosQ0FBYyxTQUFkLEdBQTBCLElBQUksR0FBRyxDQUFDLEtBQVIsRUFBMUI7QUFFQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLFNBQWYsRUFBMEI7QUFDeEI7QUFDQSxJQUFBLFFBQVEsRUFBRSxZQUFXO0FBQ25CLGFBQU8sYUFBYSxDQUFDLEtBQUssS0FBTixDQUFwQjtBQUNELEtBSnVCLENBS3hCO0FBTHdCO0FBTXhCLElBQUEsSUFBSSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNuQjtBQUNBLFVBQUksR0FBRyxHQUFHLEtBQUssSUFBTCxFQUFWLENBRm1CLENBSW5COztBQUNBLE1BQUEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFUO0FBQ0EsTUFBQSxDQUFDLElBQUksR0FBRyxDQUFDLENBQVQ7O0FBRUEsVUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sSUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQXZCLEVBQTRCO0FBQzFCO0FBQ0EsYUFBSyxJQUFJLENBQUosRUFBTyxDQUFDLEdBQUcsS0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixDQUFwQyxFQUF1QyxDQUFDLElBQUksQ0FBNUMsRUFBK0MsQ0FBQyxFQUFoRCxFQUFvRDtBQUNsRCxVQUFBLENBQUMsR0FBRyxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxDQUFKOztBQUVBLGNBQUksQ0FBQyxJQUFJLEdBQUwsSUFBWSxDQUFDLElBQUksR0FBakIsSUFBd0IsQ0FBQyxJQUFJLEdBQWpDLEVBQXVDO0FBQ3JDLGlCQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxLQUFvQixDQUFwQjtBQUNBLGlCQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxLQUFvQixDQUFwQjtBQUVELFdBSkQsTUFJTyxJQUFJLENBQUMsSUFBSSxHQUFULEVBQWU7QUFDcEIsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLEtBQW9CLENBQXBCO0FBRUQsV0FITSxNQUdBLElBQUksQ0FBQyxJQUFJLEdBQVQsRUFBZTtBQUNwQixpQkFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsS0FBb0IsQ0FBcEI7QUFFRCxXQUhNLE1BR0EsSUFBSSxDQUFDLElBQUksR0FBTCxJQUFZLENBQUMsSUFBSSxHQUFqQixJQUF3QixDQUFDLElBQUksR0FBakMsRUFBdUM7QUFDNUMsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLEtBQW9CLENBQXBCO0FBQ0EsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLEtBQW9CLENBQXBCO0FBQ0EsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLEtBQW9CLENBQXBCO0FBQ0EsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLEtBQW9CLENBQXBCOztBQUVBLGdCQUFJLENBQUMsSUFBSSxHQUFULEVBQWU7QUFDYixtQkFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsS0FBb0IsQ0FBcEI7QUFDQSxtQkFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsS0FBb0IsQ0FBcEI7QUFDRDtBQUVGLFdBWE0sTUFXQSxJQUFJLENBQUMsSUFBSSxHQUFULEVBQWU7QUFDcEIsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLEtBQW9CLENBQXBCO0FBQ0EsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLEtBQW9CLENBQXBCO0FBQ0Q7QUFFRjtBQUNGOztBQUVELGFBQU8sSUFBUDtBQUNELEtBakR1QixDQWtEeEI7QUFsRHdCO0FBbUR4QixJQUFBLElBQUksRUFBRSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0I7QUFDNUI7QUFDQSxVQUFJLENBQUo7QUFBQSxVQUFPLENBQVA7QUFBQSxVQUFVLEdBQUcsR0FBRyxLQUFLLElBQUwsRUFBaEIsQ0FGNEIsQ0FJNUI7O0FBQ0EsV0FBSyxDQUFDLEdBQUcsS0FBSyxLQUFMLENBQVcsTUFBWCxHQUFvQixDQUE3QixFQUFnQyxDQUFDLElBQUksQ0FBckMsRUFBd0MsQ0FBQyxFQUF6QyxFQUE2QztBQUMzQyxRQUFBLENBQUMsR0FBRyxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxDQUFKOztBQUVBLFlBQUksQ0FBQyxJQUFJLEdBQUwsSUFBWSxDQUFDLElBQUksR0FBakIsSUFBd0IsQ0FBQyxJQUFJLEdBQWpDLEVBQXVDO0FBQ3JDLGVBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLENBQUMsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBbUIsR0FBRyxDQUFDLENBQXhCLElBQTZCLEtBQTlCLEdBQXdDLEdBQUcsQ0FBQyxLQUE1QyxHQUFxRCxHQUFHLENBQUMsQ0FBNUU7QUFDQSxlQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixDQUFDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLEdBQUcsQ0FBQyxDQUF4QixJQUE2QixNQUE5QixHQUF3QyxHQUFHLENBQUMsTUFBNUMsR0FBcUQsR0FBRyxDQUFDLENBQTVFO0FBRUQsU0FKRCxNQUlPLElBQUksQ0FBQyxJQUFJLEdBQVQsRUFBZTtBQUNwQixlQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixDQUFDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLEdBQUcsQ0FBQyxDQUF4QixJQUE2QixLQUE5QixHQUF3QyxHQUFHLENBQUMsS0FBNUMsR0FBcUQsR0FBRyxDQUFDLENBQTVFO0FBRUQsU0FITSxNQUdBLElBQUksQ0FBQyxJQUFJLEdBQVQsRUFBZTtBQUNwQixlQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixDQUFDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLEdBQUcsQ0FBQyxDQUF4QixJQUE2QixNQUE5QixHQUF3QyxHQUFHLENBQUMsTUFBNUMsR0FBcUQsR0FBRyxDQUFDLENBQTVFO0FBRUQsU0FITSxNQUdBLElBQUksQ0FBQyxJQUFJLEdBQUwsSUFBWSxDQUFDLElBQUksR0FBakIsSUFBd0IsQ0FBQyxJQUFJLEdBQWpDLEVBQXVDO0FBQzVDLGVBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLENBQUMsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBbUIsR0FBRyxDQUFDLENBQXhCLElBQTZCLEtBQTlCLEdBQXdDLEdBQUcsQ0FBQyxLQUE1QyxHQUFxRCxHQUFHLENBQUMsQ0FBNUU7QUFDQSxlQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixDQUFDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLEdBQUcsQ0FBQyxDQUF4QixJQUE2QixNQUE5QixHQUF3QyxHQUFHLENBQUMsTUFBNUMsR0FBcUQsR0FBRyxDQUFDLENBQTVFO0FBQ0EsZUFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBb0IsQ0FBQyxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFtQixHQUFHLENBQUMsQ0FBeEIsSUFBNkIsS0FBOUIsR0FBd0MsR0FBRyxDQUFDLEtBQTVDLEdBQXFELEdBQUcsQ0FBQyxDQUE1RTtBQUNBLGVBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLENBQUMsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBbUIsR0FBRyxDQUFDLENBQXhCLElBQTZCLE1BQTlCLEdBQXdDLEdBQUcsQ0FBQyxNQUE1QyxHQUFxRCxHQUFHLENBQUMsQ0FBNUU7O0FBRUEsY0FBSSxDQUFDLElBQUksR0FBVCxFQUFlO0FBQ2IsaUJBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLENBQUMsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBbUIsR0FBRyxDQUFDLENBQXhCLElBQTZCLEtBQTlCLEdBQXdDLEdBQUcsQ0FBQyxLQUE1QyxHQUFxRCxHQUFHLENBQUMsQ0FBNUU7QUFDQSxpQkFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBb0IsQ0FBQyxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFtQixHQUFHLENBQUMsQ0FBeEIsSUFBNkIsTUFBOUIsR0FBd0MsR0FBRyxDQUFDLE1BQTVDLEdBQXFELEdBQUcsQ0FBQyxDQUE1RTtBQUNEO0FBRUYsU0FYTSxNQVdBLElBQUksQ0FBQyxJQUFJLEdBQVQsRUFBZTtBQUNwQjtBQUNBLGVBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLEtBQXBCLEdBQThCLEdBQUcsQ0FBQyxLQUFyRDtBQUNBLGVBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW9CLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLE1BQXBCLEdBQThCLEdBQUcsQ0FBQyxNQUFyRCxDQUhvQixDQUtwQjs7QUFDQSxlQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFvQixDQUFDLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFkLElBQW1CLEdBQUcsQ0FBQyxDQUF4QixJQUE2QixLQUE5QixHQUF3QyxHQUFHLENBQUMsS0FBNUMsR0FBcUQsR0FBRyxDQUFDLENBQTVFO0FBQ0EsZUFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsSUFBb0IsQ0FBQyxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxJQUFtQixHQUFHLENBQUMsQ0FBeEIsSUFBNkIsTUFBOUIsR0FBd0MsR0FBRyxDQUFDLE1BQTVDLEdBQXFELEdBQUcsQ0FBQyxDQUE1RTtBQUNEO0FBRUY7O0FBRUQsYUFBTyxJQUFQO0FBQ0QsS0E3RnVCLENBOEZ4QjtBQTlGd0I7QUErRnhCLElBQUEsS0FBSyxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUNyQjtBQUNBLFVBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQyxTQUF6QixFQUFvQyxPQUFPLEtBQUssQ0FBQyxPQUFOLEVBQVAsQ0FGZixDQUlyQjs7QUFDQSxVQUFJLENBQUo7QUFBQSxVQUFPLEVBQVA7QUFBQSxVQUFXLEVBQVg7QUFBQSxVQUFlLENBQWY7QUFBQSxVQUFrQixHQUFsQjtBQUFBLFVBQXVCLEdBQXZCO0FBQUEsVUFDSSxDQUFDLEdBQUcsQ0FEUjtBQUFBLFVBRUksQ0FBQyxHQUFHLENBRlI7QUFBQSxVQUdJLFFBQVEsR0FBRztBQUFFLGFBQUksQ0FBTjtBQUFTLGFBQUksQ0FBYjtBQUFnQixhQUFJLENBQXBCO0FBQXVCLGFBQUksQ0FBM0I7QUFBOEIsYUFBSSxDQUFsQztBQUFxQyxhQUFJLENBQXpDO0FBQTRDLGFBQUksQ0FBaEQ7QUFBbUQsYUFBSSxDQUF2RDtBQUEwRCxhQUFJO0FBQTlELE9BSGY7O0FBS0EsVUFBRyxPQUFPLEtBQVAsSUFBZ0IsUUFBbkIsRUFBNEI7QUFFMUIsUUFBQSxLQUFLLEdBQUcsS0FBSyxDQUNWLE9BREssQ0FDRyxHQUFHLENBQUMsS0FBSixDQUFVLE1BRGIsRUFDcUIsR0FEckIsRUFDa0M7QUFEbEMsU0FFTCxPQUZLLENBRUcsR0FBRyxDQUFDLEtBQUosQ0FBVSxXQUZiLEVBRTBCLE1BRjFCLEVBRWtDO0FBRmxDLFNBR0wsT0FISyxDQUdHLEdBQUcsQ0FBQyxLQUFKLENBQVUsTUFIYixFQUdxQixJQUhyQixFQUdrQztBQUhsQyxTQUlMLE9BSkssQ0FJRyxHQUFHLENBQUMsS0FBSixDQUFVLEtBSmIsRUFJb0IsR0FKcEIsRUFJa0M7QUFKbEMsU0FLTCxPQUxLLENBS0csR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUxiLEVBS2dCLElBTGhCLEVBS2tDO0FBTGxDLFNBTUwsSUFOSyxHQU1rQztBQU5sQyxTQU9MLEtBUEssQ0FPQyxHQUFHLENBQUMsS0FBSixDQUFVLFdBUFgsQ0FBUixDQUYwQixDQVNnQjtBQUUzQyxPQVhELE1BV0s7QUFDSCxRQUFBLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTixDQUFhLFVBQVMsSUFBVCxFQUFlLElBQWYsRUFBb0I7QUFDdkMsaUJBQU8sR0FBRyxNQUFILENBQVUsS0FBVixDQUFnQixJQUFoQixFQUFzQixJQUF0QixDQUFQO0FBQ0QsU0FGTyxFQUVMLEVBRkssQ0FBUjtBQUdELE9BekJvQixDQTJCckI7OztBQUVBLFVBQUksR0FBRyxHQUFHLEVBQVY7O0FBRUEsU0FBRTtBQUVBO0FBQ0EsWUFBRyxHQUFHLENBQUMsS0FBSixDQUFVLFlBQVYsQ0FBdUIsSUFBdkIsQ0FBNEIsS0FBSyxDQUFDLENBQUQsQ0FBakMsQ0FBSCxFQUF5QztBQUN2QyxVQUFBLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBRCxDQUFUO0FBQ0EsVUFBQSxLQUFLLENBQUMsS0FBTixHQUZ1QyxDQUd6QztBQUNDLFNBSkQsTUFJTSxJQUFHLENBQUMsQ0FBQyxXQUFGLE1BQW1CLEdBQXRCLEVBQTBCO0FBQzlCLFVBQUEsQ0FBQyxHQUFHLEdBQUo7QUFDRCxTQVRELENBV0E7OztBQUNBLFFBQUEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQUYsRUFBRCxDQUFOLENBWkEsQ0FjQTs7QUFDQSxhQUFJLENBQUMsR0FBRyxDQUFSLEVBQVcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFKLENBQXZCLEVBQWlDLEVBQUUsQ0FBbkMsRUFBcUM7QUFDbkMsVUFBQSxHQUFHLENBQUMsSUFBSixDQUFTLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBTixFQUFELENBQW5CO0FBQ0QsU0FqQkQsQ0FtQkE7OztBQUNBLFlBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFELENBQVgsRUFBZTtBQUViLGNBQUcsQ0FBQyxJQUFJLEdBQUwsSUFBWSxDQUFDLElBQUksR0FBakIsSUFBd0IsQ0FBQyxJQUFJLEdBQTdCLElBQW9DLENBQUMsSUFBSSxHQUE1QyxFQUFnRDtBQUM5QyxZQUFBLENBQUMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBUixHQUFpQixDQUFsQixDQUFQO0FBQ0EsWUFBQSxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFKLENBQVQsQ0FBUDtBQUNELFdBSEQsTUFHTSxJQUFHLENBQUMsSUFBSSxHQUFSLEVBQVk7QUFDaEIsWUFBQSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUQsQ0FBUDtBQUNELFdBRkssTUFFQSxJQUFHLENBQUMsSUFBSSxHQUFSLEVBQVk7QUFDaEIsWUFBQSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUQsQ0FBUDtBQUNELFdBRkssTUFFQSxJQUFHLENBQUMsSUFBSSxHQUFSLEVBQVk7QUFDaEIsWUFBQSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUQsQ0FBUDtBQUNBLFlBQUEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFELENBQVA7QUFDRCxXQVpZLENBY2Y7O0FBQ0MsU0FmRCxNQWVLO0FBRUg7QUFDQSxjQUFHLENBQUMsSUFBSSxHQUFMLElBQVksQ0FBQyxJQUFJLEdBQWpCLElBQXdCLENBQUMsSUFBSSxHQUE3QixJQUFvQyxDQUFDLElBQUksR0FBekMsSUFBZ0QsQ0FBQyxJQUFJLEdBQXJELElBQTRELENBQUMsSUFBSSxHQUFwRSxFQUF3RTtBQUV0RSxZQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsSUFBVSxDQUFWO0FBQ0EsWUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsQ0FBVjs7QUFFQSxnQkFBRyxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsSUFBYixFQUFrQjtBQUNoQixjQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsSUFBVSxDQUFWO0FBQ0EsY0FBQSxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsQ0FBVjtBQUNEOztBQUVELGdCQUFHLEdBQUcsQ0FBQyxDQUFELENBQUgsSUFBVSxJQUFiLEVBQWtCO0FBQ2hCLGNBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxJQUFVLENBQVY7QUFDQSxjQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsSUFBVSxDQUFWO0FBQ0QsYUFicUUsQ0FldEU7OztBQUNBLFlBQUEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUQsQ0FBSixDQUFSLEdBQWlCLENBQWxCLENBQVA7QUFDQSxZQUFBLENBQUMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBVCxDQUFQO0FBRUQsV0FuQkQsTUFtQk0sSUFBRyxDQUFDLElBQUksR0FBUixFQUFZO0FBQ2hCLFlBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxJQUFVLENBQVY7QUFDQSxZQUFBLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBRCxDQUFQO0FBQ0QsV0FISyxNQUdBLElBQUcsQ0FBQyxJQUFJLEdBQVIsRUFBWTtBQUNoQixZQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsSUFBVSxDQUFWO0FBQ0EsWUFBQSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUQsQ0FBUDtBQUNELFdBSEssTUFHQSxJQUFHLENBQUMsSUFBSSxHQUFSLEVBQVk7QUFDaEIsWUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsQ0FBVjtBQUNBLFlBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxJQUFVLENBQVY7QUFDQSxZQUFBLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBRCxDQUFQO0FBQ0EsWUFBQSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUQsQ0FBUDtBQUNEO0FBRUY7O0FBRUQsWUFBRyxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsR0FBYixFQUFpQjtBQUNmLFVBQUEsRUFBRSxHQUFHLENBQUw7QUFDQSxVQUFBLEVBQUUsR0FBRyxDQUFMO0FBQ0Q7O0FBRUQsWUFBRyxHQUFHLENBQUMsQ0FBRCxDQUFILElBQVUsR0FBYixFQUFpQjtBQUNmLFVBQUEsQ0FBQyxHQUFHLEVBQUo7QUFDQSxVQUFBLENBQUMsR0FBRyxFQUFKO0FBQ0Q7O0FBRUQsUUFBQSxHQUFHLENBQUMsSUFBSixDQUFTLEdBQVQ7QUFFRCxPQXBGRCxRQW9GTyxLQUFLLENBQUMsTUFwRmI7O0FBc0ZBLGFBQU8sR0FBUDtBQUVELEtBdE51QixDQXVOeEI7QUF2TndCO0FBd054QixJQUFBLElBQUksRUFBRSxZQUFXO0FBQ2YsTUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLElBQVgsQ0FBZ0IsWUFBaEIsQ0FBNkIsR0FBN0IsRUFBa0MsS0FBSyxRQUFMLEVBQWxDO0FBRUEsYUFBTyxHQUFHLENBQUMsTUFBSixDQUFXLElBQVgsQ0FBZ0IsT0FBaEIsRUFBUDtBQUNEO0FBNU51QixHQUExQixFQWxqQjRFLENBaXhCNUU7O0FBQ0EsRUFBQSxHQUFHLENBQUMsTUFBSixHQUFhLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDdEI7QUFDQSxJQUFBLE1BQU0sRUFBRSxVQUFTLEtBQVQsRUFBZ0IsSUFBaEIsRUFBc0I7QUFDNUI7QUFDQSxXQUFLLEtBQUwsR0FBYSxDQUFiO0FBQ0EsV0FBSyxJQUFMLEdBQWEsSUFBSSxJQUFJLEVBQXJCLENBSDRCLENBSzVCOztBQUNBLFVBQUksT0FBTyxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCO0FBQ0EsYUFBSyxLQUFMLEdBQWEsS0FBSyxDQUFDLEtBQUQsQ0FBTCxHQUFlLENBQWYsR0FBbUIsQ0FBQyxRQUFRLENBQUMsS0FBRCxDQUFULEdBQW9CLEtBQUssR0FBRyxDQUFSLEdBQVksQ0FBQyxPQUFiLEdBQXVCLENBQUMsT0FBNUMsR0FBdUQsS0FBdkY7QUFFRCxPQUpELE1BSU8sSUFBSSxPQUFPLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDcEMsUUFBQSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQU4sQ0FBWSxHQUFHLENBQUMsS0FBSixDQUFVLElBQXRCLENBQVA7O0FBRUEsWUFBSSxJQUFKLEVBQVU7QUFDUjtBQUNBLGVBQUssS0FBTCxHQUFhLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQXZCLENBRlEsQ0FJUjs7QUFDQSxjQUFJLElBQUksQ0FBQyxDQUFELENBQUosSUFBVyxHQUFmLEVBQ0UsS0FBSyxLQUFMLElBQWMsR0FBZCxDQURGLEtBRUssSUFBSSxJQUFJLENBQUMsQ0FBRCxDQUFKLElBQVcsR0FBZixFQUNILEtBQUssS0FBTCxJQUFjLElBQWQsQ0FSTSxDQVVSOztBQUNBLGVBQUssSUFBTCxHQUFZLElBQUksQ0FBQyxDQUFELENBQWhCO0FBQ0Q7QUFFRixPQWpCTSxNQWlCQTtBQUNMLFlBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQyxNQUF6QixFQUFpQztBQUMvQixlQUFLLEtBQUwsR0FBYSxLQUFLLENBQUMsT0FBTixFQUFiO0FBQ0EsZUFBSyxJQUFMLEdBQWEsS0FBSyxDQUFDLElBQW5CO0FBQ0Q7QUFDRjtBQUVGLEtBcENxQixDQXFDdEI7QUFyQ3NCO0FBc0N0QixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxRQUFRLEVBQUUsWUFBVztBQUNuQixlQUFPLENBQ0wsS0FBSyxJQUFMLElBQWEsR0FBYixHQUNFLENBQUMsRUFBRSxLQUFLLEtBQUwsR0FBYSxHQUFmLENBQUQsR0FBdUIsR0FEekIsR0FFQSxLQUFLLElBQUwsSUFBYSxHQUFiLEdBQ0UsS0FBSyxLQUFMLEdBQWEsR0FEZixHQUVFLEtBQUssS0FMRixJQU1ILEtBQUssSUFOVDtBQU9ELE9BVks7QUFXTjtBQUNBLE1BQUEsT0FBTyxFQUFFLFlBQVc7QUFDbEIsZUFBTyxLQUFLLEtBQVo7QUFDRCxPQWRLLENBZU47QUFmTTtBQWdCTixNQUFBLElBQUksRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDckIsZUFBTyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsT0FBTyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsTUFBZixDQUF0QixFQUE4QyxLQUFLLElBQW5ELENBQVA7QUFDRCxPQWxCSyxDQW1CTjtBQW5CTTtBQW9CTixNQUFBLEtBQUssRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDdEIsZUFBTyxLQUFLLElBQUwsQ0FBVSxDQUFDLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxNQUFmLENBQVgsQ0FBUDtBQUNELE9BdEJLLENBdUJOO0FBdkJNO0FBd0JOLE1BQUEsS0FBSyxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN0QixlQUFPLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxPQUFPLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxNQUFmLENBQXRCLEVBQThDLEtBQUssSUFBbkQsQ0FBUDtBQUNELE9BMUJLLENBMkJOO0FBM0JNO0FBNEJOLE1BQUEsTUFBTSxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN2QixlQUFPLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxPQUFPLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxNQUFmLENBQXRCLEVBQThDLEtBQUssSUFBbkQsQ0FBUDtBQUNELE9BOUJLLENBK0JOO0FBL0JNO0FBZ0NOLE1BQUEsRUFBRSxFQUFFLFVBQVMsSUFBVCxFQUFlO0FBQ2pCLFlBQUksTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxJQUFmLENBQWI7QUFFQSxZQUFJLE9BQU8sSUFBUCxLQUFnQixRQUFwQixFQUNFLE1BQU0sQ0FBQyxJQUFQLEdBQWMsSUFBZDtBQUVGLGVBQU8sTUFBUDtBQUNELE9BdkNLLENBd0NOO0FBeENNO0FBeUNOLE1BQUEsS0FBSyxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN0QixhQUFLLFdBQUwsR0FBbUIsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLE1BQWYsQ0FBbkI7QUFFQSxlQUFPLElBQVA7QUFDRCxPQTdDSyxDQThDTjtBQTlDTTtBQStDTixNQUFBLEVBQUUsRUFBRSxVQUFTLEdBQVQsRUFBYztBQUNoQjtBQUNBLFlBQUksQ0FBQyxLQUFLLFdBQVYsRUFBdUIsT0FBTyxJQUFQLENBRlAsQ0FJaEI7O0FBQ0EsZUFBTyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBSyxXQUFwQixFQUNGLEtBREUsQ0FDSSxJQURKLEVBRUYsS0FGRSxDQUVJLEdBRkosRUFHRixJQUhFLENBR0csSUFISCxDQUFQO0FBSUQ7QUF4REs7QUF0Q2MsR0FBWCxDQUFiOztBQW1HQSxFQUFBLEdBQUcsQ0FBQyxPQUFKLEdBQWMsVUFBUyxPQUFULEVBQWtCO0FBQzlCLFFBQUksQ0FBSjtBQUFBLFFBQU8sQ0FBUDtBQUFBLFFBQVUsS0FBVjtBQUFBLFFBQWlCLE1BQWpCO0FBQUEsUUFDSSxFQUFFLEdBQUssQ0FEWCxDQUNhO0FBRGI7QUFBQSxRQUVJLEVBQUUsR0FBSyxDQUZYLENBRWE7QUFGYjtBQUFBLFFBR0ksR0FBRyxHQUFJLE9BQU8sQ0FBQyxJQUFSLEVBSFg7QUFBQSxRQUlJLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFSLENBQWEsU0FBYixLQUEyQixFQUE1QixFQUFnQyxLQUFoQyxDQUFzQyxZQUF0QyxDQUpYO0FBQUEsUUFLSSxFQUFFLEdBQUssT0FMWDtBQUFBLFFBTUksRUFBRSxHQUFLLE9BTlgsQ0FEOEIsQ0FTOUI7O0FBQ0EsSUFBQSxLQUFLLEdBQUksSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLE9BQU8sQ0FBQyxLQUFSLEVBQWYsQ0FBVDtBQUNBLElBQUEsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxPQUFPLENBQUMsTUFBUixFQUFmLENBQVQsQ0FYOEIsQ0FhOUI7O0FBQ0EsV0FBTyxLQUFLLENBQUMsSUFBTixJQUFjLEdBQXJCLEVBQTBCO0FBQ3hCLE1BQUEsRUFBRSxJQUFJLEtBQUssQ0FBQyxLQUFaO0FBQ0EsTUFBQSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLEVBQUUsWUFBWSxHQUFHLENBQUMsR0FBbEIsR0FBd0IsRUFBRSxDQUFDLE1BQUgsR0FBWSxXQUFwQyxHQUFrRCxFQUFFLENBQUMsTUFBSCxHQUFZLEtBQVosRUFBakUsQ0FBUjtBQUNBLE1BQUEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFILEVBQUw7QUFDRDs7QUFDRCxXQUFPLE1BQU0sQ0FBQyxJQUFQLElBQWUsR0FBdEIsRUFBMkI7QUFDekIsTUFBQSxFQUFFLElBQUksTUFBTSxDQUFDLEtBQWI7QUFDQSxNQUFBLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsRUFBRSxZQUFZLEdBQUcsQ0FBQyxHQUFsQixHQUF3QixFQUFFLENBQUMsTUFBSCxHQUFZLFlBQXBDLEdBQW1ELEVBQUUsQ0FBQyxNQUFILEdBQVksTUFBWixFQUFsRSxDQUFUO0FBQ0EsTUFBQSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQUgsRUFBTDtBQUNELEtBdkI2QixDQXlCOUI7OztBQUNBLFNBQUssQ0FBTCxHQUFjLEdBQUcsQ0FBQyxDQUFsQjtBQUNBLFNBQUssQ0FBTCxHQUFjLEdBQUcsQ0FBQyxDQUFsQjtBQUNBLFNBQUssS0FBTCxHQUFjLEtBQUssR0FBSSxFQUF2QjtBQUNBLFNBQUssTUFBTCxHQUFjLE1BQU0sR0FBRyxFQUF2QjtBQUNBLFNBQUssSUFBTCxHQUFjLENBQWQ7O0FBRUEsUUFBSSxJQUFKLEVBQVU7QUFDUjtBQUNBLE1BQUEsQ0FBQyxHQUFRLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQW5CO0FBQ0EsTUFBQSxDQUFDLEdBQVEsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFELENBQUwsQ0FBbkI7QUFDQSxNQUFBLEtBQUssR0FBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUFuQjtBQUNBLE1BQUEsTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBRCxDQUFMLENBQW5CLENBTFEsQ0FPUjs7QUFDQSxXQUFLLElBQUwsR0FBYyxLQUFLLEtBQUwsR0FBYSxLQUFLLE1BQW5CLEdBQThCLEtBQUssR0FBRyxNQUF2QyxHQUNWLEtBQUssTUFBTCxHQUFjLE1BREosR0FFVixLQUFLLEtBQUwsR0FBYyxLQUZoQixDQVJRLENBWVI7O0FBQ0EsV0FBSyxDQUFMLEdBQWMsQ0FBZDtBQUNBLFdBQUssQ0FBTCxHQUFjLENBQWQ7QUFDQSxXQUFLLEtBQUwsR0FBYyxLQUFkO0FBQ0EsV0FBSyxNQUFMLEdBQWMsTUFBZDtBQUVEO0FBRUYsR0FwREQsQ0FyM0I0RSxDQTI2QjVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLE9BQWYsRUFBd0I7QUFDdEI7QUFDQSxJQUFBLFFBQVEsRUFBRSxZQUFXO0FBQ25CLGFBQU8sS0FBSyxDQUFMLEdBQVMsR0FBVCxHQUFlLEtBQUssQ0FBcEIsR0FBd0IsR0FBeEIsR0FBOEIsS0FBSyxLQUFuQyxHQUEyQyxHQUEzQyxHQUFpRCxLQUFLLE1BQTdEO0FBQ0Q7QUFKcUIsR0FBeEI7QUFRQSxFQUFBLEdBQUcsQ0FBQyxPQUFKLEdBQWMsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUN2QjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsSUFBVCxFQUFlO0FBQ3JCO0FBQ0EsV0FBSyxPQUFMLEdBQWUsR0FBRyxDQUFDLFFBQUosQ0FBYSxLQUFiLENBQW1CLE1BQWxDLENBRnFCLENBSXJCOztBQUNBLFdBQUssR0FBTCxHQUFXLEVBQVgsQ0FMcUIsQ0FPckI7O0FBQ0EsVUFBSSxLQUFLLElBQUwsR0FBWSxJQUFoQixFQUFzQjtBQUNwQixhQUFLLElBQUwsR0FBWSxJQUFJLENBQUMsUUFBakI7QUFDQSxhQUFLLElBQUwsQ0FBVSxRQUFWLEdBQXFCLElBQXJCLENBRm9CLENBSXBCOztBQUNBLGFBQUssT0FBTCxHQUFlLElBQUksQ0FBQyxZQUFMLENBQWtCLFFBQWxCLEtBQStCLEtBQUssT0FBbkQ7QUFDRDtBQUNGLEtBakJzQixDQW1CdkI7QUFuQnVCO0FBb0J2QixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxDQUFDLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDYixlQUFPLEtBQUssSUFBTCxDQUFVLEdBQVYsRUFBZSxDQUFmLENBQVA7QUFDRCxPQUpLLENBS047QUFMTTtBQU1OLE1BQUEsQ0FBQyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2IsZUFBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLEVBQWUsQ0FBZixDQUFQO0FBQ0QsT0FSSyxDQVNOO0FBVE07QUFVTixNQUFBLEVBQUUsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNkLGVBQU8sQ0FBQyxJQUFJLElBQUwsR0FBWSxLQUFLLENBQUwsS0FBVyxLQUFLLEtBQUwsS0FBZSxDQUF0QyxHQUEwQyxLQUFLLENBQUwsQ0FBTyxDQUFDLEdBQUcsS0FBSyxLQUFMLEtBQWUsQ0FBMUIsQ0FBakQ7QUFDRCxPQVpLLENBYU47QUFiTTtBQWNOLE1BQUEsRUFBRSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2QsZUFBTyxDQUFDLElBQUksSUFBTCxHQUFZLEtBQUssQ0FBTCxLQUFXLEtBQUssTUFBTCxLQUFnQixDQUF2QyxHQUEyQyxLQUFLLENBQUwsQ0FBTyxDQUFDLEdBQUcsS0FBSyxNQUFMLEtBQWdCLENBQTNCLENBQWxEO0FBQ0QsT0FoQkssQ0FpQk47QUFqQk07QUFrQk4sTUFBQSxJQUFJLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ25CLGVBQU8sS0FBSyxDQUFMLENBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBWSxDQUFaLENBQVA7QUFDRCxPQXBCSyxDQXFCTjtBQXJCTTtBQXNCTixNQUFBLE1BQU0sRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDckIsZUFBTyxLQUFLLEVBQUwsQ0FBUSxDQUFSLEVBQVcsRUFBWCxDQUFjLENBQWQsQ0FBUDtBQUNELE9BeEJLLENBeUJOO0FBekJNO0FBMEJOLE1BQUEsS0FBSyxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUNyQixlQUFPLEtBQUssSUFBTCxDQUFVLE9BQVYsRUFBbUIsS0FBbkIsQ0FBUDtBQUNELE9BNUJLLENBNkJOO0FBN0JNO0FBOEJOLE1BQUEsTUFBTSxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN2QixlQUFPLEtBQUssSUFBTCxDQUFVLFFBQVYsRUFBb0IsTUFBcEIsQ0FBUDtBQUNELE9BaENLLENBaUNOO0FBakNNO0FBa0NOLE1BQUEsSUFBSSxFQUFFLFVBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QjtBQUM1QixZQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLElBQUwsRUFBRCxFQUFjLEtBQWQsRUFBcUIsTUFBckIsQ0FBeEI7QUFFQSxlQUFPLEtBQ0osS0FESSxDQUNFLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxDQUFDLENBQUMsS0FBakIsQ0FERixFQUVKLE1BRkksQ0FFRyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBQyxDQUFDLE1BQWpCLENBRkgsQ0FBUDtBQUdELE9BeENLLENBeUNOO0FBekNNO0FBMENOLE1BQUEsS0FBSyxFQUFFLFlBQVc7QUFDaEI7QUFDQSxZQUFJLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxJQUFMLENBQVUsU0FBVixDQUFvQixJQUFwQixDQUFELENBQXZCLENBRmdCLENBSWhCOztBQUNBLGFBQUssS0FBTCxDQUFXLEtBQVg7QUFFQSxlQUFPLEtBQVA7QUFDRCxPQWxESyxDQW1ETjtBQW5ETTtBQW9ETixNQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCLFlBQUksS0FBSyxNQUFMLEVBQUosRUFDRSxLQUFLLE1BQUwsR0FBYyxhQUFkLENBQTRCLElBQTVCO0FBRUYsZUFBTyxJQUFQO0FBQ0QsT0F6REssQ0EwRE47QUExRE07QUEyRE4sTUFBQSxPQUFPLEVBQUUsVUFBUyxPQUFULEVBQWtCO0FBQ3pCLGFBQUssS0FBTCxDQUFXLE9BQVgsRUFBb0IsTUFBcEI7QUFFQSxlQUFPLE9BQVA7QUFDRCxPQS9ESyxDQWdFTjtBQWhFTTtBQWlFTixNQUFBLEtBQUssRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDdEIsZUFBTyxNQUFNLENBQUMsR0FBUCxDQUFXLElBQVgsQ0FBUDtBQUNELE9BbkVLLENBb0VOO0FBcEVNO0FBcUVOLE1BQUEsS0FBSyxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN0QixlQUFPLE1BQU0sQ0FBQyxHQUFQLENBQVcsSUFBWCxDQUFQO0FBQ0QsT0F2RUssQ0F3RU47QUF4RU07QUF5RU4sTUFBQSxFQUFFLEVBQUUsVUFBUyxFQUFULEVBQWE7QUFDZixlQUFPLEtBQUssSUFBTCxDQUFVLElBQVYsRUFBZ0IsRUFBaEIsQ0FBUDtBQUNELE9BM0VLLENBNEVOO0FBNUVNO0FBNkVOLE1BQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNyQixZQUFJLEdBQUcsR0FBRyxLQUFLLElBQUwsRUFBVjtBQUVBLGVBQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFSLElBQ0EsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQURSLElBRUEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFKLEdBQVEsR0FBRyxDQUFDLEtBRmhCLElBR0EsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFKLEdBQVEsR0FBRyxDQUFDLE1BSHZCO0FBSUQsT0FwRkssQ0FxRk47QUFyRk07QUFzRk4sTUFBQSxJQUFJLEVBQUUsWUFBVztBQUNmLGVBQU8sS0FBSyxLQUFMLENBQVcsU0FBWCxFQUFzQixFQUF0QixDQUFQO0FBQ0QsT0F4RkssQ0F5Rk47QUF6Rk07QUEwRk4sTUFBQSxJQUFJLEVBQUUsWUFBVztBQUNmLGVBQU8sS0FBSyxLQUFMLENBQVcsU0FBWCxFQUFzQixNQUF0QixDQUFQO0FBQ0QsT0E1RkssQ0E2Rk47QUE3Rk07QUE4Rk4sTUFBQSxPQUFPLEVBQUUsWUFBVztBQUNsQixlQUFPLEtBQUssS0FBTCxDQUFXLFNBQVgsS0FBeUIsTUFBaEM7QUFDRCxPQWhHSyxDQWlHTjtBQWpHTTtBQWtHTixNQUFBLFFBQVEsRUFBRSxZQUFXO0FBQ25CLGVBQU8sS0FBSyxJQUFMLENBQVUsSUFBVixDQUFQO0FBQ0QsT0FwR0ssQ0FxR047QUFyR007QUFzR04sTUFBQSxPQUFPLEVBQUUsWUFBVztBQUNsQixZQUFJLElBQUksR0FBRyxLQUFLLElBQUwsQ0FBVSxPQUFWLENBQVg7QUFFQSxlQUFPLElBQUksSUFBSSxJQUFSLEdBQWUsRUFBZixHQUFvQixJQUFJLENBQUMsSUFBTCxHQUFZLEtBQVosQ0FBa0IsS0FBbEIsQ0FBM0I7QUFDRCxPQTFHSyxDQTJHTjtBQTNHTTtBQTRHTixNQUFBLFFBQVEsRUFBRSxVQUFTLElBQVQsRUFBZTtBQUN2QixlQUFPLEtBQUssT0FBTCxHQUFlLE9BQWYsQ0FBdUIsSUFBdkIsS0FBZ0MsQ0FBQyxDQUF4QztBQUNELE9BOUdLLENBK0dOO0FBL0dNO0FBZ0hOLE1BQUEsUUFBUSxFQUFFLFVBQVMsSUFBVCxFQUFlO0FBQ3ZCLFlBQUksQ0FBQyxLQUFLLFFBQUwsQ0FBYyxJQUFkLENBQUwsRUFBMEI7QUFDeEIsY0FBSSxLQUFLLEdBQUcsS0FBSyxPQUFMLEVBQVo7QUFDQSxVQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBWDtBQUNBLGVBQUssSUFBTCxDQUFVLE9BQVYsRUFBbUIsS0FBSyxDQUFDLElBQU4sQ0FBVyxHQUFYLENBQW5CO0FBQ0Q7O0FBRUQsZUFBTyxJQUFQO0FBQ0QsT0F4SEssQ0F5SE47QUF6SE07QUEwSE4sTUFBQSxXQUFXLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDMUIsWUFBSSxLQUFLLFFBQUwsQ0FBYyxJQUFkLENBQUosRUFBeUI7QUFDdkIsZUFBSyxJQUFMLENBQVUsT0FBVixFQUFtQixLQUFLLE9BQUwsR0FBZSxNQUFmLENBQXNCLFVBQVMsQ0FBVCxFQUFZO0FBQ25ELG1CQUFPLENBQUMsSUFBSSxJQUFaO0FBQ0QsV0FGa0IsRUFFaEIsSUFGZ0IsQ0FFWCxHQUZXLENBQW5CO0FBR0Q7O0FBRUQsZUFBTyxJQUFQO0FBQ0QsT0FsSUssQ0FtSU47QUFuSU07QUFvSU4sTUFBQSxXQUFXLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDMUIsZUFBTyxLQUFLLFFBQUwsQ0FBYyxJQUFkLElBQXNCLEtBQUssV0FBTCxDQUFpQixJQUFqQixDQUF0QixHQUErQyxLQUFLLFFBQUwsQ0FBYyxJQUFkLENBQXREO0FBQ0QsT0F0SUssQ0F1SU47QUF2SU07QUF3SU4sTUFBQSxTQUFTLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDeEIsZUFBTyxHQUFHLENBQUMsR0FBSixDQUFRLEtBQUssSUFBTCxDQUFVLElBQVYsQ0FBUixDQUFQO0FBQ0QsT0ExSUssQ0EySU47QUEzSU07QUE0SU4sTUFBQSxNQUFNLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDckIsWUFBSSxNQUFNLEdBQUcsSUFBYixDQURxQixDQUdyQjs7QUFDQSxZQUFHLENBQUMsTUFBTSxDQUFDLElBQVAsQ0FBWSxVQUFoQixFQUE0QixPQUFPLElBQVAsQ0FKUCxDQU1yQjs7QUFDQSxRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSixDQUFVLE1BQU0sQ0FBQyxJQUFQLENBQVksVUFBdEIsQ0FBVDtBQUVBLFlBQUcsQ0FBQyxJQUFKLEVBQVUsT0FBTyxNQUFQLENBVFcsQ0FXckI7O0FBQ0EsZUFBTSxNQUFNLENBQUMsSUFBUCxZQUF1QixVQUE3QixFQUF3QztBQUN0QyxjQUFHLE9BQU8sSUFBUCxLQUFnQixRQUFoQixHQUEyQixNQUFNLENBQUMsT0FBUCxDQUFlLElBQWYsQ0FBM0IsR0FBa0QsTUFBTSxZQUFZLElBQXZFLEVBQTZFLE9BQU8sTUFBUDtBQUM3RSxVQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSixDQUFVLE1BQU0sQ0FBQyxJQUFQLENBQVksVUFBdEIsQ0FBVDtBQUNEO0FBQ0YsT0E1SkssQ0E2Sk47QUE3Sk07QUE4Sk4sTUFBQSxHQUFHLEVBQUUsWUFBVztBQUNkLGVBQU8sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFwQixHQUEwQixJQUExQixHQUFpQyxLQUFLLE1BQUwsQ0FBWSxHQUFHLENBQUMsR0FBaEIsQ0FBeEM7QUFDRCxPQWhLSyxDQWlLTjtBQWpLTTtBQWtLTixNQUFBLE9BQU8sRUFBRSxVQUFTLElBQVQsRUFBZTtBQUN0QixZQUFJLE9BQU8sR0FBRyxFQUFkO0FBQUEsWUFBa0IsTUFBTSxHQUFHLElBQTNCOztBQUVBLFdBQUU7QUFDQSxVQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBUCxDQUFjLElBQWQsQ0FBVDtBQUNBLGNBQUcsQ0FBQyxNQUFELElBQVcsQ0FBQyxNQUFNLENBQUMsSUFBdEIsRUFBNEI7QUFFNUIsVUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLE1BQWI7QUFDRCxTQUxELFFBS1EsTUFBTSxDQUFDLE1BTGY7O0FBT0EsZUFBTyxPQUFQO0FBQ0QsT0E3S0ssQ0E4S047QUE5S007QUErS04sTUFBQSxPQUFPLEVBQUUsVUFBUyxRQUFULEVBQWtCO0FBQ3pCLGVBQU8sT0FBTyxDQUFDLEtBQUssSUFBTixFQUFZLFFBQVosQ0FBZDtBQUNELE9BakxLLENBa0xOO0FBbExNO0FBbUxOLE1BQUEsTUFBTSxFQUFFLFlBQVc7QUFDakIsZUFBTyxLQUFLLElBQVo7QUFDRCxPQXJMSyxDQXNMTjtBQXRMTTtBQXVMTixNQUFBLEdBQUcsRUFBRSxVQUFTLEdBQVQsRUFBYztBQUNqQjtBQUNBLFlBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLEtBQXZCLENBQVgsQ0FGaUIsQ0FJakI7O0FBQ0EsWUFBSSxHQUFHLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxNQUEvQixFQUF1QztBQUNyQztBQUNBLFVBQUEsSUFBSSxDQUFDLFNBQUwsR0FBaUIsVUFBVSxHQUFHLENBQUMsT0FBSixDQUFZLElBQVosRUFBa0IsRUFBbEIsRUFBc0IsT0FBdEIsQ0FBOEIsb0JBQTlCLEVBQW9ELGFBQXBELENBQVYsR0FBK0UsUUFBaEcsQ0FGcUMsQ0FJckM7O0FBQ0EsZUFBSyxJQUFJLENBQUMsR0FBRyxDQUFSLEVBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFMLENBQWdCLFVBQWhCLENBQTJCLE1BQWhELEVBQXdELENBQUMsR0FBRyxFQUE1RCxFQUFnRSxDQUFDLEVBQWpFLEVBQ0UsS0FBSyxJQUFMLENBQVUsV0FBVixDQUFzQixJQUFJLENBQUMsVUFBTCxDQUFnQixVQUF0QyxFQU5tQyxDQVF2Qzs7QUFDQyxTQVRELE1BU087QUFDTDtBQUNBLFVBQUEsSUFBSSxDQUFDLFdBQUwsQ0FBaUIsR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLEtBQXZCLENBQXZCLEVBRkssQ0FJTDs7QUFDQSxlQUFLLGNBQUwsR0FMSyxDQU9MOztBQUNBLFVBQUEsR0FBRyxDQUFDLFdBQUosQ0FBZ0IsS0FBSyxJQUFMLENBQVUsU0FBVixDQUFvQixJQUFwQixDQUFoQixFQVJLLENBVUw7O0FBQ0EsaUJBQU8sSUFBSSxDQUFDLFNBQUwsQ0FBZSxPQUFmLENBQXVCLFFBQXZCLEVBQWlDLEVBQWpDLEVBQXFDLE9BQXJDLENBQTZDLFVBQTdDLEVBQXlELEVBQXpELENBQVA7QUFDRDs7QUFFRCxlQUFPLElBQVA7QUFDRCxPQXBOSyxDQXFOUjtBQXJOUTtBQXNOTixNQUFBLGNBQWMsRUFBRSxZQUFXO0FBRXpCO0FBQ0EsWUFBRyxLQUFLLElBQUwsSUFBYSxLQUFLLEtBQXJCLEVBQTJCO0FBQ3pCLGNBQUksRUFBRSxHQUFHLEtBQUssSUFBTCxHQUFZLElBQVosR0FBbUIsS0FBSyxLQUFMLEVBQTVCO0FBQ0EsVUFBQSxFQUFFLENBQUMsSUFBSCxDQUFRLFlBQVU7QUFDaEIsaUJBQUssY0FBTDtBQUNELFdBRkQ7QUFHRCxTQVJ3QixDQVV6Qjs7O0FBQ0EsYUFBSyxJQUFMLENBQVUsZUFBVixDQUEwQixZQUExQjtBQUVBLFlBQUcsTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFLLEdBQWpCLEVBQXNCLE1BQXpCLEVBQ0UsS0FBSyxJQUFMLENBQVUsY0FBVixDQUF5QixHQUFHLENBQUMsS0FBN0IsRUFBb0MsWUFBcEMsRUFBa0QsSUFBSSxDQUFDLFNBQUwsQ0FBZSxLQUFLLEdBQXBCLENBQWxEO0FBRUYsZUFBTyxJQUFQO0FBQ0QsT0F2T0ssQ0F3T1I7QUF4T1E7QUF5T04sTUFBQSxPQUFPLEVBQUUsVUFBUyxDQUFULEVBQVc7QUFDbEIsYUFBSyxHQUFMLEdBQVcsQ0FBWDtBQUNBLGVBQU8sSUFBUDtBQUNEO0FBNU9LO0FBcEJlLEdBQVgsQ0FBZDtBQW9RQSxFQUFBLEdBQUcsQ0FBQyxFQUFKLEdBQVMsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNsQjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUN4QjtBQUNBLFdBQUssTUFBTCxHQUFjLE9BQWQ7QUFDRCxLQUxpQixDQU9sQjtBQVBrQjtBQVFsQixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxPQUFPLEVBQUUsVUFBUyxDQUFULEVBQVksSUFBWixFQUFrQixLQUFsQixFQUF5QjtBQUNoQyxZQUFJLEtBQUo7QUFBQSxZQUFXLEtBQVg7QUFBQSxZQUFrQixHQUFsQjtBQUFBLFlBQ0ksT0FBTyxHQUFHLEtBQUssTUFEbkI7QUFBQSxZQUVJLEVBQUUsR0FBRyxJQUZULENBRGdDLENBS2hDOztBQUNBLFlBQUksT0FBTyxDQUFQLElBQVksUUFBaEIsRUFBMEI7QUFDeEIsVUFBQSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQVY7QUFDQSxVQUFBLElBQUksR0FBRyxDQUFDLENBQUMsSUFBVDtBQUNBLFVBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFOO0FBQ0QsU0FWK0IsQ0FZaEM7OztBQUNBLFFBQUEsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFMLEdBQVcsQ0FBWCxHQUFlLENBQUMsSUFBSSxJQUFMLEdBQVksSUFBWixHQUFtQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBZixFQUFrQixPQUFsQixFQUF0QztBQUNBLFFBQUEsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFmLENBZGdDLENBZ0JoQzs7QUFDQSxRQUFBLEVBQUUsQ0FBQyxFQUFILEdBQVEsVUFBUyxHQUFULEVBQWM7QUFDcEIsY0FBSSxDQUFKLENBRG9CLENBR3BCOztBQUNBLFVBQUEsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFOLEdBQVUsQ0FBVixHQUFjLEdBQUcsR0FBRyxDQUFOLEdBQVUsQ0FBVixHQUFjLEdBQWxDLENBSm9CLENBTXBCOztBQUNBLGNBQUksS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFDakIsWUFBQSxLQUFLLEdBQUcsRUFBUjs7QUFDQSxpQkFBSyxHQUFMLElBQVksRUFBRSxDQUFDLEtBQWYsRUFDRSxLQUFLLENBQUMsSUFBTixDQUFXLEdBQVgsRUFIZSxDQUtqQjs7O0FBQ0EsZ0JBQUksT0FBTyxDQUFDLFVBQVIsS0FBdUIsRUFBRSxDQUFDLFdBQUgsQ0FBZSxJQUFmLElBQXVCLEtBQUssQ0FBQyxPQUFOLENBQWMsUUFBZCxJQUEwQixDQUFDLENBQXpFLENBQUosRUFBaUY7QUFDL0U7QUFDQSxrQkFBSSxHQUFKO0FBQUEsa0JBQ0ksQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVosQ0FBdUIsRUFBRSxDQUFDLFdBQUgsQ0FBZSxJQUFmLElBQXVCLEVBQUUsQ0FBQyxLQUFILENBQVMsTUFBaEMsSUFBMEMsT0FBTyxDQUFDLEtBQVIsRUFBakUsQ0FEUixDQUYrRSxDQUsvRTs7QUFDQSxrQkFBSSxFQUFFLENBQUMsV0FBSCxDQUFlLElBQW5CLEVBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxFQUFFLENBQUMsV0FBSCxDQUFlLElBQWYsQ0FBb0IsS0FBcEIsQ0FBMEIsRUFBakMsRUFBcUMsRUFBRSxDQUFDLFdBQUgsQ0FBZSxJQUFmLENBQW9CLE1BQXBCLENBQTJCLEVBQWhFLEVBUDZFLENBUy9FOztBQUNBLGNBQUEsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFGLEVBQU47QUFDQSxrQkFBSSxFQUFFLENBQUMsV0FBSCxDQUFlLENBQW5CLEVBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxFQUFFLENBQUMsV0FBSCxDQUFlLENBQWYsQ0FBaUIsRUFBeEIsRUFBNEIsR0FBRyxDQUFDLENBQWhDLEVBREYsS0FFSyxJQUFJLEVBQUUsQ0FBQyxXQUFILENBQWUsRUFBbkIsRUFDSCxDQUFDLENBQUMsSUFBRixDQUFPLEVBQUUsQ0FBQyxXQUFILENBQWUsRUFBZixDQUFrQixFQUFsQixHQUF1QixHQUFHLENBQUMsS0FBSixHQUFZLENBQTFDLEVBQTZDLEdBQUcsQ0FBQyxDQUFqRDtBQUVGLGNBQUEsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFGLEVBQU47QUFDQSxrQkFBSSxFQUFFLENBQUMsV0FBSCxDQUFlLENBQW5CLEVBQ0UsQ0FBQyxDQUFDLElBQUYsQ0FBTyxHQUFHLENBQUMsQ0FBWCxFQUFjLEVBQUUsQ0FBQyxXQUFILENBQWUsQ0FBZixDQUFpQixFQUEvQixFQURGLEtBRUssSUFBSSxFQUFFLENBQUMsV0FBSCxDQUFlLEVBQW5CLEVBQ0gsQ0FBQyxDQUFDLElBQUYsQ0FBTyxHQUFHLENBQUMsQ0FBWCxFQUFjLEVBQUUsQ0FBQyxXQUFILENBQWUsRUFBZixDQUFrQixFQUFsQixHQUF1QixHQUFHLENBQUMsTUFBSixHQUFhLENBQWxELEVBcEI2RSxDQXNCL0U7O0FBQ0EsY0FBQSxFQUFFLENBQUMsV0FBSCxHQUFpQjtBQUNmLGdCQUFBLElBQUksRUFBRSxPQUFPLENBQUMsS0FBUixHQUFnQixLQUFoQixDQUFzQixDQUF0QjtBQURTLGVBQWpCO0FBR0Q7QUFDRixXQXhDbUIsQ0EwQ3BCOzs7QUFDQSxjQUFJLEtBQUssSUFBSSxJQUFiLEVBQW1CO0FBQ2pCLFlBQUEsS0FBSyxHQUFHLEVBQVI7O0FBQ0EsaUJBQUssR0FBTCxJQUFZLEVBQUUsQ0FBQyxNQUFmLEVBQ0UsS0FBSyxDQUFDLElBQU4sQ0FBVyxHQUFYO0FBQ0gsV0EvQ21CLENBaURwQjs7O0FBQ0EsVUFBQSxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQVIsR0FDSCxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFwQixDQUFELEdBQTJCLENBQTVCLEdBQWlDLEdBRDdCLEdBRU4sSUFBSSxJQUFJLEdBQVIsR0FDRSxJQUFJLENBQUMsR0FBTCxDQUFTLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBWCxHQUFnQixDQUF6QixDQURGLEdBRUEsSUFBSSxJQUFJLEdBQVIsR0FDRSxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFYLEdBQWdCLENBQXpCLENBQUQsR0FBK0IsQ0FEakMsR0FFQSxJQUFJLElBQUksR0FBUixHQUNFLEdBREYsR0FFQSxPQUFPLElBQVAsSUFBZSxVQUFmLEdBQ0UsSUFBSSxDQUFDLEdBQUQsQ0FETixHQUVFLEdBVkYsQ0FsRG9CLENBOERwQjs7QUFDQSxjQUFJLEVBQUUsQ0FBQyxXQUFILENBQWUsSUFBbkIsRUFBeUI7QUFDdkIsWUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLEVBQUUsQ0FBQyxXQUFILENBQWUsSUFBZixDQUFvQixFQUFwQixDQUF1QixHQUF2QixDQUFiO0FBRUQsV0FIRCxNQUdPO0FBQ0w7QUFDQSxnQkFBSSxFQUFFLENBQUMsV0FBSCxDQUFlLENBQW5CLEVBQ0UsT0FBTyxDQUFDLENBQVIsQ0FBVSxFQUFFLENBQUMsV0FBSCxDQUFlLENBQWYsQ0FBaUIsRUFBakIsQ0FBb0IsR0FBcEIsQ0FBVixFQURGLEtBRUssSUFBSSxFQUFFLENBQUMsV0FBSCxDQUFlLEVBQW5CLEVBQ0gsT0FBTyxDQUFDLEVBQVIsQ0FBVyxFQUFFLENBQUMsV0FBSCxDQUFlLEVBQWYsQ0FBa0IsRUFBbEIsQ0FBcUIsR0FBckIsQ0FBWCxFQUxHLENBT0w7O0FBQ0EsZ0JBQUksRUFBRSxDQUFDLFdBQUgsQ0FBZSxDQUFuQixFQUNFLE9BQU8sQ0FBQyxDQUFSLENBQVUsRUFBRSxDQUFDLFdBQUgsQ0FBZSxDQUFmLENBQWlCLEVBQWpCLENBQW9CLEdBQXBCLENBQVYsRUFERixLQUVLLElBQUksRUFBRSxDQUFDLFdBQUgsQ0FBZSxFQUFuQixFQUNILE9BQU8sQ0FBQyxFQUFSLENBQVcsRUFBRSxDQUFDLFdBQUgsQ0FBZSxFQUFmLENBQWtCLEVBQWxCLENBQXFCLEdBQXJCLENBQVgsRUFYRyxDQWFMOztBQUNBLGdCQUFJLEVBQUUsQ0FBQyxXQUFILENBQWUsSUFBbkIsRUFDRSxPQUFPLENBQUMsSUFBUixDQUFhLEVBQUUsQ0FBQyxXQUFILENBQWUsSUFBZixDQUFvQixLQUFwQixDQUEwQixFQUExQixDQUE2QixHQUE3QixDQUFiLEVBQWdELEVBQUUsQ0FBQyxXQUFILENBQWUsSUFBZixDQUFvQixNQUFwQixDQUEyQixFQUEzQixDQUE4QixHQUE5QixDQUFoRDtBQUNILFdBbEZtQixDQW9GcEI7OztBQUNBLGNBQUksRUFBRSxDQUFDLFdBQUgsQ0FBZSxPQUFuQixFQUNFLE9BQU8sQ0FBQyxPQUFSLENBQ0UsRUFBRSxDQUFDLFdBQUgsQ0FBZSxPQUFmLENBQXVCLENBQXZCLENBQXlCLEVBQXpCLENBQTRCLEdBQTVCLENBREYsRUFFRSxFQUFFLENBQUMsV0FBSCxDQUFlLE9BQWYsQ0FBdUIsQ0FBdkIsQ0FBeUIsRUFBekIsQ0FBNEIsR0FBNUIsQ0FGRixFQUdFLEVBQUUsQ0FBQyxXQUFILENBQWUsT0FBZixDQUF1QixLQUF2QixDQUE2QixFQUE3QixDQUFnQyxHQUFoQyxDQUhGLEVBSUUsRUFBRSxDQUFDLFdBQUgsQ0FBZSxPQUFmLENBQXVCLE1BQXZCLENBQThCLEVBQTlCLENBQWlDLEdBQWpDLENBSkYsRUF0RmtCLENBNkZwQjs7QUFDQSxjQUFJLEVBQUUsQ0FBQyxXQUFILENBQWUsT0FBbkIsRUFDRSxPQUFPLENBQUMsT0FBUixDQUFnQixFQUFFLENBQUMsV0FBSCxDQUFlLE9BQWYsQ0FBdUIsRUFBdkIsQ0FBMEIsR0FBMUIsQ0FBaEIsRUEvRmtCLENBaUdwQjs7QUFDQSxlQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTixHQUFlLENBQXhCLEVBQTJCLENBQUMsSUFBSSxDQUFoQyxFQUFtQyxDQUFDLEVBQXBDLEVBQ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxLQUFLLENBQUMsQ0FBRCxDQUFsQixFQUF1QixFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUgsQ0FBUyxLQUFLLENBQUMsQ0FBRCxDQUFkLENBQUQsRUFBcUIsR0FBckIsQ0FBekIsRUFuR2tCLENBcUdwQjs7O0FBQ0EsZUFBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUF4QixFQUEyQixDQUFDLElBQUksQ0FBaEMsRUFBbUMsQ0FBQyxFQUFwQyxFQUNFLE9BQU8sQ0FBQyxLQUFSLENBQWMsS0FBSyxDQUFDLENBQUQsQ0FBbkIsRUFBd0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFILENBQVUsS0FBSyxDQUFDLENBQUQsQ0FBZixDQUFELEVBQXNCLEdBQXRCLENBQTFCLEVBdkdrQixDQXlHcEI7OztBQUNBLGNBQUksRUFBRSxDQUFDLFNBQUgsQ0FBYSxNQUFqQixFQUNFLEVBQUUsQ0FBQyxTQUFILENBQWEsTUFBYixDQUFvQixJQUFwQixDQUF5QixPQUF6QixFQUFrQyxHQUFsQyxFQUF1QyxVQUFTLElBQVQsRUFBZSxFQUFmLEVBQW1CO0FBQ3hELG1CQUFPLEVBQUUsQ0FBQztBQUFFLGNBQUEsSUFBSSxFQUFFLElBQVI7QUFBYyxjQUFBLEVBQUUsRUFBRTtBQUFsQixhQUFELEVBQXlCLEdBQXpCLENBQVQ7QUFDRCxXQUZEO0FBR0gsU0E5R0Q7O0FBZ0hBLFlBQUksT0FBTyxDQUFQLEtBQWEsUUFBakIsRUFBMkI7QUFDekI7QUFDQSxlQUFLLE9BQUwsR0FBZSxVQUFVLENBQUMsWUFBVztBQUNuQyxnQkFBSSxLQUFLLEdBQUcsSUFBSSxJQUFKLEdBQVcsT0FBWCxFQUFaLENBRG1DLENBR25DOztBQUNBLFlBQUEsRUFBRSxDQUFDLFNBQUgsQ0FBYSxLQUFiLEdBQXdCLEtBQXhCO0FBQ0EsWUFBQSxFQUFFLENBQUMsU0FBSCxDQUFhLElBQWIsR0FBd0IsSUFBeEI7QUFDQSxZQUFBLEVBQUUsQ0FBQyxTQUFILENBQWEsTUFBYixHQUF3QixLQUFLLEdBQUcsQ0FBaEM7QUFDQSxZQUFBLEVBQUUsQ0FBQyxTQUFILENBQWEsUUFBYixHQUF3QixDQUF4QjtBQUNBLFlBQUEsRUFBRSxDQUFDLFNBQUgsQ0FBYSxJQUFiLEdBQXdCLElBQXhCLENBUm1DLENBVW5DOztBQUNBLFlBQUEsRUFBRSxDQUFDLE1BQUgsR0FBWSxZQUFXO0FBRXJCLGtCQUFJLEVBQUUsQ0FBQyxTQUFILENBQWEsSUFBYixLQUFzQixJQUExQixFQUFnQztBQUM5QjtBQUNBLG9CQUFJLElBQUksR0FBRyxJQUFJLElBQUosR0FBVyxPQUFYLEVBQVg7QUFBQSxvQkFDSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyxTQUFILENBQWEsTUFBcEIsR0FBNkIsQ0FBN0IsR0FBaUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLFNBQUgsQ0FBYSxLQUFyQixJQUE4QixDQUR6RSxDQUY4QixDQUs5Qjs7QUFDQSxvQkFBSSxFQUFFLENBQUMsU0FBSCxDQUFhLFNBQWpCLEVBQ0UsR0FBRyxHQUFHLENBQUMsR0FBRCxHQUFPLENBQWIsQ0FQNEIsQ0FTOUI7O0FBQ0EsZ0JBQUEsRUFBRSxDQUFDLEVBQUgsQ0FBTSxHQUFOLEVBVjhCLENBWTlCOztBQUNBLG9CQUFJLElBQUksR0FBRyxFQUFFLENBQUMsU0FBSCxDQUFhLE1BQXhCLEVBQWdDO0FBQzlCLHNCQUFJLEVBQUUsQ0FBQyxXQUFILENBQWUsSUFBbkIsRUFDRSxPQUFPLENBQUMsSUFBUixDQUFhLElBQUksR0FBRyxDQUFDLFVBQVIsQ0FBbUIsRUFBRSxDQUFDLFdBQUgsQ0FBZSxJQUFmLENBQW9CLFdBQXZDLEVBQW9ELE1BQXBELEVBQWI7O0FBRUYsc0JBQUksRUFBRSxDQUFDLFNBQUgsQ0FBYSxJQUFiLEtBQXNCLElBQXRCLElBQStCLE9BQU8sRUFBRSxDQUFDLFNBQUgsQ0FBYSxJQUFwQixJQUE0QixRQUE1QixJQUF3QyxFQUFFLENBQUMsU0FBSCxDQUFhLElBQWIsR0FBb0IsQ0FBL0YsRUFBbUc7QUFDakc7QUFDQSx3QkFBSSxFQUFFLENBQUMsU0FBSCxDQUFhLE9BQWpCLEVBQ0UsRUFBRSxDQUFDLFNBQUgsQ0FBYSxTQUFiLEdBQXlCLENBQUMsRUFBRSxDQUFDLFNBQUgsQ0FBYSxTQUF2Qzs7QUFFRix3QkFBSSxPQUFPLEVBQUUsQ0FBQyxTQUFILENBQWEsSUFBcEIsSUFBNEIsUUFBaEMsRUFBMEM7QUFDeEM7QUFDQSwwQkFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFILENBQWEsT0FBZCxJQUF5QixFQUFFLENBQUMsU0FBSCxDQUFhLFNBQTFDLEVBQ0UsRUFBRSxFQUFFLENBQUMsU0FBSCxDQUFhLElBQWYsQ0FIc0MsQ0FLeEM7O0FBQ0EsMEJBQUksQ0FBQyxFQUFFLENBQUMsU0FBSCxDQUFhLE9BQWQsSUFBeUIsRUFBRSxDQUFDLFNBQUgsQ0FBYSxJQUFiLElBQXFCLENBQWxELEVBQ0UsRUFBRSxFQUFFLENBQUMsU0FBSCxDQUFhLElBQWY7QUFDSDs7QUFFRCxvQkFBQSxFQUFFLENBQUMsT0FBSCxDQUFXLENBQVgsRUFBYyxJQUFkLEVBQW9CLEtBQXBCO0FBQ0QsbUJBaEJELE1BZ0JPO0FBQ0wsb0JBQUEsRUFBRSxDQUFDLFNBQUgsQ0FBYSxLQUFiLEdBQXFCLEVBQUUsQ0FBQyxTQUFILENBQWEsS0FBYixDQUFtQixLQUFuQixDQUF5QixPQUF6QixFQUFrQyxDQUFDLEVBQUQsQ0FBbEMsQ0FBckIsR0FBK0QsRUFBRSxDQUFDLElBQUgsRUFBL0Q7QUFDRDtBQUVGLGlCQXhCRCxNQXdCTztBQUNMLGtCQUFBLEVBQUUsQ0FBQyxjQUFILEdBQW9CLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxNQUFKLENBQXpDO0FBQ0Q7QUFDRixlQXhDRCxNQXdDTztBQUNMLGdCQUFBLEVBQUUsQ0FBQyxjQUFILEdBQW9CLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxNQUFKLENBQXpDO0FBQ0Q7QUFFRixhQTlDRCxDQVhtQyxDQTJEbkM7OztBQUNBLFlBQUEsRUFBRSxDQUFDLE1BQUg7QUFFRCxXQTlEd0IsRUE4RHRCLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxLQUFmLEVBQXNCLE9BQXRCLEVBOURzQixDQUF6QjtBQStERDs7QUFFRCxlQUFPLElBQVA7QUFDRCxPQXZNSyxDQXdNTjtBQXhNTTtBQXlNTixNQUFBLElBQUksRUFBRSxZQUFXO0FBQ2YsZUFBTyxLQUFLLE1BQUwsQ0FBWSxJQUFaLEVBQVA7QUFDRCxPQTNNSyxDQTRNTjtBQTVNTTtBQTZNTixNQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDbkI7QUFDQSxZQUFJLE9BQU8sQ0FBUCxJQUFZLFFBQWhCLEVBQTBCO0FBQ3hCLGVBQUssSUFBSSxHQUFULElBQWdCLENBQWhCLEVBQ0UsS0FBSyxJQUFMLENBQVUsR0FBVixFQUFlLENBQUMsQ0FBQyxHQUFELENBQWhCO0FBRUgsU0FKRCxNQUlPO0FBQ0w7QUFDQSxjQUFJLElBQUksR0FBRyxLQUFLLE1BQUwsQ0FBWSxJQUFaLENBQWlCLENBQWpCLENBQVgsQ0FGSyxDQUlMOztBQUNBLGNBQUksQ0FBQyxJQUFJLFdBQVQsRUFBc0I7QUFDcEI7QUFDQSxnQkFBSSxLQUFLLEtBQUwsQ0FBVyxDQUFYLENBQUosRUFDRSxDQUFDLEdBQUcsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLFdBQWQsQ0FBMEIsUUFBMUIsQ0FBbUMsQ0FBbkMsQ0FBSixDQUhrQixDQUtwQjs7QUFDQSxpQkFBSyxLQUFMLENBQVcsQ0FBWCxJQUFpQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBSyxNQUFwQixDQUFELENBQThCLEtBQTlCLENBQW9DLENBQXBDLENBQWhCLENBTm9CLENBUXBCOztBQUNBLGdCQUFJLEtBQUssS0FBVCxFQUFnQjtBQUNkO0FBQ0EsY0FBQSxDQUFDLEdBQUcsS0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixVQUF0QixDQUFKLENBRmMsQ0FJZDs7QUFDQSxtQkFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLEtBQWQsR0FBc0I7QUFDcEIsZ0JBQUEsSUFBSSxFQUFFLEtBQUssTUFBTCxDQUFZLEtBQVosSUFBcUI7QUFBRSxrQkFBQSxRQUFRLEVBQUUsQ0FBWjtBQUFlLGtCQUFBLEVBQUUsRUFBRSxLQUFLLEtBQUwsQ0FBVyxFQUE5QjtBQUFrQyxrQkFBQSxFQUFFLEVBQUUsS0FBSyxLQUFMLENBQVc7QUFBakQsaUJBRFA7QUFFcEIsZ0JBQUEsRUFBRSxFQUFJLEtBQUs7QUFGUyxlQUF0QjtBQUlEO0FBRUYsV0FwQkQsTUFvQk87QUFDTCxpQkFBSyxLQUFMLENBQVcsQ0FBWCxJQUFnQixHQUFHLENBQUMsS0FBSixDQUFVLE9BQVYsQ0FBa0IsQ0FBbEIsSUFDZDtBQUNBLGdCQUFJLEdBQUcsQ0FBQyxLQUFSLENBQWMsSUFBZCxFQUFvQixLQUFwQixDQUEwQixDQUExQixDQUZjLEdBR2hCLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBVixDQUFlLElBQWYsQ0FBb0IsQ0FBcEIsSUFDRTtBQUNBLGdCQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsSUFBZixFQUFxQixLQUFyQixDQUEyQixDQUEzQixDQUZGLEdBR0U7QUFDQTtBQUFFLGNBQUEsSUFBSSxFQUFFLElBQVI7QUFBYyxjQUFBLEVBQUUsRUFBRTtBQUFsQixhQVBGO0FBUUQ7QUFDRjs7QUFFRCxlQUFPLElBQVA7QUFDRCxPQXpQSyxDQTBQTjtBQTFQTTtBQTJQTixNQUFBLEtBQUssRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDcEIsWUFBSSxPQUFPLENBQVAsSUFBWSxRQUFoQixFQUNFLEtBQUssSUFBSSxHQUFULElBQWdCLENBQWhCLEVBQ0UsS0FBSyxLQUFMLENBQVcsR0FBWCxFQUFnQixDQUFDLENBQUMsR0FBRCxDQUFqQixFQUZKLEtBS0UsS0FBSyxNQUFMLENBQVksQ0FBWixJQUFpQjtBQUFFLFVBQUEsSUFBSSxFQUFFLEtBQUssTUFBTCxDQUFZLEtBQVosQ0FBa0IsQ0FBbEIsQ0FBUjtBQUE4QixVQUFBLEVBQUUsRUFBRTtBQUFsQyxTQUFqQjtBQUVGLGVBQU8sSUFBUDtBQUNELE9BcFFLLENBcVFOO0FBclFNO0FBc1FOLE1BQUEsQ0FBQyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2IsYUFBSyxXQUFMLENBQWlCLENBQWpCLEdBQXFCLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxLQUFLLE1BQUwsQ0FBWSxDQUFaLEVBQWYsRUFBZ0MsS0FBaEMsQ0FBc0MsQ0FBdEMsQ0FBckI7QUFFQSxlQUFPLElBQVA7QUFDRCxPQTFRSyxDQTJRTjtBQTNRTTtBQTRRTixNQUFBLENBQUMsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNiLGFBQUssV0FBTCxDQUFpQixDQUFqQixHQUFxQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBSyxNQUFMLENBQVksQ0FBWixFQUFmLEVBQWdDLEtBQWhDLENBQXNDLENBQXRDLENBQXJCO0FBRUEsZUFBTyxJQUFQO0FBQ0QsT0FoUkssQ0FpUk47QUFqUk07QUFrUk4sTUFBQSxFQUFFLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDZCxhQUFLLFdBQUwsQ0FBaUIsRUFBakIsR0FBc0IsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLEtBQUssTUFBTCxDQUFZLEVBQVosRUFBZixFQUFpQyxLQUFqQyxDQUF1QyxDQUF2QyxDQUF0QjtBQUVBLGVBQU8sSUFBUDtBQUNELE9BdFJLLENBdVJOO0FBdlJNO0FBd1JOLE1BQUEsRUFBRSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2QsYUFBSyxXQUFMLENBQWlCLEVBQWpCLEdBQXNCLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxLQUFLLE1BQUwsQ0FBWSxFQUFaLEVBQWYsRUFBaUMsS0FBakMsQ0FBdUMsQ0FBdkMsQ0FBdEI7QUFFQSxlQUFPLElBQVA7QUFDRCxPQTVSSyxDQTZSTjtBQTdSTTtBQThSTixNQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDbkIsZUFBTyxLQUFLLENBQUwsQ0FBTyxDQUFQLEVBQVUsQ0FBVixDQUFZLENBQVosQ0FBUDtBQUNELE9BaFNLLENBaVNOO0FBalNNO0FBa1NOLE1BQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNyQixlQUFPLEtBQUssRUFBTCxDQUFRLENBQVIsRUFBVyxFQUFYLENBQWMsQ0FBZCxDQUFQO0FBQ0QsT0FwU0ssQ0FxU047QUFyU007QUFzU04sTUFBQSxJQUFJLEVBQUUsVUFBUyxLQUFULEVBQWdCLE1BQWhCLEVBQXdCO0FBQzVCLFlBQUksS0FBSyxNQUFMLFlBQXVCLEdBQUcsQ0FBQyxJQUEvQixFQUFxQztBQUNuQztBQUNBLGVBQUssSUFBTCxDQUFVLFdBQVYsRUFBdUIsS0FBdkI7QUFFRCxTQUpELE1BSU87QUFDTDtBQUNBLGNBQUksR0FBRyxHQUFHLEtBQUssTUFBTCxDQUFZLElBQVosRUFBVjtBQUVBLGVBQUssV0FBTCxDQUFpQixJQUFqQixHQUF3QjtBQUN0QixZQUFBLEtBQUssRUFBRyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsR0FBRyxDQUFDLEtBQW5CLEVBQTBCLEtBQTFCLENBQWdDLEtBQWhDLENBRGM7QUFFdEIsWUFBQSxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLEdBQUcsQ0FBQyxNQUFuQixFQUEyQixLQUEzQixDQUFpQyxNQUFqQztBQUZjLFdBQXhCO0FBSUQ7O0FBRUQsZUFBTyxJQUFQO0FBQ0QsT0F0VEssQ0F1VE47QUF2VE07QUF3VE4sTUFBQSxJQUFJLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDaEIsYUFBSyxXQUFMLENBQWlCLElBQWpCLEdBQXdCLENBQXhCO0FBRUEsZUFBTyxJQUFQO0FBQ0QsT0E1VEssQ0E2VE47QUE3VE07QUE4VE4sTUFBQSxPQUFPLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3ZCLFlBQUksS0FBSyxNQUFMLENBQVksV0FBWixDQUF3QixPQUE1QixFQUNFLEtBQUssV0FBTCxDQUFpQixPQUFqQixHQUEyQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBSyxNQUFMLENBQVksV0FBWixDQUF3QixPQUF2QyxFQUFnRCxLQUFoRCxDQUFzRCxLQUF0RCxDQUEzQjtBQUVGLGVBQU8sSUFBUDtBQUNELE9BblVLLENBb1VOO0FBcFVNO0FBcVVOLE1BQUEsT0FBTyxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxLQUFmLEVBQXNCLE1BQXRCLEVBQThCO0FBQ3JDLFlBQUksS0FBSyxNQUFMLFlBQXVCLEdBQUcsQ0FBQyxTQUEvQixFQUEwQztBQUN4QyxjQUFJLEdBQUcsR0FBRyxLQUFLLE1BQUwsQ0FBWSxPQUFaLEVBQVY7QUFFQSxlQUFLLFdBQUwsQ0FBaUIsT0FBakIsR0FBMkI7QUFDekIsWUFBQSxDQUFDLEVBQU8sSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLEdBQUcsQ0FBQyxDQUFuQixFQUFzQixLQUF0QixDQUE0QixDQUE1QixDQURpQjtBQUV6QixZQUFBLENBQUMsRUFBTyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsR0FBRyxDQUFDLENBQW5CLEVBQXNCLEtBQXRCLENBQTRCLENBQTVCLENBRmlCO0FBR3pCLFlBQUEsS0FBSyxFQUFHLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxHQUFHLENBQUMsS0FBbkIsRUFBMEIsS0FBMUIsQ0FBZ0MsS0FBaEMsQ0FIaUI7QUFJekIsWUFBQSxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLEdBQUcsQ0FBQyxNQUFuQixFQUEyQixLQUEzQixDQUFpQyxNQUFqQztBQUppQixXQUEzQjtBQU1EOztBQUVELGVBQU8sSUFBUDtBQUNELE9BbFZLLENBbVZOO0FBblZNO0FBb1ZOLE1BQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2xCLFlBQUksS0FBSyxNQUFMLFlBQXVCLEdBQUcsQ0FBQyxJQUEvQixFQUFxQztBQUNuQyxjQUFJLENBQUMsQ0FBQyxPQUFGLElBQWEsSUFBakIsRUFBdUIsS0FBSyxJQUFMLENBQVUsY0FBVixFQUEwQixDQUFDLENBQUMsT0FBNUI7QUFDdkIsY0FBSSxDQUFDLENBQUMsS0FBRixJQUFhLElBQWpCLEVBQXVCLEtBQUssSUFBTCxDQUFVLFlBQVYsRUFBd0IsQ0FBQyxDQUFDLEtBQTFCO0FBQ3ZCLGNBQUksQ0FBQyxDQUFDLE1BQUYsSUFBYSxJQUFqQixFQUF1QixLQUFLLElBQUwsQ0FBVSxRQUFWLEVBQW9CLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxDQUFDLENBQUMsTUFBakIsQ0FBcEI7QUFDeEI7O0FBRUQsZUFBTyxJQUFQO0FBQ0QsT0E1VkssQ0E2Vk47QUE3Vk07QUE4Vk4sTUFBQSxNQUFNLEVBQUUsVUFBUyxNQUFULEVBQWlCO0FBQ3ZCLGFBQUssU0FBTCxDQUFlLE1BQWYsR0FBd0IsTUFBeEI7QUFFQSxlQUFPLElBQVA7QUFDRCxPQWxXSyxDQW1XTjtBQW5XTTtBQW9XTixNQUFBLEtBQUssRUFBRSxVQUFTLEtBQVQsRUFBZ0I7QUFDckIsYUFBSyxTQUFMLENBQWUsS0FBZixHQUF1QixLQUF2QjtBQUVBLGVBQU8sSUFBUDtBQUNELE9BeFdLLENBeVdOO0FBeldNO0FBMFdOLE1BQUEsSUFBSSxFQUFFLFVBQVMsS0FBVCxFQUFnQixPQUFoQixFQUF5QjtBQUM3QjtBQUNBLGFBQUssU0FBTCxDQUFlLElBQWYsR0FBc0IsS0FBSyxTQUFMLENBQWUsS0FBZixHQUF1QixLQUFLLElBQUksSUFBdEQsQ0FGNkIsQ0FJN0I7O0FBQ0EsYUFBSyxTQUFMLENBQWUsT0FBZixHQUF5QixDQUFDLENBQUMsT0FBM0I7QUFFQSxlQUFPLElBQVA7QUFDRCxPQWxYSyxDQW1YTjtBQW5YTTtBQW9YTixNQUFBLElBQUksRUFBRSxVQUFTLE9BQVQsRUFBa0I7QUFDdEI7QUFDQSxZQUFJLE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUVwQixlQUFLLE9BQUwsQ0FBYSxDQUFiO0FBRUEsY0FBSSxLQUFLLFNBQUwsQ0FBZSxLQUFuQixFQUNFLEtBQUssU0FBTCxDQUFlLEtBQWYsQ0FBcUIsS0FBckIsQ0FBMkIsS0FBSyxNQUFoQyxFQUF3QyxDQUFDLElBQUQsQ0FBeEM7QUFFSCxTQVBELE1BT087QUFDTDtBQUNBLFVBQUEsWUFBWSxDQUFDLEtBQUssT0FBTixDQUFaO0FBQ0EsVUFBQSxvQkFBb0IsQ0FBQyxLQUFLLGNBQU4sQ0FBcEIsQ0FISyxDQUtMOztBQUNBLGVBQUssS0FBTCxHQUFtQixFQUFuQjtBQUNBLGVBQUssTUFBTCxHQUFtQixFQUFuQjtBQUNBLGVBQUssU0FBTCxHQUFtQixFQUFuQjtBQUNBLGVBQUssV0FBTCxHQUFtQixFQUFuQjtBQUNEOztBQUVELGVBQU8sSUFBUDtBQUNELE9BMVlLLENBMllOO0FBM1lNO0FBNFlOLE1BQUEsS0FBSyxFQUFFLFlBQVc7QUFDaEIsWUFBSSxLQUFLLFNBQUwsQ0FBZSxJQUFmLEtBQXdCLElBQTVCLEVBQWtDO0FBQ2hDLGVBQUssU0FBTCxDQUFlLElBQWYsR0FBdUIsS0FBdkI7QUFDQSxlQUFLLFNBQUwsQ0FBZSxLQUFmLEdBQXVCLElBQUksSUFBSixHQUFXLE9BQVgsRUFBdkI7QUFDRDs7QUFFRCxlQUFPLElBQVA7QUFDRCxPQW5aSyxDQW9aTjtBQXBaTTtBQXFaTixNQUFBLElBQUksRUFBRSxZQUFXO0FBQ2YsWUFBSSxLQUFLLFNBQUwsQ0FBZSxJQUFmLEtBQXdCLEtBQTVCLEVBQW1DO0FBQ2pDLGNBQUksS0FBSyxHQUFHLElBQUksSUFBSixHQUFXLE9BQVgsS0FBdUIsS0FBSyxTQUFMLENBQWUsS0FBbEQ7QUFFQSxlQUFLLFNBQUwsQ0FBZSxNQUFmLElBQXlCLEtBQXpCO0FBQ0EsZUFBSyxTQUFMLENBQWUsS0FBZixJQUF5QixLQUF6QjtBQUNBLGVBQUssU0FBTCxDQUFlLElBQWYsR0FBeUIsSUFBekI7QUFDRDs7QUFFRCxlQUFPLElBQVA7QUFDRCxPQS9aSyxDQW1hUjs7QUFuYVEsS0FSVTtBQTRhbEIsSUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BNWFNLENBOGFsQjtBQTlha0I7QUErYWxCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLE9BQU8sRUFBRSxVQUFTLENBQVQsRUFBWSxJQUFaLEVBQWtCLEtBQWxCLEVBQXlCO0FBQ2hDLGVBQU8sQ0FBQyxLQUFLLEVBQUwsS0FBWSxLQUFLLEVBQUwsR0FBVSxJQUFJLEdBQUcsQ0FBQyxFQUFSLENBQVcsSUFBWCxDQUF0QixDQUFELEVBQTBDLElBQTFDLEdBQWlELE9BQWpELENBQXlELENBQXpELEVBQTRELElBQTVELEVBQWtFLEtBQWxFLENBQVA7QUFDRCxPQUpRLENBS1Q7QUFMUztBQU1ULE1BQUEsSUFBSSxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUN0QixZQUFJLEtBQUssRUFBVCxFQUNFLEtBQUssRUFBTCxDQUFRLElBQVIsQ0FBYSxPQUFiO0FBRUYsZUFBTyxJQUFQO0FBQ0QsT0FYUSxDQVlUO0FBWlM7QUFhVCxNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLFlBQUksS0FBSyxFQUFULEVBQ0UsS0FBSyxFQUFMLENBQVEsS0FBUjtBQUVGLGVBQU8sSUFBUDtBQUNELE9BbEJRLENBbUJUO0FBbkJTO0FBb0JULE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixZQUFJLEtBQUssRUFBVCxFQUNFLEtBQUssRUFBTCxDQUFRLElBQVI7QUFFRixlQUFPLElBQVA7QUFDRDtBQXpCUTtBQS9hTyxHQUFYLENBQVQ7QUE2Y0EsRUFBQSxHQUFHLENBQUMsSUFBSixHQUFXLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDcEI7QUFDQSxJQUFBLE1BQU0sRUFBRSxVQUFTLE9BQVQsRUFBa0I7QUFDeEI7QUFDQSxVQUFJLE9BQUosRUFBYTtBQUNYLFlBQUksR0FBSixDQURXLENBR1g7O0FBQ0EsWUFBSTtBQUNGO0FBQ0EsVUFBQSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFiLEVBQU47QUFDRCxTQUhELENBR0UsT0FBTSxDQUFOLEVBQVM7QUFDVCxjQUFHLE9BQU8sWUFBWSxHQUFHLENBQUMsS0FBMUIsRUFBZ0M7QUFDOUIsZ0JBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFSLEdBQWdCLEtBQWhCLENBQXNCLEdBQUcsQ0FBQyxNQUFKLENBQVcsSUFBakMsQ0FBWjtBQUNBLFlBQUEsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFOLEVBQU47QUFDQSxZQUFBLEtBQUssQ0FBQyxNQUFOO0FBQ0QsV0FKRCxNQUlLO0FBQ0gsWUFBQSxHQUFHLEdBQUc7QUFDSixjQUFBLENBQUMsRUFBTyxPQUFPLENBQUMsSUFBUixDQUFhLFVBRGpCO0FBRUosY0FBQSxDQUFDLEVBQU8sT0FBTyxDQUFDLElBQVIsQ0FBYSxTQUZqQjtBQUdKLGNBQUEsS0FBSyxFQUFHLE9BQU8sQ0FBQyxJQUFSLENBQWEsV0FIakI7QUFJSixjQUFBLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBUixDQUFhO0FBSmpCLGFBQU47QUFNRDtBQUNGLFNBcEJVLENBc0JYOzs7QUFDQSxhQUFLLENBQUwsR0FBUyxHQUFHLENBQUMsQ0FBYjtBQUNBLGFBQUssQ0FBTCxHQUFTLEdBQUcsQ0FBQyxDQUFiLENBeEJXLENBMEJYOztBQUNBLGFBQUssS0FBTCxHQUFjLEdBQUcsQ0FBQyxLQUFsQjtBQUNBLGFBQUssTUFBTCxHQUFjLEdBQUcsQ0FBQyxNQUFsQjtBQUNELE9BL0J1QixDQWlDeEI7OztBQUNBLE1BQUEsT0FBTyxDQUFDLElBQUQsQ0FBUDtBQUNELEtBckNtQixDQXVDcEI7QUF2Q29CO0FBd0NwQixJQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsT0F4Q1EsQ0EwQ3BCO0FBMUNvQjtBQTJDcEIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixlQUFPLElBQUksR0FBRyxDQUFDLElBQVIsQ0FBYSxJQUFiLENBQVA7QUFDRDtBQUpRO0FBM0NTLEdBQVgsQ0FBWDtBQW9EQSxFQUFBLEdBQUcsQ0FBQyxJQUFKLEdBQVcsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNwQjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUN4QjtBQUNBLFVBQUksT0FBSixFQUFhO0FBQ1gsWUFBSSxDQUFDLEdBQUssT0FBTyxDQUFDLEdBQVIsR0FBYyxPQUFkLEVBQVY7QUFBQSxZQUNJLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBUixFQURWLENBRFcsQ0FJWDs7QUFDQSxhQUFLLEtBQUwsR0FBYyxHQUFHLENBQUMsS0FBSixHQUFhLENBQUMsQ0FBQyxNQUE3QjtBQUNBLGFBQUssTUFBTCxHQUFjLEdBQUcsQ0FBQyxNQUFKLEdBQWEsQ0FBQyxDQUFDLE1BQTdCLENBTlcsQ0FRWDs7QUFDQSxhQUFLLENBQUwsR0FBUyxHQUFHLENBQUMsQ0FBSixHQUFRLENBQUMsQ0FBQyxDQUFuQjtBQUNBLGFBQUssQ0FBTCxHQUFTLEdBQUcsQ0FBQyxDQUFKLEdBQVEsQ0FBQyxDQUFDLENBQW5CO0FBQ0QsT0FidUIsQ0FleEI7OztBQUNBLE1BQUEsT0FBTyxDQUFDLElBQUQsQ0FBUDtBQUNELEtBbkJtQixDQXFCcEI7QUFyQm9CO0FBc0JwQixJQUFBLE1BQU0sRUFBRSxHQUFHLENBQUMsT0F0QlEsQ0F3QnBCO0FBeEJvQjtBQXlCcEIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixlQUFPLElBQUksR0FBRyxDQUFDLElBQVIsQ0FBYSxJQUFiLENBQVA7QUFDRDtBQUpRO0FBekJTLEdBQVgsQ0FBWDtBQW1DQSxFQUFBLEdBQUcsQ0FBQyxJQUFKLEdBQVcsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNwQjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUN4QixVQUFJLE9BQUosRUFBYTtBQUNYLFlBQUksQ0FBQyxHQUFNLE9BQU8sQ0FBQyxHQUFSLEdBQWMsTUFBZCxFQUFYO0FBQUEsWUFDSSxHQUFHLEdBQUksT0FBTyxDQUFDLElBQVIsQ0FBYSxxQkFBYixFQURYO0FBQUEsWUFFSSxJQUFJLEdBQUcsQ0FGWCxDQURXLENBS1g7O0FBQ0EsYUFBSyxDQUFMLEdBQVMsR0FBRyxDQUFDLElBQWI7QUFDQSxhQUFLLENBQUwsR0FBUyxHQUFHLENBQUMsR0FBYixDQVBXLENBU1g7O0FBQ0EsYUFBSyxDQUFMLElBQVUsQ0FBQyxDQUFDLFVBQVo7QUFDQSxhQUFLLENBQUwsSUFBVSxDQUFDLENBQUMsU0FBWjs7QUFFQSxlQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBYixFQUEyQjtBQUN6QixlQUFLLENBQUwsSUFBVSxDQUFDLENBQUMsVUFBWjtBQUNBLGVBQUssQ0FBTCxJQUFVLENBQUMsQ0FBQyxTQUFaO0FBQ0QsU0FoQlUsQ0FrQlg7OztBQUNBLFFBQUEsQ0FBQyxHQUFHLE9BQUo7O0FBQ0EsZUFBTyxDQUFDLENBQUMsTUFBRixLQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBRixFQUFqQixDQUFQLEVBQXFDO0FBQ25DLGNBQUksQ0FBQyxDQUFDLE9BQU4sRUFBZTtBQUNiLFlBQUEsSUFBSSxJQUFJLENBQUMsQ0FBQyxPQUFGLEdBQVksSUFBcEI7QUFDQSxpQkFBSyxDQUFMLElBQVUsQ0FBQyxDQUFDLENBQUYsTUFBUyxDQUFuQjtBQUNBLGlCQUFLLENBQUwsSUFBVSxDQUFDLENBQUMsQ0FBRixNQUFTLENBQW5CO0FBQ0Q7QUFDRixTQTFCVSxDQTRCWDs7O0FBQ0EsYUFBSyxLQUFMLEdBQWMsR0FBRyxDQUFDLEtBQUosSUFBYyxJQUE1QjtBQUNBLGFBQUssTUFBTCxHQUFjLEdBQUcsQ0FBQyxNQUFKLElBQWMsSUFBNUI7QUFDRCxPQWhDdUIsQ0FrQ3hCOzs7QUFDQSxNQUFBLE9BQU8sQ0FBQyxJQUFELENBQVAsQ0FuQ3dCLENBcUN4Qjs7QUFDQSxXQUFLLENBQUwsSUFBVSxNQUFNLENBQUMsT0FBakI7QUFDQSxXQUFLLENBQUwsSUFBVSxNQUFNLENBQUMsT0FBakI7QUFDRCxLQTFDbUIsQ0E0Q3BCO0FBNUNvQjtBQTZDcEIsSUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BN0NRLENBK0NwQjtBQS9Db0I7QUFnRHBCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLElBQUksRUFBRSxZQUFXO0FBQ2YsZUFBTyxJQUFJLEdBQUcsQ0FBQyxJQUFSLENBQWEsSUFBYixDQUFQO0FBQ0Q7QUFKUTtBQWhEUyxHQUFYLENBQVgsQ0F5REE7QUF6REE7QUEwREMsR0FBQyxHQUFHLENBQUMsSUFBTCxFQUFXLEdBQUcsQ0FBQyxJQUFmLEVBQXFCLEdBQUcsQ0FBQyxJQUF6QixFQUErQixPQUEvQixDQUF1QyxVQUFTLENBQVQsRUFBWTtBQUVsRCxJQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsQ0FBWCxFQUFjO0FBQ1o7QUFDQSxNQUFBLEtBQUssRUFBRSxVQUFTLEdBQVQsRUFBYztBQUNuQixZQUFJLENBQUMsR0FBRyxJQUFJLENBQUosRUFBUixDQURtQixDQUduQjs7QUFDQSxRQUFBLENBQUMsQ0FBQyxDQUFGLEdBQVcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFLLENBQWQsRUFBaUIsR0FBRyxDQUFDLENBQXJCLENBQVg7QUFDQSxRQUFBLENBQUMsQ0FBQyxDQUFGLEdBQVcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFLLENBQWQsRUFBaUIsR0FBRyxDQUFDLENBQXJCLENBQVg7QUFDQSxRQUFBLENBQUMsQ0FBQyxLQUFGLEdBQVcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFLLENBQUwsR0FBUyxLQUFLLEtBQXZCLEVBQStCLEdBQUcsQ0FBQyxDQUFKLEdBQVEsR0FBRyxDQUFDLEtBQTNDLElBQXFELENBQUMsQ0FBQyxDQUFsRTtBQUNBLFFBQUEsQ0FBQyxDQUFDLE1BQUYsR0FBVyxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQUssQ0FBTCxHQUFTLEtBQUssTUFBdkIsRUFBK0IsR0FBRyxDQUFDLENBQUosR0FBUSxHQUFHLENBQUMsTUFBM0MsSUFBcUQsQ0FBQyxDQUFDLENBQWxFO0FBRUEsZUFBTyxPQUFPLENBQUMsQ0FBRCxDQUFkO0FBQ0Q7QUFaVyxLQUFkO0FBZ0JELEdBbEJBO0FBb0JELEVBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3RCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsVUFBUyxNQUFULEVBQWlCO0FBQ3ZCLFVBQUksQ0FBSjtBQUFBLFVBQU8sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLENBQUQsQ0FBM0IsQ0FEdUIsQ0FHdkI7O0FBQ0EsTUFBQSxNQUFNLEdBQUcsTUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUF0QixHQUNQLE1BQU0sQ0FBQyxTQUFQLEVBRE8sR0FFVCxPQUFPLE1BQVAsS0FBa0IsUUFBbEIsR0FDRSxjQUFjLENBQUMsTUFBRCxDQURoQixHQUVBLFNBQVMsQ0FBQyxNQUFWLElBQW9CLENBQXBCLEdBQ0UsYUFBYSxDQUFDLEdBQUcsS0FBSCxDQUFTLElBQVQsQ0FBYyxTQUFkLENBQUQsQ0FEZixHQUVBLE9BQU8sTUFBUCxLQUFrQixRQUFsQixHQUNFLE1BREYsR0FDVyxJQVBYLENBSnVCLENBYXZCOztBQUNBLFdBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQXpCLEVBQTRCLENBQUMsSUFBSSxDQUFqQyxFQUFvQyxDQUFDLEVBQXJDLEVBQ0UsS0FBSyxNQUFNLENBQUMsQ0FBRCxDQUFYLElBQWtCLE1BQU0sSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQWIsS0FBNkIsUUFBdkMsR0FDaEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FEVSxHQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBRCxDQUFQLENBRDFCO0FBRUgsS0FuQnFCLENBcUJ0QjtBQXJCc0I7QUFzQnRCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLE9BQU8sRUFBRSxZQUFXO0FBQ2xCO0FBQ0EsWUFBSSxFQUFFLEdBQU0sbUJBQW1CLENBQUMsSUFBRCxFQUFPLENBQVAsRUFBVSxDQUFWLENBQS9CO0FBQUEsWUFDSSxFQUFFLEdBQU0sbUJBQW1CLENBQUMsSUFBRCxFQUFPLENBQVAsRUFBVSxDQUFWLENBRC9CO0FBQUEsWUFFSSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsRUFBWCxHQUFnQixJQUFJLENBQUMsS0FBTCxDQUFXLEVBQUUsQ0FBQyxDQUFkLEVBQWlCLEVBQUUsQ0FBQyxDQUFwQixDQUFoQixHQUF5QyxFQUZyRDtBQUlBLGVBQU87QUFDTDtBQUNBLFVBQUEsQ0FBQyxFQUFTLEtBQUssQ0FGVjtBQUdMLFVBQUEsQ0FBQyxFQUFTLEtBQUssQ0FIVixDQUlMO0FBSks7QUFLTCxVQUFBLEtBQUssRUFBSyxDQUFDLEtBTE47QUFNTCxVQUFBLEtBQUssRUFBSyxNQUFNLElBQUksQ0FBQyxFQUFYLEdBQWdCLElBQUksQ0FBQyxLQUFMLENBQVcsRUFBRSxDQUFDLENBQWQsRUFBaUIsRUFBRSxDQUFDLENBQXBCLENBTnJCLENBT0w7QUFQSztBQVFMLFVBQUEsTUFBTSxFQUFJLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBSyxDQUFMLEdBQVMsS0FBSyxDQUFkLEdBQWtCLEtBQUssQ0FBTCxHQUFTLEtBQUssQ0FBMUMsQ0FSTDtBQVNMLFVBQUEsTUFBTSxFQUFJLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBSyxDQUFMLEdBQVMsS0FBSyxDQUFkLEdBQWtCLEtBQUssQ0FBTCxHQUFTLEtBQUssQ0FBMUMsQ0FUTCxDQVVMO0FBVks7QUFXTCxVQUFBLFFBQVEsRUFBRTtBQVhMLFNBQVA7QUFhRCxPQXJCSyxDQXNCTjtBQXRCTTtBQXVCTixNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLGVBQU8sSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLElBQWYsQ0FBUDtBQUNELE9BekJLLENBMEJOO0FBMUJNO0FBMkJOLE1BQUEsS0FBSyxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN0QjtBQUNBLGFBQUssV0FBTCxHQUFtQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsTUFBZixDQUFuQjtBQUVBLGVBQU8sSUFBUDtBQUNELE9BaENLLENBaUNOO0FBakNNO0FBa0NOLE1BQUEsRUFBRSxFQUFFLFVBQVMsR0FBVCxFQUFjO0FBQ2hCO0FBQ0EsWUFBSSxDQUFDLEtBQUssV0FBVixFQUF1QixPQUFPLElBQVAsQ0FGUCxDQUloQjs7QUFDQSxZQUFJLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWU7QUFDMUIsVUFBQSxDQUFDLEVBQUUsS0FBSyxDQUFMLEdBQVMsQ0FBQyxLQUFLLFdBQUwsQ0FBaUIsQ0FBakIsR0FBcUIsS0FBSyxDQUEzQixJQUFnQyxHQURsQjtBQUUxQixVQUFBLENBQUMsRUFBRSxLQUFLLENBQUwsR0FBUyxDQUFDLEtBQUssV0FBTCxDQUFpQixDQUFqQixHQUFxQixLQUFLLENBQTNCLElBQWdDLEdBRmxCO0FBRzFCLFVBQUEsQ0FBQyxFQUFFLEtBQUssQ0FBTCxHQUFTLENBQUMsS0FBSyxXQUFMLENBQWlCLENBQWpCLEdBQXFCLEtBQUssQ0FBM0IsSUFBZ0MsR0FIbEI7QUFJMUIsVUFBQSxDQUFDLEVBQUUsS0FBSyxDQUFMLEdBQVMsQ0FBQyxLQUFLLFdBQUwsQ0FBaUIsQ0FBakIsR0FBcUIsS0FBSyxDQUEzQixJQUFnQyxHQUpsQjtBQUsxQixVQUFBLENBQUMsRUFBRSxLQUFLLENBQUwsR0FBUyxDQUFDLEtBQUssV0FBTCxDQUFpQixDQUFqQixHQUFxQixLQUFLLENBQTNCLElBQWdDLEdBTGxCO0FBTTFCLFVBQUEsQ0FBQyxFQUFFLEtBQUssQ0FBTCxHQUFTLENBQUMsS0FBSyxXQUFMLENBQWlCLENBQWpCLEdBQXFCLEtBQUssQ0FBM0IsSUFBZ0M7QUFObEIsU0FBZixDQUFiLENBTGdCLENBY2hCOztBQUNBLFlBQUksS0FBSyxLQUFMLElBQWMsS0FBSyxLQUFMLENBQVcsRUFBN0IsRUFBaUM7QUFDL0I7QUFDQSxjQUFJLEtBQUssR0FBRztBQUNWLFlBQUEsUUFBUSxFQUFFLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsUUFBaEIsR0FBMkIsQ0FBQyxLQUFLLEtBQUwsQ0FBVyxFQUFYLENBQWMsUUFBZCxHQUF5QixLQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCLFFBQTFDLElBQXNELEdBRGpGO0FBRVYsWUFBQSxFQUFFLEVBQVEsS0FBSyxLQUFMLENBQVcsSUFBWCxDQUFnQixFQUZoQjtBQUdWLFlBQUEsRUFBRSxFQUFRLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsRUFIaEIsQ0FNWjs7QUFOWSxXQUFaO0FBT0EsVUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQVAsQ0FDUCxDQUFDLEtBQUssS0FBTCxDQUFXLEVBQVgsQ0FBYyxRQUFkLEdBQXlCLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsUUFBaEIsR0FBMkIsQ0FBckQsSUFBMEQsR0FEbkQsRUFFUCxLQUFLLENBQUMsRUFGQyxFQUdQLEtBQUssQ0FBQyxFQUhDLENBQVQsQ0FUK0IsQ0FlL0I7O0FBQ0EsVUFBQSxNQUFNLENBQUMsS0FBUCxHQUFlLEtBQWY7QUFDRDs7QUFFRCxlQUFPLE1BQVA7QUFDRCxPQXJFSyxDQXNFTjtBQXRFTTtBQXVFTixNQUFBLFFBQVEsRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDekIsZUFBTyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBSyxNQUFMLEdBQWMsUUFBZCxDQUF1QixXQUFXLENBQUMsTUFBRCxDQUFYLENBQW9CLE1BQXBCLEVBQXZCLENBQWYsQ0FBUDtBQUNELE9BekVLLENBMEVOO0FBMUVNO0FBMkVOLE1BQUEsT0FBTyxFQUFFLFlBQVc7QUFDbEIsZUFBTyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBSyxNQUFMLEdBQWMsT0FBZCxFQUFmLENBQVA7QUFDRCxPQTdFSyxDQThFTjtBQTlFTTtBQStFTixNQUFBLFNBQVMsRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDeEIsZUFBTyxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBSyxNQUFMLEdBQWMsU0FBZCxDQUF3QixDQUFDLElBQUksQ0FBN0IsRUFBZ0MsQ0FBQyxJQUFJLENBQXJDLENBQWYsQ0FBUDtBQUNELE9BakZLLENBa0ZOO0FBbEZNO0FBbUZOLE1BQUEsS0FBSyxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxFQUFmLEVBQW1CLEVBQW5CLEVBQXVCO0FBQzVCO0FBQ0EsWUFBSSxTQUFTLENBQUMsTUFBVixJQUFvQixDQUFwQixJQUF5QixTQUFTLENBQUMsTUFBVixJQUFvQixDQUFqRCxFQUNFLENBQUMsR0FBRyxDQUFKOztBQUNGLFlBQUksU0FBUyxDQUFDLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDekIsVUFBQSxFQUFFLEdBQUcsRUFBTDtBQUNBLFVBQUEsRUFBRSxHQUFHLENBQUw7QUFDRDs7QUFFRCxlQUFPLEtBQUssTUFBTCxDQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0IsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBcEIsQ0FBUDtBQUNELE9BN0ZLLENBOEZOO0FBOUZNO0FBK0ZOLE1BQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0I7QUFDMUI7QUFDQSxRQUFBLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSixDQUFVLE9BQVYsQ0FBa0IsQ0FBbEIsQ0FBSjtBQUVBLGVBQU8sS0FBSyxNQUFMLENBQVksRUFBWixFQUFnQixFQUFoQixFQUFvQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQWYsRUFBNEIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQTVCLEVBQXlDLENBQUMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQTFDLEVBQXVELElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxDQUF2RCxFQUFvRSxDQUFwRSxFQUF1RSxDQUF2RSxDQUFwQixDQUFQO0FBQ0QsT0FwR0ssQ0FxR047QUFyR007QUFzR04sTUFBQSxJQUFJLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ25CLGVBQU8sQ0FBQyxJQUFJLEdBQUwsR0FBVyxLQUFLLEtBQUwsQ0FBVyxDQUFDLENBQVosRUFBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLENBQVgsR0FBcUMsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQUMsQ0FBZixFQUFrQixDQUFsQixFQUFxQixDQUFyQixDQUE1QztBQUNELE9BeEdLLENBeUdOO0FBekdNO0FBMEdOLE1BQUEsSUFBSSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxFQUFmLEVBQW1CLEVBQW5CLEVBQXVCO0FBQzNCLGVBQU8sS0FBSyxNQUFMLENBQVksRUFBWixFQUFnQixFQUFoQixFQUFvQixLQUFLLE1BQUwsR0FBYyxLQUFkLENBQW9CLENBQUMsSUFBSSxDQUF6QixFQUE0QixLQUE1QixDQUFrQyxDQUFDLElBQUksQ0FBdkMsQ0FBcEIsQ0FBUDtBQUNELE9BNUdLLENBNkdOO0FBN0dNO0FBOEdOLE1BQUEsS0FBSyxFQUFFLFVBQVMsQ0FBVCxFQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0I7QUFDekIsZUFBTyxLQUFLLE1BQUwsQ0FBWSxFQUFaLEVBQWdCLEVBQWhCLEVBQW9CLEtBQUssTUFBTCxHQUFjLEtBQWQsQ0FBb0IsQ0FBQyxJQUFJLENBQXpCLENBQXBCLENBQVA7QUFDRCxPQWhISyxDQWlITjtBQWpITTtBQWtITixNQUFBLEtBQUssRUFBRSxVQUFTLENBQVQsRUFBWSxFQUFaLEVBQWdCLEVBQWhCLEVBQW9CO0FBQ3pCLGVBQU8sS0FBSyxNQUFMLENBQVksRUFBWixFQUFnQixFQUFoQixFQUFvQixLQUFLLE1BQUwsR0FBYyxLQUFkLENBQW9CLENBQUMsSUFBSSxDQUF6QixDQUFwQixDQUFQO0FBQ0QsT0FwSEssQ0FxSE47QUFySE07QUFzSE4sTUFBQSxNQUFNLEVBQUUsVUFBUyxFQUFULEVBQWEsRUFBYixFQUFpQixNQUFqQixFQUF5QjtBQUMvQixlQUFPLEtBQ0osUUFESSxDQUNLLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLEVBQUUsSUFBSSxDQUFqQyxFQUFvQyxFQUFFLElBQUksQ0FBMUMsQ0FETCxFQUVKLFFBRkksQ0FFSyxNQUZMLEVBR0osUUFISSxDQUdLLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLENBQUMsRUFBRCxJQUFPLENBQWxDLEVBQXFDLENBQUMsRUFBRCxJQUFPLENBQTVDLENBSEwsQ0FBUDtBQUlELE9BM0hLLENBNEhOO0FBNUhNO0FBNkhOLE1BQUEsTUFBTSxFQUFFLFlBQVc7QUFDakI7QUFDQSxZQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBSixDQUFXLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBcUIsZUFBckIsRUFBYixDQUZpQixDQUlqQjs7QUFDQSxhQUFLLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQTdCLEVBQWdDLENBQUMsSUFBSSxDQUFyQyxFQUF3QyxDQUFDLEVBQXpDLEVBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBTixHQUFvQixLQUFLLE1BQU0sQ0FBQyxDQUFELENBQVgsQ0FBcEI7O0FBRUYsZUFBTyxNQUFQO0FBQ0QsT0F0SUssQ0F1SU47QUF2SU07QUF3SU4sTUFBQSxRQUFRLEVBQUUsWUFBVztBQUNuQixlQUFPLFlBQVksS0FBSyxDQUFqQixHQUFxQixHQUFyQixHQUEyQixLQUFLLENBQWhDLEdBQW9DLEdBQXBDLEdBQTBDLEtBQUssQ0FBL0MsR0FBbUQsR0FBbkQsR0FBeUQsS0FBSyxDQUE5RCxHQUFrRSxHQUFsRSxHQUF3RSxLQUFLLENBQTdFLEdBQWlGLEdBQWpGLEdBQXVGLEtBQUssQ0FBNUYsR0FBZ0csR0FBdkc7QUFDRCxPQTFJSyxDQTZJUjs7QUE3SVEsS0F0QmM7QUFvS3RCLElBQUEsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQXBLVSxDQXNLdEI7QUF0S3NCO0FBdUt0QixJQUFBLFNBQVMsRUFBRTtBQUNUO0FBQ0EsTUFBQSxHQUFHLEVBQUUsWUFBVztBQUNkLGVBQU8sSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLEtBQUssSUFBTCxDQUFVLE1BQVYsRUFBZixDQUFQO0FBQ0QsT0FKUTtBQUtUO0FBQ0EsTUFBQSxTQUFTLEVBQUUsWUFBVztBQUNwQixlQUFPLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxLQUFLLElBQUwsQ0FBVSxZQUFWLEVBQWYsQ0FBUDtBQUNEO0FBUlE7QUF2S1csR0FBWCxDQUFiO0FBb0xBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsT0FBZixFQUF3QjtBQUN0QjtBQUNBLElBQUEsSUFBSSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCO0FBQ3RCO0FBQ0EsVUFBSSxDQUFDLElBQUksSUFBVCxFQUFlO0FBQ2I7QUFDQSxRQUFBLENBQUMsR0FBRyxFQUFKO0FBQ0EsUUFBQSxDQUFDLEdBQUcsS0FBSyxJQUFMLENBQVUsVUFBZDs7QUFDQSxhQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBRixHQUFXLENBQXBCLEVBQXVCLENBQUMsSUFBSSxDQUE1QixFQUErQixDQUFDLEVBQWhDLEVBQ0UsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxRQUFOLENBQUQsR0FBbUIsR0FBRyxDQUFDLEtBQUosQ0FBVSxRQUFWLENBQW1CLElBQW5CLENBQXdCLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxTQUE3QixJQUEwQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLLFNBQU4sQ0FBcEQsR0FBdUUsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLLFNBQS9GOztBQUVGLGVBQU8sQ0FBUDtBQUVELE9BVEQsTUFTTyxJQUFJLE9BQU8sQ0FBUCxJQUFZLFFBQWhCLEVBQTBCO0FBQy9CO0FBQ0EsYUFBSyxDQUFMLElBQVUsQ0FBVixFQUFhLEtBQUssSUFBTCxDQUFVLENBQVYsRUFBYSxDQUFDLENBQUMsQ0FBRCxDQUFkO0FBRWQsT0FKTSxNQUlBLElBQUksQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDbkI7QUFDQSxhQUFLLElBQUwsQ0FBVSxlQUFWLENBQTBCLENBQTFCO0FBRUgsT0FKTSxNQUlBLElBQUksQ0FBQyxJQUFJLElBQVQsRUFBZTtBQUNwQjtBQUNBLFFBQUEsQ0FBQyxHQUFHLEtBQUssSUFBTCxDQUFVLFlBQVYsQ0FBdUIsQ0FBdkIsQ0FBSjtBQUNBLGVBQU8sQ0FBQyxJQUFJLElBQUwsR0FDTCxHQUFHLENBQUMsUUFBSixDQUFhLEtBQWIsQ0FBbUIsQ0FBbkIsQ0FESyxHQUVQLEdBQUcsQ0FBQyxLQUFKLENBQVUsUUFBVixDQUFtQixJQUFuQixDQUF3QixDQUF4QixJQUNFLFVBQVUsQ0FBQyxDQUFELENBRFosR0FDa0IsQ0FIbEI7QUFLRCxPQVJNLE1BUUE7QUFDTDtBQUNBLFlBQUksQ0FBQyxJQUFJLGNBQVQsRUFDRSxLQUFLLElBQUwsQ0FBVSxRQUFWLEVBQW9CLFVBQVUsQ0FBQyxDQUFELENBQVYsR0FBZ0IsQ0FBaEIsR0FBb0IsS0FBSyxPQUF6QixHQUFtQyxJQUF2RCxFQURGLEtBRUssSUFBSSxDQUFDLElBQUksUUFBVCxFQUNILEtBQUssT0FBTCxHQUFlLENBQWYsQ0FMRyxDQU9MOztBQUNBLFlBQUksQ0FBQyxJQUFJLE1BQUwsSUFBZSxDQUFDLElBQUksUUFBeEIsRUFBa0M7QUFDaEMsY0FBSSxHQUFHLENBQUMsS0FBSixDQUFVLE9BQVYsQ0FBa0IsSUFBbEIsQ0FBdUIsQ0FBdkIsQ0FBSixFQUNFLENBQUMsR0FBRyxLQUFLLEdBQUwsR0FBVyxJQUFYLEdBQWtCLEtBQWxCLENBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLENBQUo7QUFFRixjQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBckIsRUFDRSxDQUFDLEdBQUcsS0FBSyxHQUFMLEdBQVcsSUFBWCxHQUFrQixPQUFsQixDQUEwQixDQUExQixFQUE2QixDQUE3QixFQUFnQyxZQUFXO0FBQzdDLGlCQUFLLEdBQUwsQ0FBUyxDQUFUO0FBQ0QsV0FGRyxDQUFKO0FBR0gsU0FoQkksQ0FrQkw7OztBQUNBLFlBQUksT0FBTyxDQUFQLEtBQWEsUUFBakIsRUFDRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQWYsQ0FBSixDQURGLENBR0E7QUFIQSxhQUlLLElBQUksR0FBRyxDQUFDLEtBQUosQ0FBVSxPQUFWLENBQWtCLENBQWxCLENBQUosRUFDSCxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBUixDQUFjLENBQWQsQ0FBSixDQURHLENBR0w7QUFISyxlQUlBLElBQUksS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLENBQUosRUFDSCxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBUixDQUFjLENBQWQsQ0FBSixDQURHLENBR0w7QUFISyxpQkFJQSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsTUFBakIsSUFBMkIsQ0FBQyxDQUFDLEtBQWpDLEVBQ0gsS0FBSyxLQUFMLEdBQWEsQ0FBQyxDQUFDLEtBQWYsQ0FoQ0csQ0FrQ0w7O0FBQ0EsWUFBSSxDQUFDLElBQUksU0FBVCxFQUFvQjtBQUNsQjtBQUNBLGNBQUksS0FBSyxPQUFULEVBQ0UsS0FBSyxPQUFMLENBQWEsQ0FBYjtBQUNILFNBSkQsTUFJTztBQUNMO0FBQ0EsaUJBQU8sQ0FBUCxLQUFhLFFBQWIsR0FDRSxLQUFLLElBQUwsQ0FBVSxjQUFWLENBQXlCLENBQXpCLEVBQTRCLENBQTVCLEVBQStCLENBQUMsQ0FBQyxRQUFGLEVBQS9CLENBREYsR0FFRSxLQUFLLElBQUwsQ0FBVSxZQUFWLENBQXVCLENBQXZCLEVBQTBCLENBQUMsQ0FBQyxRQUFGLEVBQTFCLENBRkY7QUFHRCxTQTVDSSxDQThDTDs7O0FBQ0EsWUFBSSxLQUFLLE9BQUwsS0FBaUIsQ0FBQyxJQUFJLFdBQUwsSUFBb0IsQ0FBQyxJQUFJLEdBQTFDLENBQUosRUFDRSxLQUFLLE9BQUwsQ0FBYSxDQUFiLEVBQWdCLENBQWhCO0FBQ0g7O0FBRUQsYUFBTyxJQUFQO0FBQ0Q7QUFqRnFCLEdBQXhCO0FBbUZBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsT0FBZixFQUF3QixHQUFHLENBQUMsRUFBNUIsRUFBZ0M7QUFDOUI7QUFDQSxJQUFBLFNBQVMsRUFBRSxVQUFTLENBQVQsRUFBWSxRQUFaLEVBQXNCO0FBQy9CO0FBQ0EsVUFBSSxNQUFNLEdBQUcsS0FBSyxNQUFMLElBQWUsSUFBNUI7QUFBQSxVQUNJLE1BREosQ0FGK0IsQ0FLL0I7O0FBQ0EsVUFBSSxPQUFPLENBQVAsS0FBYSxRQUFqQixFQUEyQjtBQUN6QjtBQUNBLFFBQUEsTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxNQUFmLEVBQXVCLE9BQXZCLEVBQVQsQ0FGeUIsQ0FJekI7O0FBQ0EsWUFBSSxPQUFPLEtBQUssS0FBWixLQUFzQixRQUExQixFQUFvQztBQUNsQyxVQUFBLE1BQU0sQ0FBQyxRQUFQLEdBQWtCLEtBQUssS0FBTCxDQUFXLFFBQTdCO0FBQ0EsVUFBQSxNQUFNLENBQUMsRUFBUCxHQUFrQixLQUFLLEtBQUwsQ0FBVyxFQUE3QjtBQUNBLFVBQUEsTUFBTSxDQUFDLEVBQVAsR0FBa0IsS0FBSyxLQUFMLENBQVcsRUFBN0I7QUFDRDs7QUFFRCxlQUFPLE9BQU8sQ0FBUCxLQUFhLFFBQWIsR0FBd0IsTUFBTSxDQUFDLENBQUQsQ0FBOUIsR0FBb0MsTUFBM0M7QUFDRCxPQWxCOEIsQ0FvQi9COzs7QUFDQSxNQUFBLE1BQU0sR0FBRyxnQkFBZ0IsR0FBRyxDQUFDLEVBQXBCLElBQTBCLEtBQUssS0FBTCxDQUFXLFNBQXJDLEdBQ1AsS0FBSyxLQUFMLENBQVcsU0FESixHQUVQLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxNQUFmLENBRkYsQ0FyQitCLENBeUIvQjs7QUFDQSxNQUFBLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBRixJQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBN0IsQ0ExQitCLENBNEIvQjs7QUFDQSxVQUFJLENBQUMsQ0FBQyxDQUFGLElBQU8sSUFBWCxFQUFpQjtBQUNmLFFBQUEsTUFBTSxHQUFHLFFBQVEsR0FDZjtBQUNBLFFBQUEsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQWYsQ0FBaEIsQ0FGZSxHQUdmO0FBQ0EsWUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQWYsQ0FKRixDQURlLENBT2pCO0FBQ0MsT0FSRCxNQVFPLElBQUksQ0FBQyxDQUFDLFFBQUYsSUFBYyxJQUFsQixFQUF3QjtBQUM3QjtBQUNBLFFBQUEsWUFBWSxDQUFDLENBQUQsRUFBSSxNQUFKLENBQVosQ0FGNkIsQ0FJN0I7O0FBQ0EsWUFBSSxRQUFKLEVBQWM7QUFDWixVQUFBLENBQUMsQ0FBQyxRQUFGLElBQWMsS0FBSyxLQUFMLElBQWMsS0FBSyxLQUFMLENBQVcsUUFBWCxJQUF1QixJQUFyQyxHQUNaLEtBQUssS0FBTCxDQUFXLFFBREMsR0FFWixNQUFNLENBQUMsT0FBUCxHQUFpQixRQUZuQjtBQUdELFNBVDRCLENBVzdCOzs7QUFDQSxhQUFLLEtBQUwsR0FBYSxDQUFiLENBWjZCLENBYzdCOztBQUNBLFlBQUksZ0JBQWdCLEdBQUcsQ0FBQyxPQUF4QixFQUFpQztBQUMvQixVQUFBLE1BQU0sR0FBRyxRQUFRLEdBQ2Y7QUFDQSxVQUFBLE1BQU0sQ0FBQyxNQUFQLENBQWMsQ0FBQyxDQUFDLFFBQWhCLEVBQTBCLENBQUMsQ0FBQyxFQUE1QixFQUFnQyxDQUFDLENBQUMsRUFBbEMsQ0FGZSxHQUdmO0FBQ0EsVUFBQSxNQUFNLENBQUMsTUFBUCxDQUFjLENBQUMsQ0FBQyxRQUFGLEdBQWEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsUUFBNUMsRUFBc0QsQ0FBQyxDQUFDLEVBQXhELEVBQTRELENBQUMsQ0FBQyxFQUE5RCxDQUpGO0FBS0QsU0FyQjRCLENBdUIvQjs7QUFDQyxPQXhCTSxNQXdCQSxJQUFJLENBQUMsQ0FBQyxLQUFGLElBQVcsSUFBWCxJQUFtQixDQUFDLENBQUMsTUFBRixJQUFZLElBQS9CLElBQXVDLENBQUMsQ0FBQyxNQUFGLElBQVksSUFBdkQsRUFBNkQ7QUFDbEU7QUFDQSxRQUFBLFlBQVksQ0FBQyxDQUFELEVBQUksTUFBSixDQUFaLENBRmtFLENBSWxFOztBQUNBLFFBQUEsQ0FBQyxDQUFDLE1BQUYsR0FBVyxDQUFDLENBQUMsS0FBRixJQUFXLElBQVgsR0FBa0IsQ0FBQyxDQUFDLEtBQXBCLEdBQTRCLENBQUMsQ0FBQyxNQUFGLElBQVksSUFBWixHQUFtQixDQUFDLENBQUMsTUFBckIsR0FBOEIsQ0FBckU7QUFDQSxRQUFBLENBQUMsQ0FBQyxNQUFGLEdBQVcsQ0FBQyxDQUFDLEtBQUYsSUFBVyxJQUFYLEdBQWtCLENBQUMsQ0FBQyxLQUFwQixHQUE0QixDQUFDLENBQUMsTUFBRixJQUFZLElBQVosR0FBbUIsQ0FBQyxDQUFDLE1BQXJCLEdBQThCLENBQXJFOztBQUVBLFlBQUksQ0FBQyxRQUFMLEVBQWU7QUFDYjtBQUNBLGNBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFQLEVBQVI7QUFDQSxVQUFBLENBQUMsQ0FBQyxNQUFGLEdBQVcsQ0FBQyxDQUFDLE1BQUYsR0FBVyxDQUFYLEdBQWUsQ0FBQyxDQUFDLE1BQTVCO0FBQ0EsVUFBQSxDQUFDLENBQUMsTUFBRixHQUFXLENBQUMsQ0FBQyxNQUFGLEdBQVcsQ0FBWCxHQUFlLENBQUMsQ0FBQyxNQUE1QjtBQUNEOztBQUVELFFBQUEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFQLENBQWEsQ0FBQyxDQUFDLE1BQWYsRUFBdUIsQ0FBQyxDQUFDLE1BQXpCLEVBQWlDLENBQUMsQ0FBQyxFQUFuQyxFQUF1QyxDQUFDLENBQUMsRUFBekMsQ0FBVCxDQWZrRSxDQWlCcEU7QUFDQyxPQWxCTSxNQWtCQSxJQUFJLENBQUMsQ0FBQyxLQUFGLElBQVcsSUFBWCxJQUFtQixDQUFDLENBQUMsS0FBRixJQUFXLElBQWxDLEVBQXdDO0FBQzdDO0FBQ0EsUUFBQSxZQUFZLENBQUMsQ0FBRCxFQUFJLE1BQUosQ0FBWixDQUY2QyxDQUk3Qzs7QUFDQSxRQUFBLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBQyxDQUFDLEtBQUYsSUFBVyxJQUFYLEdBQWtCLENBQUMsQ0FBQyxLQUFwQixHQUE0QixDQUF0QztBQUNBLFFBQUEsQ0FBQyxDQUFDLEtBQUYsR0FBVSxDQUFDLENBQUMsS0FBRixJQUFXLElBQVgsR0FBa0IsQ0FBQyxDQUFDLEtBQXBCLEdBQTRCLENBQXRDOztBQUVBLFlBQUksQ0FBQyxRQUFMLEVBQWU7QUFDYjtBQUNBLGNBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFQLEVBQVI7QUFDQSxVQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUCxDQUFnQixJQUFJLEdBQUcsQ0FBQyxNQUFSLEdBQWlCLElBQWpCLENBQXNCLENBQUMsQ0FBQyxLQUF4QixFQUErQixDQUFDLENBQUMsS0FBakMsRUFBd0MsQ0FBQyxDQUFDLEVBQTFDLEVBQThDLENBQUMsQ0FBQyxFQUFoRCxFQUFvRCxPQUFwRCxFQUFoQixDQUFUO0FBQ0Q7O0FBRUQsUUFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQVAsQ0FBWSxDQUFDLENBQUMsS0FBZCxFQUFxQixDQUFDLENBQUMsS0FBdkIsRUFBOEIsQ0FBQyxDQUFDLEVBQWhDLEVBQW9DLENBQUMsQ0FBQyxFQUF0QyxDQUFULENBZDZDLENBZ0IvQztBQUNDLE9BakJNLE1BaUJBLElBQUksQ0FBQyxDQUFDLElBQU4sRUFBWTtBQUNqQixRQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBUCxDQUNQLENBQUMsQ0FBQyxJQURLLEVBRVAsQ0FBQyxDQUFDLE1BQUYsSUFBWSxJQUFaLEdBQW1CLE1BQU0sQ0FBQyxJQUFQLEdBQWMsTUFBTSxDQUFDLENBQUMsSUFBdEIsQ0FBbkIsR0FBaUQsQ0FBQyxDQUFDLE1BRjVDLENBQVQsQ0FEaUIsQ0FNbkI7QUFDQyxPQVBNLE1BT0EsSUFBSSxDQUFDLENBQUMsQ0FBRixJQUFPLElBQVAsSUFBZSxDQUFDLENBQUMsQ0FBRixJQUFPLElBQTFCLEVBQWdDO0FBQ3JDLFlBQUksUUFBSixFQUFjO0FBQ1o7QUFDQSxVQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUCxDQUFpQixDQUFDLENBQUMsQ0FBbkIsRUFBc0IsQ0FBQyxDQUFDLENBQXhCLENBQVQ7QUFDRCxTQUhELE1BR087QUFDTDtBQUNBLGNBQUksQ0FBQyxDQUFDLENBQUYsSUFBTyxJQUFYLEVBQWlCLE1BQU0sQ0FBQyxDQUFQLEdBQVcsQ0FBQyxDQUFDLENBQWI7QUFDakIsY0FBSSxDQUFDLENBQUMsQ0FBRixJQUFPLElBQVgsRUFBaUIsTUFBTSxDQUFDLENBQVAsR0FBVyxDQUFDLENBQUMsQ0FBYjtBQUNsQjtBQUNGOztBQUVELGFBQU8sS0FBSyxJQUFMLENBQVUsZ0JBQWdCLEdBQUcsQ0FBQyxPQUFwQixHQUE4QixrQkFBOUIsR0FBbUQsZ0JBQWdCLEdBQUcsQ0FBQyxRQUFwQixHQUErQixtQkFBL0IsR0FBcUQsV0FBbEgsRUFBK0gsTUFBL0gsQ0FBUDtBQUNEO0FBckg2QixHQUFoQztBQXdIQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLE9BQWYsRUFBd0I7QUFDdEI7QUFDQSxJQUFBLFdBQVcsRUFBRSxZQUFXO0FBQ3RCLGFBQU8sS0FBSyxJQUFMLENBQVUsV0FBVixFQUF1QixJQUF2QixDQUFQO0FBQ0QsS0FKcUI7QUFLdEI7QUFDQSxJQUFBLFNBQVMsRUFBRSxZQUFXO0FBRXBCLFVBQUksTUFBTSxHQUFHLENBQUMsS0FBSyxJQUFMLENBQVUsV0FBVixLQUEwQixFQUEzQixHQUNYO0FBQ0MsTUFBQSxLQUZVLENBRUosT0FGSSxFQUVLLEtBRkwsQ0FFVyxDQUZYLEVBRWEsQ0FBQyxDQUZkLEVBRWlCLEdBRmpCLENBRXFCLFVBQVMsR0FBVCxFQUFhO0FBQzNDO0FBQ0EsWUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUosR0FBVyxLQUFYLENBQWlCLEdBQWpCLENBQVQ7QUFDQSxlQUFPLENBQUMsRUFBRSxDQUFDLENBQUQsQ0FBSCxFQUFRLEVBQUUsQ0FBQyxDQUFELENBQUYsQ0FBTSxLQUFOLENBQVksR0FBRyxDQUFDLEtBQUosQ0FBVSxjQUF0QixFQUFzQyxHQUF0QyxDQUEwQyxVQUFTLEdBQVQsRUFBYTtBQUFFLGlCQUFPLFVBQVUsQ0FBQyxHQUFELENBQWpCO0FBQXdCLFNBQWpGLENBQVIsQ0FBUDtBQUNELE9BTlUsRUFPWDtBQVBXLE9BUVYsTUFSVSxDQVFILFVBQVMsTUFBVCxFQUFpQixTQUFqQixFQUEyQjtBQUVqQyxZQUFHLFNBQVMsQ0FBQyxDQUFELENBQVQsSUFBZ0IsUUFBbkIsRUFBNkIsT0FBTyxNQUFNLENBQUMsUUFBUCxDQUFnQixhQUFhLENBQUMsU0FBUyxDQUFDLENBQUQsQ0FBVixDQUE3QixDQUFQO0FBQzdCLGVBQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFELENBQVYsQ0FBTixDQUFxQixLQUFyQixDQUEyQixNQUEzQixFQUFtQyxTQUFTLENBQUMsQ0FBRCxDQUE1QyxDQUFQO0FBRUQsT0FiVSxFQWFSLElBQUksR0FBRyxDQUFDLE1BQVIsRUFiUSxDQUFiLENBRm9CLENBZ0JwQjs7QUFDQSxXQUFLLElBQUwsQ0FBVSxXQUFWLEVBQXVCLE1BQXZCO0FBRUEsYUFBTyxNQUFQO0FBQ0QsS0ExQnFCO0FBMkJ0QjtBQUNBLElBQUEsUUFBUSxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN6QixVQUFHLFFBQVEsTUFBWCxFQUFtQixPQUFPLElBQVA7QUFDbkIsVUFBSSxHQUFHLEdBQUcsS0FBSyxTQUFMLEVBQVY7QUFDQSxVQUFJLElBQUksR0FBRyxNQUFNLENBQUMsSUFBUCxDQUFZLENBQVosRUFBYyxDQUFkLENBQVg7QUFDQSxVQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBTCxHQUFpQixPQUFqQixFQUFYO0FBQ0EsTUFBQSxJQUFJLENBQUMsTUFBTDtBQUVBLFdBQUssS0FBTCxDQUFXLE1BQVgsRUFBbUIsV0FBbkIsR0FBaUMsU0FBakMsQ0FBMkMsSUFBSSxDQUFDLFFBQUwsQ0FBYyxHQUFkLENBQTNDO0FBRUEsYUFBTyxJQUFQO0FBQ0QsS0F0Q3FCO0FBdUN0QjtBQUNBLElBQUEsS0FBSyxFQUFFLFlBQVc7QUFDaEIsYUFBTyxLQUFLLFFBQUwsQ0FBYyxLQUFLLEdBQUwsRUFBZCxDQUFQO0FBQ0Q7QUExQ3FCLEdBQXhCO0FBOENBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsT0FBZixFQUF3QjtBQUN0QjtBQUNBLElBQUEsS0FBSyxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNwQixVQUFJLFNBQVMsQ0FBQyxNQUFWLElBQW9CLENBQXhCLEVBQTJCO0FBQ3pCO0FBQ0EsZUFBTyxLQUFLLElBQUwsQ0FBVSxLQUFWLENBQWdCLE9BQWhCLElBQTJCLEVBQWxDO0FBRUQsT0FKRCxNQUlPLElBQUksU0FBUyxDQUFDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDL0I7QUFDQSxZQUFJLE9BQU8sQ0FBUCxJQUFZLFFBQWhCLEVBQTBCO0FBQ3hCLGVBQUssQ0FBTCxJQUFVLENBQVYsRUFBYSxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBQyxDQUFDLENBQUQsQ0FBZjtBQUVkLFNBSEQsTUFHTyxJQUFJLEdBQUcsQ0FBQyxLQUFKLENBQVUsS0FBVixDQUFnQixJQUFoQixDQUFxQixDQUFyQixDQUFKLEVBQTZCO0FBQ2xDO0FBQ0EsVUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxHQUFSLENBQUosQ0FGa0MsQ0FJbEM7O0FBQ0EsZUFBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBdEIsRUFBOEIsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxZQUFBLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUssS0FBTCxDQUFXLEdBQVgsQ0FBSjtBQUNBLGlCQUFLLEtBQUwsQ0FBVyxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUssT0FBTCxDQUFhLE1BQWIsRUFBcUIsRUFBckIsQ0FBWCxFQUFxQyxDQUFDLENBQUMsQ0FBRCxDQUF0QztBQUNEO0FBQ0YsU0FUTSxNQVNBO0FBQ0w7QUFDQSxpQkFBTyxLQUFLLElBQUwsQ0FBVSxLQUFWLENBQWdCLFNBQVMsQ0FBQyxDQUFELENBQXpCLENBQVA7QUFDRDtBQUVGLE9BbkJNLE1BbUJBO0FBQ0wsYUFBSyxJQUFMLENBQVUsS0FBVixDQUFnQixTQUFTLENBQUMsQ0FBRCxDQUF6QixJQUFnQyxDQUFDLEtBQUssSUFBTixJQUFjLEdBQUcsQ0FBQyxLQUFKLENBQVUsT0FBVixDQUFrQixJQUFsQixDQUF1QixDQUF2QixDQUFkLEdBQTBDLEVBQTFDLEdBQStDLENBQS9FO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0Q7QUEvQnFCLEdBQXhCO0FBaUNBLEVBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3RCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsVUFBUyxPQUFULEVBQWtCO0FBQ3hCLFdBQUssV0FBTCxDQUFpQixJQUFqQixDQUFzQixJQUF0QixFQUE0QixPQUE1QjtBQUNELEtBSnFCLENBTXRCO0FBTnNCO0FBT3RCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQVBTLENBU3RCO0FBVHNCO0FBVXRCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLFFBQVEsRUFBRSxZQUFXO0FBQ25CLGVBQU8sR0FBRyxDQUFDLEtBQUosQ0FBVSxHQUFWLENBQWMsR0FBRyxDQUFDLEtBQUosQ0FBVSxpQkFBVixDQUE0QixLQUFLLElBQUwsQ0FBVSxVQUF0QyxDQUFkLEVBQWlFLFVBQVMsSUFBVCxFQUFlO0FBQ3JGLGlCQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBVixDQUFQO0FBQ0QsU0FGTSxDQUFQO0FBR0QsT0FOSyxDQU9OO0FBUE07QUFRTixNQUFBLEdBQUcsRUFBRSxVQUFTLE9BQVQsRUFBa0IsQ0FBbEIsRUFBcUI7QUFDeEIsWUFBSSxDQUFDLEtBQUssR0FBTCxDQUFTLE9BQVQsQ0FBTCxFQUF3QjtBQUN0QjtBQUNBLFVBQUEsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFMLEdBQVksS0FBSyxRQUFMLEdBQWdCLE1BQTVCLEdBQXFDLENBQXpDLENBRnNCLENBSXRCOztBQUNBLGVBQUssSUFBTCxDQUFVLFlBQVYsQ0FBdUIsT0FBTyxDQUFDLElBQS9CLEVBQXFDLEtBQUssSUFBTCxDQUFVLFVBQVYsQ0FBcUIsQ0FBckIsS0FBMkIsSUFBaEU7QUFDRDs7QUFFRCxlQUFPLElBQVA7QUFDRCxPQWxCSyxDQW1CTjtBQW5CTTtBQW9CTixNQUFBLEdBQUcsRUFBRSxVQUFTLE9BQVQsRUFBa0IsQ0FBbEIsRUFBcUI7QUFDeEIsYUFBSyxHQUFMLENBQVMsT0FBVCxFQUFrQixDQUFsQjtBQUNBLGVBQU8sT0FBUDtBQUNELE9BdkJLLENBd0JOO0FBeEJNO0FBeUJOLE1BQUEsR0FBRyxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUNyQixlQUFPLEtBQUssS0FBTCxDQUFXLE9BQVgsS0FBdUIsQ0FBOUI7QUFDRCxPQTNCSyxDQTRCTjtBQTVCTTtBQTZCTixNQUFBLEtBQUssRUFBRSxVQUFTLE9BQVQsRUFBa0I7QUFDdkIsZUFBTyxLQUFLLFFBQUwsR0FBZ0IsT0FBaEIsQ0FBd0IsT0FBeEIsQ0FBUDtBQUNELE9BL0JLLENBZ0NOO0FBaENNO0FBaUNOLE1BQUEsR0FBRyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2YsZUFBTyxLQUFLLFFBQUwsR0FBZ0IsQ0FBaEIsQ0FBUDtBQUNELE9BbkNLLENBb0NOO0FBcENNO0FBcUNOLE1BQUEsS0FBSyxFQUFFLFlBQVc7QUFDaEIsZUFBTyxLQUFLLFFBQUwsR0FBZ0IsQ0FBaEIsQ0FBUDtBQUNELE9BdkNLLENBd0NOO0FBeENNO0FBeUNOLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixlQUFPLEtBQUssUUFBTCxHQUFnQixLQUFLLFFBQUwsR0FBZ0IsTUFBaEIsR0FBeUIsQ0FBekMsQ0FBUDtBQUNELE9BM0NLLENBNENOO0FBNUNNO0FBNkNOLE1BQUEsSUFBSSxFQUFFLFVBQVMsS0FBVCxFQUFnQixJQUFoQixFQUFzQjtBQUMxQixZQUFJLENBQUo7QUFBQSxZQUFPLEVBQVA7QUFBQSxZQUNJLFFBQVEsR0FBRyxLQUFLLFFBQUwsRUFEZjs7QUFHQSxhQUFLLENBQUMsR0FBRyxDQUFKLEVBQU8sRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUExQixFQUFrQyxDQUFDLEdBQUcsRUFBdEMsRUFBMEMsQ0FBQyxFQUEzQyxFQUErQztBQUM3QyxjQUFJLFFBQVEsQ0FBQyxDQUFELENBQVIsWUFBdUIsR0FBRyxDQUFDLE9BQS9CLEVBQ0UsS0FBSyxDQUFDLEtBQU4sQ0FBWSxRQUFRLENBQUMsQ0FBRCxDQUFwQixFQUF5QixDQUFDLENBQUQsRUFBSSxRQUFKLENBQXpCO0FBRUYsY0FBSSxJQUFJLElBQUssUUFBUSxDQUFDLENBQUQsQ0FBUixZQUF1QixHQUFHLENBQUMsU0FBeEMsRUFDRSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVksSUFBWixDQUFpQixLQUFqQixFQUF3QixJQUF4QjtBQUNIOztBQUVELGVBQU8sSUFBUDtBQUNELE9BMURLLENBMkROO0FBM0RNO0FBNEROLE1BQUEsYUFBYSxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUMvQixhQUFLLElBQUwsQ0FBVSxXQUFWLENBQXNCLE9BQU8sQ0FBQyxJQUE5QjtBQUVBLGVBQU8sSUFBUDtBQUNELE9BaEVLLENBaUVOO0FBakVNO0FBa0VOLE1BQUEsS0FBSyxFQUFFLFlBQVc7QUFDaEI7QUFDQSxlQUFNLEtBQUssSUFBTCxDQUFVLGFBQVYsRUFBTixFQUNFLEtBQUssSUFBTCxDQUFVLFdBQVYsQ0FBc0IsS0FBSyxJQUFMLENBQVUsU0FBaEMsRUFIYyxDQUtoQjs7O0FBQ0EsZUFBTyxLQUFLLEtBQVo7QUFFQSxlQUFPLElBQVA7QUFDRCxPQTNFSztBQTRFTjtBQUNBLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixlQUFPLEtBQUssR0FBTCxHQUFXLElBQVgsRUFBUDtBQUNEO0FBL0VLO0FBVmMsR0FBWCxDQUFiO0FBOEZBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsTUFBZixFQUF1QjtBQUVyQixJQUFBLE9BQU8sRUFBRSxVQUFTLE1BQVQsRUFBaUIsS0FBakIsRUFBd0I7QUFDL0IsVUFBRyxLQUFLLEtBQUssQ0FBVixJQUFlLGdCQUFnQixHQUFHLENBQUMsSUFBdEMsRUFBNEMsT0FBTyxJQUFQO0FBRTVDLE1BQUEsTUFBTSxHQUFHLE1BQU0sS0FBSyxnQkFBZ0IsR0FBRyxDQUFDLEdBQXBCLEdBQTBCLElBQTFCLEdBQWlDLEtBQUssTUFBTCxDQUFZLEdBQUcsQ0FBQyxNQUFoQixDQUF0QyxDQUFmO0FBQ0EsTUFBQSxLQUFLLEdBQUcsS0FBSyxJQUFJLFFBQWpCO0FBRUEsV0FBSyxJQUFMLENBQVUsWUFBVTtBQUNsQixZQUFHLGdCQUFnQixHQUFHLENBQUMsSUFBdkIsRUFBNkIsT0FBTyxJQUFQO0FBQzdCLFlBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxNQUF2QixFQUErQixPQUFPLEtBQUssT0FBTCxDQUFhLE1BQWIsRUFBcUIsS0FBSyxHQUFDLENBQTNCLENBQVA7QUFDL0IsZUFBTyxLQUFLLFFBQUwsQ0FBYyxNQUFkLENBQVA7QUFDRCxPQUpEO0FBTUEsV0FBSyxJQUFMLENBQVUsVUFBVixJQUF3QixLQUFLLE1BQUwsRUFBeEI7QUFFQSxhQUFPLElBQVA7QUFDRCxLQWpCb0I7QUFtQnJCLElBQUEsT0FBTyxFQUFFLFVBQVMsTUFBVCxFQUFpQixLQUFqQixFQUF3QjtBQUMvQixhQUFPLEtBQUssT0FBTCxDQUFhLE1BQWIsRUFBcUIsS0FBckIsQ0FBUDtBQUNEO0FBckJvQixHQUF2QjtBQXdCQSxFQUFBLEdBQUcsQ0FBQyxTQUFKLEdBQWdCLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDekI7QUFDQSxJQUFBLE1BQU0sRUFBRSxVQUFTLE9BQVQsRUFBa0I7QUFDeEIsV0FBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCLE9BQTVCO0FBQ0QsS0FKd0IsQ0FNekI7QUFOeUI7QUFPekIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BUFksQ0FTekI7QUFUeUI7QUFVekIsSUFBQSxNQUFNLEVBQUU7QUFDTjtBQUNBLE1BQUEsT0FBTyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ25CLFlBQUksU0FBUyxDQUFDLE1BQVYsSUFBb0IsQ0FBeEIsRUFDRTtBQUNBLGlCQUFPLElBQUksR0FBRyxDQUFDLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBUCxDQUhpQixDQUtuQjs7QUFDQSxRQUFBLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBVixJQUFvQixDQUFwQixHQUNGLENBQUMsQ0FBQyxDQUFDLENBQUgsRUFBTSxDQUFDLENBQUMsQ0FBUixFQUFXLENBQUMsQ0FBQyxLQUFiLEVBQW9CLENBQUMsQ0FBQyxNQUF0QixDQURFLEdBRUYsR0FBRyxLQUFILENBQVMsSUFBVCxDQUFjLFNBQWQsQ0FGRjtBQUlBLGVBQU8sS0FBSyxJQUFMLENBQVUsU0FBVixFQUFxQixDQUFyQixDQUFQO0FBQ0Q7QUFiSztBQVZpQixHQUFYLENBQWhCLENBMkJBO0FBM0JBO0FBNEJDLEdBQUcsT0FBSCxFQUNHLFVBREgsRUFFRyxXQUZILEVBR0csU0FISCxFQUlHLFdBSkgsRUFLRyxVQUxILEVBTUcsV0FOSCxDQU9DO0FBQ0E7QUFSRCxJQVNHLFlBVEgsRUFVRyxXQVZILEVBV0csWUFYSCxFQVlHLFVBWkgsRUFhRyxhQWJILEVBYW1CLE9BYm5CLENBYTJCLFVBQVMsS0FBVCxFQUFnQjtBQUUxQztBQUNBLElBQUEsR0FBRyxDQUFDLE9BQUosQ0FBWSxTQUFaLENBQXNCLEtBQXRCLElBQStCLFVBQVMsQ0FBVCxFQUFZO0FBQ3pDLFVBQUksSUFBSSxHQUFHLElBQVgsQ0FEeUMsQ0FHekM7O0FBQ0EsV0FBSyxJQUFMLENBQVUsT0FBTyxLQUFqQixJQUEwQixPQUFPLENBQVAsSUFBWSxVQUFaLEdBQ3hCLFlBQVc7QUFBRSxlQUFPLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBUixFQUFjLFNBQWQsQ0FBUDtBQUFpQyxPQUR0QixHQUN5QixJQURuRDtBQUdBLGFBQU8sSUFBUDtBQUNELEtBUkQ7QUFVRCxHQTFCQSxFQTE0RTJFLENBczZFNUU7O0FBQ0EsRUFBQSxHQUFHLENBQUMsU0FBSixHQUFnQixFQUFoQjtBQUNBLEVBQUEsR0FBRyxDQUFDLFVBQUosR0FBaUIsRUFBakIsQ0F4NkU0RSxDQTA2RTVFOztBQUNBLEVBQUEsR0FBRyxDQUFDLEVBQUosR0FBUyxVQUFTLElBQVQsRUFBZSxLQUFmLEVBQXNCLFFBQXRCLEVBQWdDLE9BQWhDLEVBQXlDO0FBQ2hEO0FBQ0EsUUFBSSxDQUFDLEdBQU8sUUFBUSxDQUFDLElBQVQsQ0FBYyxPQUFPLElBQUksSUFBSSxDQUFDLFFBQWhCLElBQTRCLElBQTFDLENBQVo7QUFBQSxRQUNJLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFKLENBQWUsT0FBZixDQUF1QixJQUF2QixJQUErQixDQUEvQixJQUFvQyxHQUFHLENBQUMsVUFBSixDQUFlLElBQWYsQ0FBb0IsSUFBcEIsQ0FBckMsSUFBa0UsQ0FEOUU7QUFBQSxRQUVJLEVBQUUsR0FBTSxLQUFLLENBQUMsS0FBTixDQUFZLEdBQVosRUFBaUIsQ0FBakIsQ0FGWjtBQUFBLFFBR0ksRUFBRSxHQUFNLEtBQUssQ0FBQyxLQUFOLENBQVksR0FBWixFQUFpQixDQUFqQixLQUF1QixHQUhuQyxDQUZnRCxDQVFoRDs7QUFDQSxJQUFBLEdBQUcsQ0FBQyxTQUFKLENBQWMsS0FBZCxJQUErQixHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsS0FBZ0MsRUFBL0Q7QUFDQSxJQUFBLEdBQUcsQ0FBQyxTQUFKLENBQWMsS0FBZCxFQUFxQixFQUFyQixJQUErQixHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckIsS0FBZ0MsRUFBL0Q7QUFDQSxJQUFBLEdBQUcsQ0FBQyxTQUFKLENBQWMsS0FBZCxFQUFxQixFQUFyQixFQUF5QixFQUF6QixJQUErQixHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckIsRUFBeUIsRUFBekIsS0FBZ0MsRUFBL0QsQ0FYZ0QsQ0FhaEQ7O0FBQ0EsSUFBQSxHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckIsRUFBeUIsRUFBekIsRUFBNkIsUUFBN0IsSUFBeUMsQ0FBekMsQ0FkZ0QsQ0FnQmhEOztBQUNBLElBQUEsSUFBSSxDQUFDLGdCQUFMLENBQXNCLEVBQXRCLEVBQTBCLENBQTFCLEVBQTZCLEtBQTdCO0FBQ0QsR0FsQkQsQ0EzNkU0RSxDQSs3RTVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxHQUFKLEdBQVUsVUFBUyxJQUFULEVBQWUsS0FBZixFQUFzQixRQUF0QixFQUFnQztBQUN4QyxRQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsVUFBSixDQUFlLE9BQWYsQ0FBdUIsSUFBdkIsQ0FBWjtBQUFBLFFBQ0ksRUFBRSxHQUFNLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBTixDQUFZLEdBQVosRUFBaUIsQ0FBakIsQ0FEckI7QUFBQSxRQUVJLEVBQUUsR0FBTSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQU4sQ0FBWSxHQUFaLEVBQWlCLENBQWpCLENBRnJCO0FBSUEsUUFBRyxLQUFLLElBQUksQ0FBQyxDQUFiLEVBQWdCOztBQUVoQixRQUFJLFFBQUosRUFBYztBQUNaO0FBQ0EsVUFBSSxHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckIsS0FBNEIsR0FBRyxDQUFDLFNBQUosQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLEVBQXlCLEVBQUUsSUFBSSxHQUEvQixDQUFoQyxFQUFxRTtBQUNuRTtBQUNBLFFBQUEsSUFBSSxDQUFDLG1CQUFMLENBQXlCLEVBQXpCLEVBQTZCLEdBQUcsQ0FBQyxTQUFKLENBQWMsS0FBZCxFQUFxQixFQUFyQixFQUF5QixFQUFFLElBQUksR0FBL0IsRUFBb0MsUUFBcEMsQ0FBN0IsRUFBNEUsS0FBNUU7QUFFQSxlQUFPLEdBQUcsQ0FBQyxTQUFKLENBQWMsS0FBZCxFQUFxQixFQUFyQixFQUF5QixFQUFFLElBQUksR0FBL0IsRUFBb0MsUUFBcEMsQ0FBUDtBQUNEO0FBRUYsS0FURCxNQVNPLElBQUksRUFBRSxJQUFJLEVBQVYsRUFBYztBQUNuQjtBQUNBLFVBQUksR0FBRyxDQUFDLFNBQUosQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLEtBQTRCLEdBQUcsQ0FBQyxTQUFKLENBQWMsS0FBZCxFQUFxQixFQUFyQixFQUF5QixFQUF6QixDQUFoQyxFQUE4RDtBQUM1RCxhQUFLLFFBQUwsSUFBaUIsR0FBRyxDQUFDLFNBQUosQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLEVBQXlCLEVBQXpCLENBQWpCLEVBQ0UsR0FBRyxDQUFDLEdBQUosQ0FBUSxJQUFSLEVBQWMsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLElBQVQsQ0FBYyxHQUFkLENBQWQsRUFBa0MsUUFBbEM7O0FBRUYsZUFBTyxHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckIsRUFBeUIsRUFBekIsQ0FBUDtBQUNEO0FBRUYsS0FUTSxNQVNBLElBQUksRUFBSixFQUFPO0FBQ1o7QUFDQSxXQUFJLEtBQUosSUFBYSxHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsQ0FBYixFQUFrQztBQUM5QixhQUFJLFNBQUosSUFBaUIsR0FBRyxDQUFDLFNBQUosQ0FBYyxLQUFkLEVBQXFCLEtBQXJCLENBQWpCLEVBQTZDO0FBQ3pDLGNBQUcsRUFBRSxLQUFLLFNBQVYsRUFBb0I7QUFDaEIsWUFBQSxHQUFHLENBQUMsR0FBSixDQUFRLElBQVIsRUFBYyxDQUFDLEtBQUQsRUFBUSxFQUFSLEVBQVksSUFBWixDQUFpQixHQUFqQixDQUFkO0FBQ0g7QUFDSjtBQUNKO0FBRUYsS0FWTSxNQVVBLElBQUksRUFBSixFQUFRO0FBQ2I7QUFDQSxVQUFJLEdBQUcsQ0FBQyxTQUFKLENBQWMsS0FBZCxFQUFxQixFQUFyQixDQUFKLEVBQThCO0FBQzVCLGFBQUssU0FBTCxJQUFrQixHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckIsQ0FBbEIsRUFDRSxHQUFHLENBQUMsR0FBSixDQUFRLElBQVIsRUFBYyxDQUFDLEVBQUQsRUFBSyxTQUFMLEVBQWdCLElBQWhCLENBQXFCLEdBQXJCLENBQWQ7O0FBRUYsZUFBTyxHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsRUFBcUIsRUFBckIsQ0FBUDtBQUNEO0FBRUYsS0FUTSxNQVNBO0FBQ0w7QUFDQSxXQUFLLEtBQUwsSUFBYyxHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsQ0FBZCxFQUNFLEdBQUcsQ0FBQyxHQUFKLENBQVEsSUFBUixFQUFjLEtBQWQ7O0FBRUYsYUFBTyxHQUFHLENBQUMsU0FBSixDQUFjLEtBQWQsQ0FBUDtBQUVEO0FBQ0YsR0FwREQsQ0FoOEU0RSxDQXMvRTVFOzs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLE9BQWYsRUFBd0I7QUFDdEI7QUFDQSxJQUFBLEVBQUUsRUFBRSxVQUFTLEtBQVQsRUFBZ0IsUUFBaEIsRUFBMEIsT0FBMUIsRUFBbUM7QUFDckMsTUFBQSxHQUFHLENBQUMsRUFBSixDQUFPLEtBQUssSUFBWixFQUFrQixLQUFsQixFQUF5QixRQUF6QixFQUFtQyxPQUFuQztBQUVBLGFBQU8sSUFBUDtBQUNELEtBTnFCLENBT3RCO0FBUHNCO0FBUXRCLElBQUEsR0FBRyxFQUFFLFVBQVMsS0FBVCxFQUFnQixRQUFoQixFQUEwQjtBQUM3QixNQUFBLEdBQUcsQ0FBQyxHQUFKLENBQVEsS0FBSyxJQUFiLEVBQW1CLEtBQW5CLEVBQTBCLFFBQTFCO0FBRUEsYUFBTyxJQUFQO0FBQ0QsS0FacUIsQ0FhdEI7QUFic0I7QUFjdEIsSUFBQSxJQUFJLEVBQUUsVUFBUyxLQUFULEVBQWdCLElBQWhCLEVBQXNCO0FBRTFCO0FBQ0EsVUFBRyxLQUFLLFlBQVksS0FBcEIsRUFBMEI7QUFDdEIsYUFBSyxJQUFMLENBQVUsYUFBVixDQUF3QixLQUF4QjtBQUNILE9BRkQsTUFFSztBQUNELGFBQUssSUFBTCxDQUFVLGFBQVYsQ0FBd0IsSUFBSSxXQUFKLENBQWdCLEtBQWhCLEVBQXVCO0FBQUMsVUFBQSxNQUFNLEVBQUM7QUFBUixTQUF2QixDQUF4QjtBQUNIOztBQUVELGFBQU8sSUFBUDtBQUNEO0FBeEJxQixHQUF4QjtBQTJCQSxFQUFBLEdBQUcsQ0FBQyxJQUFKLEdBQVcsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNwQjtBQUNBLElBQUEsTUFBTSxFQUFFLE1BRlksQ0FJcEI7QUFKb0I7QUFLcEIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDO0FBTE8sR0FBWCxDQUFYO0FBUUEsRUFBQSxHQUFHLENBQUMsQ0FBSixHQUFRLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDakI7QUFDQSxJQUFBLE1BQU0sRUFBRSxHQUZTLENBSWpCO0FBSmlCO0FBS2pCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUxJLENBT2pCO0FBUGlCO0FBUWpCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLENBQUMsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNiLGVBQU8sQ0FBQyxJQUFJLElBQUwsR0FBWSxLQUFLLFNBQUwsQ0FBZSxHQUFmLENBQVosR0FBa0MsS0FBSyxTQUFMLENBQWU7QUFBRSxVQUFBLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBTCxFQUFELEdBQVk7QUFBakIsU0FBZixFQUFxQyxJQUFyQyxDQUF6QztBQUNELE9BSkssQ0FLTjtBQUxNO0FBTU4sTUFBQSxDQUFDLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDYixlQUFPLENBQUMsSUFBSSxJQUFMLEdBQVksS0FBSyxTQUFMLENBQWUsR0FBZixDQUFaLEdBQWtDLEtBQUssU0FBTCxDQUFlO0FBQUUsVUFBQSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUwsRUFBRCxHQUFZO0FBQWpCLFNBQWYsRUFBcUMsSUFBckMsQ0FBekM7QUFDRCxPQVJLLENBU047QUFUTTtBQVVOLE1BQUEsRUFBRSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2QsZUFBTyxDQUFDLElBQUksSUFBTCxHQUFZLEtBQUssSUFBTCxHQUFZLEVBQXhCLEdBQTZCLEtBQUssQ0FBTCxDQUFPLENBQUMsR0FBRyxLQUFLLElBQUwsR0FBWSxLQUFaLEdBQW9CLENBQS9CLENBQXBDO0FBQ0QsT0FaSyxDQWFOO0FBYk07QUFjTixNQUFBLEVBQUUsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNkLGVBQU8sQ0FBQyxJQUFJLElBQUwsR0FBWSxLQUFLLElBQUwsR0FBWSxFQUF4QixHQUE2QixLQUFLLENBQUwsQ0FBTyxDQUFDLEdBQUcsS0FBSyxJQUFMLEdBQVksTUFBWixHQUFxQixDQUFoQyxDQUFwQztBQUNELE9BaEJLO0FBaUJOLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFFZixZQUFJLElBQUksR0FBSSxLQUFLLElBQUwsRUFBWjtBQUFBLFlBQ0ksS0FBSyxHQUFHLEtBQUssU0FBTCxFQURaO0FBR0EsUUFBQSxJQUFJLENBQUMsQ0FBTCxJQUFXLEtBQUssQ0FBQyxDQUFqQjtBQUNBLFFBQUEsSUFBSSxDQUFDLEVBQUwsSUFBVyxLQUFLLENBQUMsQ0FBakI7QUFDQSxRQUFBLElBQUksQ0FBQyxFQUFMLElBQVcsS0FBSyxDQUFDLENBQWpCO0FBRUEsUUFBQSxJQUFJLENBQUMsQ0FBTCxJQUFXLEtBQUssQ0FBQyxDQUFqQjtBQUNBLFFBQUEsSUFBSSxDQUFDLEVBQUwsSUFBVyxLQUFLLENBQUMsQ0FBakI7QUFDQSxRQUFBLElBQUksQ0FBQyxFQUFMLElBQVcsS0FBSyxDQUFDLENBQWpCO0FBRUEsZUFBTyxJQUFQO0FBQ0QsT0EvQkssQ0FrQ1I7O0FBbENRLEtBUlM7QUEyQ2pCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLGVBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsQ0FBUixFQUFULENBQVA7QUFDRDtBQUpRO0FBM0NNLEdBQVgsQ0FBUixDQTFoRjRFLENBNGtGNUU7QUFFQTs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLE9BQWYsRUFBd0I7QUFDdEI7QUFDQSxJQUFBLFFBQVEsRUFBRSxZQUFXO0FBQ25CLGFBQU8sS0FBSyxNQUFMLEdBQWMsUUFBZCxFQUFQO0FBQ0QsS0FKcUIsQ0FLdEI7QUFMc0I7QUFNdEIsSUFBQSxRQUFRLEVBQUUsWUFBVztBQUNuQixhQUFPLEtBQUssTUFBTCxHQUFjLEtBQWQsQ0FBb0IsSUFBcEIsQ0FBUDtBQUNELEtBUnFCLENBU3RCO0FBVHNCO0FBVXRCLElBQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixhQUFPLEtBQUssUUFBTCxHQUFnQixLQUFLLFFBQUwsS0FBa0IsQ0FBbEMsQ0FBUDtBQUNELEtBWnFCLENBYXRCO0FBYnNCO0FBY3RCLElBQUEsUUFBUSxFQUFFLFlBQVc7QUFDbkIsYUFBTyxLQUFLLFFBQUwsR0FBZ0IsS0FBSyxRQUFMLEtBQWtCLENBQWxDLENBQVA7QUFDRCxLQWhCcUIsQ0FpQnRCO0FBakJzQjtBQWtCdEIsSUFBQSxPQUFPLEVBQUUsWUFBVztBQUNsQixVQUFJLENBQUMsR0FBRyxLQUFLLFFBQUwsS0FBa0IsQ0FBMUI7QUFBQSxVQUNJLENBQUMsR0FBRyxLQUFLLE1BQUwsRUFEUixDQURrQixDQUlsQjs7QUFDQSxNQUFBLENBQUMsQ0FBQyxhQUFGLENBQWdCLElBQWhCLEVBQXNCLEdBQXRCLENBQTBCLElBQTFCLEVBQWdDLENBQWhDLEVBTGtCLENBT2xCOztBQUNBLFVBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFyQixFQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8sV0FBUCxDQUFtQixDQUFDLENBQUMsSUFBRixHQUFTLElBQTVCO0FBRUYsYUFBTyxJQUFQO0FBQ0QsS0E5QnFCLENBK0J0QjtBQS9Cc0I7QUFnQ3RCLElBQUEsUUFBUSxFQUFFLFlBQVc7QUFDbkIsVUFBSSxDQUFDLEdBQUcsS0FBSyxRQUFMLEVBQVI7QUFFQSxVQUFJLENBQUMsR0FBRyxDQUFSLEVBQ0UsS0FBSyxNQUFMLEdBQWMsYUFBZCxDQUE0QixJQUE1QixFQUFrQyxHQUFsQyxDQUFzQyxJQUF0QyxFQUE0QyxDQUFDLEdBQUcsQ0FBaEQ7QUFFRixhQUFPLElBQVA7QUFDRCxLQXZDcUIsQ0F3Q3RCO0FBeENzQjtBQXlDdEIsSUFBQSxLQUFLLEVBQUUsWUFBVztBQUNoQixVQUFJLENBQUMsR0FBRyxLQUFLLE1BQUwsRUFBUixDQURnQixDQUdoQjs7QUFDQSxNQUFBLENBQUMsQ0FBQyxJQUFGLENBQU8sV0FBUCxDQUFtQixLQUFLLElBQXhCLEVBSmdCLENBTWhCOztBQUNBLFVBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFyQixFQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8sV0FBUCxDQUFtQixDQUFDLENBQUMsSUFBRixHQUFTLElBQTVCO0FBRUYsYUFBTyxJQUFQO0FBQ0QsS0FwRHFCLENBcUR0QjtBQXJEc0I7QUFzRHRCLElBQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixVQUFJLEtBQUssUUFBTCxLQUFrQixDQUF0QixFQUNFLEtBQUssTUFBTCxHQUFjLGFBQWQsQ0FBNEIsSUFBNUIsRUFBa0MsR0FBbEMsQ0FBc0MsSUFBdEMsRUFBNEMsQ0FBNUM7QUFFRixhQUFPLElBQVA7QUFDRCxLQTNEcUIsQ0E0RHRCO0FBNURzQjtBQTZEdEIsSUFBQSxNQUFNLEVBQUUsVUFBUyxPQUFULEVBQWtCO0FBQ3hCLE1BQUEsT0FBTyxDQUFDLE1BQVI7QUFFQSxVQUFJLENBQUMsR0FBRyxLQUFLLFFBQUwsRUFBUjtBQUVBLFdBQUssTUFBTCxHQUFjLEdBQWQsQ0FBa0IsT0FBbEIsRUFBMkIsQ0FBM0I7QUFFQSxhQUFPLElBQVA7QUFDRCxLQXJFcUIsQ0FzRXRCO0FBdEVzQjtBQXVFdEIsSUFBQSxLQUFLLEVBQUUsVUFBUyxPQUFULEVBQWtCO0FBQ3ZCLE1BQUEsT0FBTyxDQUFDLE1BQVI7QUFFQSxVQUFJLENBQUMsR0FBRyxLQUFLLFFBQUwsRUFBUjtBQUVBLFdBQUssTUFBTCxHQUFjLEdBQWQsQ0FBa0IsT0FBbEIsRUFBMkIsQ0FBQyxHQUFHLENBQS9CO0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUEvRXFCLEdBQXhCO0FBa0ZBLEVBQUEsR0FBRyxDQUFDLElBQUosR0FBVyxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3BCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsWUFBVztBQUNqQixXQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEIsR0FBRyxDQUFDLE1BQUosQ0FBVyxNQUFYLENBQTVCLEVBRGlCLENBR2pCOztBQUNBLFdBQUssT0FBTCxHQUFlLEVBQWY7QUFDRCxLQVBtQixDQVNwQjtBQVRvQjtBQVVwQixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FWTyxDQVlwQjtBQVpvQjtBQWFwQixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxNQUFNLEVBQUUsWUFBVztBQUNqQjtBQUNBLGFBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxPQUFMLENBQWEsTUFBYixHQUFzQixDQUFuQyxFQUFzQyxDQUFDLElBQUksQ0FBM0MsRUFBOEMsQ0FBQyxFQUEvQyxFQUNFLElBQUksS0FBSyxPQUFMLENBQWEsQ0FBYixDQUFKLEVBQ0UsS0FBSyxPQUFMLENBQWEsQ0FBYixFQUFnQixNQUFoQjs7QUFDSixlQUFPLEtBQUssT0FBWixDQUxpQixDQU9qQjs7QUFDQSxhQUFLLE1BQUwsR0FBYyxhQUFkLENBQTRCLElBQTVCO0FBRUEsZUFBTyxJQUFQO0FBQ0QsT0FiSyxDQWdCUjs7QUFoQlEsS0FiWTtBQThCcEIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixlQUFPLEtBQUssSUFBTCxHQUFZLEdBQVosQ0FBZ0IsSUFBSSxHQUFHLENBQUMsSUFBUixFQUFoQixDQUFQO0FBQ0Q7QUFKUTtBQTlCUyxHQUFYLENBQVg7QUF1Q0EsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxPQUFmLEVBQXdCO0FBQ3RCO0FBQ0EsSUFBQSxRQUFRLEVBQUUsVUFBUyxPQUFULEVBQWtCO0FBQzFCO0FBQ0EsV0FBSyxNQUFMLEdBQWMsT0FBTyxZQUFZLEdBQUcsQ0FBQyxJQUF2QixHQUE4QixPQUE5QixHQUF3QyxLQUFLLE1BQUwsR0FBYyxJQUFkLEdBQXFCLEdBQXJCLENBQXlCLE9BQXpCLENBQXRELENBRjBCLENBSTFCOztBQUNBLFdBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsSUFBcEIsQ0FBeUIsSUFBekIsRUFMMEIsQ0FPMUI7O0FBQ0EsYUFBTyxLQUFLLElBQUwsQ0FBVSxNQUFWLEVBQWtCLFdBQVcsS0FBSyxNQUFMLENBQVksSUFBWixDQUFpQixJQUFqQixDQUFYLEdBQW9DLElBQXRELENBQVA7QUFDRCxLQVhxQixDQVl0QjtBQVpzQjtBQWF0QixJQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCLGFBQU8sS0FBSyxNQUFaO0FBQ0EsYUFBTyxLQUFLLElBQUwsQ0FBVSxNQUFWLEVBQWtCLElBQWxCLENBQVA7QUFDRDtBQWhCcUIsR0FBeEI7QUFvQkEsRUFBQSxHQUFHLENBQUMsUUFBSixHQUFlLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDeEI7QUFDQSxJQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCLFdBQUssV0FBTCxDQUFpQixJQUFqQixDQUFzQixJQUF0QixFQUE0QixHQUFHLENBQUMsTUFBSixDQUFXLFVBQVgsQ0FBNUIsRUFEaUIsQ0FHakI7O0FBQ0EsV0FBSyxPQUFMLEdBQWUsRUFBZjtBQUNELEtBUHVCLENBU3hCO0FBVHdCO0FBVXhCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQVZXLENBWXhCO0FBWndCO0FBYXhCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCO0FBQ0EsYUFBSyxJQUFJLENBQUMsR0FBRyxLQUFLLE9BQUwsQ0FBYSxNQUFiLEdBQXNCLENBQW5DLEVBQXNDLENBQUMsSUFBSSxDQUEzQyxFQUE4QyxDQUFDLEVBQS9DLEVBQ0UsSUFBSSxLQUFLLE9BQUwsQ0FBYSxDQUFiLENBQUosRUFDRSxLQUFLLE9BQUwsQ0FBYSxDQUFiLEVBQWdCLE1BQWhCOztBQUNKLGVBQU8sS0FBSyxPQUFaLENBTGlCLENBT2pCOztBQUNBLGFBQUssTUFBTCxHQUFjLGFBQWQsQ0FBNEIsSUFBNUI7QUFFQSxlQUFPLElBQVA7QUFDRCxPQWJLLENBZ0JSOztBQWhCUSxLQWJnQjtBQThCeEIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixlQUFPLEtBQUssSUFBTCxHQUFZLEdBQVosQ0FBZ0IsSUFBSSxHQUFHLENBQUMsUUFBUixFQUFoQixDQUFQO0FBQ0Q7QUFKUTtBQTlCYSxHQUFYLENBQWYsQ0E1dEY0RSxDQWt3RjVFOztBQUNBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsT0FBZixFQUF3QjtBQUN0QjtBQUNBLElBQUEsUUFBUSxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUMxQjtBQUNBLFdBQUssT0FBTCxHQUFlLE9BQU8sWUFBWSxHQUFHLENBQUMsUUFBdkIsR0FBa0MsT0FBbEMsR0FBNEMsS0FBSyxNQUFMLEdBQWMsSUFBZCxHQUFxQixHQUFyQixDQUF5QixPQUF6QixDQUEzRCxDQUYwQixDQUkxQjs7QUFDQSxXQUFLLE9BQUwsQ0FBYSxPQUFiLENBQXFCLElBQXJCLENBQTBCLElBQTFCLEVBTDBCLENBTzFCOztBQUNBLGFBQU8sS0FBSyxJQUFMLENBQVUsV0FBVixFQUF1QixXQUFXLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsSUFBbEIsQ0FBWCxHQUFxQyxJQUE1RCxDQUFQO0FBQ0QsS0FYcUIsQ0FZdEI7QUFac0I7QUFhdEIsSUFBQSxNQUFNLEVBQUUsWUFBVztBQUNqQixhQUFPLEtBQUssT0FBWjtBQUNBLGFBQU8sS0FBSyxJQUFMLENBQVUsV0FBVixFQUF1QixJQUF2QixDQUFQO0FBQ0Q7QUFoQnFCLEdBQXhCO0FBbUJBLEVBQUEsR0FBRyxDQUFDLFFBQUosR0FBZSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3hCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDckIsV0FBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCLEdBQUcsQ0FBQyxNQUFKLENBQVcsSUFBSSxHQUFHLFVBQWxCLENBQTVCLEVBRHFCLENBR3JCOztBQUNBLFdBQUssSUFBTCxHQUFZLElBQVo7QUFDRCxLQVB1QixDQVN4QjtBQVR3QjtBQVV4QixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FWVyxDQVl4QjtBQVp3QjtBQWF4QixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxFQUFFLEVBQUUsVUFBUyxNQUFULEVBQWlCLEtBQWpCLEVBQXdCLE9BQXhCLEVBQWlDO0FBQ25DLGVBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsSUFBUixFQUFULEVBQXVCLE1BQXZCLENBQThCLE1BQTlCLEVBQXNDLEtBQXRDLEVBQTZDLE9BQTdDLENBQVA7QUFDRCxPQUpLLENBS047QUFMTTtBQU1OLE1BQUEsTUFBTSxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUN0QjtBQUNBLGFBQUssS0FBTCxHQUZzQixDQUl0Qjs7QUFDQSxZQUFJLE9BQU8sS0FBUCxJQUFnQixVQUFwQixFQUNFLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBWCxFQUFpQixJQUFqQjtBQUVGLGVBQU8sSUFBUDtBQUNELE9BZkssQ0FnQk47QUFoQk07QUFpQk4sTUFBQSxJQUFJLEVBQUUsWUFBVztBQUNmLGVBQU8sVUFBVSxLQUFLLEVBQUwsRUFBVixHQUFzQixHQUE3QjtBQUNELE9BbkJLLENBb0JOO0FBcEJNO0FBcUJOLE1BQUEsUUFBUSxFQUFFLFlBQVc7QUFDbkIsZUFBTyxLQUFLLElBQUwsRUFBUDtBQUNELE9BdkJLLENBd0JOO0FBeEJNO0FBeUJOLE1BQUEsSUFBSSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCO0FBQ3RCLFlBQUcsQ0FBQyxJQUFJLFdBQVIsRUFBcUIsQ0FBQyxHQUFHLG1CQUFKO0FBQ3JCLGVBQU8sR0FBRyxDQUFDLFNBQUosQ0FBYyxTQUFkLENBQXdCLElBQXhCLENBQTZCLElBQTdCLENBQWtDLElBQWxDLEVBQXdDLENBQXhDLEVBQTJDLENBQTNDLEVBQThDLENBQTlDLENBQVA7QUFDRCxPQTVCSyxDQStCUjs7QUEvQlEsS0FiZ0I7QUE2Q3hCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLFFBQVEsRUFBRSxVQUFTLElBQVQsRUFBZSxLQUFmLEVBQXNCO0FBQzlCLGVBQU8sS0FBSyxJQUFMLEdBQVksUUFBWixDQUFxQixJQUFyQixFQUEyQixLQUEzQixDQUFQO0FBQ0Q7QUFKUTtBQTdDYSxHQUFYLENBQWYsQ0F0eEY0RSxDQTIwRjVFOztBQUNBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsUUFBZixFQUF5QixHQUFHLENBQUMsRUFBN0IsRUFBaUM7QUFDL0I7QUFDQSxJQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDbkIsYUFBTyxDQUFDLEtBQUssTUFBTCxJQUFlLElBQWhCLEVBQXNCLElBQXRCLElBQThCLFFBQTlCLEdBQ0wsS0FBSyxJQUFMLENBQVU7QUFBRSxRQUFBLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBZixDQUFOO0FBQXlCLFFBQUEsRUFBRSxFQUFFLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxDQUFmO0FBQTdCLE9BQVYsQ0FESyxHQUVMLEtBQUssSUFBTCxDQUFVO0FBQUUsUUFBQSxFQUFFLEVBQUUsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQWYsQ0FBTjtBQUF5QixRQUFBLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBZjtBQUE3QixPQUFWLENBRkY7QUFHRCxLQU44QixDQU8vQjtBQVArQjtBQVEvQixJQUFBLEVBQUUsRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDakIsYUFBTyxDQUFDLEtBQUssTUFBTCxJQUFlLElBQWhCLEVBQXNCLElBQXRCLElBQThCLFFBQTlCLEdBQ0wsS0FBSyxJQUFMLENBQVU7QUFBRSxRQUFBLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBZixDQUFOO0FBQXlCLFFBQUEsRUFBRSxFQUFFLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxDQUFmO0FBQTdCLE9BQVYsQ0FESyxHQUVMLEtBQUssSUFBTCxDQUFVO0FBQUUsUUFBQSxFQUFFLEVBQUUsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQWYsQ0FBTjtBQUF5QixRQUFBLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBZjtBQUE3QixPQUFWLENBRkY7QUFHRDtBQVo4QixHQUFqQyxFQTUwRjRFLENBMjFGNUU7O0FBQ0EsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxJQUFmLEVBQXFCO0FBQ25CO0FBQ0EsSUFBQSxRQUFRLEVBQUUsVUFBUyxJQUFULEVBQWUsS0FBZixFQUFzQjtBQUM5QixhQUFPLEtBQUssR0FBTCxDQUFTLElBQUksR0FBRyxDQUFDLFFBQVIsQ0FBaUIsSUFBakIsQ0FBVCxFQUFpQyxNQUFqQyxDQUF3QyxLQUF4QyxDQUFQO0FBQ0Q7QUFKa0IsR0FBckI7QUFRQSxFQUFBLEdBQUcsQ0FBQyxJQUFKLEdBQVcsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNwQjtBQUNBLElBQUEsTUFBTSxFQUFFLE1BRlksQ0FJcEI7QUFKb0I7QUFLcEIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BTE8sQ0FPcEI7QUFQb0I7QUFRcEIsSUFBQSxNQUFNLEVBQUU7QUFDTjtBQUNBLE1BQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2xCLFlBQUksT0FBTyxDQUFQLElBQVksUUFBWixJQUF3QixDQUFDLFlBQVksR0FBRyxDQUFDLE1BQTdDLEVBQXFEO0FBQ25ELFVBQUEsQ0FBQyxHQUFHO0FBQ0YsWUFBQSxNQUFNLEVBQUcsU0FBUyxDQUFDLENBQUQsQ0FEaEI7QUFFRixZQUFBLEtBQUssRUFBSSxTQUFTLENBQUMsQ0FBRCxDQUZoQjtBQUdGLFlBQUEsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFEO0FBSGhCLFdBQUo7QUFLRCxTQVBpQixDQVNsQjs7O0FBQ0EsWUFBSSxDQUFDLENBQUMsT0FBRixJQUFhLElBQWpCLEVBQXVCLEtBQUssSUFBTCxDQUFVLGNBQVYsRUFBMEIsQ0FBQyxDQUFDLE9BQTVCO0FBQ3ZCLFlBQUksQ0FBQyxDQUFDLEtBQUYsSUFBYSxJQUFqQixFQUF1QixLQUFLLElBQUwsQ0FBVSxZQUFWLEVBQXdCLENBQUMsQ0FBQyxLQUExQjtBQUN2QixZQUFJLENBQUMsQ0FBQyxNQUFGLElBQWEsSUFBakIsRUFBdUIsS0FBSyxJQUFMLENBQVUsUUFBVixFQUFvQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBQyxDQUFDLE1BQWpCLENBQXBCO0FBRXZCLGVBQU8sSUFBUDtBQUNEO0FBakJLO0FBUlksR0FBWCxDQUFYO0FBOEJBLEVBQUEsR0FBRyxDQUFDLE9BQUosR0FBYyxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3ZCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsU0FGZSxDQUl2QjtBQUp1QjtBQUt2QixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FMVSxDQU92QjtBQVB1QjtBQVF2QixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxJQUFJLEVBQUUsWUFBVztBQUNmLGVBQU8sVUFBVSxLQUFLLEVBQUwsRUFBVixHQUFzQixHQUE3QjtBQUNELE9BSkssQ0FLTjtBQUxNO0FBTU4sTUFBQSxNQUFNLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3RCO0FBQ0EsYUFBSyxLQUFMLEdBRnNCLENBSXRCOztBQUNBLFlBQUksT0FBTyxLQUFQLElBQWdCLFVBQXBCLEVBQ0UsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBQWlCLElBQWpCO0FBRUYsZUFBTyxJQUFQO0FBQ0QsT0FmSyxDQWdCTjtBQWhCTTtBQWlCTixNQUFBLFFBQVEsRUFBRSxZQUFXO0FBQ25CLGVBQU8sS0FBSyxJQUFMLEVBQVA7QUFDRCxPQW5CSyxDQW9CTjtBQXBCTTtBQXFCTixNQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQjtBQUN0QixZQUFHLENBQUMsSUFBSSxXQUFSLEVBQXFCLENBQUMsR0FBRyxrQkFBSjtBQUNyQixlQUFPLEdBQUcsQ0FBQyxTQUFKLENBQWMsU0FBZCxDQUF3QixJQUF4QixDQUE2QixJQUE3QixDQUFrQyxJQUFsQyxFQUF3QyxDQUF4QyxFQUEyQyxDQUEzQyxFQUE4QyxDQUE5QyxDQUFQO0FBQ0QsT0F4QkssQ0E0QlI7O0FBNUJRLEtBUmU7QUFxQ3ZCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLE9BQU8sRUFBRSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0IsS0FBeEIsRUFBK0I7QUFDdEMsZUFBTyxLQUFLLElBQUwsR0FBWSxPQUFaLENBQW9CLEtBQXBCLEVBQTJCLE1BQTNCLEVBQW1DLEtBQW5DLENBQVA7QUFDRDtBQUpRO0FBckNZLEdBQVgsQ0FBZDtBQTZDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLElBQWYsRUFBcUI7QUFDbkI7QUFDQSxJQUFBLE9BQU8sRUFBRSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0IsS0FBeEIsRUFBK0I7QUFDdEMsYUFBTyxLQUFLLEdBQUwsQ0FBUyxJQUFJLEdBQUcsQ0FBQyxPQUFSLEVBQVQsRUFBMEIsTUFBMUIsQ0FBaUMsS0FBakMsRUFBd0MsSUFBeEMsQ0FBNkM7QUFDbEQsUUFBQSxDQUFDLEVBQWEsQ0FEb0M7QUFFbEQsUUFBQSxDQUFDLEVBQWEsQ0FGb0M7QUFHbEQsUUFBQSxLQUFLLEVBQVMsS0FIb0M7QUFJbEQsUUFBQSxNQUFNLEVBQVEsTUFKb0M7QUFLbEQsUUFBQSxZQUFZLEVBQUU7QUFMb0MsT0FBN0MsQ0FBUDtBQU9EO0FBVmtCLEdBQXJCO0FBYUEsRUFBQSxHQUFHLENBQUMsR0FBSixHQUFVLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDbkI7QUFDQSxJQUFBLE1BQU0sRUFBRSxVQUFTLE9BQVQsRUFBa0I7QUFDeEIsVUFBSSxPQUFKLEVBQWE7QUFDWDtBQUNBLFFBQUEsT0FBTyxHQUFHLE9BQU8sT0FBUCxJQUFrQixRQUFsQixHQUNSLFFBQVEsQ0FBQyxjQUFULENBQXdCLE9BQXhCLENBRFEsR0FFUixPQUZGLENBRlcsQ0FNWDtBQUNBOztBQUNBLFlBQUksT0FBTyxDQUFDLFFBQVIsSUFBb0IsS0FBeEIsRUFBK0I7QUFDN0IsZUFBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCLE9BQTVCO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCLEdBQUcsQ0FBQyxNQUFKLENBQVcsS0FBWCxDQUE1QjtBQUNBLFVBQUEsT0FBTyxDQUFDLFdBQVIsQ0FBb0IsS0FBSyxJQUF6QjtBQUNELFNBYlUsQ0FlWDs7O0FBQ0EsYUFBSyxTQUFMLEdBQWlCLElBQWpCLENBQXNCLE1BQXRCLEVBQThCLE1BQTlCLEVBQXNDLElBQXRDO0FBQ0Q7QUFDRixLQXJCa0IsQ0F1Qm5CO0FBdkJtQjtBQXdCbkIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLFNBeEJNLENBMEJuQjtBQTFCbUI7QUEyQm5CLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLFNBQVMsRUFBRSxZQUFXO0FBQ3BCLGVBQU8sS0FDSixJQURJLENBQ0M7QUFBRSxVQUFBLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBYjtBQUFpQixVQUFBLE9BQU8sRUFBRTtBQUExQixTQURELEVBRUosSUFGSSxDQUVDLGFBRkQsRUFFZ0IsR0FBRyxDQUFDLEtBRnBCLEVBRTJCLEdBQUcsQ0FBQyxLQUYvQixFQUdKLElBSEksQ0FHQyxhQUhELEVBR2dCLEdBQUcsQ0FBQyxLQUhwQixFQUcyQixHQUFHLENBQUMsS0FIL0IsQ0FBUDtBQUlELE9BUEssQ0FRTjtBQVJNO0FBU04sTUFBQSxJQUFJLEVBQUUsWUFBVztBQUNmLFlBQUksQ0FBQyxLQUFLLEtBQVYsRUFBaUI7QUFDZixjQUFJLElBQUosQ0FEZSxDQUdmOztBQUNBLGNBQUksSUFBSSxHQUFHLEtBQUssSUFBTCxDQUFVLG9CQUFWLENBQStCLE1BQS9CLEVBQXVDLENBQXZDLENBQVgsRUFDRSxLQUFLLEtBQUwsR0FBYSxHQUFHLENBQUMsS0FBSixDQUFVLElBQVYsQ0FBYixDQURGLEtBR0UsS0FBSyxLQUFMLEdBQWEsSUFBSSxHQUFHLENBQUMsSUFBUixFQUFiLENBUGEsQ0FTZjs7QUFDQSxlQUFLLElBQUwsQ0FBVSxXQUFWLENBQXNCLEtBQUssS0FBTCxDQUFXLElBQWpDO0FBQ0Q7O0FBRUQsZUFBTyxLQUFLLEtBQVo7QUFDRCxPQXhCSyxDQXlCTjtBQXpCTTtBQTBCTixNQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCLGVBQU8sS0FBSyxJQUFMLENBQVUsVUFBVixDQUFxQixRQUFyQixJQUFpQyxXQUFqQyxHQUErQyxJQUEvQyxHQUFzRCxLQUFLLElBQUwsQ0FBVSxVQUF2RTtBQUNELE9BNUJLLENBNkJOO0FBQ0E7QUE5Qk07QUErQk4sTUFBQSxJQUFJLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDbkIsWUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFMLENBQVUsWUFBVixFQUFWO0FBRUEsWUFBSSxHQUFKLEVBQ0UsS0FDRyxLQURILENBQ1MsTUFEVCxFQUNrQixDQUFDLEdBQUcsQ0FBQyxDQUFMLEdBQVMsQ0FBVixHQUFlLElBRGhDLEVBRUcsS0FGSCxDQUVTLEtBRlQsRUFFa0IsQ0FBQyxHQUFHLENBQUMsQ0FBTCxHQUFTLENBQVYsR0FBZSxJQUZoQztBQUlGLGVBQU8sSUFBUDtBQUNELE9BeENLLENBMENKO0FBMUNJO0FBMkNOLE1BQUEsTUFBTSxFQUFFLFlBQVc7QUFDakIsWUFBRyxLQUFLLE1BQUwsRUFBSCxFQUFrQjtBQUNoQixlQUFLLE1BQUwsR0FBYyxXQUFkLENBQTBCLEtBQUssSUFBL0I7QUFDRDs7QUFFRCxlQUFPLElBQVA7QUFDRDtBQWpESztBQTNCVyxHQUFYLENBQVY7QUFpRkEsRUFBQSxHQUFHLENBQUMsS0FBSixHQUFZLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDckI7QUFDQSxJQUFBLE1BQU0sRUFBRSxVQUFTLE9BQVQsRUFBa0I7QUFDeEIsV0FBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCLE9BQTVCO0FBQ0QsS0FKb0IsQ0FNckI7QUFOcUI7QUFPckIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDO0FBUFEsR0FBWCxDQUFaO0FBV0EsRUFBQSxHQUFHLENBQUMsSUFBSixHQUFXLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDcEI7QUFDQSxJQUFBLE1BQU0sRUFBRSxVQUFTLE9BQVQsRUFBa0IsT0FBbEIsRUFBMkI7QUFDakM7QUFDQSxXQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEIsR0FBRyxDQUFDLE1BQUosQ0FBVyxPQUFYLENBQTVCLEVBRmlDLENBSWpDOztBQUNBLFVBQUksT0FBSixFQUNFLEtBQUssSUFBSSxNQUFULElBQW1CLE9BQU8sQ0FBQyxTQUEzQixFQUNFLElBQUksT0FBTyxPQUFPLENBQUMsU0FBUixDQUFrQixNQUFsQixDQUFQLEtBQXFDLFVBQXpDLEVBQ0UsS0FBSyxNQUFMLElBQWUsT0FBTyxDQUFDLFNBQVIsQ0FBa0IsTUFBbEIsQ0FBZjtBQUNQLEtBWG1CLENBYXBCO0FBYm9CO0FBY3BCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQWRPLENBZ0JwQjtBQWhCb0I7QUFpQnBCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLEtBQUssRUFBRSxVQUFTLElBQVQsRUFBZTtBQUNwQjtBQUNBLGVBQU8sS0FBSyxJQUFMLENBQVUsYUFBVixFQUFQLEVBQ0UsS0FBSyxJQUFMLENBQVUsV0FBVixDQUFzQixLQUFLLElBQUwsQ0FBVSxTQUFoQyxFQUhrQixDQUtwQjs7O0FBQ0EsYUFBSyxJQUFMLENBQVUsV0FBVixDQUFzQixRQUFRLENBQUMsY0FBVCxDQUF3QixJQUF4QixDQUF0QjtBQUVBLGVBQU8sSUFBUDtBQUNEO0FBWEs7QUFqQlksR0FBWCxDQUFYO0FBaUNBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsTUFBZixFQUF1QjtBQUNyQjtBQUNBLElBQUEsT0FBTyxFQUFFLFVBQVMsT0FBVCxFQUFrQixPQUFsQixFQUEyQjtBQUNsQyxhQUFPLEtBQUssR0FBTCxDQUFTLElBQUksR0FBRyxDQUFDLElBQVIsQ0FBYSxPQUFiLEVBQXNCLE9BQXRCLENBQVQsQ0FBUDtBQUNELEtBSm9CLENBS3JCO0FBTHFCO0FBTXJCLElBQUEsTUFBTSxFQUFFLFlBQVc7QUFDakIsYUFBTyxLQUFLLElBQUwsR0FBWSxPQUFaLENBQW9CLFFBQXBCLEVBQThCLEdBQUcsQ0FBQyxTQUFsQyxDQUFQO0FBQ0Q7QUFSb0IsR0FBdkI7QUFXQSxFQUFBLEdBQUcsQ0FBQyxHQUFKLEdBQVUsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNuQjtBQUNBLElBQUEsTUFBTSxFQUFFLEtBRlcsQ0FJbkI7QUFKbUI7QUFLbkIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBTE0sQ0FPbkI7QUFQbUI7QUFRbkIsSUFBQSxNQUFNLEVBQUU7QUFDTjtBQUNBLE1BQUEsT0FBTyxFQUFFLFVBQVMsT0FBVCxFQUFrQixJQUFsQixFQUF3QjtBQUMvQjtBQUNBLGVBQU8sS0FBSyxJQUFMLENBQVUsTUFBVixFQUFrQixDQUFDLElBQUksSUFBSSxFQUFULElBQWUsR0FBZixHQUFxQixPQUF2QyxFQUFnRCxHQUFHLENBQUMsS0FBcEQsQ0FBUDtBQUNELE9BTEssQ0FRUjs7QUFSUSxLQVJXO0FBaUJuQixJQUFBLFNBQVMsRUFBRTtBQUNUO0FBQ0EsTUFBQSxHQUFHLEVBQUUsVUFBUyxPQUFULEVBQWtCLElBQWxCLEVBQXdCO0FBQzNCLGVBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsR0FBUixFQUFULEVBQXNCLE9BQXRCLENBQThCLE9BQTlCLEVBQXVDLElBQXZDLENBQVA7QUFDRDtBQUpRO0FBakJRLEdBQVgsQ0FBVjtBQXdCQSxFQUFBLEdBQUcsQ0FBQyxJQUFKLEdBQVcsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNwQjtBQUNBLElBQUEsTUFBTSxFQUFFLE1BRlksQ0FJcEI7QUFKb0I7QUFLcEIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBTE8sQ0FPcEI7QUFQb0I7QUFRcEIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsSUFBSSxFQUFFLFVBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QjtBQUM1QixlQUFPLEtBQUssR0FBTCxDQUFTLElBQUksR0FBRyxDQUFDLElBQVIsRUFBVCxFQUF5QixJQUF6QixDQUE4QixLQUE5QixFQUFxQyxNQUFyQyxDQUFQO0FBQ0Q7QUFKUTtBQVJTLEdBQVgsQ0FBWDtBQWVBLEVBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3RCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsUUFGYyxDQUl0QjtBQUpzQjtBQUt0QixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FMUyxDQU90QjtBQVBzQjtBQVF0QixJQUFBLFNBQVMsRUFBRTtBQUNUO0FBQ0EsTUFBQSxNQUFNLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDckIsZUFBTyxLQUFLLEdBQUwsQ0FBUyxJQUFJLEdBQUcsQ0FBQyxNQUFSLEVBQVQsRUFBeUIsRUFBekIsQ0FBNEIsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLElBQWYsRUFBcUIsTUFBckIsQ0FBNEIsQ0FBNUIsQ0FBNUIsRUFBNEQsSUFBNUQsQ0FBaUUsQ0FBakUsRUFBb0UsQ0FBcEUsQ0FBUDtBQUNEO0FBSlE7QUFSVyxHQUFYLENBQWI7QUFnQkEsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxNQUFmLEVBQXVCLEdBQUcsQ0FBQyxFQUEzQixFQUErQjtBQUM3QjtBQUNBLElBQUEsRUFBRSxFQUFFLFVBQVMsRUFBVCxFQUFhO0FBQ2YsYUFBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLEVBQWUsRUFBZixDQUFQO0FBQ0QsS0FKNEIsQ0FLN0I7QUFMNkI7QUFNN0IsSUFBQSxFQUFFLEVBQUUsVUFBUyxFQUFULEVBQWE7QUFDZixhQUFPLEtBQUssRUFBTCxDQUFRLEVBQVIsQ0FBUDtBQUNEO0FBUjRCLEdBQS9CO0FBV0EsRUFBQSxHQUFHLENBQUMsT0FBSixHQUFjLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDdkI7QUFDQSxJQUFBLE1BQU0sRUFBRSxTQUZlLENBSXZCO0FBSnVCO0FBS3ZCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUxVLENBT3ZCO0FBUHVCO0FBUXZCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLE9BQU8sRUFBRSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0I7QUFDL0IsZUFBTyxLQUFLLEdBQUwsQ0FBUyxJQUFJLEdBQUcsQ0FBQyxPQUFSLEVBQVQsRUFBMEIsSUFBMUIsQ0FBK0IsS0FBL0IsRUFBc0MsTUFBdEMsRUFBOEMsSUFBOUMsQ0FBbUQsQ0FBbkQsRUFBc0QsQ0FBdEQsQ0FBUDtBQUNEO0FBSlE7QUFSWSxHQUFYLENBQWQ7QUFnQkEsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxPQUFmLEVBQXdCLEdBQUcsQ0FBQyxJQUE1QixFQUFrQyxHQUFHLENBQUMsRUFBdEMsRUFBMEM7QUFDeEM7QUFDQSxJQUFBLEVBQUUsRUFBRSxVQUFTLEVBQVQsRUFBYTtBQUNmLGFBQU8sS0FBSyxJQUFMLENBQVUsSUFBVixFQUFnQixFQUFoQixDQUFQO0FBQ0QsS0FKdUMsQ0FLeEM7QUFMd0M7QUFNeEMsSUFBQSxFQUFFLEVBQUUsVUFBUyxFQUFULEVBQWE7QUFDZixhQUFPLEtBQUssSUFBTCxDQUFVLElBQVYsRUFBZ0IsRUFBaEIsQ0FBUDtBQUNEO0FBUnVDLEdBQTFDLEVBdHBHNEUsQ0FpcUc1RTs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLE1BQWYsRUFBdUIsR0FBRyxDQUFDLE9BQTNCLEVBQW9DO0FBQ2hDO0FBQ0EsSUFBQSxDQUFDLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDYixhQUFPLENBQUMsSUFBSSxJQUFMLEdBQVksS0FBSyxFQUFMLEtBQVksS0FBSyxFQUFMLEVBQXhCLEdBQW9DLEtBQUssRUFBTCxDQUFRLENBQUMsR0FBRyxLQUFLLEVBQUwsRUFBWixDQUEzQztBQUNELEtBSitCLENBS2hDO0FBTGdDO0FBTWhDLElBQUEsQ0FBQyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2IsYUFBTyxDQUFDLElBQUksSUFBTCxHQUFZLEtBQUssRUFBTCxLQUFZLEtBQUssRUFBTCxFQUF4QixHQUFvQyxLQUFLLEVBQUwsQ0FBUSxDQUFDLEdBQUcsS0FBSyxFQUFMLEVBQVosQ0FBM0M7QUFDRCxLQVIrQixDQVNoQztBQVRnQztBQVVoQyxJQUFBLEVBQUUsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNkLGFBQU8sQ0FBQyxJQUFJLElBQUwsR0FBWSxLQUFLLElBQUwsQ0FBVSxJQUFWLENBQVosR0FBOEIsS0FBSyxJQUFMLENBQVUsSUFBVixFQUFnQixDQUFoQixDQUFyQztBQUNELEtBWitCLENBYWhDO0FBYmdDO0FBY2hDLElBQUEsRUFBRSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2QsYUFBTyxDQUFDLElBQUksSUFBTCxHQUFZLEtBQUssSUFBTCxDQUFVLElBQVYsQ0FBWixHQUE4QixLQUFLLElBQUwsQ0FBVSxJQUFWLEVBQWdCLENBQWhCLENBQXJDO0FBQ0QsS0FoQitCLENBaUJoQztBQWpCZ0M7QUFrQmhDLElBQUEsS0FBSyxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUNyQixhQUFPLEtBQUssSUFBSSxJQUFULEdBQWdCLEtBQUssRUFBTCxLQUFZLENBQTVCLEdBQWdDLEtBQUssRUFBTCxDQUFRLElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxLQUFmLEVBQXNCLE1BQXRCLENBQTZCLENBQTdCLENBQVIsQ0FBdkM7QUFDRCxLQXBCK0IsQ0FxQmhDO0FBckJnQztBQXNCaEMsSUFBQSxNQUFNLEVBQUUsVUFBUyxNQUFULEVBQWlCO0FBQ3ZCLGFBQU8sTUFBTSxJQUFJLElBQVYsR0FBaUIsS0FBSyxFQUFMLEtBQVksQ0FBN0IsR0FBaUMsS0FBSyxFQUFMLENBQVEsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLE1BQWYsRUFBdUIsTUFBdkIsQ0FBOEIsQ0FBOUIsQ0FBUixDQUF4QztBQUNELEtBeEIrQixDQXlCaEM7QUF6QmdDO0FBMEJoQyxJQUFBLElBQUksRUFBRSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0I7QUFDNUIsVUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxJQUFMLEVBQUQsRUFBYyxLQUFkLEVBQXFCLE1BQXJCLENBQXhCO0FBRUEsYUFBTyxLQUNKLEVBREksQ0FDRCxJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBQyxDQUFDLEtBQWpCLEVBQXdCLE1BQXhCLENBQStCLENBQS9CLENBREMsRUFFSixFQUZJLENBRUQsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQUMsQ0FBQyxNQUFqQixFQUF5QixNQUF6QixDQUFnQyxDQUFoQyxDQUZDLENBQVA7QUFHRDtBQWhDK0IsR0FBcEM7QUFrQ0EsRUFBQSxHQUFHLENBQUMsSUFBSixHQUFXLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDcEI7QUFDQSxJQUFBLE1BQU0sRUFBRSxNQUZZLENBSXBCO0FBSm9CO0FBS3BCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUxPLENBT3BCO0FBUG9CO0FBUXBCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLGVBQU8sSUFBSSxHQUFHLENBQUMsVUFBUixDQUFtQixDQUN4QixDQUFFLEtBQUssSUFBTCxDQUFVLElBQVYsQ0FBRixFQUFtQixLQUFLLElBQUwsQ0FBVSxJQUFWLENBQW5CLENBRHdCLEVBRXhCLENBQUUsS0FBSyxJQUFMLENBQVUsSUFBVixDQUFGLEVBQW1CLEtBQUssSUFBTCxDQUFVLElBQVYsQ0FBbkIsQ0FGd0IsQ0FBbkIsQ0FBUDtBQUlELE9BUEssQ0FRTjtBQVJNO0FBU04sTUFBQSxJQUFJLEVBQUUsVUFBUyxFQUFULEVBQWEsRUFBYixFQUFpQixFQUFqQixFQUFxQixFQUFyQixFQUF5QjtBQUM3QixZQUFJLFNBQVMsQ0FBQyxNQUFWLElBQW9CLENBQXhCLEVBQ0UsRUFBRSxHQUFHO0FBQUUsVUFBQSxFQUFFLEVBQUUsRUFBTjtBQUFVLFVBQUEsRUFBRSxFQUFFLEVBQWQ7QUFBa0IsVUFBQSxFQUFFLEVBQUUsRUFBdEI7QUFBMEIsVUFBQSxFQUFFLEVBQUU7QUFBOUIsU0FBTCxDQURGLEtBR0UsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVIsQ0FBbUIsRUFBbkIsRUFBdUIsTUFBdkIsRUFBTDtBQUVGLGVBQU8sS0FBSyxJQUFMLENBQVUsRUFBVixDQUFQO0FBQ0QsT0FoQkssQ0FpQk47QUFqQk07QUFrQk4sTUFBQSxJQUFJLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ25CLGVBQU8sS0FBSyxJQUFMLENBQVUsS0FBSyxLQUFMLEdBQWEsSUFBYixDQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixNQUF4QixFQUFWLENBQVA7QUFDRCxPQXBCSyxDQXFCTjtBQXJCTTtBQXNCTixNQUFBLElBQUksRUFBRSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0I7QUFDNUIsWUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxJQUFMLEVBQUQsRUFBYyxLQUFkLEVBQXFCLE1BQXJCLENBQXhCO0FBRUEsZUFBTyxLQUFLLElBQUwsQ0FBVSxLQUFLLEtBQUwsR0FBYSxJQUFiLENBQWtCLENBQUMsQ0FBQyxLQUFwQixFQUEyQixDQUFDLENBQUMsTUFBN0IsRUFBcUMsTUFBckMsRUFBVixDQUFQO0FBQ0QsT0ExQkssQ0E2QlI7O0FBN0JRLEtBUlk7QUFzQ3BCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLElBQUksRUFBRSxVQUFTLEVBQVQsRUFBYSxFQUFiLEVBQWlCLEVBQWpCLEVBQXFCLEVBQXJCLEVBQXlCO0FBQzdCLGVBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsSUFBUixFQUFULEVBQXVCLElBQXZCLENBQTRCLEVBQTVCLEVBQWdDLEVBQWhDLEVBQW9DLEVBQXBDLEVBQXdDLEVBQXhDLENBQVA7QUFDRDtBQUpRO0FBdENTLEdBQVgsQ0FBWDtBQThDQSxFQUFBLEdBQUcsQ0FBQyxRQUFKLEdBQWUsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUN4QjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBRmdCLENBSXhCO0FBSndCO0FBS3hCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUxXLENBT3hCO0FBUHdCO0FBUXhCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLFFBQVEsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNwQixlQUFPLEtBQUssR0FBTCxDQUFTLElBQUksR0FBRyxDQUFDLFFBQVIsRUFBVCxFQUEyQixJQUEzQixDQUFnQyxDQUFoQyxDQUFQO0FBQ0Q7QUFKUTtBQVJhLEdBQVgsQ0FBZjtBQWdCQSxFQUFBLEdBQUcsQ0FBQyxPQUFKLEdBQWMsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUN2QjtBQUNBLElBQUEsTUFBTSxFQUFFLFNBRmUsQ0FJdkI7QUFKdUI7QUFLdkIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLEtBTFUsQ0FPdkI7QUFQdUI7QUFRdkIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsT0FBTyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ25CLGVBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsT0FBUixFQUFULEVBQTBCLElBQTFCLENBQStCLENBQS9CLENBQVA7QUFDRDtBQUpRO0FBUlksR0FBWCxDQUFkLENBbHdHNEUsQ0FreEc1RTs7QUFDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLFFBQWYsRUFBeUIsR0FBRyxDQUFDLE9BQTdCLEVBQXNDO0FBQ3BDO0FBQ0EsSUFBQSxLQUFLLEVBQUUsWUFBVztBQUNoQixhQUFPLEtBQUssTUFBTCxLQUFnQixLQUFLLE1BQUwsR0FBYyxJQUFJLEdBQUcsQ0FBQyxVQUFSLENBQW1CLEtBQUssSUFBTCxDQUFVLFFBQVYsQ0FBbkIsQ0FBOUIsQ0FBUDtBQUNELEtBSm1DLENBS3BDO0FBTG9DO0FBTXBDLElBQUEsSUFBSSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2hCLGFBQU8sS0FBSyxJQUFMLENBQVUsUUFBVixFQUFxQixLQUFLLE1BQUwsR0FBYyxJQUFJLEdBQUcsQ0FBQyxVQUFSLENBQW1CLENBQW5CLENBQW5DLENBQVA7QUFDRCxLQVJtQyxDQVNwQztBQVRvQztBQVVwQyxJQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDbkIsYUFBTyxLQUFLLElBQUwsQ0FBVSxRQUFWLEVBQW9CLEtBQUssS0FBTCxHQUFhLElBQWIsQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBcEIsQ0FBUDtBQUNELEtBWm1DLENBYXBDO0FBYm9DO0FBY3BDLElBQUEsSUFBSSxFQUFFLFVBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QjtBQUM1QixVQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLElBQUwsRUFBRCxFQUFjLEtBQWQsRUFBcUIsTUFBckIsQ0FBeEI7QUFFQSxhQUFPLEtBQUssSUFBTCxDQUFVLFFBQVYsRUFBb0IsS0FBSyxLQUFMLEdBQWEsSUFBYixDQUFrQixDQUFDLENBQUMsS0FBcEIsRUFBMkIsQ0FBQyxDQUFDLE1BQTdCLENBQXBCLENBQVA7QUFDRDtBQWxCbUMsR0FBdEMsRUFueEc0RSxDQXd5RzVFOztBQUNBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsSUFBZixFQUFxQixHQUFHLENBQUMsUUFBekIsRUFBbUMsR0FBRyxDQUFDLE9BQXZDLEVBQWdEO0FBQzlDO0FBQ0EsSUFBQSxVQUFVLEVBQUcsR0FBRyxDQUFDLFVBRjZCLENBRzlDO0FBSDhDO0FBSTlDLElBQUEsQ0FBQyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2IsYUFBTyxDQUFDLElBQUksSUFBTCxHQUFZLEtBQUssSUFBTCxHQUFZLENBQXhCLEdBQTRCLEtBQUssSUFBTCxDQUFVLENBQVYsRUFBYSxLQUFLLElBQUwsR0FBWSxDQUF6QixDQUFuQztBQUNELEtBTjZDLENBTzlDO0FBUDhDO0FBUTlDLElBQUEsQ0FBQyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2IsYUFBTyxDQUFDLElBQUksSUFBTCxHQUFZLEtBQUssSUFBTCxHQUFZLENBQXhCLEdBQTRCLEtBQUssSUFBTCxDQUFVLEtBQUssSUFBTCxHQUFZLENBQXRCLEVBQXlCLENBQXpCLENBQW5DO0FBQ0QsS0FWNkMsQ0FXOUM7QUFYOEM7QUFZOUMsSUFBQSxLQUFLLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3JCLFVBQUksQ0FBQyxHQUFHLEtBQUssSUFBTCxFQUFSO0FBRUEsYUFBTyxLQUFLLElBQUksSUFBVCxHQUFnQixDQUFDLENBQUMsS0FBbEIsR0FBMEIsS0FBSyxJQUFMLENBQVUsS0FBVixFQUFpQixDQUFDLENBQUMsTUFBbkIsQ0FBakM7QUFDRCxLQWhCNkMsQ0FpQjlDO0FBakI4QztBQWtCOUMsSUFBQSxNQUFNLEVBQUUsVUFBUyxNQUFULEVBQWlCO0FBQ3ZCLFVBQUksQ0FBQyxHQUFHLEtBQUssSUFBTCxFQUFSO0FBRUEsYUFBTyxNQUFNLElBQUksSUFBVixHQUFpQixDQUFDLENBQUMsTUFBbkIsR0FBNEIsS0FBSyxJQUFMLENBQVUsQ0FBQyxDQUFDLEtBQVosRUFBbUIsTUFBbkIsQ0FBbkM7QUFDRDtBQXRCNkMsR0FBaEQ7QUF3QkEsRUFBQSxHQUFHLENBQUMsSUFBSixHQUFXLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDcEI7QUFDQSxJQUFBLE1BQU0sRUFBRSxNQUZZLENBSXBCO0FBSm9CO0FBS3BCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUxPLENBT3BCO0FBUG9CO0FBUXBCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLFVBQVUsRUFBRyxHQUFHLENBQUMsU0FGWCxDQUdOO0FBSE07QUFJTixNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLGVBQU8sS0FBSyxNQUFMLEtBQWdCLEtBQUssTUFBTCxHQUFjLElBQUksR0FBRyxDQUFDLFNBQVIsQ0FBa0IsS0FBSyxJQUFMLENBQVUsR0FBVixDQUFsQixDQUE5QixDQUFQO0FBQ0QsT0FOSyxDQU9OO0FBUE07QUFRTixNQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNoQixlQUFPLEtBQUssSUFBTCxDQUFVLEdBQVYsRUFBZ0IsS0FBSyxNQUFMLEdBQWMsSUFBSSxHQUFHLENBQUMsU0FBUixDQUFrQixDQUFsQixDQUE5QixDQUFQO0FBQ0QsT0FWSyxDQVdOO0FBWE07QUFZTixNQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDbkIsZUFBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLEVBQWUsS0FBSyxLQUFMLEdBQWEsSUFBYixDQUFrQixDQUFsQixFQUFxQixDQUFyQixDQUFmLENBQVA7QUFDRCxPQWRLLENBZU47QUFmTTtBQWdCTixNQUFBLENBQUMsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNiLGVBQU8sQ0FBQyxJQUFJLElBQUwsR0FBWSxLQUFLLElBQUwsR0FBWSxDQUF4QixHQUE0QixLQUFLLElBQUwsQ0FBVSxDQUFWLEVBQWEsS0FBSyxJQUFMLEdBQVksQ0FBekIsQ0FBbkM7QUFDRCxPQWxCSyxDQW1CTjtBQW5CTTtBQW9CTixNQUFBLENBQUMsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNiLGVBQU8sQ0FBQyxJQUFJLElBQUwsR0FBWSxLQUFLLElBQUwsR0FBWSxDQUF4QixHQUE0QixLQUFLLElBQUwsQ0FBVSxLQUFLLElBQUwsR0FBWSxDQUF0QixFQUF5QixDQUF6QixDQUFuQztBQUNELE9BdEJLLENBdUJOO0FBdkJNO0FBd0JOLE1BQUEsSUFBSSxFQUFFLFVBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QjtBQUM1QixZQUFJLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLElBQUwsRUFBRCxFQUFjLEtBQWQsRUFBcUIsTUFBckIsQ0FBeEI7QUFFQSxlQUFPLEtBQUssSUFBTCxDQUFVLEdBQVYsRUFBZSxLQUFLLEtBQUwsR0FBYSxJQUFiLENBQWtCLENBQUMsQ0FBQyxLQUFwQixFQUEyQixDQUFDLENBQUMsTUFBN0IsQ0FBZixDQUFQO0FBQ0QsT0E1QkssQ0E2Qk47QUE3Qk07QUE4Qk4sTUFBQSxLQUFLLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3JCLGVBQU8sS0FBSyxJQUFJLElBQVQsR0FBZ0IsS0FBSyxJQUFMLEdBQVksS0FBNUIsR0FBb0MsS0FBSyxJQUFMLENBQVUsS0FBVixFQUFpQixLQUFLLElBQUwsR0FBWSxNQUE3QixDQUEzQztBQUNELE9BaENLLENBaUNOO0FBakNNO0FBa0NOLE1BQUEsTUFBTSxFQUFFLFVBQVMsTUFBVCxFQUFpQjtBQUN2QixlQUFPLE1BQU0sSUFBSSxJQUFWLEdBQWlCLEtBQUssSUFBTCxHQUFZLE1BQTdCLEdBQXNDLEtBQUssSUFBTCxDQUFVLEtBQUssSUFBTCxHQUFZLEtBQXRCLEVBQTZCLE1BQTdCLENBQTdDO0FBQ0QsT0FwQ0ssQ0F3Q1I7O0FBeENRLEtBUlk7QUFpRHBCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNoQixlQUFPLEtBQUssR0FBTCxDQUFTLElBQUksR0FBRyxDQUFDLElBQVIsRUFBVCxFQUF1QixJQUF2QixDQUE0QixDQUE1QixDQUFQO0FBQ0Q7QUFKUTtBQWpEUyxHQUFYLENBQVg7QUF3REEsRUFBQSxHQUFHLENBQUMsS0FBSixHQUFZLEdBQUcsQ0FBQyxNQUFKLENBQVc7QUFDckI7QUFDQSxJQUFBLE1BQU0sRUFBRSxPQUZhLENBSXJCO0FBSnFCO0FBS3JCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxLQUxRLENBT3JCO0FBUHFCO0FBUXJCLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLElBQUksRUFBRSxVQUFTLEdBQVQsRUFBYztBQUNsQixZQUFJLENBQUMsR0FBTCxFQUFVLE9BQU8sSUFBUDtBQUVWLFlBQUksSUFBSSxHQUFHLElBQVg7QUFBQSxZQUNJLEdBQUcsR0FBSSxRQUFRLENBQUMsYUFBVCxDQUF1QixLQUF2QixDQURYLENBSGtCLENBTWxCOztBQUNBLFFBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxZQUFXO0FBQ3RCLGNBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFMLENBQVksR0FBRyxDQUFDLE9BQWhCLENBQVIsQ0FEc0IsQ0FHdEI7O0FBQ0EsY0FBSSxJQUFJLENBQUMsS0FBTCxNQUFnQixDQUFoQixJQUFxQixJQUFJLENBQUMsTUFBTCxNQUFpQixDQUExQyxFQUNFLElBQUksQ0FBQyxJQUFMLENBQVUsR0FBRyxDQUFDLEtBQWQsRUFBcUIsR0FBRyxDQUFDLE1BQXpCLEVBTG9CLENBT3RCOztBQUNBLGNBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFGLE1BQWEsQ0FBbEIsSUFBdUIsQ0FBQyxDQUFDLE1BQUYsTUFBYyxDQUF6QyxFQUNFLENBQUMsQ0FBQyxJQUFGLENBQU8sSUFBSSxDQUFDLEtBQUwsRUFBUCxFQUFxQixJQUFJLENBQUMsTUFBTCxFQUFyQixFQVRvQixDQVd0Qjs7QUFDQSxjQUFJLE9BQU8sSUFBSSxDQUFDLE9BQVosS0FBd0IsVUFBNUIsRUFDRSxJQUFJLENBQUMsT0FBTCxDQUFhLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0I7QUFDdEIsWUFBQSxLQUFLLEVBQUcsR0FBRyxDQUFDLEtBRFU7QUFFdEIsWUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BRlU7QUFHdEIsWUFBQSxLQUFLLEVBQUcsR0FBRyxDQUFDLEtBQUosR0FBWSxHQUFHLENBQUMsTUFIRjtBQUl0QixZQUFBLEdBQUcsRUFBSztBQUpjLFdBQXhCO0FBTUgsU0FuQkQ7O0FBcUJBLGVBQU8sS0FBSyxJQUFMLENBQVUsTUFBVixFQUFtQixHQUFHLENBQUMsR0FBSixHQUFVLEtBQUssR0FBTCxHQUFXLEdBQXhDLEVBQThDLEdBQUcsQ0FBQyxLQUFsRCxDQUFQO0FBQ0QsT0EvQkssQ0FnQ047QUFoQ007QUFpQ04sTUFBQSxNQUFNLEVBQUUsVUFBUyxNQUFULEVBQWlCO0FBQ3ZCLGFBQUssT0FBTCxHQUFlLE1BQWY7QUFDQSxlQUFPLElBQVA7QUFDRCxPQXBDSyxDQXVDUjs7QUF2Q1EsS0FSYTtBQWdEckIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsS0FBSyxFQUFFLFVBQVMsTUFBVCxFQUFpQixLQUFqQixFQUF3QixNQUF4QixFQUFnQztBQUNyQyxlQUFPLEtBQUssR0FBTCxDQUFTLElBQUksR0FBRyxDQUFDLEtBQVIsRUFBVCxFQUF3QixJQUF4QixDQUE2QixNQUE3QixFQUFxQyxJQUFyQyxDQUEwQyxLQUFLLElBQUksQ0FBbkQsRUFBc0QsTUFBTSxJQUFJLEtBQVYsSUFBbUIsQ0FBekUsQ0FBUDtBQUNEO0FBSlE7QUFoRFUsR0FBWCxDQUFaO0FBd0RBLEVBQUEsR0FBRyxDQUFDLElBQUosR0FBVyxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3BCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsWUFBVztBQUNqQixXQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEIsR0FBRyxDQUFDLE1BQUosQ0FBVyxNQUFYLENBQTVCO0FBRUEsV0FBSyxHQUFMLENBQVMsT0FBVCxHQUFtQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsR0FBZixDQUFuQixDQUhpQixDQUd5Qjs7QUFDMUMsV0FBSyxRQUFMLEdBQWdCLElBQWhCLENBSmlCLENBSXlCOztBQUMxQyxXQUFLLE1BQUwsR0FBZ0IsS0FBaEIsQ0FMaUIsQ0FLeUI7QUFFMUM7O0FBQ0EsV0FBSyxJQUFMLENBQVUsYUFBVixFQUF5QixHQUFHLENBQUMsUUFBSixDQUFhLEtBQWIsQ0FBbUIsYUFBbkIsQ0FBekI7QUFDRCxLQVhtQixDQWFwQjtBQWJvQjtBQWNwQixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FkTyxDQWdCcEI7QUFoQm9CO0FBaUJwQixJQUFBLE1BQU0sRUFBRTtBQUNOLE1BQUEsS0FBSyxFQUFFLFlBQVU7QUFDZjtBQUNBLFlBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLElBQUwsQ0FBVSxTQUFWLENBQW9CLElBQXBCLENBQUQsQ0FBdkIsQ0FGZSxDQUlmOztBQUNBLGFBQUssS0FBTCxDQUFXLEtBQVg7QUFFQSxlQUFPLEtBQVA7QUFDRCxPQVRLLENBVU47QUFWTTtBQVdOLE1BQUEsQ0FBQyxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2I7QUFDQSxZQUFJLENBQUMsSUFBSSxJQUFULEVBQ0UsT0FBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLENBQVAsQ0FIVyxDQUtiOztBQUNBLFlBQUksQ0FBQyxLQUFLLFFBQVYsRUFDRSxLQUFLLEtBQUwsR0FBYSxJQUFiLENBQWtCLFlBQVc7QUFBRSxjQUFJLEtBQUssR0FBTCxDQUFTLFFBQWIsRUFBdUIsS0FBSyxDQUFMLENBQU8sQ0FBUDtBQUFXLFNBQWpFO0FBRUYsZUFBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLEVBQWUsQ0FBZixDQUFQO0FBQ0QsT0FyQkssQ0FzQk47QUF0Qk07QUF1Qk4sTUFBQSxDQUFDLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDYixZQUFJLEVBQUUsR0FBRyxLQUFLLElBQUwsQ0FBVSxHQUFWLENBQVQ7QUFBQSxZQUNJLENBQUMsR0FBSSxPQUFPLEVBQVAsS0FBYyxRQUFkLEdBQXlCLEVBQUUsR0FBRyxLQUFLLElBQUwsR0FBWSxDQUExQyxHQUE4QyxDQUR2RCxDQURhLENBSWI7O0FBQ0EsWUFBSSxDQUFDLElBQUksSUFBVCxFQUNFLE9BQU8sT0FBTyxFQUFQLEtBQWMsUUFBZCxHQUF5QixFQUFFLEdBQUcsQ0FBOUIsR0FBa0MsRUFBekM7QUFFRixlQUFPLEtBQUssSUFBTCxDQUFVLEdBQVYsRUFBZSxPQUFPLENBQVAsS0FBYSxRQUFiLEdBQXdCLENBQUMsR0FBRyxDQUE1QixHQUFnQyxDQUEvQyxDQUFQO0FBQ0QsT0FoQ0ssQ0FpQ047QUFqQ007QUFrQ04sTUFBQSxFQUFFLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDZCxlQUFPLENBQUMsSUFBSSxJQUFMLEdBQVksS0FBSyxJQUFMLEdBQVksRUFBeEIsR0FBNkIsS0FBSyxDQUFMLENBQU8sQ0FBQyxHQUFHLEtBQUssSUFBTCxHQUFZLEtBQVosR0FBb0IsQ0FBL0IsQ0FBcEM7QUFDRCxPQXBDSyxDQXFDTjtBQXJDTTtBQXNDTixNQUFBLEVBQUUsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNkLGVBQU8sQ0FBQyxJQUFJLElBQUwsR0FBWSxLQUFLLElBQUwsR0FBWSxFQUF4QixHQUE2QixLQUFLLENBQUwsQ0FBTyxDQUFDLEdBQUcsS0FBSyxJQUFMLEdBQVksTUFBWixHQUFxQixDQUFoQyxDQUFwQztBQUNELE9BeENLLENBeUNOO0FBekNNO0FBMENOLE1BQUEsSUFBSSxFQUFFLFVBQVMsSUFBVCxFQUFlO0FBQ25CO0FBQ0EsWUFBSSxPQUFPLElBQVAsS0FBZ0IsV0FBcEIsRUFBZ0M7QUFDOUIsY0FBSSxJQUFJLEdBQUcsRUFBWDtBQUNBLGNBQUksUUFBUSxHQUFHLEtBQUssSUFBTCxDQUFVLFVBQXpCOztBQUNBLGVBQUksSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBOUIsRUFBc0MsQ0FBQyxHQUFHLEdBQTFDLEVBQStDLEVBQUUsQ0FBakQsRUFBbUQ7QUFFakQ7QUFDQSxnQkFBRyxDQUFDLElBQUksQ0FBTCxJQUFVLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWSxRQUFaLElBQXdCLENBQWxDLElBQXVDLEdBQUcsQ0FBQyxLQUFKLENBQVUsUUFBUSxDQUFDLENBQUQsQ0FBbEIsRUFBdUIsR0FBdkIsQ0FBMkIsUUFBM0IsSUFBdUMsSUFBakYsRUFBc0Y7QUFDcEYsY0FBQSxJQUFJLElBQUksSUFBUjtBQUNELGFBTGdELENBT2pEOzs7QUFDQSxZQUFBLElBQUksSUFBSSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVksV0FBcEI7QUFDRDs7QUFFRCxpQkFBTyxJQUFQO0FBQ0QsU0FqQmtCLENBbUJuQjs7O0FBQ0EsYUFBSyxLQUFMLEdBQWEsS0FBYixDQUFtQixJQUFuQjs7QUFFQSxZQUFJLE9BQU8sSUFBUCxLQUFnQixVQUFwQixFQUFnQztBQUM5QjtBQUNBLFVBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWLEVBQWdCLElBQWhCO0FBRUQsU0FKRCxNQUlPO0FBQ0w7QUFDQSxVQUFBLElBQUksR0FBRyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQVgsQ0FBUCxDQUZLLENBSUw7O0FBQ0EsZUFBSyxJQUFJLENBQUMsR0FBRyxDQUFSLEVBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUExQixFQUFrQyxDQUFDLEdBQUcsRUFBdEMsRUFBMEMsQ0FBQyxFQUEzQyxFQUNFLEtBQUssS0FBTCxDQUFXLElBQUksQ0FBQyxDQUFELENBQWYsRUFBb0IsT0FBcEI7QUFDSCxTQWpDa0IsQ0FtQ25COzs7QUFDQSxlQUFPLEtBQUssS0FBTCxDQUFXLEtBQVgsRUFBa0IsT0FBbEIsRUFBUDtBQUNELE9BL0VLLENBZ0ZOO0FBaEZNO0FBaUZOLE1BQUEsSUFBSSxFQUFFLFVBQVMsSUFBVCxFQUFlO0FBQ25CLGVBQU8sS0FBSyxJQUFMLENBQVUsV0FBVixFQUF1QixJQUF2QixFQUE2QixPQUE3QixFQUFQO0FBQ0QsT0FuRkssQ0FvRk47QUFwRk07QUFxRk4sTUFBQSxPQUFPLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3ZCO0FBQ0EsWUFBSSxLQUFLLElBQUksSUFBYixFQUNFLE9BQU8sS0FBSyxHQUFMLENBQVMsT0FBaEIsQ0FIcUIsQ0FLdkI7O0FBQ0EsYUFBSyxHQUFMLENBQVMsT0FBVCxHQUFtQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsS0FBZixDQUFuQjtBQUVBLGVBQU8sS0FBSyxPQUFMLEVBQVA7QUFDRCxPQTlGSyxDQStGTjtBQS9GTTtBQWdHTixNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCO0FBQ0EsWUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUosQ0FBVSxHQUFWLENBQWMsR0FBRyxDQUFDLEtBQUosQ0FBVSxpQkFBVixDQUE0QixLQUFLLElBQUwsQ0FBVSxVQUF0QyxDQUFkLEVBQWlFLFVBQVMsRUFBVCxFQUFZO0FBQ3ZGLGlCQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsRUFBVixDQUFQO0FBQ0QsU0FGVyxDQUFaLENBRmdCLENBTWhCOztBQUNBLGVBQU8sSUFBSSxHQUFHLENBQUMsR0FBUixDQUFZLEtBQVosQ0FBUDtBQUNELE9BeEdLLENBeUdOO0FBekdNO0FBMEdOLE1BQUEsT0FBTyxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUN6QjtBQUNBLFlBQUksT0FBTyxPQUFQLElBQWtCLFNBQXRCLEVBQ0UsS0FBSyxRQUFMLEdBQWdCLE9BQWhCLENBSHVCLENBS3pCOztBQUNBLFlBQUksS0FBSyxRQUFULEVBQW1CO0FBQ2pCLGNBQUksSUFBSSxHQUFHLElBQVg7QUFFQSxlQUFLLEtBQUwsR0FBYSxJQUFiLENBQWtCLFlBQVc7QUFDM0IsZ0JBQUksS0FBSyxHQUFMLENBQVMsUUFBYixFQUF1QjtBQUNyQixrQkFBSSxDQUFDLEtBQUssUUFBVixFQUNFLEtBQUssSUFBTCxDQUFVLEdBQVYsRUFBZSxJQUFJLENBQUMsSUFBTCxDQUFVLEdBQVYsQ0FBZjtBQUVGLG1CQUFLLElBQUwsQ0FBVSxJQUFWLEVBQWdCLElBQUksQ0FBQyxHQUFMLENBQVMsT0FBVCxHQUFtQixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsSUFBSSxDQUFDLElBQUwsQ0FBVSxXQUFWLENBQWYsQ0FBbkM7QUFDRDtBQUNGLFdBUEQ7QUFTQSxlQUFLLElBQUwsQ0FBVSxTQUFWO0FBQ0Q7O0FBRUQsZUFBTyxJQUFQO0FBQ0QsT0FoSUssQ0FpSU47QUFqSU07QUFrSU4sTUFBQSxLQUFLLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3JCLGFBQUssTUFBTCxHQUFjLENBQUMsQ0FBQyxLQUFoQjtBQUNBLGVBQU8sSUFBUDtBQUNELE9BcklLLENBc0lOO0FBdElNO0FBdUlOLE1BQUEsT0FBTyxFQUFFLFVBQVMsQ0FBVCxFQUFXO0FBQ2xCLGFBQUssR0FBTCxHQUFXLENBQVg7QUFDQSxhQUFLLEdBQUwsQ0FBUyxPQUFULEdBQW1CLENBQUMsQ0FBQyxPQUFGLEdBQVksSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQUMsQ0FBQyxPQUFGLENBQVUsS0FBekIsRUFBZ0MsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxJQUExQyxDQUFaLEdBQThELElBQUksR0FBRyxDQUFDLE1BQVIsQ0FBZSxHQUFmLENBQWpGO0FBQ0EsZUFBTyxJQUFQO0FBQ0QsT0EzSUssQ0E4SVI7O0FBOUlRLEtBakJZO0FBZ0twQixJQUFBLFNBQVMsRUFBRTtBQUNUO0FBQ0EsTUFBQSxJQUFJLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDbkIsZUFBTyxLQUFLLEdBQUwsQ0FBUyxJQUFJLEdBQUcsQ0FBQyxJQUFSLEVBQVQsRUFBdUIsSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBUDtBQUNELE9BSlEsQ0FLVDtBQUxTO0FBTVQsTUFBQSxLQUFLLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDcEIsZUFBTyxLQUFLLEdBQUwsQ0FBUyxJQUFJLEdBQUcsQ0FBQyxJQUFSLEVBQVQsRUFBdUIsS0FBdkIsQ0FBNkIsSUFBN0IsQ0FBUDtBQUNEO0FBUlE7QUFoS1MsR0FBWCxDQUFYO0FBNktBLEVBQUEsR0FBRyxDQUFDLEtBQUosR0FBWSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3JCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsT0FGYSxDQUlyQjtBQUpxQjtBQUtyQixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsS0FMUSxDQU9yQjtBQVBxQjtBQVFyQixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxJQUFJLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDbkIsZUFBTyxJQUFQLEtBQWdCLFVBQWhCLEdBQTZCLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBVixFQUFnQixJQUFoQixDQUE3QixHQUFxRCxLQUFLLEtBQUwsQ0FBVyxJQUFYLENBQXJEO0FBRUEsZUFBTyxJQUFQO0FBQ0QsT0FOSyxDQU9OO0FBUE07QUFRTixNQUFBLEVBQUUsRUFBRSxVQUFTLEVBQVQsRUFBYTtBQUNmLGVBQU8sS0FBSyxJQUFMLENBQVUsSUFBVixFQUFnQixFQUFoQixDQUFQO0FBQ0QsT0FWSyxDQVdOO0FBWE07QUFZTixNQUFBLEVBQUUsRUFBRSxVQUFTLEVBQVQsRUFBYTtBQUNmLGVBQU8sS0FBSyxJQUFMLENBQVUsSUFBVixFQUFnQixFQUFoQixDQUFQO0FBQ0QsT0FkSyxDQWVOO0FBZk07QUFnQk4sTUFBQSxPQUFPLEVBQUUsWUFBVztBQUNsQjtBQUNBLFlBQUksQ0FBQyxHQUFHLEtBQUssTUFBTCxDQUFZLEdBQUcsQ0FBQyxJQUFoQixDQUFSLENBRmtCLENBSWxCOztBQUNBLGFBQUssR0FBTCxDQUFTLFFBQVQsR0FBb0IsSUFBcEIsQ0FMa0IsQ0FPbEI7O0FBQ0EsZUFBTyxLQUFLLEVBQUwsQ0FBUSxDQUFDLENBQUMsR0FBRixDQUFNLE9BQU4sR0FBZ0IsQ0FBQyxDQUFDLElBQUYsQ0FBTyxXQUFQLENBQXhCLEVBQTZDLElBQTdDLENBQWtELEdBQWxELEVBQXVELENBQUMsQ0FBQyxDQUFGLEVBQXZELENBQVA7QUFDRDtBQXpCSztBQVJhLEdBQVgsQ0FBWjtBQXNDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLElBQWYsRUFBcUIsR0FBRyxDQUFDLEtBQXpCLEVBQWdDO0FBQzlCO0FBQ0EsSUFBQSxLQUFLLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDcEI7QUFDQSxVQUFJLEtBQUssTUFBTCxLQUFnQixLQUFwQixFQUNFLEtBQUssS0FBTCxHQUhrQixDQUtwQjs7QUFDQSxXQUFLLElBQUwsQ0FBVSxXQUFWLENBQXNCLFFBQVEsQ0FBQyxjQUFULENBQXdCLElBQXhCLENBQXRCO0FBRUEsYUFBTyxJQUFQO0FBQ0QsS0FYNkIsQ0FZOUI7QUFaOEI7QUFhOUIsSUFBQSxLQUFLLEVBQUUsVUFBUyxJQUFULEVBQWU7QUFDcEIsVUFBSSxJQUFJLEdBQUksQ0FBQyxLQUFLLFFBQUwsSUFBaUIsS0FBSyxRQUFMLEVBQWpCLElBQW9DLElBQXJDLEVBQTJDLElBQXZEO0FBQUEsVUFDSSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBUixFQURaLENBRG9CLENBSXBCOztBQUNBLFVBQUksS0FBSyxNQUFMLEtBQWdCLEtBQXBCLEVBQ0UsS0FBSyxLQUFMLEdBTmtCLENBUXBCOztBQUNBLE1BQUEsSUFBSSxDQUFDLFdBQUwsQ0FBaUIsS0FBSyxDQUFDLElBQXZCO0FBRUEsYUFBTyxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsQ0FBUDtBQUNELEtBekI2QixDQTBCOUI7QUExQjhCO0FBMkI5QixJQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLFVBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxRQUFMLElBQWlCLEtBQUssUUFBTCxFQUFqQixJQUFvQyxJQUFyQyxFQUEyQyxJQUF0RCxDQURnQixDQUdoQjs7QUFDQSxhQUFPLElBQUksQ0FBQyxhQUFMLEVBQVAsRUFDRSxJQUFJLENBQUMsV0FBTCxDQUFpQixJQUFJLENBQUMsU0FBdEI7O0FBRUYsYUFBTyxJQUFQO0FBQ0QsS0FuQzZCLENBb0M5QjtBQXBDOEI7QUFxQzlCLElBQUEsTUFBTSxFQUFFLFlBQVc7QUFDakIsYUFBTyxLQUFLLElBQUwsQ0FBVSxxQkFBVixFQUFQO0FBQ0Q7QUF2QzZCLEdBQWhDO0FBMENBLEVBQUEsR0FBRyxDQUFDLFFBQUosR0FBZSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3hCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsVUFGZ0IsQ0FJeEI7QUFKd0I7QUFLeEIsSUFBQSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BTFcsQ0FPeEI7QUFQd0I7QUFReEIsSUFBQSxNQUFNLEVBQUUsR0FBRyxDQUFDLElBUlksQ0FVeEI7QUFWd0I7QUFXeEIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsSUFBSSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2hCO0FBQ0EsWUFBSSxJQUFJLEdBQUksSUFBSSxHQUFHLENBQUMsUUFBUixFQUFaO0FBQUEsWUFDSSxLQUFLLEdBQUcsS0FBSyxHQUFMLEdBQVcsSUFBWCxHQUFrQixJQUFsQixDQUF1QixDQUF2QixDQURaLENBRmdCLENBS2hCOztBQUNBLGVBQU8sS0FBSyxJQUFMLENBQVUsYUFBVixFQUFQLEVBQ0UsSUFBSSxDQUFDLElBQUwsQ0FBVSxXQUFWLENBQXNCLEtBQUssSUFBTCxDQUFVLFVBQWhDLEVBUGMsQ0FTaEI7OztBQUNBLGFBQUssSUFBTCxDQUFVLFdBQVYsQ0FBc0IsSUFBSSxDQUFDLElBQTNCLEVBVmdCLENBWWhCOztBQUNBLFFBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxNQUFWLEVBQWtCLE1BQU0sS0FBeEIsRUFBK0IsR0FBRyxDQUFDLEtBQW5DO0FBRUEsZUFBTyxJQUFQO0FBQ0QsT0FsQlEsQ0FtQlQ7QUFuQlM7QUFvQlQsTUFBQSxJQUFJLEVBQUUsVUFBUyxDQUFULEVBQVk7QUFDaEIsWUFBSSxLQUFLLEdBQUcsS0FBSyxLQUFMLEVBQVo7QUFFQSxZQUFJLEtBQUosRUFDRSxLQUFLLENBQUMsSUFBTixDQUFXLENBQVg7QUFFRixlQUFPLElBQVA7QUFDRCxPQTNCUSxDQTRCVDtBQTVCUztBQTZCVCxNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCLFlBQUksSUFBSSxHQUFHLEtBQUssUUFBTCxFQUFYO0FBRUEsWUFBSSxJQUFKLEVBQ0UsT0FBTyxJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsQ0FBUDtBQUNILE9BbENRLENBbUNUO0FBbkNTO0FBb0NULE1BQUEsUUFBUSxFQUFFLFlBQVc7QUFDbkIsWUFBSSxLQUFLLElBQUwsQ0FBVSxVQUFWLElBQXdCLEtBQUssSUFBTCxDQUFVLFVBQVYsQ0FBcUIsUUFBckIsSUFBaUMsVUFBN0QsRUFDRSxPQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsS0FBSyxJQUFMLENBQVUsVUFBcEIsQ0FBUDtBQUNIO0FBdkNRO0FBWGEsR0FBWCxDQUFmO0FBcURBLEVBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3RCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsWUFBVztBQUNqQixXQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEIsR0FBRyxDQUFDLE1BQUosQ0FBVyxLQUFYLENBQTVCO0FBRUEsV0FBSyxLQUFMLENBQVcsVUFBWCxFQUF1QixTQUF2QjtBQUNELEtBTnFCLENBUXRCO0FBUnNCO0FBU3RCLElBQUEsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQVRTLENBV3RCO0FBWHNCO0FBWXRCLElBQUEsU0FBUyxFQUFFO0FBQ1Q7QUFDQSxNQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCLGVBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsTUFBUixFQUFULENBQVA7QUFDRDtBQUpRO0FBWlcsR0FBWCxDQUFiO0FBbUJBLEVBQUEsR0FBRyxDQUFDLENBQUosR0FBUSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ2pCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsR0FGUyxDQUlqQjtBQUppQjtBQUtqQixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FMSSxDQU9qQjtBQVBpQjtBQVFqQixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxFQUFFLEVBQUUsVUFBUyxHQUFULEVBQWM7QUFDaEIsZUFBTyxLQUFLLElBQUwsQ0FBVSxNQUFWLEVBQWtCLEdBQWxCLEVBQXVCLEdBQUcsQ0FBQyxLQUEzQixDQUFQO0FBQ0QsT0FKSyxDQUtOO0FBTE07QUFNTixNQUFBLElBQUksRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDckIsZUFBTyxLQUFLLElBQUwsQ0FBVSxNQUFWLEVBQWtCLE1BQWxCLEVBQTBCLEdBQUcsQ0FBQyxLQUE5QixDQUFQO0FBQ0QsT0FSSyxDQVNOO0FBVE07QUFVTixNQUFBLE1BQU0sRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDdkIsZUFBTyxLQUFLLElBQUwsQ0FBVSxRQUFWLEVBQW9CLE1BQXBCLENBQVA7QUFDRCxPQVpLLENBZVI7O0FBZlEsS0FSUztBQXdCakIsSUFBQSxTQUFTLEVBQUU7QUFDVDtBQUNBLE1BQUEsSUFBSSxFQUFFLFVBQVMsR0FBVCxFQUFjO0FBQ2xCLGVBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsQ0FBUixFQUFULEVBQW9CLEVBQXBCLENBQXVCLEdBQXZCLENBQVA7QUFDRDtBQUpRO0FBeEJNLEdBQVgsQ0FBUjtBQWdDQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLE9BQWYsRUFBd0I7QUFDdEI7QUFDQSxJQUFBLE1BQU0sRUFBRSxVQUFTLEdBQVQsRUFBYztBQUNwQixVQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFSLEVBQVg7QUFFQSxVQUFJLE9BQU8sR0FBUCxJQUFjLFVBQWxCLEVBQ0UsR0FBRyxDQUFDLElBQUosQ0FBUyxJQUFULEVBQWUsSUFBZixFQURGLEtBR0UsSUFBSSxDQUFDLEVBQUwsQ0FBUSxHQUFSO0FBRUYsYUFBTyxLQUFLLE1BQUwsR0FBYyxHQUFkLENBQWtCLElBQWxCLEVBQXdCLEdBQXhCLENBQTRCLElBQTVCLENBQVA7QUFDRDtBQVhxQixHQUF4QjtBQWNBLEVBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxHQUFHLENBQUMsTUFBSixDQUFXO0FBQ3RCO0FBQ0EsSUFBQSxNQUFNLEVBQUUsUUFGYyxDQUl0QjtBQUpzQjtBQUt0QixJQUFBLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FMUyxDQU90QjtBQVBzQjtBQVF0QixJQUFBLE1BQU0sRUFBRTtBQUNOO0FBQ0EsTUFBQSxLQUFLLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3JCLGVBQU8sS0FBSyxJQUFMLENBQVUsYUFBVixFQUF5QixLQUF6QixDQUFQO0FBQ0QsT0FKSyxDQUtOO0FBTE07QUFNTixNQUFBLE1BQU0sRUFBRSxVQUFTLE1BQVQsRUFBaUI7QUFDdkIsZUFBTyxLQUFLLElBQUwsQ0FBVSxjQUFWLEVBQTBCLE1BQTFCLENBQVA7QUFDRCxPQVJLLENBU047QUFUTTtBQVVOLE1BQUEsR0FBRyxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNsQixlQUFPLEtBQUssSUFBTCxDQUFVLE1BQVYsRUFBa0IsQ0FBbEIsRUFBcUIsSUFBckIsQ0FBMEIsTUFBMUIsRUFBa0MsQ0FBbEMsQ0FBUDtBQUNELE9BWkssQ0FhTjtBQWJNO0FBY04sTUFBQSxNQUFNLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3RCO0FBQ0EsYUFBSyxLQUFMLEdBRnNCLENBSXRCOztBQUNBLFlBQUksT0FBTyxLQUFQLElBQWdCLFVBQXBCLEVBQ0UsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFYLEVBQWlCLElBQWpCO0FBRUYsZUFBTyxJQUFQO0FBQ0QsT0F2QkssQ0F3Qk47QUF4Qk07QUF5Qk4sTUFBQSxRQUFRLEVBQUUsWUFBVztBQUNuQixlQUFPLFVBQVUsS0FBSyxFQUFMLEVBQVYsR0FBc0IsR0FBN0I7QUFDRCxPQTNCSyxDQThCUjs7QUE5QlEsS0FSYztBQXVDdEIsSUFBQSxTQUFTLEVBQUU7QUFDVCxNQUFBLE1BQU0sRUFBRSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0IsS0FBeEIsRUFBK0I7QUFDckM7QUFDQSxlQUFPLEtBQUssSUFBTCxHQUFZLE1BQVosQ0FBbUIsS0FBbkIsRUFBMEIsTUFBMUIsRUFBa0MsS0FBbEMsQ0FBUDtBQUNEO0FBSlE7QUF2Q1csR0FBWCxDQUFiO0FBZ0RBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsSUFBZixFQUFxQjtBQUNuQjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QixLQUF4QixFQUErQjtBQUNyQztBQUNBLGFBQU8sS0FBSyxHQUFMLENBQVMsSUFBSSxHQUFHLENBQUMsTUFBUixFQUFULEVBQ0osSUFESSxDQUNDLEtBREQsRUFDUSxNQURSLEVBRUosR0FGSSxDQUVBLEtBQUssR0FBRyxDQUZSLEVBRVcsTUFBTSxHQUFHLENBRnBCLEVBR0osT0FISSxDQUdJLENBSEosRUFHTyxDQUhQLEVBR1UsS0FIVixFQUdpQixNQUhqQixFQUlKLElBSkksQ0FJQyxRQUpELEVBSVcsTUFKWCxFQUtKLE1BTEksQ0FLRyxLQUxILENBQVA7QUFNRDtBQVZrQixHQUFyQjtBQWNBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsSUFBZixFQUFxQixHQUFHLENBQUMsUUFBekIsRUFBbUMsR0FBRyxDQUFDLE9BQXZDLEVBQWdELEdBQUcsQ0FBQyxJQUFwRCxFQUEwRDtBQUN4RDtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsTUFBVCxFQUFpQixLQUFqQixFQUF3QixNQUF4QixFQUFnQyxLQUFoQyxFQUF1QztBQUM3QyxVQUFJLElBQUksR0FBRyxDQUFDLFFBQUQsQ0FBWCxDQUQ2QyxDQUc3Qzs7QUFDQSxVQUFJLE1BQU0sSUFBSSxLQUFkLEVBQXFCLElBQUksQ0FBQyxJQUFMLENBQVUsTUFBVjtBQUNyQixNQUFBLElBQUksR0FBRyxJQUFJLENBQUMsSUFBTCxDQUFVLEdBQVYsQ0FBUCxDQUw2QyxDQU83Qzs7QUFDQSxNQUFBLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBRCxDQUFULFlBQXdCLEdBQUcsQ0FBQyxNQUE1QixHQUNQLFNBQVMsQ0FBQyxDQUFELENBREYsR0FFUCxLQUFLLEdBQUwsR0FBVyxNQUFYLENBQWtCLEtBQWxCLEVBQXlCLE1BQXpCLEVBQWlDLEtBQWpDLENBRkY7QUFJQSxhQUFPLEtBQUssSUFBTCxDQUFVLElBQVYsRUFBZ0IsTUFBaEIsQ0FBUDtBQUNEO0FBZnVELEdBQTFELEVBbDJINEUsQ0FvM0g1RTs7QUFDQSxNQUFJLEtBQUssR0FBRztBQUNWLElBQUEsTUFBTSxFQUFFLENBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsU0FBbkIsRUFBOEIsU0FBOUIsRUFBeUMsVUFBekMsRUFBcUQsWUFBckQsRUFBbUUsV0FBbkUsRUFBZ0YsWUFBaEYsQ0FERTtBQUVWLElBQUEsSUFBSSxFQUFJLENBQUMsT0FBRCxFQUFVLFNBQVYsRUFBcUIsTUFBckIsQ0FGRTtBQUdWLElBQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNyQixhQUFPLENBQUMsSUFBSSxPQUFMLEdBQWUsQ0FBZixHQUFtQixDQUFDLEdBQUcsR0FBSixHQUFVLENBQXBDO0FBQ0QsS0FMUyxDQVFaOztBQVJZLEdBQVo7QUFTQyxHQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLE9BQW5CLENBQTJCLFVBQVMsQ0FBVCxFQUFZO0FBQ3RDLFFBQUksQ0FBSjtBQUFBLFFBQU8sU0FBUyxHQUFHLEVBQW5COztBQUVBLElBQUEsU0FBUyxDQUFDLENBQUQsQ0FBVCxHQUFlLFVBQVMsQ0FBVCxFQUFZO0FBQ3pCLFVBQUksT0FBTyxDQUFQLElBQVksUUFBWixJQUF3QixHQUFHLENBQUMsS0FBSixDQUFVLEtBQVYsQ0FBZ0IsQ0FBaEIsQ0FBeEIsSUFBK0MsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQVQsS0FBa0IsVUFBMUUsRUFDRSxLQUFLLElBQUwsQ0FBVSxDQUFWLEVBQWEsQ0FBYixFQURGLEtBSUU7QUFDQSxhQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsTUFBVCxHQUFrQixDQUEzQixFQUE4QixDQUFDLElBQUksQ0FBbkMsRUFBc0MsQ0FBQyxFQUF2QyxFQUNFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBUyxDQUFULENBQUQsQ0FBRCxJQUFrQixJQUF0QixFQUNFLEtBQUssSUFBTCxDQUFVLEtBQUssQ0FBQyxNQUFOLENBQWEsQ0FBYixFQUFnQixLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxDQUFoQixDQUFWLEVBQXdDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsQ0FBVCxDQUFELENBQXpDO0FBRU4sYUFBTyxJQUFQO0FBQ0QsS0FYRDs7QUFhQSxJQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLE9BQWYsRUFBd0IsR0FBRyxDQUFDLEVBQTVCLEVBQWdDLFNBQWhDO0FBRUQsR0FsQkE7QUFvQkQsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxPQUFmLEVBQXdCLEdBQUcsQ0FBQyxFQUE1QixFQUFnQztBQUM5QjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0I7QUFDMUIsYUFBTyxLQUFLLFNBQUwsQ0FBZTtBQUFFLFFBQUEsUUFBUSxFQUFFLENBQVo7QUFBZSxRQUFBLEVBQUUsRUFBRSxFQUFuQjtBQUF1QixRQUFBLEVBQUUsRUFBRTtBQUEzQixPQUFmLENBQVA7QUFDRCxLQUo2QixDQUs5QjtBQUw4QjtBQU05QixJQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsRUFBZixFQUFtQixFQUFuQixFQUF1QjtBQUMzQixhQUFPLEtBQUssU0FBTCxDQUFlO0FBQUUsUUFBQSxLQUFLLEVBQUUsQ0FBVDtBQUFZLFFBQUEsS0FBSyxFQUFFLENBQW5CO0FBQXNCLFFBQUEsRUFBRSxFQUFFLEVBQTFCO0FBQThCLFFBQUEsRUFBRSxFQUFFO0FBQWxDLE9BQWYsQ0FBUDtBQUNELEtBUjZCLENBUzlCO0FBVDhCO0FBVTlCLElBQUEsS0FBSyxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxFQUFmLEVBQW1CLEVBQW5CLEVBQXVCO0FBQzVCLGFBQU8sU0FBUyxDQUFDLE1BQVYsSUFBb0IsQ0FBcEIsSUFBMEIsU0FBUyxDQUFDLE1BQVYsSUFBb0IsQ0FBOUMsR0FDTCxLQUFLLFNBQUwsQ0FBZTtBQUFFLFFBQUEsS0FBSyxFQUFFLENBQVQ7QUFBWSxRQUFBLEVBQUUsRUFBRSxDQUFoQjtBQUFtQixRQUFBLEVBQUUsRUFBRTtBQUF2QixPQUFmLENBREssR0FFTCxLQUFLLFNBQUwsQ0FBZTtBQUFFLFFBQUEsTUFBTSxFQUFFLENBQVY7QUFBYSxRQUFBLE1BQU0sRUFBRSxDQUFyQjtBQUF3QixRQUFBLEVBQUUsRUFBRSxFQUE1QjtBQUFnQyxRQUFBLEVBQUUsRUFBRTtBQUFwQyxPQUFmLENBRkY7QUFHRCxLQWQ2QixDQWU5QjtBQWY4QjtBQWdCOUIsSUFBQSxTQUFTLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ3hCLGFBQU8sS0FBSyxTQUFMLENBQWU7QUFBRSxRQUFBLENBQUMsRUFBRSxDQUFMO0FBQVEsUUFBQSxDQUFDLEVBQUU7QUFBWCxPQUFmLENBQVA7QUFDRCxLQWxCNkIsQ0FtQjlCO0FBbkI4QjtBQW9COUIsSUFBQSxJQUFJLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ25CLGFBQU8sS0FBSyxTQUFMLENBQWU7QUFBRSxRQUFBLElBQUksRUFBRSxDQUFSO0FBQVcsUUFBQSxNQUFNLEVBQUU7QUFBbkIsT0FBZixDQUFQO0FBQ0QsS0F0QjZCLENBdUI5QjtBQXZCOEI7QUF3QjlCLElBQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2xCLGFBQU8sS0FBSyxJQUFMLENBQVUsV0FBVixFQUF1QixJQUFJLEdBQUcsQ0FBQyxNQUFSLENBQWUsQ0FBZixDQUF2QixDQUFQO0FBQ0QsS0ExQjZCLENBMkI5QjtBQTNCOEI7QUE0QjlCLElBQUEsT0FBTyxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUN2QixhQUFPLEtBQUssSUFBTCxDQUFVLFNBQVYsRUFBcUIsS0FBckIsQ0FBUDtBQUNELEtBOUI2QixDQStCOUI7QUEvQjhCO0FBZ0M5QixJQUFBLEVBQUUsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNkLGFBQU8sS0FBSyxDQUFMLENBQU8sQ0FBQyxLQUFLLE1BQUwsSUFBZSxJQUFoQixFQUFzQixDQUF0QixLQUE0QixDQUFuQyxDQUFQO0FBQ0QsS0FsQzZCLENBbUM5QjtBQW5DOEI7QUFvQzlCLElBQUEsRUFBRSxFQUFFLFVBQVMsQ0FBVCxFQUFZO0FBQ2QsYUFBTyxLQUFLLENBQUwsQ0FBTyxDQUFDLEtBQUssTUFBTCxJQUFlLElBQWhCLEVBQXNCLENBQXRCLEtBQTRCLENBQW5DLENBQVA7QUFDRCxLQXRDNkIsQ0F1QzlCO0FBdkM4QjtBQXdDOUIsSUFBQSxLQUFLLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ3BCLGFBQU8sS0FBSyxFQUFMLENBQVEsQ0FBUixFQUFXLEVBQVgsQ0FBYyxDQUFkLENBQVA7QUFDRDtBQTFDNkIsR0FBaEM7QUE2Q0EsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxJQUFmLEVBQXFCLEdBQUcsQ0FBQyxPQUF6QixFQUFrQyxHQUFHLENBQUMsTUFBdEMsRUFBOEMsR0FBRyxDQUFDLFFBQWxELEVBQTRELEdBQUcsQ0FBQyxFQUFoRSxFQUFvRTtBQUNsRTtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNyQixVQUFJLElBQUksR0FBRyxDQUFDLEtBQUssTUFBTCxJQUFlLElBQWhCLEVBQXNCLElBQWpDO0FBQ0EsYUFBTyxJQUFJLElBQUksUUFBUixJQUFvQixJQUFJLElBQUksUUFBNUIsR0FDTCxLQUFLLElBQUwsQ0FBVTtBQUFFLGFBQUssSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLENBQWY7QUFBUCxPQUFWLENBREssR0FFTCxLQUFLLEVBQUwsQ0FBUSxDQUFSLEVBQVcsRUFBWCxDQUFjLENBQUMsSUFBSSxJQUFMLEdBQVksQ0FBWixHQUFnQixDQUE5QixDQUZGO0FBR0Q7QUFQaUUsR0FBcEU7QUFVQSxFQUFBLEdBQUcsQ0FBQyxNQUFKLENBQVcsR0FBRyxDQUFDLElBQWYsRUFBcUI7QUFDbkI7QUFDQSxJQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCLGFBQU8sS0FBSyxJQUFMLENBQVUsY0FBVixFQUFQO0FBQ0QsS0FKa0IsQ0FLbkI7QUFMbUI7QUFNbkIsSUFBQSxPQUFPLEVBQUUsVUFBUyxNQUFULEVBQWlCO0FBQ3hCLGFBQU8sS0FBSyxJQUFMLENBQVUsZ0JBQVYsQ0FBMkIsTUFBM0IsQ0FBUDtBQUNEO0FBUmtCLEdBQXJCO0FBV0EsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxNQUFmLEVBQXVCLEdBQUcsQ0FBQyxJQUEzQixFQUFpQyxHQUFHLENBQUMsRUFBckMsRUFBeUM7QUFDdkM7QUFDQSxJQUFBLElBQUksRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNoQixXQUFLLElBQUksQ0FBVCxJQUFjLENBQWQsRUFDRSxDQUFDLElBQUksU0FBTCxHQUNFLEtBQUssT0FBTCxDQUFhLENBQUMsQ0FBQyxDQUFELENBQWQsQ0FERixHQUVBLENBQUMsSUFBSSxRQUFMLEdBQ0UsS0FBSyxJQUFMLENBQVUsYUFBVixFQUF5QixDQUFDLENBQUMsQ0FBRCxDQUExQixDQURGLEdBRUEsQ0FBQyxJQUFJLE1BQUwsSUFBZSxDQUFDLElBQUksUUFBcEIsSUFBZ0MsQ0FBQyxJQUFJLFFBQXJDLElBQWlELENBQUMsSUFBSSxTQUF0RCxJQUFtRSxDQUFDLElBQUksU0FBeEUsSUFBcUYsQ0FBQyxJQUFJLE9BQTFGLEdBQ0UsS0FBSyxJQUFMLENBQVUsVUFBUyxDQUFuQixFQUFzQixDQUFDLENBQUMsQ0FBRCxDQUF2QixDQURGLEdBRUUsS0FBSyxJQUFMLENBQVUsQ0FBVixFQUFhLENBQUMsQ0FBQyxDQUFELENBQWQsQ0FORjs7QUFRRixhQUFPLElBQVA7QUFDRDtBQWJzQyxHQUF6QztBQWlCQSxFQUFBLEdBQUcsQ0FBQyxHQUFKLEdBQVUsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUNuQjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUN4QjtBQUNBLE1BQUEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxPQUFkLElBQXlCLEtBQUssT0FBTCxHQUFlLE9BQXhDLEdBQWtELEtBQUssS0FBTCxFQUFsRDtBQUNELEtBTGtCLENBT25CO0FBUG1CO0FBUW5CLElBQUEsTUFBTSxFQUFFO0FBQ047QUFDQSxNQUFBLEdBQUcsRUFBRSxZQUFXO0FBQ2QsWUFBSSxDQUFKO0FBQUEsWUFBTyxFQUFQO0FBQUEsWUFBVyxRQUFRLEdBQUcsR0FBRyxLQUFILENBQVMsSUFBVCxDQUFjLFNBQWQsQ0FBdEI7O0FBRUEsYUFBSyxDQUFDLEdBQUcsQ0FBSixFQUFPLEVBQUUsR0FBRyxRQUFRLENBQUMsTUFBMUIsRUFBa0MsQ0FBQyxHQUFHLEVBQXRDLEVBQTBDLENBQUMsRUFBM0MsRUFDRSxLQUFLLE9BQUwsQ0FBYSxJQUFiLENBQWtCLFFBQVEsQ0FBQyxDQUFELENBQTFCOztBQUVGLGVBQU8sSUFBUDtBQUNELE9BVEssQ0FVTjtBQVZNO0FBV04sTUFBQSxNQUFNLEVBQUUsVUFBUyxPQUFULEVBQWtCO0FBQ3hCLFlBQUksQ0FBQyxHQUFHLEtBQUssS0FBTCxDQUFXLE9BQVgsQ0FBUixDQUR3QixDQUd4Qjs7QUFDQSxZQUFJLENBQUMsR0FBRyxDQUFDLENBQVQsRUFDRSxLQUFLLE9BQUwsQ0FBYSxNQUFiLENBQW9CLENBQXBCLEVBQXVCLENBQXZCO0FBRUYsZUFBTyxJQUFQO0FBQ0QsT0FuQkssQ0FvQk47QUFwQk07QUFxQk4sTUFBQSxJQUFJLEVBQUUsVUFBUyxLQUFULEVBQWdCO0FBQ3BCLGFBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLEVBQUUsR0FBRyxLQUFLLE9BQUwsQ0FBYSxNQUFsQyxFQUEwQyxDQUFDLEdBQUcsRUFBOUMsRUFBa0QsQ0FBQyxFQUFuRCxFQUNFLEtBQUssQ0FBQyxLQUFOLENBQVksS0FBSyxPQUFMLENBQWEsQ0FBYixDQUFaLEVBQTZCLENBQUMsQ0FBRCxFQUFJLEtBQUssT0FBVCxDQUE3Qjs7QUFFRixlQUFPLElBQVA7QUFDRCxPQTFCSyxDQTJCTjtBQTNCTTtBQTRCTixNQUFBLEtBQUssRUFBRSxZQUFXO0FBQ2hCO0FBQ0EsYUFBSyxPQUFMLEdBQWUsRUFBZjtBQUVBLGVBQU8sSUFBUDtBQUNELE9BakNLLENBa0NOO0FBbENNO0FBbUNOLE1BQUEsTUFBTSxFQUFFLFlBQVc7QUFDakIsZUFBTyxLQUFLLE9BQUwsQ0FBYSxNQUFwQjtBQUNELE9BckNLLENBc0NOO0FBdENNO0FBdUNOLE1BQUEsR0FBRyxFQUFFLFVBQVMsT0FBVCxFQUFrQjtBQUNyQixlQUFPLEtBQUssS0FBTCxDQUFXLE9BQVgsS0FBdUIsQ0FBOUI7QUFDRCxPQXpDSyxDQTBDTjtBQTFDTTtBQTJDTixNQUFBLEtBQUssRUFBRSxVQUFTLE9BQVQsRUFBa0I7QUFDdkIsZUFBTyxLQUFLLE9BQUwsQ0FBYSxPQUFiLENBQXFCLE9BQXJCLENBQVA7QUFDRCxPQTdDSyxDQThDTjtBQTlDTTtBQStDTixNQUFBLEdBQUcsRUFBRSxVQUFTLENBQVQsRUFBWTtBQUNmLGVBQU8sS0FBSyxPQUFMLENBQWEsQ0FBYixDQUFQO0FBQ0QsT0FqREssQ0FrRE47QUFsRE07QUFtRE4sTUFBQSxLQUFLLEVBQUUsWUFBVztBQUNoQixlQUFPLEtBQUssR0FBTCxDQUFTLENBQVQsQ0FBUDtBQUNELE9BckRLLENBc0ROO0FBdERNO0FBdUROLE1BQUEsSUFBSSxFQUFFLFlBQVc7QUFDZixlQUFPLEtBQUssR0FBTCxDQUFTLEtBQUssT0FBTCxDQUFhLE1BQWIsR0FBc0IsQ0FBL0IsQ0FBUDtBQUNELE9BekRLLENBMEROO0FBMURNO0FBMkROLE1BQUEsT0FBTyxFQUFFLFlBQVc7QUFDbEIsZUFBTyxLQUFLLE9BQVo7QUFDRCxPQTdESyxDQThETjtBQTlETTtBQStETixNQUFBLElBQUksRUFBRSxZQUFVO0FBQ2QsWUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBUixFQUFWLENBRGMsQ0FHZDs7QUFDQSxZQUFJLEtBQUssT0FBTCxDQUFhLE1BQWIsSUFBdUIsQ0FBM0IsRUFDRSxPQUFPLEdBQVAsQ0FMWSxDQU9kOztBQUNBLFlBQUksSUFBSSxHQUFHLEtBQUssT0FBTCxDQUFhLENBQWIsRUFBZ0IsSUFBaEIsRUFBWDtBQUNBLFFBQUEsR0FBRyxDQUFDLENBQUosR0FBYSxJQUFJLENBQUMsQ0FBbEI7QUFDQSxRQUFBLEdBQUcsQ0FBQyxDQUFKLEdBQWEsSUFBSSxDQUFDLENBQWxCO0FBQ0EsUUFBQSxHQUFHLENBQUMsS0FBSixHQUFhLElBQUksQ0FBQyxLQUFsQjtBQUNBLFFBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxJQUFJLENBQUMsTUFBbEI7QUFFQSxhQUFLLElBQUwsQ0FBVSxZQUFXO0FBQ25CO0FBQ0EsVUFBQSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUosQ0FBVSxLQUFLLElBQUwsRUFBVixDQUFOO0FBQ0QsU0FIRDtBQUtBLGVBQU8sR0FBUDtBQUNELE9BbkZLLENBc0ZSOztBQXRGUSxLQVJXO0FBK0ZuQixJQUFBLFNBQVMsRUFBRTtBQUNUO0FBQ0EsTUFBQSxHQUFHLEVBQUUsVUFBUyxPQUFULEVBQWtCO0FBQ3JCLGVBQU8sSUFBSSxHQUFHLENBQUMsR0FBUixDQUFZLE9BQVosQ0FBUDtBQUNEO0FBSlE7QUEvRlEsR0FBWCxDQUFWO0FBdUdBLEVBQUEsR0FBRyxDQUFDLEVBQUosQ0FBTyxHQUFQLEdBQWEsR0FBRyxDQUFDLE1BQUosQ0FBVztBQUN0QjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsR0FBVCxFQUFjO0FBQ3BCO0FBQ0EsV0FBSyxHQUFMLEdBQVcsR0FBWDtBQUNEO0FBTHFCLEdBQVgsQ0FBYixDQTVrSTRFLENBcWxJNUU7O0FBQ0EsRUFBQSxHQUFHLENBQUMsR0FBSixDQUFRLE9BQVIsR0FBa0IsWUFBVztBQUMzQixRQUFJLENBQUo7QUFBQSxRQUNJLE9BQU8sR0FBRyxFQURkLENBRDJCLENBSTNCOztBQUNBLFNBQUksSUFBSSxDQUFSLElBQWEsR0FBRyxDQUFDLEtBQUosQ0FBVSxTQUF2QixFQUNFLElBQUksT0FBTyxHQUFHLENBQUMsS0FBSixDQUFVLFNBQVYsQ0FBb0IsQ0FBcEIsQ0FBUCxJQUFpQyxVQUFqQyxJQUErQyxPQUFPLEdBQUcsQ0FBQyxHQUFKLENBQVEsU0FBUixDQUFrQixDQUFsQixDQUFQLElBQStCLFVBQWxGLEVBQ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFiLEVBUHVCLENBUzNCOzs7QUFDQSxJQUFBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFVBQVMsTUFBVCxFQUFpQjtBQUMvQixNQUFBLEdBQUcsQ0FBQyxHQUFKLENBQVEsU0FBUixDQUFrQixNQUFsQixJQUE0QixZQUFXO0FBQ3JDLGFBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLEVBQUUsR0FBRyxLQUFLLE9BQUwsQ0FBYSxNQUFsQyxFQUEwQyxDQUFDLEdBQUcsRUFBOUMsRUFBa0QsQ0FBQyxFQUFuRCxFQUNFLElBQUksS0FBSyxPQUFMLENBQWEsQ0FBYixLQUFtQixPQUFPLEtBQUssT0FBTCxDQUFhLENBQWIsRUFBZ0IsTUFBaEIsQ0FBUCxJQUFrQyxVQUF6RCxFQUNFLEtBQUssT0FBTCxDQUFhLENBQWIsRUFBZ0IsTUFBaEIsRUFBd0IsS0FBeEIsQ0FBOEIsS0FBSyxPQUFMLENBQWEsQ0FBYixDQUE5QixFQUErQyxTQUEvQzs7QUFFSixlQUFPLE1BQU0sSUFBSSxTQUFWLEdBQXVCLEtBQUssRUFBTCxLQUFZLEtBQUssRUFBTCxHQUFVLElBQUksR0FBRyxDQUFDLEVBQUosQ0FBTyxHQUFYLENBQWUsSUFBZixDQUF0QixDQUF2QixHQUFzRSxJQUE3RTtBQUNELE9BTkQ7QUFPRCxLQVJELEVBVjJCLENBb0IzQjs7QUFDQSxJQUFBLE9BQU8sR0FBRyxFQUFWLENBckIyQixDQXVCM0I7O0FBQ0EsU0FBSSxJQUFJLENBQVIsSUFBYSxHQUFHLENBQUMsRUFBSixDQUFPLFNBQXBCLEVBQ0UsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFKLENBQU8sU0FBUCxDQUFpQixDQUFqQixDQUFQLElBQThCLFVBQTlCLElBQTRDLE9BQU8sR0FBRyxDQUFDLEVBQUosQ0FBTyxHQUFQLENBQVcsU0FBWCxDQUFxQixDQUFyQixDQUFQLElBQWtDLFVBQWxGLEVBQ0UsT0FBTyxDQUFDLElBQVIsQ0FBYSxDQUFiLEVBMUJ1QixDQTRCM0I7OztBQUNBLElBQUEsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsVUFBUyxNQUFULEVBQWlCO0FBQy9CLE1BQUEsR0FBRyxDQUFDLEVBQUosQ0FBTyxHQUFQLENBQVcsU0FBWCxDQUFxQixNQUFyQixJQUErQixZQUFXO0FBQ3hDLGFBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLEVBQUUsR0FBRyxLQUFLLEdBQUwsQ0FBUyxPQUFULENBQWlCLE1BQXRDLEVBQThDLENBQUMsR0FBRyxFQUFsRCxFQUFzRCxDQUFDLEVBQXZELEVBQ0UsS0FBSyxHQUFMLENBQVMsT0FBVCxDQUFpQixDQUFqQixFQUFvQixFQUFwQixDQUF1QixNQUF2QixFQUErQixLQUEvQixDQUFxQyxLQUFLLEdBQUwsQ0FBUyxPQUFULENBQWlCLENBQWpCLEVBQW9CLEVBQXpELEVBQTZELFNBQTdEOztBQUVGLGVBQU8sSUFBUDtBQUNELE9BTEQ7QUFNRCxLQVBEO0FBUUQsR0FyQ0Q7O0FBMENBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsT0FBZixFQUF3QjtBQUN0QjtBQUNBLElBQUEsSUFBSSxFQUFFLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCO0FBQ3RCLFVBQUksT0FBTyxDQUFQLElBQVksUUFBaEIsRUFBMEI7QUFDeEIsYUFBSyxDQUFMLElBQVUsQ0FBVixFQUNFLEtBQUssSUFBTCxDQUFVLENBQVYsRUFBYSxDQUFDLENBQUMsQ0FBRCxDQUFkO0FBRUgsT0FKRCxNQUlPLElBQUksU0FBUyxDQUFDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDL0IsWUFBSTtBQUNGLGlCQUFPLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBSyxJQUFMLENBQVUsVUFBVSxDQUFwQixDQUFYLENBQVA7QUFDRCxTQUZELENBRUUsT0FBTSxDQUFOLEVBQVM7QUFDVCxpQkFBTyxLQUFLLElBQUwsQ0FBVSxVQUFVLENBQXBCLENBQVA7QUFDRDtBQUVGLE9BUE0sTUFPQTtBQUNMLGFBQUssSUFBTCxDQUNFLFVBQVUsQ0FEWixFQUVFLENBQUMsS0FBSyxJQUFOLEdBQ0UsSUFERixHQUVBLENBQUMsS0FBSyxJQUFOLElBQWMsT0FBTyxDQUFQLEtBQWEsUUFBM0IsSUFBdUMsT0FBTyxDQUFQLEtBQWEsUUFBcEQsR0FDRSxDQURGLEdBRUUsSUFBSSxDQUFDLFNBQUwsQ0FBZSxDQUFmLENBTko7QUFRRDs7QUFFRCxhQUFPLElBQVA7QUFDRDtBQTFCcUIsR0FBeEI7QUE0QkEsRUFBQSxHQUFHLENBQUMsTUFBSixDQUFXLEdBQUcsQ0FBQyxPQUFmLEVBQXdCO0FBQ3RCO0FBQ0EsSUFBQSxRQUFRLEVBQUUsVUFBUyxDQUFULEVBQVksQ0FBWixFQUFlO0FBQ3ZCO0FBQ0EsVUFBSSxPQUFPLFNBQVMsQ0FBQyxDQUFELENBQWhCLElBQXVCLFFBQTNCLEVBQ0UsS0FBSyxJQUFJLENBQVQsSUFBYyxDQUFkLEVBQ0UsS0FBSyxRQUFMLENBQWMsQ0FBZCxFQUFpQixDQUFDLENBQUMsQ0FBRCxDQUFsQixFQUZKLENBSUE7QUFKQSxXQUtLLElBQUksU0FBUyxDQUFDLE1BQVYsSUFBb0IsQ0FBeEIsRUFDSCxPQUFPLEtBQUssTUFBTCxHQUFjLENBQWQsQ0FBUCxDQURHLENBR0w7QUFISyxhQUtILEtBQUssTUFBTCxHQUFjLENBQWQsSUFBbUIsQ0FBbkI7QUFFRixhQUFPLElBQVA7QUFDRCxLQWpCcUIsQ0FtQnRCO0FBbkJzQjtBQW9CdEIsSUFBQSxNQUFNLEVBQUUsWUFBVztBQUNqQixVQUFJLFNBQVMsQ0FBQyxNQUFWLElBQW9CLENBQXhCLEVBQ0UsS0FBSyxPQUFMLEdBQWUsRUFBZixDQURGLEtBR0UsS0FBSyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBVixHQUFtQixDQUFoQyxFQUFtQyxDQUFDLElBQUksQ0FBeEMsRUFBMkMsQ0FBQyxFQUE1QyxFQUNFLE9BQU8sS0FBSyxNQUFMLEdBQWMsU0FBUyxDQUFDLENBQUQsQ0FBdkIsQ0FBUDtBQUVKLGFBQU8sSUFBUDtBQUNELEtBNUJxQixDQThCdEI7QUE5QnNCO0FBK0J0QixJQUFBLE1BQU0sRUFBRSxZQUFXO0FBQ2pCLGFBQU8sS0FBSyxPQUFMLEtBQWlCLEtBQUssT0FBTCxHQUFlLEVBQWhDLENBQVA7QUFDRDtBQWpDcUIsR0FBeEIsRUE1cEk0RSxDQWdzSTVFOztBQUNBLEVBQUEsR0FBRyxDQUFDLEdBQUosR0FBVSxVQUFTLEVBQVQsRUFBYTtBQUNyQixRQUFJLElBQUksR0FBRyxRQUFRLENBQUMsY0FBVCxDQUF3QixlQUFlLENBQUMsRUFBRCxDQUFmLElBQXVCLEVBQS9DLENBQVg7QUFDQSxXQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBVixDQUFQO0FBQ0QsR0FIRCxDQWpzSTRFLENBc3NJNUU7OztBQUNBLEVBQUEsR0FBRyxDQUFDLE1BQUosR0FBYSxVQUFTLEtBQVQsRUFBZ0IsTUFBaEIsRUFBd0I7QUFDbkMsV0FBTyxJQUFJLEdBQUcsQ0FBQyxHQUFSLENBQ0wsR0FBRyxDQUFDLEtBQUosQ0FBVSxHQUFWLENBQWMsQ0FBQyxNQUFNLElBQUksUUFBWCxFQUFxQixnQkFBckIsQ0FBc0MsS0FBdEMsQ0FBZCxFQUE0RCxVQUFTLElBQVQsRUFBZTtBQUN6RSxhQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBVixDQUFQO0FBQ0QsS0FGRCxDQURLLENBQVA7QUFLRCxHQU5EOztBQVFBLEVBQUEsR0FBRyxDQUFDLE1BQUosQ0FBVyxHQUFHLENBQUMsTUFBZixFQUF1QjtBQUNyQjtBQUNBLElBQUEsTUFBTSxFQUFFLFVBQVMsS0FBVCxFQUFnQjtBQUN0QixhQUFPLEdBQUcsQ0FBQyxNQUFKLENBQVcsS0FBWCxFQUFrQixLQUFLLElBQXZCLENBQVA7QUFDRDtBQUpvQixHQUF2QixFQS9zSTRFLENBc3RJNUU7O0FBQ0EsV0FBUyxPQUFULENBQWlCLEVBQWpCLEVBQXFCLFFBQXJCLEVBQStCO0FBQzdCLFdBQU8sQ0FBQyxFQUFFLENBQUMsT0FBSCxJQUFjLEVBQUUsQ0FBQyxlQUFqQixJQUFvQyxFQUFFLENBQUMsaUJBQXZDLElBQTRELEVBQUUsQ0FBQyxrQkFBL0QsSUFBcUYsRUFBRSxDQUFDLHFCQUF4RixJQUFpSCxFQUFFLENBQUMsZ0JBQXJILEVBQXVJLElBQXZJLENBQTRJLEVBQTVJLEVBQWdKLFFBQWhKLENBQVA7QUFDRCxHQXp0STJFLENBMnRJNUU7OztBQUNBLFdBQVMsU0FBVCxDQUFtQixDQUFuQixFQUFzQjtBQUNwQixXQUFPLENBQUMsQ0FBQyxXQUFGLEdBQWdCLE9BQWhCLENBQXdCLE9BQXhCLEVBQWlDLFVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZTtBQUNyRCxhQUFPLENBQUMsQ0FBQyxXQUFGLEVBQVA7QUFDRCxLQUZNLENBQVA7QUFHRCxHQWh1STJFLENBa3VJNUU7OztBQUNBLFdBQVMsVUFBVCxDQUFvQixDQUFwQixFQUF1QjtBQUNyQixXQUFPLENBQUMsQ0FBQyxNQUFGLENBQVMsQ0FBVCxFQUFZLFdBQVosS0FBNEIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFSLENBQW5DO0FBQ0QsR0FydUkyRSxDQXV1STVFOzs7QUFDQSxXQUFTLE9BQVQsQ0FBaUIsR0FBakIsRUFBc0I7QUFDcEIsV0FBTyxHQUFHLENBQUMsTUFBSixJQUFjLENBQWQsR0FDTCxDQUFFLEdBQUYsRUFDRSxHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FERixFQUN1QixHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FEdkIsRUFFRSxHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FGRixFQUV1QixHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FGdkIsRUFHRSxHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FIRixFQUd1QixHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsQ0FBakIsQ0FIdkIsRUFJRSxJQUpGLENBSU8sRUFKUCxDQURLLEdBS1EsR0FMZjtBQU1ELEdBL3VJMkUsQ0Fpdkk1RTs7O0FBQ0EsV0FBUyxTQUFULENBQW1CLElBQW5CLEVBQXlCO0FBQ3ZCLFFBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFMLENBQWMsRUFBZCxDQUFWO0FBQ0EsV0FBTyxHQUFHLENBQUMsTUFBSixJQUFjLENBQWQsR0FBa0IsTUFBTSxHQUF4QixHQUE4QixHQUFyQztBQUNELEdBcnZJMkUsQ0F1dkk1RTs7O0FBQ0EsV0FBUyxnQkFBVCxDQUEwQixHQUExQixFQUErQixLQUEvQixFQUFzQyxNQUF0QyxFQUE4QztBQUM1QyxRQUFJLE1BQU0sSUFBSSxJQUFkLEVBQ0UsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFKLEdBQWEsR0FBRyxDQUFDLEtBQWpCLEdBQXlCLEtBQWxDLENBREYsS0FFSyxJQUFJLEtBQUssSUFBSSxJQUFiLEVBQ0gsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFKLEdBQVksR0FBRyxDQUFDLE1BQWhCLEdBQXlCLE1BQWpDO0FBRUYsV0FBTztBQUNMLE1BQUEsS0FBSyxFQUFHLEtBREg7QUFFTCxNQUFBLE1BQU0sRUFBRTtBQUZILEtBQVA7QUFJRCxHQWx3STJFLENBb3dJNUU7OztBQUNBLFdBQVMsbUJBQVQsQ0FBNkIsTUFBN0IsRUFBcUMsQ0FBckMsRUFBd0MsQ0FBeEMsRUFBMkM7QUFDekMsV0FBTztBQUNMLE1BQUEsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBWCxHQUFlLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBMUIsR0FBOEIsQ0FENUI7QUFFTCxNQUFBLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQVgsR0FBZSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQTFCLEdBQThCO0FBRjVCLEtBQVA7QUFJRCxHQTF3STJFLENBNHdJNUU7OztBQUNBLFdBQVMsYUFBVCxDQUF1QixDQUF2QixFQUEwQjtBQUN4QixXQUFPO0FBQUUsTUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUQsQ0FBTjtBQUFXLE1BQUEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFELENBQWY7QUFBb0IsTUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUQsQ0FBeEI7QUFBNkIsTUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUQsQ0FBakM7QUFBc0MsTUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUQsQ0FBMUM7QUFBK0MsTUFBQSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUQ7QUFBbkQsS0FBUDtBQUNELEdBL3dJMkUsQ0FpeEk1RTs7O0FBQ0EsV0FBUyxXQUFULENBQXFCLE1BQXJCLEVBQTZCO0FBQzNCLFFBQUksRUFBRSxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQXhCLENBQUosRUFDRSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBUixDQUFlLE1BQWYsQ0FBVDtBQUVGLFdBQU8sTUFBUDtBQUNELEdBdnhJMkUsQ0F5eEk1RTs7O0FBQ0EsV0FBUyxZQUFULENBQXNCLENBQXRCLEVBQXlCLE1BQXpCLEVBQWlDO0FBQy9CLElBQUEsQ0FBQyxDQUFDLEVBQUYsR0FBTyxDQUFDLENBQUMsRUFBRixJQUFRLElBQVIsR0FBZSxNQUFNLENBQUMsSUFBUCxHQUFjLEVBQTdCLEdBQWtDLENBQUMsQ0FBQyxFQUEzQztBQUNBLElBQUEsQ0FBQyxDQUFDLEVBQUYsR0FBTyxDQUFDLENBQUMsRUFBRixJQUFRLElBQVIsR0FBZSxNQUFNLENBQUMsSUFBUCxHQUFjLEVBQTdCLEdBQWtDLENBQUMsQ0FBQyxFQUEzQztBQUNELEdBN3hJMkUsQ0EreEk1RTs7O0FBQ0EsV0FBUyxjQUFULENBQXdCLE1BQXhCLEVBQWdDO0FBQzlCO0FBQ0EsSUFBQSxNQUFNLEdBQUcsTUFBTSxDQUNaLE9BRE0sQ0FDRSxHQUFHLENBQUMsS0FBSixDQUFVLFVBRFosRUFDd0IsRUFEeEIsRUFFTixPQUZNLENBRUUsR0FBRyxDQUFDLEtBQUosQ0FBVSxNQUZaLEVBRW9CLEVBRnBCLEVBR04sS0FITSxDQUdBLEdBQUcsQ0FBQyxLQUFKLENBQVUsY0FIVixDQUFULENBRjhCLENBTzlCOztBQUNBLFdBQU8sYUFBYSxDQUNsQixHQUFHLENBQUMsS0FBSixDQUFVLEdBQVYsQ0FBYyxNQUFkLEVBQXNCLFVBQVMsQ0FBVCxFQUFZO0FBQ2hDLGFBQU8sVUFBVSxDQUFDLENBQUQsQ0FBakI7QUFDRCxLQUZELENBRGtCLENBQXBCO0FBS0QsR0E3eUkyRSxDQSt5STVFOzs7QUFDQSxXQUFTLEVBQVQsQ0FBWSxDQUFaLEVBQWUsR0FBZixFQUFvQjtBQUNsQjtBQUNBLFdBQU8sT0FBTyxDQUFDLENBQUMsSUFBVCxJQUFpQixRQUFqQixHQUNMLENBQUMsQ0FBQyxJQUFGLEdBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRixHQUFPLENBQUMsQ0FBQyxJQUFWLElBQWtCLEdBRHRCLEdBR1A7QUFDQSxJQUFBLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBakIsSUFBMEIsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxNQUEzQyxJQUFxRCxDQUFDLFlBQVksR0FBRyxDQUFDLE1BQXRFLEdBQStFLENBQUMsQ0FBQyxFQUFGLENBQUssR0FBTCxDQUEvRSxHQUVBO0FBQ0EsSUFBQSxHQUFHLEdBQUcsQ0FBTixHQUFVLENBQUMsQ0FBQyxJQUFaLEdBQW1CLENBQUMsQ0FBQyxFQVByQjtBQVFELEdBMXpJMkUsQ0E0ekk1RTs7O0FBQ0EsV0FBUyxhQUFULENBQXVCLENBQXZCLEVBQTBCO0FBQ3hCLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBbEIsRUFBMEIsQ0FBQyxHQUFHLEVBQW5DLEVBQXVDLENBQUMsR0FBRyxFQUEzQyxFQUErQyxDQUFDLEVBQWhELEVBQW9EO0FBQ2xELE1BQUEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxDQUFMLENBQUw7O0FBRUEsVUFBSSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUssQ0FBTCxLQUFXLElBQWYsRUFBcUI7QUFDbkIsUUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLLENBQUwsQ0FBTDs7QUFFQSxZQUFJLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxDQUFMLEtBQVcsSUFBZixFQUFxQjtBQUNuQixVQUFBLENBQUMsSUFBSSxHQUFMO0FBQ0EsVUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLLENBQUwsQ0FBTDs7QUFFQSxjQUFJLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxDQUFMLEtBQVcsSUFBZixFQUFxQjtBQUNuQixZQUFBLENBQUMsSUFBSSxHQUFMO0FBQ0EsWUFBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLLENBQUwsQ0FBTDtBQUNBLFlBQUEsQ0FBQyxJQUFJLEdBQUw7QUFDQSxZQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUssQ0FBTCxDQUFMOztBQUVBLGdCQUFJLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxDQUFMLEtBQVcsSUFBZixFQUFxQjtBQUNuQixjQUFBLENBQUMsSUFBSSxHQUFMO0FBQ0EsY0FBQSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFLLENBQUwsQ0FBTDtBQUNBLGNBQUEsQ0FBQyxJQUFJLEdBQUw7QUFDQSxjQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUssQ0FBTCxDQUFMOztBQUVBLGtCQUFJLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBSyxDQUFMLEtBQVcsSUFBZixFQUFxQjtBQUNuQixnQkFBQSxDQUFDLElBQUksR0FBTDtBQUNBLGdCQUFBLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUssQ0FBTCxDQUFMO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRjtBQUNGOztBQUVELFdBQU8sQ0FBQyxHQUFHLEdBQVg7QUFDRCxHQS8xSTJFLENBaTJJNUU7OztBQUNBLFdBQVMsV0FBVCxDQUFxQixJQUFyQixFQUEyQjtBQUN6QjtBQUNBLFNBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsTUFBaEIsR0FBeUIsQ0FBdEMsRUFBeUMsQ0FBQyxJQUFJLENBQTlDLEVBQWlELENBQUMsRUFBbEQsRUFDRSxJQUFJLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLGFBQThCLFVBQWxDLEVBQ0UsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLENBQUQsQ0FBWDs7QUFFSixXQUFPLEdBQUcsQ0FBQyxLQUFKLENBQVUsSUFBVixFQUFnQixFQUFoQixDQUFtQixHQUFHLENBQUMsR0FBSixDQUFRLElBQUksQ0FBQyxRQUFiLENBQW5CLENBQVA7QUFDRCxHQXoySTJFLENBMjJJNUU7OztBQUNBLFdBQVMsT0FBVCxDQUFpQixDQUFqQixFQUFvQjtBQUNsQixRQUFJLENBQUMsQ0FBQyxDQUFGLElBQU8sSUFBWCxFQUFpQjtBQUNmLE1BQUEsQ0FBQyxDQUFDLENBQUYsR0FBVyxDQUFYO0FBQ0EsTUFBQSxDQUFDLENBQUMsQ0FBRixHQUFXLENBQVg7QUFDQSxNQUFBLENBQUMsQ0FBQyxLQUFGLEdBQVcsQ0FBWDtBQUNBLE1BQUEsQ0FBQyxDQUFDLE1BQUYsR0FBVyxDQUFYO0FBQ0Q7O0FBRUQsSUFBQSxDQUFDLENBQUMsQ0FBRixHQUFPLENBQUMsQ0FBQyxLQUFUO0FBQ0EsSUFBQSxDQUFDLENBQUMsQ0FBRixHQUFPLENBQUMsQ0FBQyxNQUFUO0FBQ0EsSUFBQSxDQUFDLENBQUMsRUFBRixHQUFPLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDLEtBQWY7QUFDQSxJQUFBLENBQUMsQ0FBQyxFQUFGLEdBQU8sQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFDLENBQUMsTUFBZjtBQUNBLElBQUEsQ0FBQyxDQUFDLEVBQUYsR0FBTyxDQUFDLENBQUMsQ0FBRixHQUFNLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBdkI7QUFDQSxJQUFBLENBQUMsQ0FBQyxFQUFGLEdBQU8sQ0FBQyxDQUFDLENBQUYsR0FBTSxDQUFDLENBQUMsTUFBRixHQUFXLENBQXhCO0FBRUEsV0FBTyxDQUFQO0FBQ0QsR0E1M0kyRSxDQTgzSTVFOzs7QUFDQSxXQUFTLGVBQVQsQ0FBeUIsR0FBekIsRUFBOEI7QUFDNUIsUUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQUosR0FBZSxLQUFmLENBQXFCLEdBQUcsQ0FBQyxLQUFKLENBQVUsU0FBL0IsQ0FBUjtBQUVBLFFBQUksQ0FBSixFQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUQsQ0FBUjtBQUNSLEdBbjRJMkUsQ0FxNEk1RTs7O0FBQ0EsTUFBSSxNQUFNLEdBQUcsU0FBUyxLQUFULENBQWUsRUFBZixDQUFiLENBdDRJNEUsQ0F1NEk1RTs7QUFDQSxNQUFJLE9BQU8sV0FBUCxLQUF1QixVQUEzQixFQUF1QztBQUNyQztBQUNBLFFBQUksV0FBVyxHQUFHLFVBQVMsS0FBVCxFQUFnQixPQUFoQixFQUF5QjtBQUN6QyxNQUFBLE9BQU8sR0FBRyxPQUFPLElBQUk7QUFBRSxRQUFBLE9BQU8sRUFBRSxLQUFYO0FBQWtCLFFBQUEsVUFBVSxFQUFFLEtBQTlCO0FBQXFDLFFBQUEsTUFBTSxFQUFFO0FBQTdDLE9BQXJCO0FBQ0EsVUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLFdBQVQsQ0FBcUIsYUFBckIsQ0FBUjtBQUNBLE1BQUEsQ0FBQyxDQUFDLGVBQUYsQ0FBa0IsS0FBbEIsRUFBeUIsT0FBTyxDQUFDLE9BQWpDLEVBQTBDLE9BQU8sQ0FBQyxVQUFsRCxFQUE4RCxPQUFPLENBQUMsTUFBdEU7QUFDQSxhQUFPLENBQVA7QUFDRCxLQUxEOztBQU9BLElBQUEsV0FBVyxDQUFDLFNBQVosR0FBd0IsTUFBTSxDQUFDLEtBQVAsQ0FBYSxTQUFyQztBQUVBLElBQUEsTUFBTSxDQUFDLFdBQVAsR0FBcUIsV0FBckI7QUFDRCxHQXA1STJFLENBczVJNUU7OztBQUNDLGFBQVMsQ0FBVCxFQUFZO0FBQ1gsUUFBSSxRQUFRLEdBQUcsQ0FBZjtBQUNBLFFBQUksT0FBTyxHQUFHLENBQUMsS0FBRCxFQUFRLFFBQVIsQ0FBZDs7QUFFQSxTQUFJLElBQUksQ0FBQyxHQUFHLENBQVosRUFBZSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQVosSUFBc0IsQ0FBQyxNQUFNLENBQUMscUJBQTdDLEVBQW9FLEVBQUUsQ0FBdEUsRUFBeUU7QUFDdkUsTUFBQSxDQUFDLENBQUMscUJBQUYsR0FBMEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFELENBQVAsR0FBYSx1QkFBZCxDQUEzQjtBQUNBLE1BQUEsQ0FBQyxDQUFDLG9CQUFGLEdBQTBCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBRCxDQUFQLEdBQWEsc0JBQWQsQ0FBRCxJQUNBLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBRCxDQUFQLEdBQWEsNkJBQWQsQ0FEM0I7QUFFRDs7QUFFRCxJQUFBLENBQUMsQ0FBQyxxQkFBRixHQUEwQixDQUFDLENBQUMscUJBQUYsSUFDeEIsVUFBUyxRQUFULEVBQW1CO0FBQ2pCLFVBQUksUUFBUSxHQUFHLElBQUksSUFBSixHQUFXLE9BQVgsRUFBZjtBQUNBLFVBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLE1BQU0sUUFBUSxHQUFHLFFBQWpCLENBQVosQ0FBakI7QUFFQSxVQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBRixDQUFhLFlBQVc7QUFDL0IsUUFBQSxRQUFRLENBQUMsUUFBUSxHQUFHLFVBQVosQ0FBUjtBQUNELE9BRlEsRUFFTixVQUZNLENBQVQ7QUFJQSxNQUFBLFFBQVEsR0FBRyxRQUFRLEdBQUcsVUFBdEI7QUFDQSxhQUFPLEVBQVA7QUFDRCxLQVhIOztBQWFBLElBQUEsQ0FBQyxDQUFDLG9CQUFGLEdBQXlCLENBQUMsQ0FBQyxvQkFBRixJQUEwQixDQUFDLENBQUMsWUFBckQ7QUFFRCxHQXpCQSxFQXlCQyxNQXpCRCxDQUFEOztBQTJCQSxTQUFPLEdBQVA7QUFFQyxDQTU3SUEsQ0FBRDs7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9VQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25YQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDamJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdHZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN2tCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3hNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzlaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM2NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0dEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNqRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJsb2JUb0J1ZmZlcihibG9iLCBjYikge1xuICBpZihibG9iID09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjYihuZXcgVWludDhBcnJheSgpKVxuICB9XG4gIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmaWxlUmVhZGVyLm9ubG9hZGVuZCAgPSBmdW5jdGlvbihldmVudCkgeyBcbiAgICBjb25zdCB1aW50OEFycmF5TmV3ID0gbmV3IFVpbnQ4QXJyYXkoZXZlbnQudGFyZ2V0LnJlc3VsdCk7XG4gICAgY2IodWludDhBcnJheU5ldylcbiAgfVxuICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xufVxuIiwiXG5jb25zdCB7RCxCLEh9ID0gcmVxdWlyZSgnY29uc3RzJyk7XG5cbmNvbnN0IFZpZXcgPSByZXF1aXJlKCd2aWV3Jyk7XG5jb25zdCBHYW1lID0gcmVxdWlyZSgnZ2FtZScpO1xuY29uc3QgbWFwID0gcmVxdWlyZSgnbWFwJyk7XG5jb25zdCBibG9iVG9CdWZmZXIgPSByZXF1aXJlKCdibG9iX3RvX2J1ZmZlcicpXG5jb25zdCBwcm90b2J1ZiA9IHJlcXVpcmUoXCJwcm90b2J1ZmpzXCIpO1xuLy9UT0RPXG5jb25zdCBDb21tYW5kc1AgPSAkLmdldChcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9saWppYXFpZ3JlYXQvcGVyc29uYWxfc2VydmVyL21hc3Rlci9wcm90b2J1Zi9jb21tYW5kLnByb3RvXCIpLnRoZW4ocHJvdG9GaWxlID0+IHtcbiAgcmV0dXJuIHByb3RvYnVmLnBhcnNlKHByb3RvRmlsZSkucm9vdC5sb29rdXAoXCJDb21tYW5kc1wiKTtcbn0pO1xuXG5jb25zdCBrZXlNYXAgPSB7XG4gIEFycm93UmlnaHQ6IEQuRUFTVCxcbiAgQXJyb3dEb3duOiBELlNPVVRILFxuICBBcnJvd0xlZnQ6IEQuV0VTVCxcbiAgQXJyb3dVcDogRC5OT1JUSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlkLCB1cmwpe1xuICB2YXIgcGFyYW0gPSB7XG4gICAgd2lkdGg6IDIwLFxuICAgIGhlaWdodDogMjAsXG4gICAgdmVyc2lvbjogMSxcbiAgfVxuICBjb25zdCB3cyA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgd3Mub25vcGVuID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGdhbWUgPSBuZXcgR2FtZShtYXAocGFyYW0pLmdhbWUpO1xuICAgIHdpbmRvdy5nYW1lID0gZ2FtZTtcbiAgICBjb25zdCBDb21tYW5kcyA9IGF3YWl0IENvbW1hbmRzUDtcbiAgICB2YXIgaW5pdGVkID0gMDtcbiAgICB2YXIgZGVidWdpID0gMDtcbiAgICB3cy5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgYmxvYlRvQnVmZmVyKGV2ZW50LmRhdGEsIHJlc29sdmUpO1xuICAgICAgfSkudGhlbihidWZmZXIgPT4ge1xuICAgICAgICBjb25zdCBjcyA9IENvbW1hbmRzLmRlY29kZShidWZmZXIpLmNvbW1hbmRzO1xuICAgICAgICBjb25zdCB0aW1lMSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGZvcih2YXIgdD0wO3Q8Y3MubGVuZ3RoO3QrKyl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICBnYW1lLmhhbmRsZUNvbW1hbmQyKGNzW3RdKTtcbiAgICAgICAgICB9IGNhdGNoKGVycikge2NvbnNvbGUuZXJyKGVycik7fVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbWUyID0gbmV3IERhdGUoKTtcbiAgICAgICAgaWYoaW5pdGVkICE9IFwiaW5pdGlhbGl6ZWRcIikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChpbml0ZWQpO1xuICAgICAgICAgIGluaXRlZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaW5pdGVkID0gXCJpbml0aWFsaXplZFwiO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbml0IHZpZXdcIik7XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFZpZXcoJChcIiNtYWluXCIpWzBdLGdhbWUpO1xuICAgICAgICAgICAgd2luZG93LnZpZXcgPSB2aWV3O1xuICAgICAgICAgICAgJChcImJvZHlcIikub24oXCJrZXlkb3duXCIsIChlKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGRpciA9IGtleU1hcFtlLmtleV07XG4gICAgICAgICAgICAgIGlmKGRpciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB3cy5zZW5kKG5ldyBVaW50OEFycmF5KFtkaXJdKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICB9O1xuICByZXR1cm4gd3M7XG59XG4iLCJ2YXIgRF9FQVNUICA9IDA7XG52YXIgRF9TT1VUSCA9IDE7XG52YXIgRF9XRVNUICA9IDI7XG52YXIgRF9OT1JUSCA9IDM7XG52YXIgRF9PVEhFUiA9IDQ7XG52YXIgRF9PUF9NQVNLID0gMjtcblxudmFyIEJUX0VNUFRZID0gMDtcbnZhciBCVF9TTkFLRSA9IDE7XG5leHBvcnRzLkQgPSB7XG4gIEVBU1QgICA6IDAsXG4gIFNPVVRIICA6IDEsXG4gIFdFU1QgICA6IDIsXG4gIE5PUlRIICA6IDMsXG4gIE9USEVSICA6IDQsXG4gIE9USEVSX1Q6IDYsXG4gIE9QX01BU0s6IDIsXG59O1xuZXhwb3J0cy5CID0ge1xuICBFTVBUWTogMCxcbiAgU05BS0U6IDEsXG4gIEZPT0QgOiAyLFxuICBCTE9DSzogMyxcbn07XG5leHBvcnRzLkggPSB7XG4gIGFwcGx5RGlyZWN0aW9uKHt4LHl9LGQpe1xuICAgIHN3aXRjaChkKXtcbiAgICAgIGNhc2UgRF9OT1JUSDogeS09MTsgYnJlYWs7XG4gICAgICBjYXNlIERfU09VVEg6IHkrPTE7IGJyZWFrO1xuICAgICAgY2FzZSBEX1dFU1Q6IHgtPTE7IGJyZWFrO1xuICAgICAgY2FzZSBEX0VBU1Q6IHgrPTE7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiB7eCx5fTtcbiAgfSxcbiAgY2xvbmVCb3goYil7XG4gICAgcmV0dXJuIFtiWzBdLCQuZXh0ZW5kKHt9LGJbMV0pXTtcbiAgfVxufTtcbiIsImNvbnN0IHtELEIsSH0gPSByZXF1aXJlKCdjb25zdHMnKTtcbmNvbnN0IHtFdmVudEVtaXR0ZXJ9ID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCB4b3IxMjggPSByZXF1aXJlKCdzZWVkcmFuZG9tL2xpYi94b3IxMjgnKTtcbmNvbnN0IF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcbmNvbnN0IGJsb2JUb0J1ZmZlciA9IHJlcXVpcmUoJ2Jsb2JfdG9fYnVmZmVyJylcbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgR2FtZSBleHRlbmRzIEV2ZW50RW1pdHRlcntcbiAgY29uc3RydWN0b3IoanNvbil7XG4gICAgc3VwZXIoKTtcbiAgICBpZihqc29uLnZlcnNpb24gIT0gMSlcbiAgICAgIHRocm93IFwid3JvbmcgdmVyc2lvblwiO1xuICAgIHRoaXMuanNvbiA9IGpzb247XG4gICAgY29uc3QgdXNlcjJpbmRleCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCByYW5kb20gPSB4b3IxMjgoXCJcIiwge3N0YXRlOiBqc29uLnNlZWR9KTtcbiAgICBfLmVhY2goanNvbi5zbmFrZXMsIChzbmFrZSwgaW5kZXgpID0+IHtcbiAgICAgIGlmKHNuYWtlKXtcbiAgICAgICAgdXNlcjJpbmRleC5zZXQoc25ha2UubmFtZSwgaW5kZXgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuY2FjaGUgPSB7XG4gICAgICB1c2VyMmluZGV4LFxuICAgICAgcmFuZG9tLFxuICAgICAgLy9UT0RPXG4gICAgICBmb29kOiAwLFxuICAgIH07XG4gIH1cbiAgdGljaygpe1xuICAgIGNvbnN0IF90aGlzID0gdGhpcztcbiAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcbiAgICBqc29uLnNuYWtlcy5mb3JFYWNoKGZ1bmN0aW9uKHNuYWtlKXtcbiAgICAgIGlmKHNuYWtlID09PSB1bmRlZmluZWQpe1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZigtLXNuYWtlLnRpY2sgIT09IDApe1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzbmFrZS50aWNrID0gMTsgLy9UT0RPXG4gICAgICB2YXIgcDEgPSBzbmFrZS5oZWFkO1xuICAgICAgdmFyIGIxID0gX3RoaXMuZ2V0Qm94KHNuYWtlLmhlYWQpO1xuICAgICAgaWYoYjFbMV0uaCA9PSBELk9USEVSKXtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHAyID0gSC5hcHBseURpcmVjdGlvbihwMSxiMVsxXS5oKTtcbiAgICAgIHZhciBiMiA9IF90aGlzLmdldEJveChwMik7XG4gICAgICBzd2l0Y2goYjJbMF0pe1xuICAgICAgY2FzZSBCLkZPT0Q6XG4gICAgICAgIHNuYWtlLnJlbWFpbiArPSBiMlsxXS5xO1xuICAgICAgICBfdGhpcy5zZXRCb3gocDIsWyBCLkVNUFRZLCB7fSBdKVxuICAgICAgICAvL1RPRE9cbiAgICAgICAgaWYoX3RoaXMuY2FjaGUuZm9vZD49MCkge1xuICAgICAgICAgIF90aGlzLnNldEJveChfdGhpcy5yYW5kb21GcmVlTG9jYXRpb24oKSwgWyBCLkZPT0QsIHtxOiAxfSBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5jYWNoZS5mb29kKys7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgQi5FTVBUWTpcbiAgICAgICAgX3RoaXMuc2V0Qm94KHAyLFsgQi5TTkFLRSwge1xuICAgICAgICAgIGg6YjFbMV0uaCxcbiAgICAgICAgICB0OmIxWzFdLmggXiBELk9QX01BU0ssXG4gICAgICAgICAgczpzbmFrZS5pbmRleFxuICAgICAgICB9XSlcbiAgICAgICAgc25ha2UuaGVhZCA9IHAyO1xuICAgICAgICBpZihzbmFrZS5yZW1haW4gPiAwKXtcbiAgICAgICAgICBzbmFrZS5yZW1haW4tLTtcbiAgICAgICAgICBzbmFrZS5sZW5ndGgrKztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcDEgPSBzbmFrZS50YWlsO1xuICAgICAgICBiMSA9IF90aGlzLmdldEJveChwMSk7XG4gICAgICAgIHAyID0gSC5hcHBseURpcmVjdGlvbihwMSwgYjFbMV0uaCk7XG4gICAgICAgIGIyID0gX3RoaXMuZ2V0Qm94KHAyKTtcbiAgICAgICAgc25ha2UudGFpbCA9IHAyO1xuICAgICAgICBfdGhpcy5zZXRCb3gocDEsWyBCLkVNUFRZLCB7fV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQi5CTE9DSzpcbiAgICAgIGNhc2UgQi5TTkFLRTpcbiAgICAgICAgZGVzdHJveVNuYWtlKF90aGlzLHNuYWtlKTtcbiAgICAgICAgY29uc3Qge3gsIHl9ID0gX3RoaXMucmFuZG9tRnJlZUxvY2F0aW9uKCk7XG4gICAgICAgIF90aGlzLmpvaW4oe3gsIHksIG5hbWU6IHNuYWtlLm5hbWUsIHJlbWFpbjogM30pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHJhbmRvbUZyZWVMb2NhdGlvbigpIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICBjb25zdCByID0gcmFuZG9tUmFuZ2UodGhpcy5jYWNoZS5yYW5kb20sIHRoaXMuanNvbi53aWR0aCAqIHRoaXMuanNvbi5oZWlnaHQpO1xuICAgICAgaWYodGhpcy5qc29uLmdyaWRbcl1bMF0gPT0gQi5FTVBUWSkgeyByZXR1cm4ge3g6IHIgJSB0aGlzLmpzb24ud2lkdGgsIHk6IChyL3RoaXMuanNvbi53aWR0aCl8MCB9IH1cbiAgICB9XG4gIH1cbiAgc2V0U2VlZChzZWVkKSB7XG4gICAgdGhpcy5jYWNoZS5yYW5kb20gPSB4b3IxMjgoc2VlZCwge3N0YXRlOiB0cnVlfSk7XG4gIH1cbiAgaGFuZGxlQ29tbWFuZDIoY21kKSB7XG4gICAgY29uc3QgYyA9IGNtZFtjbWQuY29tbWFuZF07XG4gICAgc3dpdGNoKGNtZC5jb21tYW5kKSB7XG4gICAgICBjYXNlIFwidGlja0NvbW1hbmRcIjpcbiAgICAgICAgaWYoYy5yYW5kb21TZWVkLmxlbmd0aCA+IDApe1xuICAgICAgICAgIHRoaXMuc2V0U2VlZChjLnJhbmRvbVNlZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGljaygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpZENvbW1hbmRcIjpcbiAgICAgICAgaWYoYy5vbGRJZCA9PSBcIlwiICYmIGMubmV3SWQgIT0gXCJcIikge1xuICAgICAgICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMucmFuZG9tRnJlZUxvY2F0aW9uKCk7XG4gICAgICAgICAgdGhpcy5qb2luKHt4LCB5LCBuYW1lOiBjLm5ld0lkLCByZW1haW46IDN9KTtcbiAgICAgICAgfSBlbHNlIGlmIChjLm9sZElkICE9IFwiXCIgJiYgYy5uZXdJZCA9PSBcIlwiKSB7XG4gICAgICAgICAgdmFyIHNuYWtlID0gdGhpcy5qc29uLnNuYWtlc1t0aGlzLmNhY2hlLnVzZXIyaW5kZXguZ2V0KGMub2xkSWQpXVxuICAgICAgICAgIGlmKHNuYWtlID09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aHJvdyBcInNuYWtlIG5vdCBleGlzdFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZXN0cm95U25ha2UodGhpcyxzbmFrZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgXCJ1bmtub3duIGVycm9yXCI7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwid3JpdGVyQ29tbWFuZFwiOlxuICAgICAgICBjb25zdCBkaXIgPSBjLmNvbW1hbmRbMF07XG4gICAgICAgIGlmKGRpciA+PSA0KSB7XG4gICAgICAgICAgdGhyb3cgXCJ1bmtub3duIGRpclwiO1xuICAgICAgICB9XG4gICAgICAgIHZhciBqc29uID0gZ2FtZS5qc29uO1xuICAgICAgICB2YXIgc25ha2UgPSBqc29uLnNuYWtlc1t0aGlzLmNhY2hlLnVzZXIyaW5kZXguZ2V0KGMuaWQpXTtcbiAgICAgICAgdmFyIGJveDEgPSBnYW1lLmdldEJveChzbmFrZS5oZWFkKTtcbiAgICAgICAgaWYoYm94MVsxXS50ID09IGRpcil7XG4gICAgICAgICAgdGhyb3cgXCJtb3ZlIG9wcG9cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJveDFbMV0uaCA9IGRpcjtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVDb21tYW5kcyhjbWRzKXtcbiAgICBjbWRzLmZvckVhY2goKGNtZCkgPT4ge1xuICAgICAgdHJ5e1xuICAgICAgICBoYW5kbGVyc1tjbWRbMF1dKGNtZFsxXSx0aGlzKTtcbiAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgY29uc29sZS5lcnJvcihcImlsbGVnYWwgY29tbWFuZDogXCIrSlNPTi5zdHJpbmdpZnkoY21kKSk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZ2V0Qm94KHt4LHl9KXtcbiAgICB2YXIgaW5kZXggPSB5KnRoaXMuanNvbi53aWR0aCt4O1xuICAgIHJldHVybiB0aGlzLmpzb24uZ3JpZFtpbmRleF07XG4gIH1cbiAgZ2V0U25ha2VTaXplKCl7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUudXNlcjJpbmRleC5zaXplO1xuICB9XG4gIHNldFNuYWtlKGluZGV4LHNuYWtlKXtcbiAgICBjb25zdCBvbGRTbmFrZSA9IHRoaXMuanNvbi5zbmFrZXNbaW5kZXhdO1xuICAgIGlmKHRoaXMuanNvbi5zbmFrZXNbaW5kZXhdICE9IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLmNhY2hlLnVzZXIyaW5kZXguZGVsZXRlKG9sZFNuYWtlLm5hbWUpO1xuICAgIH1cbiAgICBpZihzbmFrZSAhPSB1bmRlZmluZWQpe1xuICAgICAgdGhpcy5jYWNoZS51c2VyMmluZGV4LnNldChzbmFrZS5uYW1lLCBpbmRleCk7XG4gICAgfVxuICAgIHRoaXMuanNvbi5zbmFrZXNbaW5kZXhdPXNuYWtlO1xuICB9XG4gIGpvaW4oZGF0YSkge1xuICAgIHZhciB7eCx5fSA9IGRhdGE7XG4gICAgdmFyIGJveCA9IHRoaXMuZ2V0Qm94KHt4LHl9KTtcbiAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcblxuICAgIGlmKGJveFswXSAhPSBCLkVNUFRZKXtcbiAgICAgIHRocm93IFwiYm94IHRha2VuXCI7XG4gICAgfVxuICAgIHZhciBpbmRleCA9IGZpbmROZXh0RW1wdHkoanNvbi5zbmFrZXMpO1xuXG4gICAgdmFyIHNuYWtlPXtcbiAgICAgIGFnZTogMCxcbiAgICAgIGluZGV4LFxuICAgICAgaGVhZDoge3gseX0sXG4gICAgICBsZW5ndGg6IDEsXG4gICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICByZW1haW46IGRhdGEucmVtYWluLFxuICAgICAgdGFpbDoge3gseX0sXG4gICAgICB0aWNrOiAxLFxuICAgICAgcHJldHR5OiBkYXRhLnByZXR0eVxuICAgIH07XG4gICAgdGhpcy5zZXRTbmFrZShpbmRleCxzbmFrZSk7XG5cbiAgICB0aGlzLnNldEJveCh7eCx5fSxbIEIuU05BS0UsIHtcbiAgICAgIGg6RC5PVEhFUixcbiAgICAgIHM6c25ha2UuaW5kZXgsXG4gICAgICB0OkQuT1RIRVJfVCxcbiAgICB9XSk7XG4gICAgLy9UT0RPXG4gICAgaWYodGhpcy5jYWNoZS5mb29kPj0wKSB7XG4gICAgICB0aGlzLnNldEJveCh0aGlzLnJhbmRvbUZyZWVMb2NhdGlvbigpLCBbIEIuRk9PRCwge3E6IDF9IF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhY2hlLmZvb2QrKztcbiAgICB9XG4gIH1cbiAgc2V0Qm94KHt4LHl9LGIyKXtcbiAgICB2YXIgaW5kZXggPSB5KnRoaXMuanNvbi53aWR0aCt4O1xuICAgIHZhciBiMSA9IHRoaXMuanNvbi5ncmlkW2luZGV4XTtcbiAgICB0aGlzLmpzb24uZ3JpZFtpbmRleF0gPSBiMjtcbiAgICB0aGlzLmVtaXQoXCJib3hcIix7eCx5fSxiMSxiMik7XG4gIH1cbn07XG52YXIgaGFuZGxlcnMgPSB7XG4gIHRpY2soZGF0YSxnYW1lKXtcbiAgICBnYW1lLnRpY2soKTtcbiAgfSxcbiAgam9pbihkYXRhLGdhbWUpe1xuICAgIGdhbWUuam9pbihkYXRhKTtcbiAgfSxcbiAgZGlyZWN0aW9uKGRhdGEsZ2FtZSl7XG4gICAgdmFyIGpzb24gPSBnYW1lLmpzb247XG4gICAgdmFyIHNuYWtlID0ganNvbi5zbmFrZXNbZGF0YS5zXTtcbiAgICB2YXIgYm94MSA9IGdhbWUuZ2V0Qm94KHNuYWtlLmhlYWQpO1xuICAgIGlmKGJveDFbMV0udCA9PSBkYXRhLmQpe1xuICAgICAgdGhyb3cgXCJtb3ZlIG9wcG9cIjtcbiAgICB9XG5cbiAgICBib3gxWzFdLmggPSBkYXRhLmQ7XG4gIH0sXG4gIGZvb2QoZGF0YSxnYW1lKXtcbiAgICB2YXIgYjEgPSBnYW1lLmdldEJveChkYXRhKTtcbiAgICBpZihiMVswXSAhPSBCLkVNUFRZKXtcbiAgICAgIHRocm93IFwiYm94IHRha2VuXCI7XG4gICAgfVxuICAgIGdhbWUuc2V0Qm94KGRhdGEsWyBCLkZPT0QsIHtcbiAgICAgIHE6IGRhdGEucVxuICAgIH1dKTtcbiAgfSxcbiAgbGVhdmUoZGF0YSxnYW1lKXtcbiAgICB2YXIgc25ha2UgPSBnYW1lLmpzb24uc25ha2VzW2RhdGEuc11cbiAgICBpZihzbmFrZSA9PSB1bmRlZmluZWQpe1xuICAgICAgdGhyb3cgXCJzbmFrZSBub3QgZXhpc3RcIjtcbiAgICB9XG4gICAgZGVzdHJveVNuYWtlKGdhbWUsc25ha2UpO1xuICB9XG59O1xuZnVuY3Rpb24gZmluZE5leHRFbXB0eShsaXN0KXtcbiAgdmFyIHQ9MDtcbiAgd2hpbGUobGlzdFt0XSAhPSB1bmRlZmluZWQpe1xuICAgIHQrKztcbiAgfVxuICByZXR1cm4gdDtcbn07XG5mdW5jdGlvbiBkZXN0cm95U25ha2UoZ2FtZSxzbmFrZSl7XG4gIHZhciBwMSA9IHNuYWtlLmhlYWQ7XG4gIHZhciBiMSA9IGdhbWUuZ2V0Qm94KHNuYWtlLmhlYWQpO1xuICB3aGlsZShiMVswXSA9PSBCLlNOQUtFICYmIGIxWzFdLnMgPT0gc25ha2UuaW5kZXgpe1xuICAgIGdhbWUuc2V0Qm94KHAxLFsgQi5FTVBUWSx7fV0pO1xuICAgIHAxID0gSC5hcHBseURpcmVjdGlvbihwMSwgYjFbMV0udCk7XG4gICAgYjEgPSBnYW1lLmdldEJveChwMSk7XG4gIH1cbiAgZ2FtZS5jYWNoZS5mb29kLS07XG4gIGdhbWUuc2V0U25ha2Uoc25ha2UuaW5kZXgsdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tUmFuZ2UocmFuZCwgcmFuZ2UpIHtcbiAgY29uc3QgbWF4ID0gKCg0Mjk0OTY3Mjk2IC8gcmFuZ2UpIHwgMCkgKiByYW5nZTtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIGNvbnN0IG5leHQgPSByYW5kLmludDMyKCkrMjE0NzQ4MzY0ODtcbiAgICBpZihuZXh0IDwgbWF4KSB7IHJldHVybiBuZXh0ICUgcmFuZ2U7IH1cbiAgfVxuICBcbn1cbiIsIi8vIHZhciBtYXRoID0gcmVxdWlyZSgnLi90ZXN0Jyk7XG4vLyB3aW5kb3cucHVic3ViID0gcmVxdWlyZSgnLi4vdmVuZG9yL3B1YnN1Yi5qcycpXG4vLyBjb25zb2xlLmxvZyhcIjLPgCA9IFwiICsgbWF0aC5zdW0obWF0aC5waSwgbWF0aC5waSkpO1xuLy8gdmFyIGEgPSByZXF1aXJlKCcuL3Rlc3QyJyk7XG52YXIgdG1wcCA9IHJlcXVpcmUoJ3Rlc3QnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCd2aWV3Jyk7XG5jb25zdCBHYW1lID0gcmVxdWlyZSgnZ2FtZScpO1xuY29uc3QgbWFwID0gcmVxdWlyZSgnbWFwJyk7XG5jb25zdCBjb25uID0gcmVxdWlyZSgnY29ubicpO1xud2luZG93Ll8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG53aW5kb3cucHJvdG9idWYgPSByZXF1aXJlKFwicHJvdG9idWZqc1wiKTtcbndpbmRvdy54b3IxMjggPSByZXF1aXJlKCdzZWVkcmFuZG9tL2xpYi94b3IxMjgnKTtcbi8vIHdpbmRvdy5ibG9iVG9CdWZmZXIgPSByZXF1aXJlKFwiYmxvYi10by1idWZmZXJcIik7XG5cbiQoJyNidXR0b24nKS5vbignY2xpY2snLCAoKSA9PiB7XG4gIGNvbm4oJCgnI25hbWUnKS52YWx1ZSgpLCAkKCcjdXJsJykudmFsdWUoKSk7XG59KTtcbnZhciBwYXJhbSA9IHtcbiAgd2lkdGg6IDIwLFxuICBoZWlnaHQ6IDIwLFxuICB2ZXJzaW9uOiAxLFxufVxuLy8gdmFyIGdhbWUgPSBuZXcgR2FtZShtYXAocGFyYW0pLmdhbWUpO1xuLy8gdmFyIHZpZXcgPSBuZXcgVmlldygkKFwiI21haW5cIilbMF0sZ2FtZSk7XG52YXIge0QsQixIfSA9IHJlcXVpcmUoJy4vY29uc3RzLmpzJyk7XG53aW5kb3cuY21kcyA9IHtcbiAgXCJqMjIyXCI6W1xuICAgIFwiam9pblwiLFxuICAgIHtcbiAgICAgIFwibmFtZVwiOiBcImoyMlwiLFxuICAgICAgXCJyZW1haW5cIjoyLFxuICAgICAgXCJ4XCI6MixcbiAgICAgIFwieVwiOjIsXG4gICAgfVxuICBdLFxuICBcImoyNDJcIjpbXG4gICAgXCJqb2luXCIsXG4gICAge1xuICAgICAgXCJuYW1lXCI6IFwiajI0XCIsXG4gICAgICBcInJlbWFpblwiOjIsXG4gICAgICBcInhcIjoyLFxuICAgICAgXCJ5XCI6NCxcbiAgICB9XG4gIF0sXG4gIFwiZDBFXCI6W1xuICAgIFwiZGlyZWN0aW9uXCIsXG4gICAge1xuICAgICAgczowLFxuICAgICAgZDpELkVBU1QsXG4gICAgfVxuICBdLFxuICBcImQwV1wiOltcbiAgICBcImRpcmVjdGlvblwiLFxuICAgIHtcbiAgICAgIHM6MCxcbiAgICAgIGQ6RC5XRVNULFxuICAgIH1cbiAgXSxcbiAgXCJkMFNcIjpbXG4gICAgXCJkaXJlY3Rpb25cIixcbiAgICB7XG4gICAgICBzOjAsXG4gICAgICBkOkQuU09VVEgsXG4gICAgfVxuICBdLFxuICBcInQwXCI6W1xuICAgIFwidGlja1wiLFxuICAgIHt9XG4gIF0sXG4gIFwiZjI0MlwiOltcbiAgICBcImZvb2RcIix7XG4gICAgICB4OiAyLFxuICAgICAgeTogNCxcbiAgICAgIHE6IDJcbiAgICB9XG4gIF0sXG4gIFwibDBcIjpbXG4gICAgXCJsZWF2ZVwiLHtcbiAgICAgIHM6MFxuICAgIH1cbiAgXSxcbiAgXCJsMVwiOltcbiAgICBcImxlYXZlXCIse1xuICAgICAgczoxXG4gICAgfVxuICBdXG59XG5cbi8vIHdpbmRvdy5nYW1lID0gZ2FtZTtcbi8vIHdpbmRvdy52aWV3ID0gdmlldztcbndpbmRvdy5jb25uID0gY29ubjtcblxuXG4vLyBpbXBvcnQgR2FtZSBmcm9tICcuL2dhbWUnO1xuLy8gaW1wb3J0IG1hcCBmcm9tICcuL21hcCc7XG4vLyB3aW5kb3cuVmlldyA9IFZpZXc7XG4vLyB3aW5kb3cuR2FtZSA9IEdhbWU7XG4iLCJ2YXIge0J9ID0gcmVxdWlyZSgnY29uc3RzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGFyYW0pe1xuICB2YXIgc2l6ZT1wYXJhbS53aWR0aCAqIHBhcmFtLmhlaWdodDtcbiAgdmFyIGdyaWQgPSBbXTtcbiAgZm9yKHZhciB0PTA7dDxzaXplO3QrKyl7XG4gICAgZ3JpZFt0XT1bQi5FTVBUWSx7fV07XG4gIH1cbiAgZm9yKHZhciB0PTA7dDxwYXJhbS53aWR0aDt0KyspIHtcbiAgICBncmlkW3RdID0gW0IuQkxPQ0ssIHt9XVxuICAgIGdyaWRbc2l6ZS0xLXRdID0gW0IuQkxPQ0ssIHt9XVxuICB9XG4gIGZvcih2YXIgdD0wO3Q8cGFyYW0uaGVpZ2h0O3QrKykge1xuICAgIGdyaWRbdCpwYXJhbS53aWR0aF0gPSBbQi5CTE9DSywge31dXG4gICAgZ3JpZFtzaXplLTEtdCpwYXJhbS53aWR0aF0gPSBbQi5CTE9DSywge31dXG4gIH1cblxuXG4gIHZhciBnYW1lID0ge1xuICAgIHZlcnNpb246MSxcbiAgICBjb25maWc6IHtcbiAgICAgIHN0YXJ0UmVtYWluOiA1LFxuICAgIH0sXG4gICAgc2VlZDoge1xuICAgICAgeDogMSxcbiAgICAgIHk6IDIsXG4gICAgICB6OiAzLFxuICAgICAgdzogNCxcbiAgICB9LFxuICAgIHdpZHRoOiBwYXJhbS53aWR0aCxcbiAgICBoZWlnaHQ6IHBhcmFtLmhlaWdodCxcbiAgICBncmlkOiBncmlkLFxuICAgIHNuYWtlczogW10sXG4gICAgdGljazogMCxcbiAgfTtcbiAgcmV0dXJuIHtnYW1lfTtcbn07XG4iLCJjb25zb2xlLmxvZyhcImltcG9ydGluZyB0ZXN0LmpzXCIpXG5tb2R1bGUuZXhwb3J0cy5zdW0gPSAgZnVuY3Rpb24gc3VtKGEsYil7XG4gIHJldHVybiBhK2I7XG59XG5leHBvcnRzLnBpPTMuMTQ7XG52YXIgU1ZHID0gcmVxdWlyZSgnc3ZnLmpzL3N2ZycpO1xuY29uc29sZS5sb2coXCIhISFcIik7XG5jb25zb2xlLmxvZyhTVkcpO1xuLy8gdmFyIHN2Zz1TVkcoXCJtYWluXCIpO1xuLy8gdmFyIHJlY3QgPSBzdmcucmVjdCgxMDAsIDEwMCkuYXR0cih7IGZpbGw6ICcjZjA2J30pXG4vLyBjbGFzcyBBcHAge1xuLy8gICBjb25zdHJ1Y3Rvcih1cmwsaWQpe1xuLy8gICAgIHRoaXMuc3ZnPVNWRyhpZCk7XG4vLyAgICAgdGhpcy5zdGF0dXM9XCJpbml0aWFsaXppbmdcIjtcbi8vICAgICB0aGlzLnJlc3Q9e307XG4vLyAgIH1cbi8vIH1cbiIsInZhciB7Qn0gPSByZXF1aXJlKCdjb25zdHMnKTtcbnZhciBTVkcgPSByZXF1aXJlKCdzdmcuanMvc3ZnJyk7XG4vL3ZpZXcgbGlzdGVucyBnYW1lXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFZpZXd7XG4gIGNvbnN0cnVjdG9yKGVsLGdhbWUpe1xuICAgIHRoaXMuc3ZnPVNWRyhlbCk7XG4gICAgdGhpcy5tYWluID0gdGhpcy5zdmcuZ3JvdXAoKTtcbiAgICB0aGlzLm1haW4uc2NhbGUoMTApO1xuICAgIHRoaXMuZ2FtZT1nYW1lO1xuICAgIHRoaXMuZ3JpZCA9IFtdO1xuICAgIHRoaXMuaW5pdCgpO1xuICAgIC8vIHRoaXMuc3ltYm9scyA9IFtdO1xuICAgIC8vIHRoaXMuc3ltYm9sc1tCLkVNUFRZXSA9IHRoaXMuc3ZnLnN5bWJvbCgpXG4gICAgLy8gdGhpcy5zeW1ib2xzW0IuU05BS0VdID0gdGhpcy5zdmcuc3ltYm9sKClcbiAgICAkKHdpbmRvdykub24oXCJyZXNpemVcIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuc3ZnLnNpemUod2luZG93LndpZHRoKCksd2luZG93LmhlaWdodCgpKTtcbiAgICB9KVxuICAgIGdhbWUub24oJ2JveCcsKHAsYjEsYjIpID0+IHtcbiAgICAgIHRoaXMuc2V0Qm94KHAsYjEsYjIpO1xuICAgIH0pO1xuICB9XG4gIGluaXQoKXtcbiAgICBmb3IodmFyIHQxID0gMDt0MSA8IHRoaXMuZ2FtZS5qc29uLmhlaWdodDt0MSsrKXtcbiAgICAgIHRoaXMuZ3JpZFt0MV0gPSBbXTtcbiAgICAgIGZvcih2YXIgdDIgPSAwO3QyIDwgdGhpcy5nYW1lLmpzb24ud2lkdGg7dDIrKyl7XG4gICAgICAgIHZhciBncm91cCA9IHRoaXMubWFpbi5ncm91cCgpO1xuICAgICAgICBncm91cC50cmFuc2xhdGUodDIsdDEpO1xuICAgICAgICB0aGlzLmdyaWRbdDEqdGhpcy5nYW1lLmpzb24ud2lkdGgrdDJdID0gZ3JvdXA7XG4gICAgICAgIHRoaXMuc2V0Qm94KHt4OnQyLCB5OnQxfSx1bmRlZmluZWQsdGhpcy5nYW1lLmpzb24uZ3JpZFt0MSp0aGlzLmdhbWUuanNvbi53aWR0aCt0Ml0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzZXRCb3gocCxiMSxiMil7XG4gICAgdmFyIHZib3ggPSB0aGlzLmdyaWRbcC55KnRoaXMuZ2FtZS5qc29uLndpZHRoK3AueF07XG4gICAgdmJveC5jaGlsZHJlbigpLmZvckVhY2goKGUpID0+IGUucmVtb3ZlKCkpXG4gICAgc3dpdGNoKGIyWzBdKXtcbiAgICBjYXNlIEIuRU1QVFk6YnJlYWs7XG4gICAgY2FzZSBCLlNOQUtFOlxuICAgICAgdmFyIHJlY3QgPSB2Ym94LnJlY3QoMSwxKTtcbiAgICAgIHJlY3QuZmlsbCh7Y29sb3I6Y29sb3JzW2IyWzFdLnNdfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEIuRk9PRDpcbiAgICAgIHZhciBjaXJjbGUgPSB2Ym94LmNpcmNsZSgxKTtcbiAgICAgIGNpcmNsZS5maWxsKHtjb2xvcjpcIiNmMDBcIn0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCLkJMT0NLOlxuICAgICAgdmFyIHJlY3QgPSB2Ym94LnJlY3QoMSwxKTtcbiAgICAgIHJlY3QuZmlsbCh7Y29sb3I6XCIjYWFhXCJ9KTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBjb2xvcnMgPSBbXG4gIFwiIzAwMFwiLFxuICBcIiMwMGZcIixcbiAgXCIjMGYwXCIsXG4gIFwiI2Y0NDJkOVwiLFxuICBcIiNkYjdmMDBcIixcbiAgXCIjMDE5ZWMxXCIsXG5dXG4iLCIvKiFcbiogc3ZnLmpzIC0gQSBsaWdodHdlaWdodCBsaWJyYXJ5IGZvciBtYW5pcHVsYXRpbmcgYW5kIGFuaW1hdGluZyBTVkcuXG4qIEB2ZXJzaW9uIDIuMi4xXG4qIGh0dHA6Ly93d3cuc3ZnanMuY29tXG4qXG4qIEBjb3B5cmlnaHQgV291dCBGaWVyZW5zIDx3b3V0QGltcGluYy5jby51az5cbiogQGxpY2Vuc2UgTUlUXG4qXG4qIEJVSUxUOiBXZWQgTm92IDE4IDIwMTUgMTQ6NDI6MzMgR01UKzAxMDAgKE1pdHRlbGV1cm9ww6Rpc2NoZSBaZWl0KVxuKi87XG4oZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gcm9vdC5kb2N1bWVudCA/IGZhY3Rvcnkocm9vdCwgcm9vdC5kb2N1bWVudCkgOiBmdW5jdGlvbih3KXsgcmV0dXJuIGZhY3Rvcnkodywgdy5kb2N1bWVudCkgfTtcbiAgfSBlbHNlIHtcbiAgICByb290LlNWRyA9IGZhY3Rvcnkocm9vdCwgcm9vdC5kb2N1bWVudCk7XG4gIH1cbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQpIHtcblxuLy8gVGhlIG1haW4gd3JhcHBpbmcgZWxlbWVudFxudmFyIFNWRyA9IHRoaXMuU1ZHID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICBpZiAoU1ZHLnN1cHBvcnRlZCkge1xuICAgIGVsZW1lbnQgPSBuZXcgU1ZHLkRvYyhlbGVtZW50KVxuXG4gICAgaWYgKCFTVkcucGFyc2VyKVxuICAgICAgU1ZHLnByZXBhcmUoZWxlbWVudClcblxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cbn1cblxuLy8gRGVmYXVsdCBuYW1lc3BhY2VzXG5TVkcubnMgICAgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG5TVkcueG1sbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nXG5TVkcueGxpbmsgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcblNWRy5zdmdqcyA9ICdodHRwOi8vc3ZnanMuY29tL3N2Z2pzJ1xuXG4vLyBTdmcgc3VwcG9ydCB0ZXN0XG5TVkcuc3VwcG9ydGVkID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISEgZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TICYmXG4gICAgICAgICAhISBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHLm5zLCdzdmcnKS5jcmVhdGVTVkdSZWN0XG59KSgpXG5cbi8vIERvbid0IGJvdGhlciB0byBjb250aW51ZSBpZiBTVkcgaXMgbm90IHN1cHBvcnRlZFxuaWYgKCFTVkcuc3VwcG9ydGVkKSByZXR1cm4gZmFsc2VcblxuLy8gRWxlbWVudCBpZCBzZXF1ZW5jZVxuU1ZHLmRpZCAgPSAxMDAwXG5cbi8vIEdldCBuZXh0IG5hbWVkIGVsZW1lbnQgaWRcblNWRy5laWQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiAnU3ZnanMnICsgY2FwaXRhbGl6ZShuYW1lKSArIChTVkcuZGlkKyspXG59XG5cbi8vIE1ldGhvZCBmb3IgZWxlbWVudCBjcmVhdGlvblxuU1ZHLmNyZWF0ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgLy8gY3JlYXRlIGVsZW1lbnRcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModGhpcy5ucywgbmFtZSlcblxuICAvLyBhcHBseSB1bmlxdWUgaWRcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5laWQobmFtZSkpXG5cbiAgcmV0dXJuIGVsZW1lbnRcbn1cblxuLy8gTWV0aG9kIGZvciBleHRlbmRpbmcgb2JqZWN0c1xuU1ZHLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbW9kdWxlcywgbWV0aG9kcywga2V5LCBpXG5cbiAgLy8gR2V0IGxpc3Qgb2YgbW9kdWxlc1xuICBtb2R1bGVzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG5cbiAgLy8gR2V0IG9iamVjdCB3aXRoIGV4dGVuc2lvbnNcbiAgbWV0aG9kcyA9IG1vZHVsZXMucG9wKClcblxuICBmb3IgKGkgPSBtb2R1bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgIGlmIChtb2R1bGVzW2ldKVxuICAgICAgZm9yIChrZXkgaW4gbWV0aG9kcylcbiAgICAgICAgbW9kdWxlc1tpXS5wcm90b3R5cGVba2V5XSA9IG1ldGhvZHNba2V5XVxuXG4gIC8vIE1ha2Ugc3VyZSBTVkcuU2V0IGluaGVyaXRzIGFueSBuZXdseSBhZGRlZCBtZXRob2RzXG4gIGlmIChTVkcuU2V0ICYmIFNWRy5TZXQuaW5oZXJpdClcbiAgICBTVkcuU2V0LmluaGVyaXQoKVxufVxuXG4vLyBJbnZlbnQgbmV3IGVsZW1lbnRcblNWRy5pbnZlbnQgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgLy8gQ3JlYXRlIGVsZW1lbnQgaW5pdGlhbGl6ZXJcbiAgdmFyIGluaXRpYWxpemVyID0gdHlwZW9mIGNvbmZpZy5jcmVhdGUgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgY29uZmlnLmNyZWF0ZSA6XG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgU1ZHLmNyZWF0ZShjb25maWcuY3JlYXRlKSlcbiAgICB9XG5cbiAgLy8gSW5oZXJpdCBwcm90b3R5cGVcbiAgaWYgKGNvbmZpZy5pbmhlcml0KVxuICAgIGluaXRpYWxpemVyLnByb3RvdHlwZSA9IG5ldyBjb25maWcuaW5oZXJpdFxuXG4gIC8vIEV4dGVuZCB3aXRoIG1ldGhvZHNcbiAgaWYgKGNvbmZpZy5leHRlbmQpXG4gICAgU1ZHLmV4dGVuZChpbml0aWFsaXplciwgY29uZmlnLmV4dGVuZClcblxuICAvLyBBdHRhY2ggY29uc3RydWN0IG1ldGhvZCB0byBwYXJlbnRcbiAgaWYgKGNvbmZpZy5jb25zdHJ1Y3QpXG4gICAgU1ZHLmV4dGVuZChjb25maWcucGFyZW50IHx8IFNWRy5Db250YWluZXIsIGNvbmZpZy5jb25zdHJ1Y3QpXG5cbiAgcmV0dXJuIGluaXRpYWxpemVyXG59XG5cbi8vIEFkb3B0IGV4aXN0aW5nIHN2ZyBlbGVtZW50c1xuU1ZHLmFkb3B0ID0gZnVuY3Rpb24obm9kZSkge1xuICAvLyBtYWtlIHN1cmUgYSBub2RlIGlzbid0IGFscmVhZHkgYWRvcHRlZFxuICBpZiAobm9kZS5pbnN0YW5jZSkgcmV0dXJuIG5vZGUuaW5zdGFuY2VcblxuICAvLyBpbml0aWFsaXplIHZhcmlhYmxlc1xuICB2YXIgZWxlbWVudFxuXG4gIC8vIGFkb3B0IHdpdGggZWxlbWVudC1zcGVjaWZpYyBzZXR0aW5nc1xuICBpZiAobm9kZS5ub2RlTmFtZSA9PSAnc3ZnJylcbiAgICBlbGVtZW50ID0gbm9kZS5wYXJlbnROb2RlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCA/IG5ldyBTVkcuTmVzdGVkIDogbmV3IFNWRy5Eb2NcbiAgZWxzZSBpZiAobm9kZS5ub2RlTmFtZSA9PSAnbGluZWFyR3JhZGllbnQnKVxuICAgIGVsZW1lbnQgPSBuZXcgU1ZHLkdyYWRpZW50KCdsaW5lYXInKVxuICBlbHNlIGlmIChub2RlLm5vZGVOYW1lID09ICdyYWRpYWxHcmFkaWVudCcpXG4gICAgZWxlbWVudCA9IG5ldyBTVkcuR3JhZGllbnQoJ3JhZGlhbCcpXG4gIGVsc2UgaWYgKFNWR1tjYXBpdGFsaXplKG5vZGUubm9kZU5hbWUpXSlcbiAgICBlbGVtZW50ID0gbmV3IFNWR1tjYXBpdGFsaXplKG5vZGUubm9kZU5hbWUpXVxuICBlbHNlXG4gICAgZWxlbWVudCA9IG5ldyBTVkcuRWxlbWVudChub2RlKVxuXG4gIC8vIGVuc3VyZSByZWZlcmVuY2VzXG4gIGVsZW1lbnQudHlwZSAgPSBub2RlLm5vZGVOYW1lXG4gIGVsZW1lbnQubm9kZSAgPSBub2RlXG4gIG5vZGUuaW5zdGFuY2UgPSBlbGVtZW50XG5cbiAgLy8gU1ZHLkNsYXNzIHNwZWNpZmljIHByZXBhcmF0aW9uc1xuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNWRy5Eb2MpXG4gICAgZWxlbWVudC5uYW1lc3BhY2UoKS5kZWZzKClcblxuICAvLyBwdWxsIHN2Z2pzIGRhdGEgZnJvbSB0aGUgZG9tIChnZXRBdHRyaWJ1dGVOUyBkb2Vzbid0IHdvcmsgaW4gaHRtbDUpXG4gIGVsZW1lbnQuc2V0RGF0YShKU09OLnBhcnNlKG5vZGUuZ2V0QXR0cmlidXRlKCdzdmdqczpkYXRhJykpIHx8IHt9KVxuXG4gIHJldHVybiBlbGVtZW50XG59XG5cbi8vIEluaXRpYWxpemUgcGFyc2luZyBlbGVtZW50XG5TVkcucHJlcGFyZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgLy8gU2VsZWN0IGRvY3VtZW50IGJvZHkgYW5kIGNyZWF0ZSBpbnZpc2libGUgc3ZnIGVsZW1lbnRcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdXG4gICAgLCBkcmF3ID0gKGJvZHkgPyBuZXcgU1ZHLkRvYyhib2R5KSA6IGVsZW1lbnQubmVzdGVkKCkpLnNpemUoMiwgMClcbiAgICAsIHBhdGggPSBTVkcuY3JlYXRlKCdwYXRoJylcblxuICAvLyBJbnNlcnQgcGFyc2Vyc1xuICBkcmF3Lm5vZGUuYXBwZW5kQ2hpbGQocGF0aClcblxuICAvLyBDcmVhdGUgcGFyc2VyIG9iamVjdFxuICBTVkcucGFyc2VyID0ge1xuICAgIGJvZHk6IGJvZHkgfHwgZWxlbWVudC5wYXJlbnQoKVxuICAsIGRyYXc6IGRyYXcuc3R5bGUoJ29wYWNpdHk6MDtwb3NpdGlvbjpmaXhlZDtsZWZ0OjEwMCU7dG9wOjEwMCU7b3ZlcmZsb3c6aGlkZGVuJylcbiAgLCBwb2x5OiBkcmF3LnBvbHlsaW5lKCkubm9kZVxuICAsIHBhdGg6IHBhdGhcbiAgfVxufVxuXG4vLyBTdG9yYWdlIGZvciByZWd1bGFyIGV4cHJlc3Npb25zXG5TVkcucmVnZXggPSB7XG4gIC8vIFBhcnNlIHVuaXQgdmFsdWVcbiAgdW5pdDogICAgICAgICAgICAgL14oLT9bXFxkXFwuXSspKFthLXolXXswLDJ9KSQvXG5cbiAgLy8gUGFyc2UgaGV4IHZhbHVlXG4sIGhleDogICAgICAgICAgICAgIC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2lcblxuICAvLyBQYXJzZSByZ2IgdmFsdWVcbiwgcmdiOiAgICAgICAgICAgICAgL3JnYlxcKChcXGQrKSwoXFxkKyksKFxcZCspXFwpL1xuXG4gIC8vIFBhcnNlIHJlZmVyZW5jZSBpZFxuLCByZWZlcmVuY2U6ICAgICAgICAvIyhbYS16MC05XFwtX10rKS9pXG5cbiAgLy8gUGFyc2UgbWF0cml4IHdyYXBwZXJcbiwgbWF0cml4OiAgICAgICAgICAgL21hdHJpeFxcKHxcXCkvZ1xuXG4gIC8vIEVsZW1lbnRzIG9mIGEgbWF0cml4XG4sIG1hdHJpeEVsZW1lbnRzOiAgIC8sKlxccyt8LC9cblxuICAvLyBXaGl0ZXNwYWNlXG4sIHdoaXRlc3BhY2U6ICAgICAgIC9cXHMvZ1xuXG4gIC8vIFRlc3QgaGV4IHZhbHVlXG4sIGlzSGV4OiAgICAgICAgICAgIC9eI1thLWYwLTldezMsNn0kL2lcblxuICAvLyBUZXN0IHJnYiB2YWx1ZVxuLCBpc1JnYjogICAgICAgICAgICAvXnJnYlxcKC9cblxuICAvLyBUZXN0IGNzcyBkZWNsYXJhdGlvblxuLCBpc0NzczogICAgICAgICAgICAvW146XSs6W147XSs7Py9cblxuICAvLyBUZXN0IGZvciBibGFuayBzdHJpbmdcbiwgaXNCbGFuazogICAgICAgICAgL14oXFxzKyk/JC9cblxuICAvLyBUZXN0IGZvciBudW1lcmljIHN0cmluZ1xuLCBpc051bWJlcjogICAgICAgICAvXi0/W1xcZFxcLl0rJC9cblxuICAvLyBUZXN0IGZvciBwZXJjZW50IHZhbHVlXG4sIGlzUGVyY2VudDogICAgICAgIC9eLT9bXFxkXFwuXSslJC9cblxuICAvLyBUZXN0IGZvciBpbWFnZSB1cmxcbiwgaXNJbWFnZTogICAgICAgICAgL1xcLihqcGd8anBlZ3xwbmd8Z2lmfHN2ZykoXFw/W149XSsuKik/L2lcblxuICAvLyBUaGUgZm9sbG93aW5nIHJlZ2V4IGFyZSB1c2VkIHRvIHBhcnNlIHRoZSBkIGF0dHJpYnV0ZSBvZiBhIHBhdGhcblxuICAvLyBSZXBsYWNlcyBhbGwgbmVnYXRpdmUgZXhwb25lbnRzXG4sIG5lZ0V4cDogICAgICAgICAgIC9lXFwtL2dpXG5cbiAgLy8gUmVwbGFjZXMgYWxsIGNvbW1hXG4sIGNvbW1hOiAgICAgICAgICAgIC8sL2dcblxuICAvLyBSZXBsYWNlcyBhbGwgaHlwaGVuc1xuLCBoeXBoZW46ICAgICAgICAgICAvXFwtL2dcblxuICAvLyBSZXBsYWNlcyBhbmQgdGVzdHMgZm9yIGFsbCBwYXRoIGxldHRlcnNcbiwgcGF0aExldHRlcnM6ICAgICAgL1tNTEhWQ1NRVEFaXS9naVxuXG4gIC8vIHllcyB3ZSBuZWVkIHRoaXMgb25lLCB0b29cbiwgaXNQYXRoTGV0dGVyOiAgICAgL1tNTEhWQ1NRVEFaXS9pXG5cbiAgLy8gc3BsaXQgYXQgd2hpdGVzcGFjZXNcbiwgd2hpdGVzcGFjZXM6ICAgICAgL1xccysvXG5cbiAgLy8gbWF0Y2hlcyBYXG4sIFg6ICAgICAgICAgICAgICAgIC9YL2dcbn1cblNWRy51dGlscyA9IHtcbiAgICAvLyBNYXAgZnVuY3Rpb25cbiAgICBtYXA6IGZ1bmN0aW9uKGFycmF5LCBibG9jaykge1xuICAgIHZhciBpXG4gICAgICAsIGlsID0gYXJyYXkubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IFtdXG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIHJlc3VsdC5wdXNoKGJsb2NrKGFycmF5W2ldKSlcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8vIERlZ3JlZXMgdG8gcmFkaWFuc1xuLCByYWRpYW5zOiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuIGQgJSAzNjAgKiBNYXRoLlBJIC8gMTgwXG4gIH1cbiAgLy8gUmFkaWFucyB0byBkZWdyZWVzXG4sIGRlZ3JlZXM6IGZ1bmN0aW9uKHIpIHtcbiAgICByZXR1cm4gciAqIDE4MCAvIE1hdGguUEkgJSAzNjBcbiAgfVxuLCBmaWx0ZXJTVkdFbGVtZW50czogZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiBbXS5maWx0ZXIuY2FsbChwLCBmdW5jdGlvbihlbCl7IHJldHVybiBlbCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgfSlcbiAgfVxuXG59XG5cblNWRy5kZWZhdWx0cyA9IHtcbiAgLy8gRGVmYXVsdCBhdHRyaWJ1dGUgdmFsdWVzXG4gIGF0dHJzOiB7XG4gICAgLy8gZmlsbCBhbmQgc3Ryb2tlXG4gICAgJ2ZpbGwtb3BhY2l0eSc6ICAgICAxXG4gICwgJ3N0cm9rZS1vcGFjaXR5JzogICAxXG4gICwgJ3N0cm9rZS13aWR0aCc6ICAgICAwXG4gICwgJ3N0cm9rZS1saW5lam9pbic6ICAnbWl0ZXInXG4gICwgJ3N0cm9rZS1saW5lY2FwJzogICAnYnV0dCdcbiAgLCBmaWxsOiAgICAgICAgICAgICAgICcjMDAwMDAwJ1xuICAsIHN0cm9rZTogICAgICAgICAgICAgJyMwMDAwMDAnXG4gICwgb3BhY2l0eTogICAgICAgICAgICAxXG4gICAgLy8gcG9zaXRpb25cbiAgLCB4OiAgICAgICAgICAgICAgICAgIDBcbiAgLCB5OiAgICAgICAgICAgICAgICAgIDBcbiAgLCBjeDogICAgICAgICAgICAgICAgIDBcbiAgLCBjeTogICAgICAgICAgICAgICAgIDBcbiAgICAvLyBzaXplXG4gICwgd2lkdGg6ICAgICAgICAgICAgICAwXG4gICwgaGVpZ2h0OiAgICAgICAgICAgICAwXG4gICAgLy8gcmFkaXVzXG4gICwgcjogICAgICAgICAgICAgICAgICAwXG4gICwgcng6ICAgICAgICAgICAgICAgICAwXG4gICwgcnk6ICAgICAgICAgICAgICAgICAwXG4gICAgLy8gZ3JhZGllbnRcbiAgLCBvZmZzZXQ6ICAgICAgICAgICAgIDBcbiAgLCAnc3RvcC1vcGFjaXR5JzogICAgIDFcbiAgLCAnc3RvcC1jb2xvcic6ICAgICAgICcjMDAwMDAwJ1xuICAgIC8vIHRleHRcbiAgLCAnZm9udC1zaXplJzogICAgICAgIDE2XG4gICwgJ2ZvbnQtZmFtaWx5JzogICAgICAnSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZidcbiAgLCAndGV4dC1hbmNob3InOiAgICAgICdzdGFydCdcbiAgfVxuXG59XG4vLyBNb2R1bGUgZm9yIGNvbG9yIGNvbnZlcnRpb25zXG5TVkcuQ29sb3IgPSBmdW5jdGlvbihjb2xvcikge1xuICB2YXIgbWF0Y2hcblxuICAvLyBpbml0aWFsaXplIGRlZmF1bHRzXG4gIHRoaXMuciA9IDBcbiAgdGhpcy5nID0gMFxuICB0aGlzLmIgPSAwXG5cbiAgLy8gcGFyc2UgY29sb3JcbiAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoU1ZHLnJlZ2V4LmlzUmdiLnRlc3QoY29sb3IpKSB7XG4gICAgICAvLyBnZXQgcmdiIHZhbHVlc1xuICAgICAgbWF0Y2ggPSBTVkcucmVnZXgucmdiLmV4ZWMoY29sb3IucmVwbGFjZSgvXFxzL2csJycpKVxuXG4gICAgICAvLyBwYXJzZSBudW1lcmljIHZhbHVlc1xuICAgICAgdGhpcy5yID0gcGFyc2VJbnQobWF0Y2hbMV0pXG4gICAgICB0aGlzLmcgPSBwYXJzZUludChtYXRjaFsyXSlcbiAgICAgIHRoaXMuYiA9IHBhcnNlSW50KG1hdGNoWzNdKVxuXG4gICAgfSBlbHNlIGlmIChTVkcucmVnZXguaXNIZXgudGVzdChjb2xvcikpIHtcbiAgICAgIC8vIGdldCBoZXggdmFsdWVzXG4gICAgICBtYXRjaCA9IFNWRy5yZWdleC5oZXguZXhlYyhmdWxsSGV4KGNvbG9yKSlcblxuICAgICAgLy8gcGFyc2UgbnVtZXJpYyB2YWx1ZXNcbiAgICAgIHRoaXMuciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxNilcbiAgICAgIHRoaXMuZyA9IHBhcnNlSW50KG1hdGNoWzJdLCAxNilcbiAgICAgIHRoaXMuYiA9IHBhcnNlSW50KG1hdGNoWzNdLCAxNilcblxuICAgIH1cblxuICB9IGVsc2UgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ29iamVjdCcpIHtcbiAgICB0aGlzLnIgPSBjb2xvci5yXG4gICAgdGhpcy5nID0gY29sb3IuZ1xuICAgIHRoaXMuYiA9IGNvbG9yLmJcblxuICB9XG5cbn1cblxuU1ZHLmV4dGVuZChTVkcuQ29sb3IsIHtcbiAgLy8gRGVmYXVsdCB0byBoZXggY29udmVyc2lvblxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9IZXgoKVxuICB9XG4gIC8vIEJ1aWxkIGhleCB2YWx1ZVxuLCB0b0hleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcjJ1xuICAgICAgKyBjb21wVG9IZXgodGhpcy5yKVxuICAgICAgKyBjb21wVG9IZXgodGhpcy5nKVxuICAgICAgKyBjb21wVG9IZXgodGhpcy5iKVxuICB9XG4gIC8vIEJ1aWxkIHJnYiB2YWx1ZVxuLCB0b1JnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICdyZ2IoJyArIFt0aGlzLnIsIHRoaXMuZywgdGhpcy5iXS5qb2luKCkgKyAnKSdcbiAgfVxuICAvLyBDYWxjdWxhdGUgdHJ1ZSBicmlnaHRuZXNzXG4sIGJyaWdodG5lc3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5yIC8gMjU1ICogMC4zMClcbiAgICAgICAgICsgKHRoaXMuZyAvIDI1NSAqIDAuNTkpXG4gICAgICAgICArICh0aGlzLmIgLyAyNTUgKiAwLjExKVxuICB9XG4gIC8vIE1ha2UgY29sb3IgbW9ycGhhYmxlXG4sIG1vcnBoOiBmdW5jdGlvbihjb2xvcikge1xuICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU1ZHLkNvbG9yKGNvbG9yKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICAvLyBHZXQgbW9ycGhlZCBjb2xvciBhdCBnaXZlbiBwb3NpdGlvblxuLCBhdDogZnVuY3Rpb24ocG9zKSB7XG4gICAgLy8gbWFrZSBzdXJlIGEgZGVzdGluYXRpb24gaXMgZGVmaW5lZFxuICAgIGlmICghdGhpcy5kZXN0aW5hdGlvbikgcmV0dXJuIHRoaXNcblxuICAgIC8vIG5vcm1hbGlzZSBwb3NcbiAgICBwb3MgPSBwb3MgPCAwID8gMCA6IHBvcyA+IDEgPyAxIDogcG9zXG5cbiAgICAvLyBnZW5lcmF0ZSBtb3JwaGVkIGNvbG9yXG4gICAgcmV0dXJuIG5ldyBTVkcuQ29sb3Ioe1xuICAgICAgcjogfn4odGhpcy5yICsgKHRoaXMuZGVzdGluYXRpb24uciAtIHRoaXMucikgKiBwb3MpXG4gICAgLCBnOiB+fih0aGlzLmcgKyAodGhpcy5kZXN0aW5hdGlvbi5nIC0gdGhpcy5nKSAqIHBvcylcbiAgICAsIGI6IH5+KHRoaXMuYiArICh0aGlzLmRlc3RpbmF0aW9uLmIgLSB0aGlzLmIpICogcG9zKVxuICAgIH0pXG4gIH1cblxufSlcblxuLy8gVGVzdGVyc1xuXG4vLyBUZXN0IGlmIGdpdmVuIHZhbHVlIGlzIGEgY29sb3Igc3RyaW5nXG5TVkcuQ29sb3IudGVzdCA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gIGNvbG9yICs9ICcnXG4gIHJldHVybiBTVkcucmVnZXguaXNIZXgudGVzdChjb2xvcilcbiAgICAgIHx8IFNWRy5yZWdleC5pc1JnYi50ZXN0KGNvbG9yKVxufVxuXG4vLyBUZXN0IGlmIGdpdmVuIHZhbHVlIGlzIGEgcmdiIG9iamVjdFxuU1ZHLkNvbG9yLmlzUmdiID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgcmV0dXJuIGNvbG9yICYmIHR5cGVvZiBjb2xvci5yID09ICdudW1iZXInXG4gICAgICAgICAgICAgICAmJiB0eXBlb2YgY29sb3IuZyA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgJiYgdHlwZW9mIGNvbG9yLmIgPT0gJ251bWJlcidcbn1cblxuLy8gVGVzdCBpZiBnaXZlbiB2YWx1ZSBpcyBhIGNvbG9yXG5TVkcuQ29sb3IuaXNDb2xvciA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gIHJldHVybiBTVkcuQ29sb3IuaXNSZ2IoY29sb3IpIHx8IFNWRy5Db2xvci50ZXN0KGNvbG9yKVxufVxuLy8gTW9kdWxlIGZvciBhcnJheSBjb252ZXJzaW9uXG5TVkcuQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgZmFsbGJhY2spIHtcbiAgYXJyYXkgPSAoYXJyYXkgfHwgW10pLnZhbHVlT2YoKVxuXG4gIC8vIGlmIGFycmF5IGlzIGVtcHR5IGFuZCBmYWxsYmFjayBpcyBwcm92aWRlZCwgdXNlIGZhbGxiYWNrXG4gIGlmIChhcnJheS5sZW5ndGggPT0gMCAmJiBmYWxsYmFjaylcbiAgICBhcnJheSA9IGZhbGxiYWNrLnZhbHVlT2YoKVxuXG4gIC8vIHBhcnNlIGFycmF5XG4gIHRoaXMudmFsdWUgPSB0aGlzLnBhcnNlKGFycmF5KVxufVxuXG5TVkcuZXh0ZW5kKFNWRy5BcnJheSwge1xuICAvLyBNYWtlIGFycmF5IG1vcnBoYWJsZVxuICBtb3JwaDogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB0aGlzLmRlc3RpbmF0aW9uID0gdGhpcy5wYXJzZShhcnJheSlcblxuICAgIC8vIG5vcm1hbGl6ZSBsZW5ndGggb2YgYXJyYXlzXG4gICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoICE9IHRoaXMuZGVzdGluYXRpb24ubGVuZ3RoKSB7XG4gICAgICB2YXIgbGFzdFZhbHVlICAgICAgID0gdGhpcy52YWx1ZVt0aGlzLnZhbHVlLmxlbmd0aCAtIDFdXG4gICAgICAgICwgbGFzdERlc3RpbmF0aW9uID0gdGhpcy5kZXN0aW5hdGlvblt0aGlzLmRlc3RpbmF0aW9uLmxlbmd0aCAtIDFdXG5cbiAgICAgIHdoaWxlKHRoaXMudmFsdWUubGVuZ3RoID4gdGhpcy5kZXN0aW5hdGlvbi5sZW5ndGgpXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ucHVzaChsYXN0RGVzdGluYXRpb24pXG4gICAgICB3aGlsZSh0aGlzLnZhbHVlLmxlbmd0aCA8IHRoaXMuZGVzdGluYXRpb24ubGVuZ3RoKVxuICAgICAgICB0aGlzLnZhbHVlLnB1c2gobGFzdFZhbHVlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgLy8gQ2xlYW4gdXAgYW55IGR1cGxpY2F0ZSBwb2ludHNcbiwgc2V0dGxlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBmaW5kIGFsbCB1bmlxdWUgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy52YWx1ZS5sZW5ndGgsIHNlZW4gPSBbXTsgaSA8IGlsOyBpKyspXG4gICAgICBpZiAoc2Vlbi5pbmRleE9mKHRoaXMudmFsdWVbaV0pID09IC0xKVxuICAgICAgICBzZWVuLnB1c2godGhpcy52YWx1ZVtpXSlcblxuICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICByZXR1cm4gdGhpcy52YWx1ZSA9IHNlZW5cbiAgfVxuICAvLyBHZXQgbW9ycGhlZCBhcnJheSBhdCBnaXZlbiBwb3NpdGlvblxuLCBhdDogZnVuY3Rpb24ocG9zKSB7XG4gICAgLy8gbWFrZSBzdXJlIGEgZGVzdGluYXRpb24gaXMgZGVmaW5lZFxuICAgIGlmICghdGhpcy5kZXN0aW5hdGlvbikgcmV0dXJuIHRoaXNcblxuICAgIC8vIGdlbmVyYXRlIG1vcnBoZWQgYXJyYXlcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB0aGlzLnZhbHVlLmxlbmd0aCwgYXJyYXkgPSBbXTsgaSA8IGlsOyBpKyspXG4gICAgICBhcnJheS5wdXNoKHRoaXMudmFsdWVbaV0gKyAodGhpcy5kZXN0aW5hdGlvbltpXSAtIHRoaXMudmFsdWVbaV0pICogcG9zKVxuXG4gICAgcmV0dXJuIG5ldyBTVkcuQXJyYXkoYXJyYXkpXG4gIH1cbiAgLy8gQ29udmVydCBhcnJheSB0byBzdHJpbmdcbiwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLmpvaW4oJyAnKVxuICB9XG4gIC8vIFJlYWwgdmFsdWVcbiwgdmFsdWVPZjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVcbiAgfVxuICAvLyBQYXJzZSB3aGl0ZXNwYWNlIHNlcGFyYXRlZCBzdHJpbmdcbiwgcGFyc2U6IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgYXJyYXkgPSBhcnJheS52YWx1ZU9mKClcblxuICAgIC8vIGlmIGFscmVhZHkgaXMgYW4gYXJyYXksIG5vIG5lZWQgdG8gcGFyc2UgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJheSkpIHJldHVybiBhcnJheVxuXG4gICAgcmV0dXJuIHRoaXMuc3BsaXQoYXJyYXkpXG4gIH1cbiAgLy8gU3RyaXAgdW5uZWNlc3Nhcnkgd2hpdGVzcGFjZVxuLCBzcGxpdDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL1xccysvKVxuICB9XG4gIC8vIFJldmVyc2UgYXJyYXlcbiwgcmV2ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy52YWx1ZS5yZXZlcnNlKClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufSlcbi8vIFBvbHkgcG9pbnRzIGFycmF5XG5TVkcuUG9pbnRBcnJheSA9IGZ1bmN0aW9uKGFycmF5LCBmYWxsYmFjaykge1xuICB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgYXJyYXksIGZhbGxiYWNrIHx8IFtbMCwwXV0pXG59XG5cbi8vIEluaGVyaXQgZnJvbSBTVkcuQXJyYXlcblNWRy5Qb2ludEFycmF5LnByb3RvdHlwZSA9IG5ldyBTVkcuQXJyYXlcblxuU1ZHLmV4dGVuZChTVkcuUG9pbnRBcnJheSwge1xuICAvLyBDb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgLy8gY29udmVydCB0byBhIHBvbHkgcG9pbnQgc3RyaW5nXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy52YWx1ZS5sZW5ndGgsIGFycmF5ID0gW107IGkgPCBpbDsgaSsrKVxuICAgICAgYXJyYXkucHVzaCh0aGlzLnZhbHVlW2ldLmpvaW4oJywnKSlcblxuICAgIHJldHVybiBhcnJheS5qb2luKCcgJylcbiAgfVxuICAvLyBDb252ZXJ0IGFycmF5IHRvIGxpbmUgb2JqZWN0XG4sIHRvTGluZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHgxOiB0aGlzLnZhbHVlWzBdWzBdXG4gICAgLCB5MTogdGhpcy52YWx1ZVswXVsxXVxuICAgICwgeDI6IHRoaXMudmFsdWVbMV1bMF1cbiAgICAsIHkyOiB0aGlzLnZhbHVlWzFdWzFdXG4gICAgfVxuICB9XG4gIC8vIEdldCBtb3JwaGVkIGFycmF5IGF0IGdpdmVuIHBvc2l0aW9uXG4sIGF0OiBmdW5jdGlvbihwb3MpIHtcbiAgICAvLyBtYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXG4gICAgaWYgKCF0aGlzLmRlc3RpbmF0aW9uKSByZXR1cm4gdGhpc1xuXG4gICAgLy8gZ2VuZXJhdGUgbW9ycGhlZCBwb2ludCBzdHJpbmdcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB0aGlzLnZhbHVlLmxlbmd0aCwgYXJyYXkgPSBbXTsgaSA8IGlsOyBpKyspXG4gICAgICBhcnJheS5wdXNoKFtcbiAgICAgICAgdGhpcy52YWx1ZVtpXVswXSArICh0aGlzLmRlc3RpbmF0aW9uW2ldWzBdIC0gdGhpcy52YWx1ZVtpXVswXSkgKiBwb3NcbiAgICAgICwgdGhpcy52YWx1ZVtpXVsxXSArICh0aGlzLmRlc3RpbmF0aW9uW2ldWzFdIC0gdGhpcy52YWx1ZVtpXVsxXSkgKiBwb3NcbiAgICAgIF0pXG5cbiAgICByZXR1cm4gbmV3IFNWRy5Qb2ludEFycmF5KGFycmF5KVxuICB9XG4gIC8vIFBhcnNlIHBvaW50IHN0cmluZ1xuLCBwYXJzZTogZnVuY3Rpb24oYXJyYXkpIHtcbiAgICBhcnJheSA9IGFycmF5LnZhbHVlT2YoKVxuXG4gICAgLy8gaWYgYWxyZWFkeSBpcyBhbiBhcnJheSwgbm8gbmVlZCB0byBwYXJzZSBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkgcmV0dXJuIGFycmF5XG5cbiAgICAvLyBzcGxpdCBwb2ludHNcbiAgICBhcnJheSA9IHRoaXMuc3BsaXQoYXJyYXkpXG5cbiAgICAvLyBwYXJzZSBwb2ludHNcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGgsIHAsIHBvaW50cyA9IFtdOyBpIDwgaWw7IGkrKykge1xuICAgICAgcCA9IGFycmF5W2ldLnNwbGl0KCcsJylcbiAgICAgIHBvaW50cy5wdXNoKFtwYXJzZUZsb2F0KHBbMF0pLCBwYXJzZUZsb2F0KHBbMV0pXSlcbiAgICB9XG5cbiAgICByZXR1cm4gcG9pbnRzXG4gIH1cbiAgLy8gTW92ZSBwb2ludCBzdHJpbmdcbiwgbW92ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBib3ggPSB0aGlzLmJib3goKVxuXG4gICAgLy8gZ2V0IHJlbGF0aXZlIG9mZnNldFxuICAgIHggLT0gYm94LnhcbiAgICB5IC09IGJveC55XG5cbiAgICAvLyBtb3ZlIGV2ZXJ5IHBvaW50XG4gICAgaWYgKCFpc05hTih4KSAmJiAhaXNOYU4oeSkpXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgdGhpcy52YWx1ZVtpXSA9IFt0aGlzLnZhbHVlW2ldWzBdICsgeCwgdGhpcy52YWx1ZVtpXVsxXSArIHldXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIC8vIFJlc2l6ZSBwb2x5IHN0cmluZ1xuLCBzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGksIGJveCA9IHRoaXMuYmJveCgpXG5cbiAgICAvLyByZWNhbGN1bGF0ZSBwb3NpdGlvbiBvZiBhbGwgcG9pbnRzIGFjY29yZGluZyB0byBuZXcgc2l6ZVxuICAgIGZvciAoaSA9IHRoaXMudmFsdWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMudmFsdWVbaV1bMF0gPSAoKHRoaXMudmFsdWVbaV1bMF0gLSBib3gueCkgKiB3aWR0aCkgIC8gYm94LndpZHRoICArIGJveC54XG4gICAgICB0aGlzLnZhbHVlW2ldWzFdID0gKCh0aGlzLnZhbHVlW2ldWzFdIC0gYm94LnkpICogaGVpZ2h0KSAvIGJveC5oZWlnaHQgKyBib3gueVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgLy8gR2V0IGJvdW5kaW5nIGJveCBvZiBwb2ludHNcbiwgYmJveDogZnVuY3Rpb24oKSB7XG4gICAgU1ZHLnBhcnNlci5wb2x5LnNldEF0dHJpYnV0ZSgncG9pbnRzJywgdGhpcy50b1N0cmluZygpKVxuXG4gICAgcmV0dXJuIFNWRy5wYXJzZXIucG9seS5nZXRCQm94KClcbiAgfVxuXG59KVxuLy8gUGF0aCBwb2ludHMgYXJyYXlcblNWRy5QYXRoQXJyYXkgPSBmdW5jdGlvbihhcnJheSwgZmFsbGJhY2spIHtcbiAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIGFycmF5LCBmYWxsYmFjayB8fCBbWydNJywgMCwgMF1dKVxufVxuXG4vLyBJbmhlcml0IGZyb20gU1ZHLkFycmF5XG5TVkcuUGF0aEFycmF5LnByb3RvdHlwZSA9IG5ldyBTVkcuQXJyYXlcblxuU1ZHLmV4dGVuZChTVkcuUGF0aEFycmF5LCB7XG4gIC8vIENvbnZlcnQgYXJyYXkgdG8gc3RyaW5nXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJyYXlUb1N0cmluZyh0aGlzLnZhbHVlKVxuICB9XG4gIC8vIE1vdmUgcGF0aCBzdHJpbmdcbiwgbW92ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIC8vIGdldCBib3VuZGluZyBib3ggb2YgY3VycmVudCBzaXR1YXRpb25cbiAgICB2YXIgYm94ID0gdGhpcy5iYm94KClcblxuICAgIC8vIGdldCByZWxhdGl2ZSBvZmZzZXRcbiAgICB4IC09IGJveC54XG4gICAgeSAtPSBib3gueVxuXG4gICAgaWYgKCFpc05hTih4KSAmJiAhaXNOYU4oeSkpIHtcbiAgICAgIC8vIG1vdmUgZXZlcnkgcG9pbnRcbiAgICAgIGZvciAodmFyIGwsIGkgPSB0aGlzLnZhbHVlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGwgPSB0aGlzLnZhbHVlW2ldWzBdXG5cbiAgICAgICAgaWYgKGwgPT0gJ00nIHx8IGwgPT0gJ0wnIHx8IGwgPT0gJ1QnKSAge1xuICAgICAgICAgIHRoaXMudmFsdWVbaV1bMV0gKz0geFxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bMl0gKz0geVxuXG4gICAgICAgIH0gZWxzZSBpZiAobCA9PSAnSCcpICB7XG4gICAgICAgICAgdGhpcy52YWx1ZVtpXVsxXSArPSB4XG5cbiAgICAgICAgfSBlbHNlIGlmIChsID09ICdWJykgIHtcbiAgICAgICAgICB0aGlzLnZhbHVlW2ldWzFdICs9IHlcblxuICAgICAgICB9IGVsc2UgaWYgKGwgPT0gJ0MnIHx8IGwgPT0gJ1MnIHx8IGwgPT0gJ1EnKSAge1xuICAgICAgICAgIHRoaXMudmFsdWVbaV1bMV0gKz0geFxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bMl0gKz0geVxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bM10gKz0geFxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bNF0gKz0geVxuXG4gICAgICAgICAgaWYgKGwgPT0gJ0MnKSAge1xuICAgICAgICAgICAgdGhpcy52YWx1ZVtpXVs1XSArPSB4XG4gICAgICAgICAgICB0aGlzLnZhbHVlW2ldWzZdICs9IHlcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChsID09ICdBJykgIHtcbiAgICAgICAgICB0aGlzLnZhbHVlW2ldWzZdICs9IHhcbiAgICAgICAgICB0aGlzLnZhbHVlW2ldWzddICs9IHlcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICAvLyBSZXNpemUgcGF0aCBzdHJpbmdcbiwgc2l6ZTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgIC8vIGdldCBib3VuZGluZyBib3ggb2YgY3VycmVudCBzaXR1YXRpb25cbiAgICB2YXIgaSwgbCwgYm94ID0gdGhpcy5iYm94KClcblxuICAgIC8vIHJlY2FsY3VsYXRlIHBvc2l0aW9uIG9mIGFsbCBwb2ludHMgYWNjb3JkaW5nIHRvIG5ldyBzaXplXG4gICAgZm9yIChpID0gdGhpcy52YWx1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgbCA9IHRoaXMudmFsdWVbaV1bMF1cblxuICAgICAgaWYgKGwgPT0gJ00nIHx8IGwgPT0gJ0wnIHx8IGwgPT0gJ1QnKSAge1xuICAgICAgICB0aGlzLnZhbHVlW2ldWzFdID0gKCh0aGlzLnZhbHVlW2ldWzFdIC0gYm94LngpICogd2lkdGgpICAvIGJveC53aWR0aCAgKyBib3gueFxuICAgICAgICB0aGlzLnZhbHVlW2ldWzJdID0gKCh0aGlzLnZhbHVlW2ldWzJdIC0gYm94LnkpICogaGVpZ2h0KSAvIGJveC5oZWlnaHQgKyBib3gueVxuXG4gICAgICB9IGVsc2UgaWYgKGwgPT0gJ0gnKSAge1xuICAgICAgICB0aGlzLnZhbHVlW2ldWzFdID0gKCh0aGlzLnZhbHVlW2ldWzFdIC0gYm94LngpICogd2lkdGgpICAvIGJveC53aWR0aCAgKyBib3gueFxuXG4gICAgICB9IGVsc2UgaWYgKGwgPT0gJ1YnKSAge1xuICAgICAgICB0aGlzLnZhbHVlW2ldWzFdID0gKCh0aGlzLnZhbHVlW2ldWzFdIC0gYm94LnkpICogaGVpZ2h0KSAvIGJveC5oZWlnaHQgKyBib3gueVxuXG4gICAgICB9IGVsc2UgaWYgKGwgPT0gJ0MnIHx8IGwgPT0gJ1MnIHx8IGwgPT0gJ1EnKSAge1xuICAgICAgICB0aGlzLnZhbHVlW2ldWzFdID0gKCh0aGlzLnZhbHVlW2ldWzFdIC0gYm94LngpICogd2lkdGgpICAvIGJveC53aWR0aCAgKyBib3gueFxuICAgICAgICB0aGlzLnZhbHVlW2ldWzJdID0gKCh0aGlzLnZhbHVlW2ldWzJdIC0gYm94LnkpICogaGVpZ2h0KSAvIGJveC5oZWlnaHQgKyBib3gueVxuICAgICAgICB0aGlzLnZhbHVlW2ldWzNdID0gKCh0aGlzLnZhbHVlW2ldWzNdIC0gYm94LngpICogd2lkdGgpICAvIGJveC53aWR0aCAgKyBib3gueFxuICAgICAgICB0aGlzLnZhbHVlW2ldWzRdID0gKCh0aGlzLnZhbHVlW2ldWzRdIC0gYm94LnkpICogaGVpZ2h0KSAvIGJveC5oZWlnaHQgKyBib3gueVxuXG4gICAgICAgIGlmIChsID09ICdDJykgIHtcbiAgICAgICAgICB0aGlzLnZhbHVlW2ldWzVdID0gKCh0aGlzLnZhbHVlW2ldWzVdIC0gYm94LngpICogd2lkdGgpICAvIGJveC53aWR0aCAgKyBib3gueFxuICAgICAgICAgIHRoaXMudmFsdWVbaV1bNl0gPSAoKHRoaXMudmFsdWVbaV1bNl0gLSBib3gueSkgKiBoZWlnaHQpIC8gYm94LmhlaWdodCArIGJveC55XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmIChsID09ICdBJykgIHtcbiAgICAgICAgLy8gcmVzaXplIHJhZGlpXG4gICAgICAgIHRoaXMudmFsdWVbaV1bMV0gPSAodGhpcy52YWx1ZVtpXVsxXSAqIHdpZHRoKSAgLyBib3gud2lkdGhcbiAgICAgICAgdGhpcy52YWx1ZVtpXVsyXSA9ICh0aGlzLnZhbHVlW2ldWzJdICogaGVpZ2h0KSAvIGJveC5oZWlnaHRcblxuICAgICAgICAvLyBtb3ZlIHBvc2l0aW9uIHZhbHVlc1xuICAgICAgICB0aGlzLnZhbHVlW2ldWzZdID0gKCh0aGlzLnZhbHVlW2ldWzZdIC0gYm94LngpICogd2lkdGgpICAvIGJveC53aWR0aCAgKyBib3gueFxuICAgICAgICB0aGlzLnZhbHVlW2ldWzddID0gKCh0aGlzLnZhbHVlW2ldWzddIC0gYm94LnkpICogaGVpZ2h0KSAvIGJveC5oZWlnaHQgKyBib3gueVxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICAvLyBBYnNvbHV0aXplIGFuZCBwYXJzZSBwYXRoIHRvIGFycmF5XG4sIHBhcnNlOiBmdW5jdGlvbihhcnJheSkge1xuICAgIC8vIGlmIGl0J3MgYWxyZWFkeSBhIHBhdGhhcnJheSwgbm8gbmVlZCB0byBwYXJzZSBpdFxuICAgIGlmIChhcnJheSBpbnN0YW5jZW9mIFNWRy5QYXRoQXJyYXkpIHJldHVybiBhcnJheS52YWx1ZU9mKClcblxuICAgIC8vIHByZXBhcmUgZm9yIHBhcnNpbmdcbiAgICB2YXIgaSwgeDAsIHkwLCBzLCBzZWcsIGFyclxuICAgICAgLCB4ID0gMFxuICAgICAgLCB5ID0gMFxuICAgICAgLCBwYXJhbUNudCA9IHsgJ00nOjIsICdMJzoyLCAnSCc6MSwgJ1YnOjEsICdDJzo2LCAnUyc6NCwgJ1EnOjQsICdUJzoyLCAnQSc6NyB9XG5cbiAgICBpZih0eXBlb2YgYXJyYXkgPT0gJ3N0cmluZycpe1xuXG4gICAgICBhcnJheSA9IGFycmF5XG4gICAgICAgIC5yZXBsYWNlKFNWRy5yZWdleC5uZWdFeHAsICdYJykgICAgICAgICAvLyByZXBsYWNlIGFsbCBuZWdhdGl2ZSBleHBvbmVudHMgd2l0aCBjZXJ0YWluIGNoYXJcbiAgICAgICAgLnJlcGxhY2UoU1ZHLnJlZ2V4LnBhdGhMZXR0ZXJzLCAnICQmICcpIC8vIHB1dCBzb21lIHJvb20gYmV0d2VlbiBsZXR0ZXJzIGFuZCBudW1iZXJzXG4gICAgICAgIC5yZXBsYWNlKFNWRy5yZWdleC5oeXBoZW4sICcgLScpICAgICAgICAvLyBhZGQgc3BhY2UgYmVmb3JlIGh5cGhlblxuICAgICAgICAucmVwbGFjZShTVkcucmVnZXguY29tbWEsICcgJykgICAgICAgICAgLy8gdW5pZnkgYWxsIHNwYWNlc1xuICAgICAgICAucmVwbGFjZShTVkcucmVnZXguWCwgJ2UtJykgICAgICAgICAgICAgLy8gYWRkIGJhY2sgdGhlIGV4cG9lbnRcbiAgICAgICAgLnRyaW0oKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaW1cbiAgICAgICAgLnNwbGl0KFNWRy5yZWdleC53aGl0ZXNwYWNlcykgICAgICAgICAgIC8vIHNwbGl0IGludG8gYXJyYXlcblxuICAgIH1lbHNle1xuICAgICAgYXJyYXkgPSBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3Vycil7XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkocHJldiwgY3VycilcbiAgICAgIH0sIFtdKVxuICAgIH1cblxuICAgIC8vIGFycmF5IG5vdyBpcyBhbiBhcnJheSBjb250YWluaW5nIGFsbCBwYXJ0cyBvZiBhIHBhdGggZS5nLiBbJ00nLCAnMCcsICcwJywgJ0wnLCAnMzAnLCAnMzAnIC4uLl1cblxuICAgIHZhciBhcnIgPSBbXVxuXG4gICAgZG97XG5cbiAgICAgIC8vIFRlc3QgaWYgd2UgaGF2ZSBhIHBhdGggbGV0dGVyXG4gICAgICBpZihTVkcucmVnZXguaXNQYXRoTGV0dGVyLnRlc3QoYXJyYXlbMF0pKXtcbiAgICAgICAgcyA9IGFycmF5WzBdXG4gICAgICAgIGFycmF5LnNoaWZ0KClcbiAgICAgIC8vIElmIGxhc3QgbGV0dGVyIHdhcyBhIG1vdmUgY29tbWFuZCBhbmQgd2UgZ290IG5vIG5ldywgaXQgZGVmYXVsdHMgdG8gW0xdaW5lXG4gICAgICB9ZWxzZSBpZihzLnRvVXBwZXJDYXNlKCkgPT0gJ00nKXtcbiAgICAgICAgcyA9ICdMJ1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgcGF0aCBsZXR0ZXIgYXMgZmlyc3QgZWxlbWVudFxuICAgICAgc2VnID0gW3MudG9VcHBlckNhc2UoKV1cblxuICAgICAgLy8gcHVzaCBhbGwgbmVjZXNzYXJ5IHBhcmFtZXRlcnMgdG8gc2VnbWVudFxuICAgICAgZm9yKGkgPSAwOyBpIDwgcGFyYW1DbnRbc2VnWzBdXTsgKytpKXtcbiAgICAgICAgc2VnLnB1c2gocGFyc2VGbG9hdChhcnJheS5zaGlmdCgpKSlcbiAgICAgIH1cblxuICAgICAgLy8gdXBwZXIgY2FzZVxuICAgICAgaWYocyA9PSBzZWdbMF0pe1xuXG4gICAgICAgIGlmKHMgPT0gJ00nIHx8IHMgPT0gJ0wnIHx8IHMgPT0gJ0MnIHx8IHMgPT0gJ1EnKXtcbiAgICAgICAgICB4ID0gc2VnW3BhcmFtQ250W3NlZ1swXV0tMV1cbiAgICAgICAgICB5ID0gc2VnW3BhcmFtQ250W3NlZ1swXV1dXG4gICAgICAgIH1lbHNlIGlmKHMgPT0gJ1YnKXtcbiAgICAgICAgICB5ID0gc2VnWzFdXG4gICAgICAgIH1lbHNlIGlmKHMgPT0gJ0gnKXtcbiAgICAgICAgICB4ID0gc2VnWzFdXG4gICAgICAgIH1lbHNlIGlmKHMgPT0gJ0EnKXtcbiAgICAgICAgICB4ID0gc2VnWzZdXG4gICAgICAgICAgeSA9IHNlZ1s3XVxuICAgICAgICB9XG5cbiAgICAgIC8vIGxvd2VyIGNhc2VcbiAgICAgIH1lbHNle1xuXG4gICAgICAgIC8vIGNvbnZlcnQgcmVsYXRpdmUgdG8gYWJzb2x1dGUgdmFsdWVzXG4gICAgICAgIGlmKHMgPT0gJ20nIHx8IHMgPT0gJ2wnIHx8IHMgPT0gJ2MnIHx8IHMgPT0gJ3MnIHx8IHMgPT0gJ3EnIHx8IHMgPT0gJ3QnKXtcblxuICAgICAgICAgIHNlZ1sxXSArPSB4XG4gICAgICAgICAgc2VnWzJdICs9IHlcblxuICAgICAgICAgIGlmKHNlZ1szXSAhPSBudWxsKXtcbiAgICAgICAgICAgIHNlZ1szXSArPSB4XG4gICAgICAgICAgICBzZWdbNF0gKz0geVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKHNlZ1s1XSAhPSBudWxsKXtcbiAgICAgICAgICAgIHNlZ1s1XSArPSB4XG4gICAgICAgICAgICBzZWdbNl0gKz0geVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG1vdmUgcG9pbnRlclxuICAgICAgICAgIHggPSBzZWdbcGFyYW1DbnRbc2VnWzBdXS0xXVxuICAgICAgICAgIHkgPSBzZWdbcGFyYW1DbnRbc2VnWzBdXV1cblxuICAgICAgICB9ZWxzZSBpZihzID09ICd2Jyl7XG4gICAgICAgICAgc2VnWzFdICs9IHlcbiAgICAgICAgICB5ID0gc2VnWzFdXG4gICAgICAgIH1lbHNlIGlmKHMgPT0gJ2gnKXtcbiAgICAgICAgICBzZWdbMV0gKz0geFxuICAgICAgICAgIHggPSBzZWdbMV1cbiAgICAgICAgfWVsc2UgaWYocyA9PSAnYScpe1xuICAgICAgICAgIHNlZ1s2XSArPSB4XG4gICAgICAgICAgc2VnWzddICs9IHlcbiAgICAgICAgICB4ID0gc2VnWzZdXG4gICAgICAgICAgeSA9IHNlZ1s3XVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgaWYoc2VnWzBdID09ICdNJyl7XG4gICAgICAgIHgwID0geFxuICAgICAgICB5MCA9IHlcbiAgICAgIH1cblxuICAgICAgaWYoc2VnWzBdID09ICdaJyl7XG4gICAgICAgIHggPSB4MFxuICAgICAgICB5ID0geTBcbiAgICAgIH1cblxuICAgICAgYXJyLnB1c2goc2VnKVxuXG4gICAgfXdoaWxlKGFycmF5Lmxlbmd0aClcblxuICAgIHJldHVybiBhcnJcblxuICB9XG4gIC8vIEdldCBib3VuZGluZyBib3ggb2YgcGF0aFxuLCBiYm94OiBmdW5jdGlvbigpIHtcbiAgICBTVkcucGFyc2VyLnBhdGguc2V0QXR0cmlidXRlKCdkJywgdGhpcy50b1N0cmluZygpKVxuXG4gICAgcmV0dXJuIFNWRy5wYXJzZXIucGF0aC5nZXRCQm94KClcbiAgfVxuXG59KVxuLy8gTW9kdWxlIGZvciB1bml0IGNvbnZlcnRpb25zXG5TVkcuTnVtYmVyID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemVcbiAgY3JlYXRlOiBmdW5jdGlvbih2YWx1ZSwgdW5pdCkge1xuICAgIC8vIGluaXRpYWxpemUgZGVmYXVsdHNcbiAgICB0aGlzLnZhbHVlID0gMFxuICAgIHRoaXMudW5pdCAgPSB1bml0IHx8ICcnXG5cbiAgICAvLyBwYXJzZSB2YWx1ZVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBlbnN1cmUgYSB2YWxpZCBudW1lcmljIHZhbHVlXG4gICAgICB0aGlzLnZhbHVlID0gaXNOYU4odmFsdWUpID8gMCA6ICFpc0Zpbml0ZSh2YWx1ZSkgPyAodmFsdWUgPCAwID8gLTMuNGUrMzggOiArMy40ZSszOCkgOiB2YWx1ZVxuXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB1bml0ID0gdmFsdWUubWF0Y2goU1ZHLnJlZ2V4LnVuaXQpXG5cbiAgICAgIGlmICh1bml0KSB7XG4gICAgICAgIC8vIG1ha2UgdmFsdWUgbnVtZXJpY1xuICAgICAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh1bml0WzFdKVxuXG4gICAgICAgIC8vIG5vcm1hbGl6ZVxuICAgICAgICBpZiAodW5pdFsyXSA9PSAnJScpXG4gICAgICAgICAgdGhpcy52YWx1ZSAvPSAxMDBcbiAgICAgICAgZWxzZSBpZiAodW5pdFsyXSA9PSAncycpXG4gICAgICAgICAgdGhpcy52YWx1ZSAqPSAxMDAwXG5cbiAgICAgICAgLy8gc3RvcmUgdW5pdFxuICAgICAgICB0aGlzLnVuaXQgPSB1bml0WzJdXG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgU1ZHLk51bWJlcikge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWUudmFsdWVPZigpXG4gICAgICAgIHRoaXMudW5pdCAgPSB2YWx1ZS51bml0XG4gICAgICB9XG4gICAgfVxuXG4gIH1cbiAgLy8gQWRkIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gU3RyaW5nYWxpemVcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnVuaXQgPT0gJyUnID9cbiAgICAgICAgICB+fih0aGlzLnZhbHVlICogMWU4KSAvIDFlNjpcbiAgICAgICAgdGhpcy51bml0ID09ICdzJyA/XG4gICAgICAgICAgdGhpcy52YWx1ZSAvIDFlMyA6XG4gICAgICAgICAgdGhpcy52YWx1ZVxuICAgICAgKSArIHRoaXMudW5pdFxuICAgIH1cbiAgLCAvLyBDb252ZXJ0IHRvIHByaW1pdGl2ZVxuICAgIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWVcbiAgICB9XG4gICAgLy8gQWRkIG51bWJlclxuICAsIHBsdXM6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgcmV0dXJuIG5ldyBTVkcuTnVtYmVyKHRoaXMgKyBuZXcgU1ZHLk51bWJlcihudW1iZXIpLCB0aGlzLnVuaXQpXG4gICAgfVxuICAgIC8vIFN1YnRyYWN0IG51bWJlclxuICAsIG1pbnVzOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsdXMoLW5ldyBTVkcuTnVtYmVyKG51bWJlcikpXG4gICAgfVxuICAgIC8vIE11bHRpcGx5IG51bWJlclxuICAsIHRpbWVzOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLk51bWJlcih0aGlzICogbmV3IFNWRy5OdW1iZXIobnVtYmVyKSwgdGhpcy51bml0KVxuICAgIH1cbiAgICAvLyBEaXZpZGUgbnVtYmVyXG4gICwgZGl2aWRlOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLk51bWJlcih0aGlzIC8gbmV3IFNWRy5OdW1iZXIobnVtYmVyKSwgdGhpcy51bml0KVxuICAgIH1cbiAgICAvLyBDb252ZXJ0IHRvIGRpZmZlcmVudCB1bml0XG4gICwgdG86IGZ1bmN0aW9uKHVuaXQpIHtcbiAgICAgIHZhciBudW1iZXIgPSBuZXcgU1ZHLk51bWJlcih0aGlzKVxuXG4gICAgICBpZiAodHlwZW9mIHVuaXQgPT09ICdzdHJpbmcnKVxuICAgICAgICBudW1iZXIudW5pdCA9IHVuaXRcblxuICAgICAgcmV0dXJuIG51bWJlclxuICAgIH1cbiAgICAvLyBNYWtlIG51bWJlciBtb3JwaGFibGVcbiAgLCBtb3JwaDogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IFNWRy5OdW1iZXIobnVtYmVyKVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBHZXQgbW9ycGhlZCBudW1iZXIgYXQgZ2l2ZW4gcG9zaXRpb25cbiAgLCBhdDogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAvLyBNYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXG4gICAgICBpZiAoIXRoaXMuZGVzdGluYXRpb24pIHJldHVybiB0aGlzXG5cbiAgICAgIC8vIEdlbmVyYXRlIG5ldyBtb3JwaGVkIG51bWJlclxuICAgICAgcmV0dXJuIG5ldyBTVkcuTnVtYmVyKHRoaXMuZGVzdGluYXRpb24pXG4gICAgICAgICAgLm1pbnVzKHRoaXMpXG4gICAgICAgICAgLnRpbWVzKHBvcylcbiAgICAgICAgICAucGx1cyh0aGlzKVxuICAgIH1cblxuICB9XG59KVxuXG5TVkcuVmlld0JveCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgdmFyIHgsIHksIHdpZHRoLCBoZWlnaHRcbiAgICAsIHdtICAgPSAxIC8vIHdpZHRoIG11bHRpcGxpZXJcbiAgICAsIGhtICAgPSAxIC8vIGhlaWdodCBtdWx0aXBsaWVyXG4gICAgLCBib3ggID0gZWxlbWVudC5iYm94KClcbiAgICAsIHZpZXcgPSAoZWxlbWVudC5hdHRyKCd2aWV3Qm94JykgfHwgJycpLm1hdGNoKC8tP1tcXGRcXC5dKy9nKVxuICAgICwgd2UgICA9IGVsZW1lbnRcbiAgICAsIGhlICAgPSBlbGVtZW50XG5cbiAgLy8gZ2V0IGRpbWVuc2lvbnMgb2YgY3VycmVudCBub2RlXG4gIHdpZHRoICA9IG5ldyBTVkcuTnVtYmVyKGVsZW1lbnQud2lkdGgoKSlcbiAgaGVpZ2h0ID0gbmV3IFNWRy5OdW1iZXIoZWxlbWVudC5oZWlnaHQoKSlcblxuICAvLyBmaW5kIG5lYXJlc3Qgbm9uLXBlcmNlbnR1YWwgZGltZW5zaW9uc1xuICB3aGlsZSAod2lkdGgudW5pdCA9PSAnJScpIHtcbiAgICB3bSAqPSB3aWR0aC52YWx1ZVxuICAgIHdpZHRoID0gbmV3IFNWRy5OdW1iZXIod2UgaW5zdGFuY2VvZiBTVkcuRG9jID8gd2UucGFyZW50KCkub2Zmc2V0V2lkdGggOiB3ZS5wYXJlbnQoKS53aWR0aCgpKVxuICAgIHdlID0gd2UucGFyZW50KClcbiAgfVxuICB3aGlsZSAoaGVpZ2h0LnVuaXQgPT0gJyUnKSB7XG4gICAgaG0gKj0gaGVpZ2h0LnZhbHVlXG4gICAgaGVpZ2h0ID0gbmV3IFNWRy5OdW1iZXIoaGUgaW5zdGFuY2VvZiBTVkcuRG9jID8gaGUucGFyZW50KCkub2Zmc2V0SGVpZ2h0IDogaGUucGFyZW50KCkuaGVpZ2h0KCkpXG4gICAgaGUgPSBoZS5wYXJlbnQoKVxuICB9XG5cbiAgLy8gZW5zdXJlIGRlZmF1bHRzXG4gIHRoaXMueCAgICAgID0gYm94LnhcbiAgdGhpcy55ICAgICAgPSBib3gueVxuICB0aGlzLndpZHRoICA9IHdpZHRoICAqIHdtXG4gIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0ICogaG1cbiAgdGhpcy56b29tICAgPSAxXG5cbiAgaWYgKHZpZXcpIHtcbiAgICAvLyBnZXQgd2lkdGggYW5kIGhlaWdodCBmcm9tIHZpZXdib3hcbiAgICB4ICAgICAgPSBwYXJzZUZsb2F0KHZpZXdbMF0pXG4gICAgeSAgICAgID0gcGFyc2VGbG9hdCh2aWV3WzFdKVxuICAgIHdpZHRoICA9IHBhcnNlRmxvYXQodmlld1syXSlcbiAgICBoZWlnaHQgPSBwYXJzZUZsb2F0KHZpZXdbM10pXG5cbiAgICAvLyBjYWxjdWxhdGUgem9vbSBhY2NvcmluZyB0byB2aWV3Ym94XG4gICAgdGhpcy56b29tID0gKCh0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQpID4gKHdpZHRoIC8gaGVpZ2h0KSkgP1xuICAgICAgdGhpcy5oZWlnaHQgLyBoZWlnaHQgOlxuICAgICAgdGhpcy53aWR0aCAgLyB3aWR0aFxuXG4gICAgLy8gY2FsY3VsYXRlIHJlYWwgcGl4ZWwgZGltZW5zaW9ucyBvbiBwYXJlbnQgU1ZHLkRvYyBlbGVtZW50XG4gICAgdGhpcy54ICAgICAgPSB4XG4gICAgdGhpcy55ICAgICAgPSB5XG4gICAgdGhpcy53aWR0aCAgPSB3aWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0XG5cbiAgfVxuXG59XG5cbi8vXG5TVkcuZXh0ZW5kKFNWRy5WaWV3Qm94LCB7XG4gIC8vIFBhcnNlIHZpZXdib3ggdG8gc3RyaW5nXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy54ICsgJyAnICsgdGhpcy55ICsgJyAnICsgdGhpcy53aWR0aCArICcgJyArIHRoaXMuaGVpZ2h0XG4gIH1cblxufSlcblxuU1ZHLkVsZW1lbnQgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIC8vIG1ha2Ugc3Ryb2tlIHZhbHVlIGFjY2Vzc2libGUgZHluYW1pY2FsbHlcbiAgICB0aGlzLl9zdHJva2UgPSBTVkcuZGVmYXVsdHMuYXR0cnMuc3Ryb2tlXG5cbiAgICAvLyBpbml0aWFsaXplIGRhdGEgb2JqZWN0XG4gICAgdGhpcy5kb20gPSB7fVxuXG4gICAgLy8gY3JlYXRlIGNpcmN1bGFyIHJlZmVyZW5jZVxuICAgIGlmICh0aGlzLm5vZGUgPSBub2RlKSB7XG4gICAgICB0aGlzLnR5cGUgPSBub2RlLm5vZGVOYW1lXG4gICAgICB0aGlzLm5vZGUuaW5zdGFuY2UgPSB0aGlzXG5cbiAgICAgIC8vIHN0b3JlIGN1cnJlbnQgYXR0cmlidXRlIHZhbHVlXG4gICAgICB0aGlzLl9zdHJva2UgPSBub2RlLmdldEF0dHJpYnV0ZSgnc3Ryb2tlJykgfHwgdGhpcy5fc3Ryb2tlXG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gTW92ZSBvdmVyIHgtYXhpc1xuICAgIHg6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3gnLCB4KVxuICAgIH1cbiAgICAvLyBNb3ZlIG92ZXIgeS1heGlzXG4gICwgeTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cigneScsIHkpXG4gICAgfVxuICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeC1heGlzXG4gICwgY3g6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB4ID09IG51bGwgPyB0aGlzLngoKSArIHRoaXMud2lkdGgoKSAvIDIgOiB0aGlzLngoeCAtIHRoaXMud2lkdGgoKSAvIDIpXG4gICAgfVxuICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeS1heGlzXG4gICwgY3k6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHJldHVybiB5ID09IG51bGwgPyB0aGlzLnkoKSArIHRoaXMuaGVpZ2h0KCkgLyAyIDogdGhpcy55KHkgLSB0aGlzLmhlaWdodCgpIC8gMilcbiAgICB9XG4gICAgLy8gTW92ZSBlbGVtZW50IHRvIGdpdmVuIHggYW5kIHkgdmFsdWVzXG4gICwgbW92ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgcmV0dXJuIHRoaXMueCh4KS55KHkpXG4gICAgfVxuICAgIC8vIE1vdmUgZWxlbWVudCBieSBpdHMgY2VudGVyXG4gICwgY2VudGVyOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4gdGhpcy5jeCh4KS5jeSh5KVxuICAgIH1cbiAgICAvLyBTZXQgd2lkdGggb2YgZWxlbWVudFxuICAsIHdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgICB9XG4gICAgLy8gU2V0IGhlaWdodCBvZiBlbGVtZW50XG4gICwgaGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgICB9XG4gICAgLy8gU2V0IGVsZW1lbnQgc2l6ZSB0byBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0XG4gICwgc2l6ZTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgdmFyIHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMuYmJveCgpLCB3aWR0aCwgaGVpZ2h0KVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgICAgICAud2lkdGgobmV3IFNWRy5OdW1iZXIocC53aWR0aCkpXG4gICAgICAgIC5oZWlnaHQobmV3IFNWRy5OdW1iZXIocC5oZWlnaHQpKVxuICAgIH1cbiAgICAvLyBDbG9uZSBlbGVtZW50XG4gICwgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gY2xvbmUgZWxlbWVudCBhbmQgYXNzaWduIG5ldyBpZFxuICAgICAgdmFyIGNsb25lID0gYXNzaWduTmV3SWQodGhpcy5ub2RlLmNsb25lTm9kZSh0cnVlKSlcblxuICAgICAgLy8gaW5zZXJ0IHRoZSBjbG9uZSBhZnRlciBteXNlbGZcbiAgICAgIHRoaXMuYWZ0ZXIoY2xvbmUpXG5cbiAgICAgIHJldHVybiBjbG9uZVxuICAgIH1cbiAgICAvLyBSZW1vdmUgZWxlbWVudFxuICAsIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5wYXJlbnQoKSlcbiAgICAgICAgdGhpcy5wYXJlbnQoKS5yZW1vdmVFbGVtZW50KHRoaXMpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIFJlcGxhY2UgZWxlbWVudFxuICAsIHJlcGxhY2U6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuYWZ0ZXIoZWxlbWVudCkucmVtb3ZlKClcblxuICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICB9XG4gICAgLy8gQWRkIGVsZW1lbnQgdG8gZ2l2ZW4gY29udGFpbmVyIGFuZCByZXR1cm4gc2VsZlxuICAsIGFkZFRvOiBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgIHJldHVybiBwYXJlbnQucHV0KHRoaXMpXG4gICAgfVxuICAgIC8vIEFkZCBlbGVtZW50IHRvIGdpdmVuIGNvbnRhaW5lciBhbmQgcmV0dXJuIGNvbnRhaW5lclxuICAsIHB1dEluOiBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgIHJldHVybiBwYXJlbnQuYWRkKHRoaXMpXG4gICAgfVxuICAgIC8vIEdldCAvIHNldCBpZFxuICAsIGlkOiBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignaWQnLCBpZClcbiAgICB9XG4gICAgLy8gQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHBvaW50IGluc2lkZSB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBlbGVtZW50XG4gICwgaW5zaWRlOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgYm94ID0gdGhpcy5iYm94KClcblxuICAgICAgcmV0dXJuIHggPiBib3gueFxuICAgICAgICAgICYmIHkgPiBib3gueVxuICAgICAgICAgICYmIHggPCBib3gueCArIGJveC53aWR0aFxuICAgICAgICAgICYmIHkgPCBib3gueSArIGJveC5oZWlnaHRcbiAgICB9XG4gICAgLy8gU2hvdyBlbGVtZW50XG4gICwgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHlsZSgnZGlzcGxheScsICcnKVxuICAgIH1cbiAgICAvLyBIaWRlIGVsZW1lbnRcbiAgLCBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKVxuICAgIH1cbiAgICAvLyBJcyBlbGVtZW50IHZpc2libGU/XG4gICwgdmlzaWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHlsZSgnZGlzcGxheScpICE9ICdub25lJ1xuICAgIH1cbiAgICAvLyBSZXR1cm4gaWQgb24gc3RyaW5nIGNvbnZlcnNpb25cbiAgLCB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdpZCcpXG4gICAgfVxuICAgIC8vIFJldHVybiBhcnJheSBvZiBjbGFzc2VzIG9uIHRoZSBub2RlXG4gICwgY2xhc3NlczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXR0ciA9IHRoaXMuYXR0cignY2xhc3MnKVxuXG4gICAgICByZXR1cm4gYXR0ciA9PSBudWxsID8gW10gOiBhdHRyLnRyaW0oKS5zcGxpdCgvXFxzKy8pXG4gICAgfVxuICAgIC8vIFJldHVybiB0cnVlIGlmIGNsYXNzIGV4aXN0cyBvbiB0aGUgbm9kZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gICwgaGFzQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNsYXNzZXMoKS5pbmRleE9mKG5hbWUpICE9IC0xXG4gICAgfVxuICAgIC8vIEFkZCBjbGFzcyB0byB0aGUgbm9kZVxuICAsIGFkZENsYXNzOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAoIXRoaXMuaGFzQ2xhc3MobmFtZSkpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gdGhpcy5jbGFzc2VzKClcbiAgICAgICAgYXJyYXkucHVzaChuYW1lKVxuICAgICAgICB0aGlzLmF0dHIoJ2NsYXNzJywgYXJyYXkuam9pbignICcpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBSZW1vdmUgY2xhc3MgZnJvbSB0aGUgbm9kZVxuICAsIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAodGhpcy5oYXNDbGFzcyhuYW1lKSkge1xuICAgICAgICB0aGlzLmF0dHIoJ2NsYXNzJywgdGhpcy5jbGFzc2VzKCkuZmlsdGVyKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICByZXR1cm4gYyAhPSBuYW1lXG4gICAgICAgIH0pLmpvaW4oJyAnKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gVG9nZ2xlIHRoZSBwcmVzZW5jZSBvZiBhIGNsYXNzIG9uIHRoZSBub2RlXG4gICwgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhc0NsYXNzKG5hbWUpID8gdGhpcy5yZW1vdmVDbGFzcyhuYW1lKSA6IHRoaXMuYWRkQ2xhc3MobmFtZSlcbiAgICB9XG4gICAgLy8gR2V0IHJlZmVyZW5jZWQgZWxlbWVudCBmb3JtIGF0dHJpYnV0ZSB2YWx1ZVxuICAsIHJlZmVyZW5jZTogZnVuY3Rpb24oYXR0cikge1xuICAgICAgcmV0dXJuIFNWRy5nZXQodGhpcy5hdHRyKGF0dHIpKVxuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBwYXJlbnQgZWxlbWVudCBpbnN0YW5jZVxuICAsIHBhcmVudDogZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXNcblxuICAgICAgLy8gY2hlY2sgZm9yIHBhcmVudFxuICAgICAgaWYoIXBhcmVudC5ub2RlLnBhcmVudE5vZGUpIHJldHVybiBudWxsXG5cbiAgICAgIC8vIGdldCBwYXJlbnQgZWxlbWVudFxuICAgICAgcGFyZW50ID0gU1ZHLmFkb3B0KHBhcmVudC5ub2RlLnBhcmVudE5vZGUpXG5cbiAgICAgIGlmKCF0eXBlKSByZXR1cm4gcGFyZW50XG5cbiAgICAgIC8vIGxvb3AgdHJvdWdoIGFuY2VzdG9ycyBpZiB0eXBlIGlzIGdpdmVuXG4gICAgICB3aGlsZShwYXJlbnQubm9kZSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpe1xuICAgICAgICBpZih0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnQubWF0Y2hlcyh0eXBlKSA6IHBhcmVudCBpbnN0YW5jZW9mIHR5cGUpIHJldHVybiBwYXJlbnRcbiAgICAgICAgcGFyZW50ID0gU1ZHLmFkb3B0KHBhcmVudC5ub2RlLnBhcmVudE5vZGUpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIEdldCBwYXJlbnQgZG9jdW1lbnRcbiAgLCBkb2M6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBTVkcuRG9jID8gdGhpcyA6IHRoaXMucGFyZW50KFNWRy5Eb2MpXG4gICAgfVxuICAgIC8vIHJldHVybiBhcnJheSBvZiBhbGwgYW5jZXN0b3JzIG9mIGdpdmVuIHR5cGUgdXAgdG8gdGhlIHJvb3Qgc3ZnXG4gICwgcGFyZW50czogZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIHBhcmVudHMgPSBbXSwgcGFyZW50ID0gdGhpc1xuXG4gICAgICBkb3tcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudCh0eXBlKVxuICAgICAgICBpZighcGFyZW50IHx8ICFwYXJlbnQubm9kZSkgYnJlYWtcblxuICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KVxuICAgICAgfSB3aGlsZShwYXJlbnQucGFyZW50KVxuXG4gICAgICByZXR1cm4gcGFyZW50c1xuICAgIH1cbiAgICAvLyBtYXRjaGVzIHRoZSBlbGVtZW50IHZzIGEgY3NzIHNlbGVjdG9yXG4gICwgbWF0Y2hlczogZnVuY3Rpb24oc2VsZWN0b3Ipe1xuICAgICAgcmV0dXJuIG1hdGNoZXModGhpcy5ub2RlLCBzZWxlY3RvcilcbiAgICB9XG4gICAgLy8gUmV0dXJucyB0aGUgc3ZnIG5vZGUgdG8gY2FsbCBuYXRpdmUgc3ZnIG1ldGhvZHMgb24gaXRcbiAgLCBuYXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZVxuICAgIH1cbiAgICAvLyBJbXBvcnQgcmF3IHN2Z1xuICAsIHN2ZzogZnVuY3Rpb24oc3ZnKSB7XG4gICAgICAvLyBjcmVhdGUgdGVtcG9yYXJ5IGhvbGRlclxuICAgICAgdmFyIHdlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdmcnKVxuXG4gICAgICAvLyBhY3QgYXMgYSBzZXR0ZXIgaWYgc3ZnIGlzIGdpdmVuXG4gICAgICBpZiAoc3ZnICYmIHRoaXMgaW5zdGFuY2VvZiBTVkcuUGFyZW50KSB7XG4gICAgICAgIC8vIGR1bXAgcmF3IHN2Z1xuICAgICAgICB3ZWxsLmlubmVySFRNTCA9ICc8c3ZnPicgKyBzdmcucmVwbGFjZSgvXFxuLywgJycpLnJlcGxhY2UoLzwoXFx3KykoW148XSs/KVxcLz4vZywgJzwkMSQyPjwvJDE+JykgKyAnPC9zdmc+J1xuXG4gICAgICAgIC8vIHRyYW5zcGxhbnQgbm9kZXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gd2VsbC5maXJzdENoaWxkLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgaWw7IGkrKylcbiAgICAgICAgICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQod2VsbC5maXJzdENoaWxkLmZpcnN0Q2hpbGQpXG5cbiAgICAgIC8vIG90aGVyd2lzZSBhY3QgYXMgYSBnZXR0ZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhIHdyYXBwaW5nIHN2ZyBlbGVtZW50IGluIGNhc2Ugb2YgcGFydGlhbCBjb250ZW50XG4gICAgICAgIHdlbGwuYXBwZW5kQ2hpbGQoc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3ZnJykpXG5cbiAgICAgICAgLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXG4gICAgICAgIHRoaXMud3JpdGVEYXRhVG9Eb20oKVxuXG4gICAgICAgIC8vIGluc2VydCBhIGNvcHkgb2YgdGhpcyBub2RlXG4gICAgICAgIHN2Zy5hcHBlbmRDaGlsZCh0aGlzLm5vZGUuY2xvbmVOb2RlKHRydWUpKVxuXG4gICAgICAgIC8vIHJldHVybiB0YXJnZXQgZWxlbWVudFxuICAgICAgICByZXR1cm4gd2VsbC5pbm5lckhUTUwucmVwbGFjZSgvXjxzdmc+LywgJycpLnJlcGxhY2UoLzxcXC9zdmc+JC8sICcnKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgLy8gd3JpdGUgc3ZnanMgZGF0YSB0byB0aGUgZG9tXG4gICwgd3JpdGVEYXRhVG9Eb206IGZ1bmN0aW9uKCkge1xuXG4gICAgICAvLyBkdW1wIHZhcmlhYmxlcyByZWN1cnNpdmVseVxuICAgICAgaWYodGhpcy5lYWNoIHx8IHRoaXMubGluZXMpe1xuICAgICAgICB2YXIgZm4gPSB0aGlzLmVhY2ggPyB0aGlzIDogdGhpcy5saW5lcygpO1xuICAgICAgICBmbi5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgdGhpcy53cml0ZURhdGFUb0RvbSgpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIHJlbW92ZSBwcmV2aW91c2x5IHNldCBkYXRhXG4gICAgICB0aGlzLm5vZGUucmVtb3ZlQXR0cmlidXRlKCdzdmdqczpkYXRhJylcblxuICAgICAgaWYoT2JqZWN0LmtleXModGhpcy5kb20pLmxlbmd0aClcbiAgICAgICAgdGhpcy5ub2RlLnNldEF0dHJpYnV0ZU5TKFNWRy5zdmdqcywgJ3N2Z2pzOmRhdGEnLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRvbSkpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAvLyBzZXQgZ2l2ZW4gZGF0YSB0byB0aGUgZWxlbWVudHMgZGF0YSBwcm9wZXJ0eVxuICAsIHNldERhdGE6IGZ1bmN0aW9uKG8pe1xuICAgICAgdGhpcy5kb20gPSBvXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfVxufSlcblxuU1ZHLkZYID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemUgRlggb2JqZWN0XG4gIGNyZWF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIC8vIHN0b3JlIHRhcmdldCBlbGVtZW50XG4gICAgdGhpcy50YXJnZXQgPSBlbGVtZW50XG4gIH1cblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICAvLyBBZGQgYW5pbWF0aW9uIHBhcmFtZXRlcnMgYW5kIHN0YXJ0IGFuaW1hdGlvblxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGQsIGVhc2UsIGRlbGF5KSB7XG4gICAgICB2YXIgYWtleXMsIHNrZXlzLCBrZXlcbiAgICAgICAgLCBlbGVtZW50ID0gdGhpcy50YXJnZXRcbiAgICAgICAgLCBmeCA9IHRoaXNcblxuICAgICAgLy8gZGlzc2VjdCBvYmplY3QgaWYgb25lIGlzIHBhc3NlZFxuICAgICAgaWYgKHR5cGVvZiBkID09ICdvYmplY3QnKSB7XG4gICAgICAgIGRlbGF5ID0gZC5kZWxheVxuICAgICAgICBlYXNlID0gZC5lYXNlXG4gICAgICAgIGQgPSBkLmR1cmF0aW9uXG4gICAgICB9XG5cbiAgICAgIC8vIGVuc3VyZSBkZWZhdWx0IGR1cmF0aW9uIGFuZCBlYXNpbmdcbiAgICAgIGQgPSBkID09ICc9JyA/IGQgOiBkID09IG51bGwgPyAxMDAwIDogbmV3IFNWRy5OdW1iZXIoZCkudmFsdWVPZigpXG4gICAgICBlYXNlID0gZWFzZSB8fCAnPD4nXG5cbiAgICAgIC8vIHByb2Nlc3MgdmFsdWVzXG4gICAgICBmeC5hdCA9IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICB2YXIgaVxuXG4gICAgICAgIC8vIG5vcm1hbGlzZSBwb3NcbiAgICAgICAgcG9zID0gcG9zIDwgMCA/IDAgOiBwb3MgPiAxID8gMSA6IHBvc1xuXG4gICAgICAgIC8vIGNvbGxlY3QgYXR0cmlidXRlIGtleXNcbiAgICAgICAgaWYgKGFrZXlzID09IG51bGwpIHtcbiAgICAgICAgICBha2V5cyA9IFtdXG4gICAgICAgICAgZm9yIChrZXkgaW4gZnguYXR0cnMpXG4gICAgICAgICAgICBha2V5cy5wdXNoKGtleSlcblxuICAgICAgICAgIC8vIG1ha2Ugc3VyZSBtb3JwaGFibGUgZWxlbWVudHMgYXJlIHNjYWxlZCwgdHJhbnNsYXRlZCBhbmQgbW9ycGhlZCBhbGwgdG9nZXRoZXJcbiAgICAgICAgICBpZiAoZWxlbWVudC5tb3JwaEFycmF5ICYmIChmeC5kZXN0aW5hdGlvbi5wbG90IHx8IGFrZXlzLmluZGV4T2YoJ3BvaW50cycpID4gLTEpKSB7XG4gICAgICAgICAgICAvLyBnZXQgZGVzdGluYXRpb25cbiAgICAgICAgICAgIHZhciBib3hcbiAgICAgICAgICAgICAgLCBwID0gbmV3IGVsZW1lbnQubW9ycGhBcnJheShmeC5kZXN0aW5hdGlvbi5wbG90IHx8IGZ4LmF0dHJzLnBvaW50cyB8fCBlbGVtZW50LmFycmF5KCkpXG5cbiAgICAgICAgICAgIC8vIGFkZCBzaXplXG4gICAgICAgICAgICBpZiAoZnguZGVzdGluYXRpb24uc2l6ZSlcbiAgICAgICAgICAgICAgcC5zaXplKGZ4LmRlc3RpbmF0aW9uLnNpemUud2lkdGgudG8sIGZ4LmRlc3RpbmF0aW9uLnNpemUuaGVpZ2h0LnRvKVxuXG4gICAgICAgICAgICAvLyBhZGQgbW92ZW1lbnRcbiAgICAgICAgICAgIGJveCA9IHAuYmJveCgpXG4gICAgICAgICAgICBpZiAoZnguZGVzdGluYXRpb24ueClcbiAgICAgICAgICAgICAgcC5tb3ZlKGZ4LmRlc3RpbmF0aW9uLngudG8sIGJveC55KVxuICAgICAgICAgICAgZWxzZSBpZiAoZnguZGVzdGluYXRpb24uY3gpXG4gICAgICAgICAgICAgIHAubW92ZShmeC5kZXN0aW5hdGlvbi5jeC50byAtIGJveC53aWR0aCAvIDIsIGJveC55KVxuXG4gICAgICAgICAgICBib3ggPSBwLmJib3goKVxuICAgICAgICAgICAgaWYgKGZ4LmRlc3RpbmF0aW9uLnkpXG4gICAgICAgICAgICAgIHAubW92ZShib3gueCwgZnguZGVzdGluYXRpb24ueS50bylcbiAgICAgICAgICAgIGVsc2UgaWYgKGZ4LmRlc3RpbmF0aW9uLmN5KVxuICAgICAgICAgICAgICBwLm1vdmUoYm94LngsIGZ4LmRlc3RpbmF0aW9uLmN5LnRvIC0gYm94LmhlaWdodCAvIDIpXG5cbiAgICAgICAgICAgIC8vIHJlc2V0IGRlc3RpbmF0aW9uIHZhbHVlc1xuICAgICAgICAgICAgZnguZGVzdGluYXRpb24gPSB7XG4gICAgICAgICAgICAgIHBsb3Q6IGVsZW1lbnQuYXJyYXkoKS5tb3JwaChwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbGxlY3Qgc3R5bGUga2V5c1xuICAgICAgICBpZiAoc2tleXMgPT0gbnVsbCkge1xuICAgICAgICAgIHNrZXlzID0gW11cbiAgICAgICAgICBmb3IgKGtleSBpbiBmeC5zdHlsZXMpXG4gICAgICAgICAgICBza2V5cy5wdXNoKGtleSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFwcGx5IGVhc2luZ1xuICAgICAgICBwb3MgPSBlYXNlID09ICc8PicgP1xuICAgICAgICAgICgtTWF0aC5jb3MocG9zICogTWF0aC5QSSkgLyAyKSArIDAuNSA6XG4gICAgICAgIGVhc2UgPT0gJz4nID9cbiAgICAgICAgICBNYXRoLnNpbihwb3MgKiBNYXRoLlBJIC8gMikgOlxuICAgICAgICBlYXNlID09ICc8JyA/XG4gICAgICAgICAgLU1hdGguY29zKHBvcyAqIE1hdGguUEkgLyAyKSArIDEgOlxuICAgICAgICBlYXNlID09ICctJyA/XG4gICAgICAgICAgcG9zIDpcbiAgICAgICAgdHlwZW9mIGVhc2UgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgZWFzZShwb3MpIDpcbiAgICAgICAgICBwb3NcblxuICAgICAgICAvLyBydW4gcGxvdCBmdW5jdGlvblxuICAgICAgICBpZiAoZnguZGVzdGluYXRpb24ucGxvdCkge1xuICAgICAgICAgIGVsZW1lbnQucGxvdChmeC5kZXN0aW5hdGlvbi5wbG90LmF0KHBvcykpXG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBydW4gYWxsIHgtcG9zaXRpb24gcHJvcGVydGllc1xuICAgICAgICAgIGlmIChmeC5kZXN0aW5hdGlvbi54KVxuICAgICAgICAgICAgZWxlbWVudC54KGZ4LmRlc3RpbmF0aW9uLnguYXQocG9zKSlcbiAgICAgICAgICBlbHNlIGlmIChmeC5kZXN0aW5hdGlvbi5jeClcbiAgICAgICAgICAgIGVsZW1lbnQuY3goZnguZGVzdGluYXRpb24uY3guYXQocG9zKSlcblxuICAgICAgICAgIC8vIHJ1biBhbGwgeS1wb3NpdGlvbiBwcm9wZXJ0aWVzXG4gICAgICAgICAgaWYgKGZ4LmRlc3RpbmF0aW9uLnkpXG4gICAgICAgICAgICBlbGVtZW50LnkoZnguZGVzdGluYXRpb24ueS5hdChwb3MpKVxuICAgICAgICAgIGVsc2UgaWYgKGZ4LmRlc3RpbmF0aW9uLmN5KVxuICAgICAgICAgICAgZWxlbWVudC5jeShmeC5kZXN0aW5hdGlvbi5jeS5hdChwb3MpKVxuXG4gICAgICAgICAgLy8gcnVuIGFsbCBzaXplIHByb3BlcnRpZXNcbiAgICAgICAgICBpZiAoZnguZGVzdGluYXRpb24uc2l6ZSlcbiAgICAgICAgICAgIGVsZW1lbnQuc2l6ZShmeC5kZXN0aW5hdGlvbi5zaXplLndpZHRoLmF0KHBvcyksIGZ4LmRlc3RpbmF0aW9uLnNpemUuaGVpZ2h0LmF0KHBvcykpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBydW4gYWxsIHZpZXdib3ggcHJvcGVydGllc1xuICAgICAgICBpZiAoZnguZGVzdGluYXRpb24udmlld2JveClcbiAgICAgICAgICBlbGVtZW50LnZpZXdib3goXG4gICAgICAgICAgICBmeC5kZXN0aW5hdGlvbi52aWV3Ym94LnguYXQocG9zKVxuICAgICAgICAgICwgZnguZGVzdGluYXRpb24udmlld2JveC55LmF0KHBvcylcbiAgICAgICAgICAsIGZ4LmRlc3RpbmF0aW9uLnZpZXdib3gud2lkdGguYXQocG9zKVxuICAgICAgICAgICwgZnguZGVzdGluYXRpb24udmlld2JveC5oZWlnaHQuYXQocG9zKVxuICAgICAgICAgIClcblxuICAgICAgICAvLyBydW4gbGVhZGluZyBwcm9wZXJ0eVxuICAgICAgICBpZiAoZnguZGVzdGluYXRpb24ubGVhZGluZylcbiAgICAgICAgICBlbGVtZW50LmxlYWRpbmcoZnguZGVzdGluYXRpb24ubGVhZGluZy5hdChwb3MpKVxuXG4gICAgICAgIC8vIGFuaW1hdGUgYXR0cmlidXRlc1xuICAgICAgICBmb3IgKGkgPSBha2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgICBlbGVtZW50LmF0dHIoYWtleXNbaV0sIGF0KGZ4LmF0dHJzW2FrZXlzW2ldXSwgcG9zKSlcblxuICAgICAgICAvLyBhbmltYXRlIHN0eWxlc1xuICAgICAgICBmb3IgKGkgPSBza2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgICBlbGVtZW50LnN0eWxlKHNrZXlzW2ldLCBhdChmeC5zdHlsZXNbc2tleXNbaV1dLCBwb3MpKVxuXG4gICAgICAgIC8vIGNhbGxiYWNrIGZvciBlYWNoIGtleWZyYW1lXG4gICAgICAgIGlmIChmeC5zaXR1YXRpb24uZHVyaW5nKVxuICAgICAgICAgIGZ4LnNpdHVhdGlvbi5kdXJpbmcuY2FsbChlbGVtZW50LCBwb3MsIGZ1bmN0aW9uKGZyb20sIHRvKSB7XG4gICAgICAgICAgICByZXR1cm4gYXQoeyBmcm9tOiBmcm9tLCB0bzogdG8gfSwgcG9zKVxuICAgICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gZGVsYXkgYW5pbWF0aW9uXG4gICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcblxuICAgICAgICAgIC8vIGluaXRpYWxpemUgc2l0dWF0aW9uIG9iamVjdFxuICAgICAgICAgIGZ4LnNpdHVhdGlvbi5zdGFydCAgICA9IHN0YXJ0XG4gICAgICAgICAgZnguc2l0dWF0aW9uLnBsYXkgICAgID0gdHJ1ZVxuICAgICAgICAgIGZ4LnNpdHVhdGlvbi5maW5pc2ggICA9IHN0YXJ0ICsgZFxuICAgICAgICAgIGZ4LnNpdHVhdGlvbi5kdXJhdGlvbiA9IGRcbiAgICAgICAgICBmeC5zaXR1YXRpb24uZWFzZSAgICAgPSBlYXNlXG5cbiAgICAgICAgICAvLyByZW5kZXIgZnVuY3Rpb25cbiAgICAgICAgICBmeC5yZW5kZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKGZ4LnNpdHVhdGlvbi5wbGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBwb3NcbiAgICAgICAgICAgICAgdmFyIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICwgcG9zID0gdGltZSA+IGZ4LnNpdHVhdGlvbi5maW5pc2ggPyAxIDogKHRpbWUgLSBmeC5zaXR1YXRpb24uc3RhcnQpIC8gZFxuXG4gICAgICAgICAgICAgIC8vIHJldmVyc2UgcG9zIGlmIGFuaW1hdGlvbiBpcyByZXZlcnNlZFxuICAgICAgICAgICAgICBpZiAoZnguc2l0dWF0aW9uLnJldmVyc2luZylcbiAgICAgICAgICAgICAgICBwb3MgPSAtcG9zICsgMVxuXG4gICAgICAgICAgICAgIC8vIHByb2Nlc3MgdmFsdWVzXG4gICAgICAgICAgICAgIGZ4LmF0KHBvcylcblxuICAgICAgICAgICAgICAvLyBmaW5pc2ggb2ZmIGFuaW1hdGlvblxuICAgICAgICAgICAgICBpZiAodGltZSA+IGZ4LnNpdHVhdGlvbi5maW5pc2gpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnguZGVzdGluYXRpb24ucGxvdClcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGxvdChuZXcgU1ZHLlBvaW50QXJyYXkoZnguZGVzdGluYXRpb24ucGxvdC5kZXN0aW5hdGlvbikuc2V0dGxlKCkpXG5cbiAgICAgICAgICAgICAgICBpZiAoZnguc2l0dWF0aW9uLmxvb3AgPT09IHRydWUgfHwgKHR5cGVvZiBmeC5zaXR1YXRpb24ubG9vcCA9PSAnbnVtYmVyJyAmJiBmeC5zaXR1YXRpb24ubG9vcCA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZWdpc3RlciByZXZlcnNlXG4gICAgICAgICAgICAgICAgICBpZiAoZnguc2l0dWF0aW9uLnJldmVyc2UpXG4gICAgICAgICAgICAgICAgICAgIGZ4LnNpdHVhdGlvbi5yZXZlcnNpbmcgPSAhZnguc2l0dWF0aW9uLnJldmVyc2luZ1xuXG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ4LnNpdHVhdGlvbi5sb29wID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlZHVjZSBsb29wIGNvdW50XG4gICAgICAgICAgICAgICAgICAgIGlmICghZnguc2l0dWF0aW9uLnJldmVyc2UgfHwgZnguc2l0dWF0aW9uLnJldmVyc2luZylcbiAgICAgICAgICAgICAgICAgICAgICAtLWZ4LnNpdHVhdGlvbi5sb29wXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGxhc3QgbG9vcCBpZiByZXZlcnNlIGlzIGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgIGlmICghZnguc2l0dWF0aW9uLnJldmVyc2UgJiYgZnguc2l0dWF0aW9uLmxvb3AgPT0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAtLWZ4LnNpdHVhdGlvbi5sb29wXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGZ4LmFuaW1hdGUoZCwgZWFzZSwgZGVsYXkpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZ4LnNpdHVhdGlvbi5hZnRlciA/IGZ4LnNpdHVhdGlvbi5hZnRlci5hcHBseShlbGVtZW50LCBbZnhdKSA6IGZ4LnN0b3AoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZ4LmFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ4LnJlbmRlcilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZnguYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZngucmVuZGVyKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc3RhcnQgYW5pbWF0aW9uXG4gICAgICAgICAgZngucmVuZGVyKClcblxuICAgICAgICB9LCBuZXcgU1ZHLk51bWJlcihkZWxheSkudmFsdWVPZigpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBHZXQgYm91bmRpbmcgYm94IG9mIHRhcmdldCBlbGVtZW50XG4gICwgYmJveDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YXJnZXQuYmJveCgpXG4gICAgfVxuICAgIC8vIEFkZCBhbmltYXRhYmxlIGF0dHJpYnV0ZXNcbiAgLCBhdHRyOiBmdW5jdGlvbihhLCB2KSB7XG4gICAgICAvLyBhcHBseSBhdHRyaWJ1dGVzIGluZGl2aWR1YWxseVxuICAgICAgaWYgKHR5cGVvZiBhID09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhKVxuICAgICAgICAgIHRoaXMuYXR0cihrZXksIGFba2V5XSlcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZ2V0IHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICAgIHZhciBmcm9tID0gdGhpcy50YXJnZXQuYXR0cihhKVxuXG4gICAgICAgIC8vIGRldGVjdCBmb3JtYXRcbiAgICAgICAgaWYgKGEgPT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgICAgICAvLyBtZXJnZSBnaXZlbiB0cmFuc2Zvcm1hdGlvbiB3aXRoIGFuIGV4aXN0aW5nIG9uZVxuICAgICAgICAgIGlmICh0aGlzLmF0dHJzW2FdKVxuICAgICAgICAgICAgdiA9IHRoaXMuYXR0cnNbYV0uZGVzdGluYXRpb24ubXVsdGlwbHkodilcblxuICAgICAgICAgIC8vIHByZXBhcmUgbWF0cml4IGZvciBtb3JwaGluZ1xuICAgICAgICAgIHRoaXMuYXR0cnNbYV0gPSAobmV3IFNWRy5NYXRyaXgodGhpcy50YXJnZXQpKS5tb3JwaCh2KVxuXG4gICAgICAgICAgLy8gYWRkIHBhcmFtZXRyaWMgcm90YXRpb24gdmFsdWVzXG4gICAgICAgICAgaWYgKHRoaXMucGFyYW0pIHtcbiAgICAgICAgICAgIC8vIGdldCBpbml0aWFsIHJvdGF0aW9uXG4gICAgICAgICAgICB2ID0gdGhpcy50YXJnZXQudHJhbnNmb3JtKCdyb3RhdGlvbicpXG5cbiAgICAgICAgICAgIC8vIGFkZCBwYXJhbVxuICAgICAgICAgICAgdGhpcy5hdHRyc1thXS5wYXJhbSA9IHtcbiAgICAgICAgICAgICAgZnJvbTogdGhpcy50YXJnZXQucGFyYW0gfHwgeyByb3RhdGlvbjogdiwgY3g6IHRoaXMucGFyYW0uY3gsIGN5OiB0aGlzLnBhcmFtLmN5IH1cbiAgICAgICAgICAgICwgdG86ICAgdGhpcy5wYXJhbVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYXR0cnNbYV0gPSBTVkcuQ29sb3IuaXNDb2xvcih2KSA/XG4gICAgICAgICAgICAvLyBwcmVwYXJlIGNvbG9yIGZvciBtb3JwaGluZ1xuICAgICAgICAgICAgbmV3IFNWRy5Db2xvcihmcm9tKS5tb3JwaCh2KSA6XG4gICAgICAgICAgU1ZHLnJlZ2V4LnVuaXQudGVzdCh2KSA/XG4gICAgICAgICAgICAvLyBwcmVwYXJlIG51bWJlciBmb3IgbW9ycGhpbmdcbiAgICAgICAgICAgIG5ldyBTVkcuTnVtYmVyKGZyb20pLm1vcnBoKHYpIDpcbiAgICAgICAgICAgIC8vIHByZXBhcmUgZm9yIHBsYWluIG1vcnBoaW5nXG4gICAgICAgICAgICB7IGZyb206IGZyb20sIHRvOiB2IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBBZGQgYW5pbWF0YWJsZSBzdHlsZXNcbiAgLCBzdHlsZTogZnVuY3Rpb24ocywgdikge1xuICAgICAgaWYgKHR5cGVvZiBzID09ICdvYmplY3QnKVxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcylcbiAgICAgICAgICB0aGlzLnN0eWxlKGtleSwgc1trZXldKVxuXG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMuc3R5bGVzW3NdID0geyBmcm9tOiB0aGlzLnRhcmdldC5zdHlsZShzKSwgdG86IHYgfVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBBbmltYXRhYmxlIHgtYXhpc1xuICAsIHg6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIHRoaXMuZGVzdGluYXRpb24ueCA9IG5ldyBTVkcuTnVtYmVyKHRoaXMudGFyZ2V0LngoKSkubW9ycGgoeClcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gQW5pbWF0YWJsZSB5LWF4aXNcbiAgLCB5OiBmdW5jdGlvbih5KSB7XG4gICAgICB0aGlzLmRlc3RpbmF0aW9uLnkgPSBuZXcgU1ZHLk51bWJlcih0aGlzLnRhcmdldC55KCkpLm1vcnBoKHkpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIEFuaW1hdGFibGUgY2VudGVyIHgtYXhpc1xuICAsIGN4OiBmdW5jdGlvbih4KSB7XG4gICAgICB0aGlzLmRlc3RpbmF0aW9uLmN4ID0gbmV3IFNWRy5OdW1iZXIodGhpcy50YXJnZXQuY3goKSkubW9ycGgoeClcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gQW5pbWF0YWJsZSBjZW50ZXIgeS1heGlzXG4gICwgY3k6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHRoaXMuZGVzdGluYXRpb24uY3kgPSBuZXcgU1ZHLk51bWJlcih0aGlzLnRhcmdldC5jeSgpKS5tb3JwaCh5KVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBBZGQgYW5pbWF0YWJsZSBtb3ZlXG4gICwgbW92ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgcmV0dXJuIHRoaXMueCh4KS55KHkpXG4gICAgfVxuICAgIC8vIEFkZCBhbmltYXRhYmxlIGNlbnRlclxuICAsIGNlbnRlcjogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3goeCkuY3koeSlcbiAgICB9XG4gICAgLy8gQWRkIGFuaW1hdGFibGUgc2l6ZVxuICAsIHNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIGlmICh0aGlzLnRhcmdldCBpbnN0YW5jZW9mIFNWRy5UZXh0KSB7XG4gICAgICAgIC8vIGFuaW1hdGUgZm9udCBzaXplIGZvciBUZXh0IGVsZW1lbnRzXG4gICAgICAgIHRoaXMuYXR0cignZm9udC1zaXplJywgd2lkdGgpXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFuaW1hdGUgYmJveCBiYXNlZCBzaXplIGZvciBhbGwgb3RoZXIgZWxlbWVudHNcbiAgICAgICAgdmFyIGJveCA9IHRoaXMudGFyZ2V0LmJib3goKVxuXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uc2l6ZSA9IHtcbiAgICAgICAgICB3aWR0aDogIG5ldyBTVkcuTnVtYmVyKGJveC53aWR0aCkubW9ycGgod2lkdGgpXG4gICAgICAgICwgaGVpZ2h0OiBuZXcgU1ZHLk51bWJlcihib3guaGVpZ2h0KS5tb3JwaChoZWlnaHQpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gQWRkIGFuaW1hdGFibGUgcGxvdFxuICAsIHBsb3Q6IGZ1bmN0aW9uKHApIHtcbiAgICAgIHRoaXMuZGVzdGluYXRpb24ucGxvdCA9IHBcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gQWRkIGxlYWRpbmcgbWV0aG9kXG4gICwgbGVhZGluZzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLnRhcmdldC5kZXN0aW5hdGlvbi5sZWFkaW5nKVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmxlYWRpbmcgPSBuZXcgU1ZHLk51bWJlcih0aGlzLnRhcmdldC5kZXN0aW5hdGlvbi5sZWFkaW5nKS5tb3JwaCh2YWx1ZSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gQWRkIGFuaW1hdGFibGUgdmlld2JveFxuICAsIHZpZXdib3g6IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIGlmICh0aGlzLnRhcmdldCBpbnN0YW5jZW9mIFNWRy5Db250YWluZXIpIHtcbiAgICAgICAgdmFyIGJveCA9IHRoaXMudGFyZ2V0LnZpZXdib3goKVxuXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24udmlld2JveCA9IHtcbiAgICAgICAgICB4OiAgICAgIG5ldyBTVkcuTnVtYmVyKGJveC54KS5tb3JwaCh4KVxuICAgICAgICAsIHk6ICAgICAgbmV3IFNWRy5OdW1iZXIoYm94LnkpLm1vcnBoKHkpXG4gICAgICAgICwgd2lkdGg6ICBuZXcgU1ZHLk51bWJlcihib3gud2lkdGgpLm1vcnBoKHdpZHRoKVxuICAgICAgICAsIGhlaWdodDogbmV3IFNWRy5OdW1iZXIoYm94LmhlaWdodCkubW9ycGgoaGVpZ2h0KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIEFkZCBhbmltYXRlYWJsZSBncmFkaWVudCB1cGRhdGVcbiAgLCB1cGRhdGU6IGZ1bmN0aW9uKG8pIHtcbiAgICAgIGlmICh0aGlzLnRhcmdldCBpbnN0YW5jZW9mIFNWRy5TdG9wKSB7XG4gICAgICAgIGlmIChvLm9wYWNpdHkgIT0gbnVsbCkgdGhpcy5hdHRyKCdzdG9wLW9wYWNpdHknLCBvLm9wYWNpdHkpXG4gICAgICAgIGlmIChvLmNvbG9yICAgIT0gbnVsbCkgdGhpcy5hdHRyKCdzdG9wLWNvbG9yJywgby5jb2xvcilcbiAgICAgICAgaWYgKG8ub2Zmc2V0ICAhPSBudWxsKSB0aGlzLmF0dHIoJ29mZnNldCcsIG5ldyBTVkcuTnVtYmVyKG8ub2Zmc2V0KSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gQWRkIGNhbGxiYWNrIGZvciBlYWNoIGtleWZyYW1lXG4gICwgZHVyaW5nOiBmdW5jdGlvbihkdXJpbmcpIHtcbiAgICAgIHRoaXMuc2l0dWF0aW9uLmR1cmluZyA9IGR1cmluZ1xuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBDYWxsYmFjayBhZnRlciBhbmltYXRpb25cbiAgLCBhZnRlcjogZnVuY3Rpb24oYWZ0ZXIpIHtcbiAgICAgIHRoaXMuc2l0dWF0aW9uLmFmdGVyID0gYWZ0ZXJcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gTWFrZSBsb29wYWJsZVxuICAsIGxvb3A6IGZ1bmN0aW9uKHRpbWVzLCByZXZlcnNlKSB7XG4gICAgICAvLyBzdG9yZSBjdXJyZW50IGxvb3AgYW5kIHRvdGFsIGxvb3BzXG4gICAgICB0aGlzLnNpdHVhdGlvbi5sb29wID0gdGhpcy5zaXR1YXRpb24ubG9vcHMgPSB0aW1lcyB8fCB0cnVlXG5cbiAgICAgIC8vIG1ha2UgcmV2ZXJzYWJsZVxuICAgICAgdGhpcy5zaXR1YXRpb24ucmV2ZXJzZSA9ICEhcmV2ZXJzZVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBTdG9wIHJ1bm5pbmcgYW5pbWF0aW9uXG4gICwgc3RvcDogZnVuY3Rpb24oZnVsZmlsbCkge1xuICAgICAgLy8gZnVsZmlsbCBhbmltYXRpb25cbiAgICAgIGlmIChmdWxmaWxsID09PSB0cnVlKSB7XG5cbiAgICAgICAgdGhpcy5hbmltYXRlKDApXG5cbiAgICAgICAgaWYgKHRoaXMuc2l0dWF0aW9uLmFmdGVyKVxuICAgICAgICAgIHRoaXMuc2l0dWF0aW9uLmFmdGVyLmFwcGx5KHRoaXMudGFyZ2V0LCBbdGhpc10pXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN0b3AgY3VycmVudCBhbmltYXRpb25cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZSk7XG5cbiAgICAgICAgLy8gcmVzZXQgc3RvcmFnZSBmb3IgcHJvcGVydGllc1xuICAgICAgICB0aGlzLmF0dHJzICAgICAgID0ge31cbiAgICAgICAgdGhpcy5zdHlsZXMgICAgICA9IHt9XG4gICAgICAgIHRoaXMuc2l0dWF0aW9uICAgPSB7fVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0ge31cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gUGF1c2UgcnVubmluZyBhbmltYXRpb25cbiAgLCBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5zaXR1YXRpb24ucGxheSA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnNpdHVhdGlvbi5wbGF5ICA9IGZhbHNlXG4gICAgICAgIHRoaXMuc2l0dWF0aW9uLnBhdXNlID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gUGxheSBydW5uaW5nIGFuaW1hdGlvblxuICAsIHBsYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc2l0dWF0aW9uLnBsYXkgPT09IGZhbHNlKSB7XG4gICAgICAgIHZhciBwYXVzZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5zaXR1YXRpb24ucGF1c2VcblxuICAgICAgICB0aGlzLnNpdHVhdGlvbi5maW5pc2ggKz0gcGF1c2VcbiAgICAgICAgdGhpcy5zaXR1YXRpb24uc3RhcnQgICs9IHBhdXNlXG4gICAgICAgIHRoaXMuc2l0dWF0aW9uLnBsYXkgICAgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gIH1cblxuICAvLyBEZWZpbmUgcGFyZW50IGNsYXNzXG4sIHBhcmVudDogU1ZHLkVsZW1lbnRcblxuICAvLyBBZGQgbWV0aG9kIHRvIHBhcmVudCBlbGVtZW50c1xuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBHZXQgZnggbW9kdWxlIG9yIGNyZWF0ZSBhIG5ldyBvbmUsIHRoZW4gYW5pbWF0ZSB3aXRoIGdpdmVuIGR1cmF0aW9uIGFuZCBlYXNlXG4gICAgYW5pbWF0ZTogZnVuY3Rpb24oZCwgZWFzZSwgZGVsYXkpIHtcbiAgICAgIHJldHVybiAodGhpcy5meCB8fCAodGhpcy5meCA9IG5ldyBTVkcuRlgodGhpcykpKS5zdG9wKCkuYW5pbWF0ZShkLCBlYXNlLCBkZWxheSlcbiAgICB9XG4gICAgLy8gU3RvcCBjdXJyZW50IGFuaW1hdGlvbjsgdGhpcyBpcyBhbiBhbGlhcyB0byB0aGUgZnggaW5zdGFuY2VcbiAgLCBzdG9wOiBmdW5jdGlvbihmdWxmaWxsKSB7XG4gICAgICBpZiAodGhpcy5meClcbiAgICAgICAgdGhpcy5meC5zdG9wKGZ1bGZpbGwpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIFBhdXNlIGN1cnJlbnQgYW5pbWF0aW9uXG4gICwgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZngpXG4gICAgICAgIHRoaXMuZngucGF1c2UoKVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBQbGF5IHBhdXNlZCBjdXJyZW50IGFuaW1hdGlvblxuICAsIHBsYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZngpXG4gICAgICAgIHRoaXMuZngucGxheSgpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gIH1cbn0pXG5cblNWRy5CQm94ID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemVcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gZ2V0IHZhbHVlcyBpZiBlbGVtZW50IGlzIGdpdmVuXG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBib3hcblxuICAgICAgLy8geWVzIHRoaXMgaXMgdWdseSwgYnV0IEZpcmVmb3ggY2FuIGJlIGEgYml0Y2ggd2hlbiBpdCBjb21lcyB0byBlbGVtZW50cyB0aGF0IGFyZSBub3QgeWV0IHJlbmRlcmVkXG4gICAgICB0cnkge1xuICAgICAgICAvLyBmaW5kIG5hdGl2ZSBiYm94XG4gICAgICAgIGJveCA9IGVsZW1lbnQubm9kZS5nZXRCQm94KClcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBpZihlbGVtZW50IGluc3RhbmNlb2YgU1ZHLlNoYXBlKXtcbiAgICAgICAgICB2YXIgY2xvbmUgPSBlbGVtZW50LmNsb25lKCkuYWRkVG8oU1ZHLnBhcnNlci5kcmF3KVxuICAgICAgICAgIGJveCA9IGNsb25lLmJib3goKVxuICAgICAgICAgIGNsb25lLnJlbW92ZSgpXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGJveCA9IHtcbiAgICAgICAgICAgIHg6ICAgICAgZWxlbWVudC5ub2RlLmNsaWVudExlZnRcbiAgICAgICAgICAsIHk6ICAgICAgZWxlbWVudC5ub2RlLmNsaWVudFRvcFxuICAgICAgICAgICwgd2lkdGg6ICBlbGVtZW50Lm5vZGUuY2xpZW50V2lkdGhcbiAgICAgICAgICAsIGhlaWdodDogZWxlbWVudC5ub2RlLmNsaWVudEhlaWdodFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwbGFpbiB4IGFuZCB5XG4gICAgICB0aGlzLnggPSBib3gueFxuICAgICAgdGhpcy55ID0gYm94LnlcblxuICAgICAgLy8gcGxhaW4gd2lkdGggYW5kIGhlaWdodFxuICAgICAgdGhpcy53aWR0aCAgPSBib3gud2lkdGhcbiAgICAgIHRoaXMuaGVpZ2h0ID0gYm94LmhlaWdodFxuICAgIH1cblxuICAgIC8vIGFkZCBjZW50ZXIsIHJpZ2h0IGFuZCBib3R0b21cbiAgICBmdWxsQm94KHRoaXMpXG4gIH1cblxuICAvLyBEZWZpbmUgUGFyZW50XG4sIHBhcmVudDogU1ZHLkVsZW1lbnRcblxuICAvLyBDb25zdHJ1Y3RvclxuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBHZXQgYm91bmRpbmcgYm94XG4gICAgYmJveDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFNWRy5CQm94KHRoaXMpXG4gICAgfVxuICB9XG5cbn0pXG5cblNWRy5UQm94ID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemVcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gZ2V0IHZhbHVlcyBpZiBlbGVtZW50IGlzIGdpdmVuXG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciB0ICAgPSBlbGVtZW50LmN0bSgpLmV4dHJhY3QoKVxuICAgICAgICAsIGJveCA9IGVsZW1lbnQuYmJveCgpXG5cbiAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgaW5jbHVkaW5nIHRyYW5zZm9ybWF0aW9uc1xuICAgICAgdGhpcy53aWR0aCAgPSBib3gud2lkdGggICogdC5zY2FsZVhcbiAgICAgIHRoaXMuaGVpZ2h0ID0gYm94LmhlaWdodCAqIHQuc2NhbGVZXG5cbiAgICAgIC8vIHggYW5kIHkgaW5jbHVkaW5nIHRyYW5zZm9ybWF0aW9uc1xuICAgICAgdGhpcy54ID0gYm94LnggKyB0LnhcbiAgICAgIHRoaXMueSA9IGJveC55ICsgdC55XG4gICAgfVxuXG4gICAgLy8gYWRkIGNlbnRlciwgcmlnaHQgYW5kIGJvdHRvbVxuICAgIGZ1bGxCb3godGhpcylcbiAgfVxuXG4gIC8vIERlZmluZSBQYXJlbnRcbiwgcGFyZW50OiBTVkcuRWxlbWVudFxuXG4gIC8vIENvbnN0cnVjdG9yXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIEdldCB0cmFuc2Zvcm1lZCBib3VuZGluZyBib3hcbiAgICB0Ym94OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLlRCb3godGhpcylcbiAgICB9XG4gIH1cblxufSlcblxuXG5TVkcuUkJveCA9IFNWRy5pbnZlbnQoe1xuICAvLyBJbml0aWFsaXplXG4gIGNyZWF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB2YXIgZSAgICA9IGVsZW1lbnQuZG9jKCkucGFyZW50KClcbiAgICAgICAgLCBib3ggID0gZWxlbWVudC5ub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICwgem9vbSA9IDFcblxuICAgICAgLy8gZ2V0IHNjcmVlbiBvZmZzZXRcbiAgICAgIHRoaXMueCA9IGJveC5sZWZ0XG4gICAgICB0aGlzLnkgPSBib3gudG9wXG5cbiAgICAgIC8vIHN1YnRyYWN0IHBhcmVudCBvZmZzZXRcbiAgICAgIHRoaXMueCAtPSBlLm9mZnNldExlZnRcbiAgICAgIHRoaXMueSAtPSBlLm9mZnNldFRvcFxuXG4gICAgICB3aGlsZSAoZSA9IGUub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgIHRoaXMueCAtPSBlLm9mZnNldExlZnRcbiAgICAgICAgdGhpcy55IC09IGUub2Zmc2V0VG9wXG4gICAgICB9XG5cbiAgICAgIC8vIGNhbGN1bGF0ZSBjdW11bGF0aXZlIHpvb20gZnJvbSBzdmcgZG9jdW1lbnRzXG4gICAgICBlID0gZWxlbWVudFxuICAgICAgd2hpbGUgKGUucGFyZW50ICYmIChlID0gZS5wYXJlbnQoKSkpIHtcbiAgICAgICAgaWYgKGUudmlld2JveCkge1xuICAgICAgICAgIHpvb20gKj0gZS52aWV3Ym94KCkuem9vbVxuICAgICAgICAgIHRoaXMueCAtPSBlLngoKSB8fCAwXG4gICAgICAgICAgdGhpcy55IC09IGUueSgpIHx8IDBcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyByZWNhbGN1bGF0ZSB2aWV3Ym94IGRpc3RvcnRpb25cbiAgICAgIHRoaXMud2lkdGggID0gYm94LndpZHRoICAvPSB6b29tXG4gICAgICB0aGlzLmhlaWdodCA9IGJveC5oZWlnaHQgLz0gem9vbVxuICAgIH1cblxuICAgIC8vIGFkZCBjZW50ZXIsIHJpZ2h0IGFuZCBib3R0b21cbiAgICBmdWxsQm94KHRoaXMpXG5cbiAgICAvLyBvZmZzZXQgYnkgd2luZG93IHNjcm9sbCBwb3NpdGlvbiwgYmVjYXVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgY2hhbmdlcyB3aGVuIHdpbmRvdyBpcyBzY3JvbGxlZFxuICAgIHRoaXMueCArPSB3aW5kb3cuc2Nyb2xsWFxuICAgIHRoaXMueSArPSB3aW5kb3cuc2Nyb2xsWVxuICB9XG5cbiAgLy8gZGVmaW5lIFBhcmVudFxuLCBwYXJlbnQ6IFNWRy5FbGVtZW50XG5cbiAgLy8gQ29uc3RydWN0b3JcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gR2V0IHJlY3QgYm94XG4gICAgcmJveDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFNWRy5SQm94KHRoaXMpXG4gICAgfVxuICB9XG5cbn0pXG5cbi8vIEFkZCB1bml2ZXJzYWwgbWVyZ2UgbWV0aG9kXG47W1NWRy5CQm94LCBTVkcuVEJveCwgU1ZHLlJCb3hdLmZvckVhY2goZnVuY3Rpb24oYykge1xuXG4gIFNWRy5leHRlbmQoYywge1xuICAgIC8vIE1lcmdlIHJlY3QgYm94IHdpdGggYW5vdGhlciwgcmV0dXJuIGEgbmV3IGluc3RhbmNlXG4gICAgbWVyZ2U6IGZ1bmN0aW9uKGJveCkge1xuICAgICAgdmFyIGIgPSBuZXcgYygpXG5cbiAgICAgIC8vIG1lcmdlIGJveGVzXG4gICAgICBiLnggICAgICA9IE1hdGgubWluKHRoaXMueCwgYm94LngpXG4gICAgICBiLnkgICAgICA9IE1hdGgubWluKHRoaXMueSwgYm94LnkpXG4gICAgICBiLndpZHRoICA9IE1hdGgubWF4KHRoaXMueCArIHRoaXMud2lkdGgsICBib3gueCArIGJveC53aWR0aCkgIC0gYi54XG4gICAgICBiLmhlaWdodCA9IE1hdGgubWF4KHRoaXMueSArIHRoaXMuaGVpZ2h0LCBib3gueSArIGJveC5oZWlnaHQpIC0gYi55XG5cbiAgICAgIHJldHVybiBmdWxsQm94KGIpXG4gICAgfVxuXG4gIH0pXG5cbn0pXG5cblNWRy5NYXRyaXggPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZVxuICBjcmVhdGU6IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIHZhciBpLCBiYXNlID0gYXJyYXlUb01hdHJpeChbMSwgMCwgMCwgMSwgMCwgMF0pXG5cbiAgICAvLyBlbnN1cmUgc291cmNlIGFzIG9iamVjdFxuICAgIHNvdXJjZSA9IHNvdXJjZSBpbnN0YW5jZW9mIFNWRy5FbGVtZW50ID9cbiAgICAgIHNvdXJjZS5tYXRyaXhpZnkoKSA6XG4gICAgdHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgP1xuICAgICAgc3RyaW5nVG9NYXRyaXgoc291cmNlKSA6XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PSA2ID9cbiAgICAgIGFycmF5VG9NYXRyaXgoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKSA6XG4gICAgdHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcgP1xuICAgICAgc291cmNlIDogYmFzZVxuXG4gICAgLy8gbWVyZ2Ugc291cmNlXG4gICAgZm9yIChpID0gYWJjZGVmLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgdGhpc1thYmNkZWZbaV1dID0gc291cmNlICYmIHR5cGVvZiBzb3VyY2VbYWJjZGVmW2ldXSA9PT0gJ251bWJlcicgP1xuICAgICAgICBzb3VyY2VbYWJjZGVmW2ldXSA6IGJhc2VbYWJjZGVmW2ldXVxuICB9XG5cbiAgLy8gQWRkIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gRXh0cmFjdCBpbmRpdmlkdWFsIHRyYW5zZm9ybWF0aW9uc1xuICAgIGV4dHJhY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gZmluZCBkZWx0YSB0cmFuc2Zvcm0gcG9pbnRzXG4gICAgICB2YXIgcHggICAgPSBkZWx0YVRyYW5zZm9ybVBvaW50KHRoaXMsIDAsIDEpXG4gICAgICAgICwgcHkgICAgPSBkZWx0YVRyYW5zZm9ybVBvaW50KHRoaXMsIDEsIDApXG4gICAgICAgICwgc2tld1ggPSAxODAgLyBNYXRoLlBJICogTWF0aC5hdGFuMihweC55LCBweC54KSAtIDkwXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIHRyYW5zbGF0aW9uXG4gICAgICAgIHg6ICAgICAgICB0aGlzLmVcbiAgICAgICwgeTogICAgICAgIHRoaXMuZlxuICAgICAgICAvLyBza2V3XG4gICAgICAsIHNrZXdYOiAgICAtc2tld1hcbiAgICAgICwgc2tld1k6ICAgIDE4MCAvIE1hdGguUEkgKiBNYXRoLmF0YW4yKHB5LnksIHB5LngpXG4gICAgICAgIC8vIHNjYWxlXG4gICAgICAsIHNjYWxlWDogICBNYXRoLnNxcnQodGhpcy5hICogdGhpcy5hICsgdGhpcy5iICogdGhpcy5iKVxuICAgICAgLCBzY2FsZVk6ICAgTWF0aC5zcXJ0KHRoaXMuYyAqIHRoaXMuYyArIHRoaXMuZCAqIHRoaXMuZClcbiAgICAgICAgLy8gcm90YXRpb25cbiAgICAgICwgcm90YXRpb246IHNrZXdYXG4gICAgICB9XG4gICAgfVxuICAgIC8vIENsb25lIG1hdHJpeFxuICAsIGNsb25lOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzKVxuICAgIH1cbiAgICAvLyBNb3JwaCBvbmUgbWF0cml4IGludG8gYW5vdGhlclxuICAsIG1vcnBoOiBmdW5jdGlvbihtYXRyaXgpIHtcbiAgICAgIC8vIHN0b3JlIG5ldyBkZXN0aW5hdGlvblxuICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBTVkcuTWF0cml4KG1hdHJpeClcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gR2V0IG1vcnBoZWQgbWF0cml4IGF0IGEgZ2l2ZW4gcG9zaXRpb25cbiAgLCBhdDogZnVuY3Rpb24ocG9zKSB7XG4gICAgICAvLyBtYWtlIHN1cmUgYSBkZXN0aW5hdGlvbiBpcyBkZWZpbmVkXG4gICAgICBpZiAoIXRoaXMuZGVzdGluYXRpb24pIHJldHVybiB0aGlzXG5cbiAgICAgIC8vIGNhbGN1bGF0ZSBtb3JwaGVkIG1hdHJpeCBhdCBhIGdpdmVuIHBvc2l0aW9uXG4gICAgICB2YXIgbWF0cml4ID0gbmV3IFNWRy5NYXRyaXgoe1xuICAgICAgICBhOiB0aGlzLmEgKyAodGhpcy5kZXN0aW5hdGlvbi5hIC0gdGhpcy5hKSAqIHBvc1xuICAgICAgLCBiOiB0aGlzLmIgKyAodGhpcy5kZXN0aW5hdGlvbi5iIC0gdGhpcy5iKSAqIHBvc1xuICAgICAgLCBjOiB0aGlzLmMgKyAodGhpcy5kZXN0aW5hdGlvbi5jIC0gdGhpcy5jKSAqIHBvc1xuICAgICAgLCBkOiB0aGlzLmQgKyAodGhpcy5kZXN0aW5hdGlvbi5kIC0gdGhpcy5kKSAqIHBvc1xuICAgICAgLCBlOiB0aGlzLmUgKyAodGhpcy5kZXN0aW5hdGlvbi5lIC0gdGhpcy5lKSAqIHBvc1xuICAgICAgLCBmOiB0aGlzLmYgKyAodGhpcy5kZXN0aW5hdGlvbi5mIC0gdGhpcy5mKSAqIHBvc1xuICAgICAgfSlcblxuICAgICAgLy8gcHJvY2VzcyBwYXJhbWV0cmljIHJvdGF0aW9uIGlmIHByZXNlbnRcbiAgICAgIGlmICh0aGlzLnBhcmFtICYmIHRoaXMucGFyYW0udG8pIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIGN1cnJlbnQgcGFyYW1ldHJpYyBwb3NpdGlvblxuICAgICAgICB2YXIgcGFyYW0gPSB7XG4gICAgICAgICAgcm90YXRpb246IHRoaXMucGFyYW0uZnJvbS5yb3RhdGlvbiArICh0aGlzLnBhcmFtLnRvLnJvdGF0aW9uIC0gdGhpcy5wYXJhbS5mcm9tLnJvdGF0aW9uKSAqIHBvc1xuICAgICAgICAsIGN4OiAgICAgICB0aGlzLnBhcmFtLmZyb20uY3hcbiAgICAgICAgLCBjeTogICAgICAgdGhpcy5wYXJhbS5mcm9tLmN5XG4gICAgICAgIH1cblxuICAgICAgICAvLyByb3RhdGUgbWF0cml4XG4gICAgICAgIG1hdHJpeCA9IG1hdHJpeC5yb3RhdGUoXG4gICAgICAgICAgKHRoaXMucGFyYW0udG8ucm90YXRpb24gLSB0aGlzLnBhcmFtLmZyb20ucm90YXRpb24gKiAyKSAqIHBvc1xuICAgICAgICAsIHBhcmFtLmN4XG4gICAgICAgICwgcGFyYW0uY3lcbiAgICAgICAgKVxuXG4gICAgICAgIC8vIHN0b3JlIGN1cnJlbnQgcGFyYW1ldHJpYyB2YWx1ZXNcbiAgICAgICAgbWF0cml4LnBhcmFtID0gcGFyYW1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdHJpeFxuICAgIH1cbiAgICAvLyBNdWx0aXBsaWVzIGJ5IGdpdmVuIG1hdHJpeFxuICAsIG11bHRpcGx5OiBmdW5jdGlvbihtYXRyaXgpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzLm5hdGl2ZSgpLm11bHRpcGx5KHBhcnNlTWF0cml4KG1hdHJpeCkubmF0aXZlKCkpKVxuICAgIH1cbiAgICAvLyBJbnZlcnNlcyBtYXRyaXhcbiAgLCBpbnZlcnNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzLm5hdGl2ZSgpLmludmVyc2UoKSlcbiAgICB9XG4gICAgLy8gVHJhbnNsYXRlIG1hdHJpeFxuICAsIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgcmV0dXJuIG5ldyBTVkcuTWF0cml4KHRoaXMubmF0aXZlKCkudHJhbnNsYXRlKHggfHwgMCwgeSB8fCAwKSlcbiAgICB9XG4gICAgLy8gU2NhbGUgbWF0cml4XG4gICwgc2NhbGU6IGZ1bmN0aW9uKHgsIHksIGN4LCBjeSkge1xuICAgICAgLy8gc3VwcG9ydCB1bml2ZXJzYWwgc2NhbGVcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEgfHwgYXJndW1lbnRzLmxlbmd0aCA9PSAzKVxuICAgICAgICB5ID0geFxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMykge1xuICAgICAgICBjeSA9IGN4XG4gICAgICAgIGN4ID0geVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5hcm91bmQoY3gsIGN5LCBuZXcgU1ZHLk1hdHJpeCh4LCAwLCAwLCB5LCAwLCAwKSlcbiAgICB9XG4gICAgLy8gUm90YXRlIG1hdHJpeFxuICAsIHJvdGF0ZTogZnVuY3Rpb24ociwgY3gsIGN5KSB7XG4gICAgICAvLyBjb252ZXJ0IGRlZ3JlZXMgdG8gcmFkaWFuc1xuICAgICAgciA9IFNWRy51dGlscy5yYWRpYW5zKHIpXG5cbiAgICAgIHJldHVybiB0aGlzLmFyb3VuZChjeCwgY3ksIG5ldyBTVkcuTWF0cml4KE1hdGguY29zKHIpLCBNYXRoLnNpbihyKSwgLU1hdGguc2luKHIpLCBNYXRoLmNvcyhyKSwgMCwgMCkpXG4gICAgfVxuICAgIC8vIEZsaXAgbWF0cml4IG9uIHggb3IgeSwgYXQgYSBnaXZlbiBvZmZzZXRcbiAgLCBmbGlwOiBmdW5jdGlvbihhLCBvKSB7XG4gICAgICByZXR1cm4gYSA9PSAneCcgPyB0aGlzLnNjYWxlKC0xLCAxLCBvLCAwKSA6IHRoaXMuc2NhbGUoMSwgLTEsIDAsIG8pXG4gICAgfVxuICAgIC8vIFNrZXdcbiAgLCBza2V3OiBmdW5jdGlvbih4LCB5LCBjeCwgY3kpIHtcbiAgICAgIHJldHVybiB0aGlzLmFyb3VuZChjeCwgY3ksIHRoaXMubmF0aXZlKCkuc2tld1goeCB8fCAwKS5za2V3WSh5IHx8IDApKVxuICAgIH1cbiAgICAvLyBTa2V3WFxuICAsIHNrZXdYOiBmdW5jdGlvbih4LCBjeCwgY3kpIHtcbiAgICAgIHJldHVybiB0aGlzLmFyb3VuZChjeCwgY3ksIHRoaXMubmF0aXZlKCkuc2tld1goeCB8fCAwKSlcbiAgICB9XG4gICAgLy8gU2tld1lcbiAgLCBza2V3WTogZnVuY3Rpb24oeSwgY3gsIGN5KSB7XG4gICAgICByZXR1cm4gdGhpcy5hcm91bmQoY3gsIGN5LCB0aGlzLm5hdGl2ZSgpLnNrZXdZKHkgfHwgMCkpXG4gICAgfVxuICAgIC8vIFRyYW5zZm9ybSBhcm91bmQgYSBjZW50ZXIgcG9pbnRcbiAgLCBhcm91bmQ6IGZ1bmN0aW9uKGN4LCBjeSwgbWF0cml4KSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgICAgICAubXVsdGlwbHkobmV3IFNWRy5NYXRyaXgoMSwgMCwgMCwgMSwgY3ggfHwgMCwgY3kgfHwgMCkpXG4gICAgICAgIC5tdWx0aXBseShtYXRyaXgpXG4gICAgICAgIC5tdWx0aXBseShuZXcgU1ZHLk1hdHJpeCgxLCAwLCAwLCAxLCAtY3ggfHwgMCwgLWN5IHx8IDApKVxuICAgIH1cbiAgICAvLyBDb252ZXJ0IHRvIG5hdGl2ZSBTVkdNYXRyaXhcbiAgLCBuYXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gY3JlYXRlIG5ldyBtYXRyaXhcbiAgICAgIHZhciBtYXRyaXggPSBTVkcucGFyc2VyLmRyYXcubm9kZS5jcmVhdGVTVkdNYXRyaXgoKVxuXG4gICAgICAvLyB1cGRhdGUgd2l0aCBjdXJyZW50IHZhbHVlc1xuICAgICAgZm9yICh2YXIgaSA9IGFiY2RlZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgbWF0cml4W2FiY2RlZltpXV0gPSB0aGlzW2FiY2RlZltpXV1cblxuICAgICAgcmV0dXJuIG1hdHJpeFxuICAgIH1cbiAgICAvLyBDb252ZXJ0IG1hdHJpeCB0byBzdHJpbmdcbiAgLCB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ21hdHJpeCgnICsgdGhpcy5hICsgJywnICsgdGhpcy5iICsgJywnICsgdGhpcy5jICsgJywnICsgdGhpcy5kICsgJywnICsgdGhpcy5lICsgJywnICsgdGhpcy5mICsgJyknXG4gICAgfVxuICB9XG5cbiAgLy8gRGVmaW5lIHBhcmVudFxuLCBwYXJlbnQ6IFNWRy5FbGVtZW50XG5cbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gR2V0IGN1cnJlbnQgbWF0cml4XG4gICAgY3RtOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzLm5vZGUuZ2V0Q1RNKCkpXG4gICAgfSxcbiAgICAvLyBHZXQgY3VycmVudCBzY3JlZW4gbWF0cml4XG4gICAgc2NyZWVuQ1RNOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHLk1hdHJpeCh0aGlzLm5vZGUuZ2V0U2NyZWVuQ1RNKCkpXG4gICAgfVxuXG4gIH1cblxufSlcblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcbiAgLy8gU2V0IHN2ZyBlbGVtZW50IGF0dHJpYnV0ZVxuICBhdHRyOiBmdW5jdGlvbihhLCB2LCBuKSB7XG4gICAgLy8gYWN0IGFzIGZ1bGwgZ2V0dGVyXG4gICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgLy8gZ2V0IGFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzXG4gICAgICBhID0ge31cbiAgICAgIHYgPSB0aGlzLm5vZGUuYXR0cmlidXRlc1xuICAgICAgZm9yIChuID0gdi5sZW5ndGggLSAxOyBuID49IDA7IG4tLSlcbiAgICAgICAgYVt2W25dLm5vZGVOYW1lXSA9IFNWRy5yZWdleC5pc051bWJlci50ZXN0KHZbbl0ubm9kZVZhbHVlKSA/IHBhcnNlRmxvYXQodltuXS5ub2RlVmFsdWUpIDogdltuXS5ub2RlVmFsdWVcblxuICAgICAgcmV0dXJuIGFcblxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIGFwcGx5IGV2ZXJ5IGF0dHJpYnV0ZSBpbmRpdmlkdWFsbHkgaWYgYW4gb2JqZWN0IGlzIHBhc3NlZFxuICAgICAgZm9yICh2IGluIGEpIHRoaXMuYXR0cih2LCBhW3ZdKVxuXG4gICAgfSBlbHNlIGlmICh2ID09PSBudWxsKSB7XG4gICAgICAgIC8vIHJlbW92ZSB2YWx1ZVxuICAgICAgICB0aGlzLm5vZGUucmVtb3ZlQXR0cmlidXRlKGEpXG5cbiAgICB9IGVsc2UgaWYgKHYgPT0gbnVsbCkge1xuICAgICAgLy8gYWN0IGFzIGEgZ2V0dGVyIGlmIHRoZSBmaXJzdCBhbmQgb25seSBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0XG4gICAgICB2ID0gdGhpcy5ub2RlLmdldEF0dHJpYnV0ZShhKVxuICAgICAgcmV0dXJuIHYgPT0gbnVsbCA/XG4gICAgICAgIFNWRy5kZWZhdWx0cy5hdHRyc1thXSA6XG4gICAgICBTVkcucmVnZXguaXNOdW1iZXIudGVzdCh2KSA/XG4gICAgICAgIHBhcnNlRmxvYXQodikgOiB2XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQlVHIEZJWDogc29tZSBicm93c2VycyB3aWxsIHJlbmRlciBhIHN0cm9rZSBpZiBhIGNvbG9yIGlzIGdpdmVuIGV2ZW4gdGhvdWdoIHN0cm9rZSB3aWR0aCBpcyAwXG4gICAgICBpZiAoYSA9PSAnc3Ryb2tlLXdpZHRoJylcbiAgICAgICAgdGhpcy5hdHRyKCdzdHJva2UnLCBwYXJzZUZsb2F0KHYpID4gMCA/IHRoaXMuX3N0cm9rZSA6IG51bGwpXG4gICAgICBlbHNlIGlmIChhID09ICdzdHJva2UnKVxuICAgICAgICB0aGlzLl9zdHJva2UgPSB2XG5cbiAgICAgIC8vIGNvbnZlcnQgaW1hZ2UgZmlsbCBhbmQgc3Ryb2tlIHRvIHBhdHRlcm5zXG4gICAgICBpZiAoYSA9PSAnZmlsbCcgfHwgYSA9PSAnc3Ryb2tlJykge1xuICAgICAgICBpZiAoU1ZHLnJlZ2V4LmlzSW1hZ2UudGVzdCh2KSlcbiAgICAgICAgICB2ID0gdGhpcy5kb2MoKS5kZWZzKCkuaW1hZ2UodiwgMCwgMClcblxuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIFNWRy5JbWFnZSlcbiAgICAgICAgICB2ID0gdGhpcy5kb2MoKS5kZWZzKCkucGF0dGVybigwLCAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKHYpXG4gICAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgLy8gZW5zdXJlIGNvcnJlY3QgbnVtZXJpYyB2YWx1ZXMgKGFsc28gYWNjZXB0cyBOYU4gYW5kIEluZmluaXR5KVxuICAgICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJylcbiAgICAgICAgdiA9IG5ldyBTVkcuTnVtYmVyKHYpXG5cbiAgICAgIC8vIGVuc3VyZSBmdWxsIGhleCBjb2xvclxuICAgICAgZWxzZSBpZiAoU1ZHLkNvbG9yLmlzQ29sb3IodikpXG4gICAgICAgIHYgPSBuZXcgU1ZHLkNvbG9yKHYpXG5cbiAgICAgIC8vIHBhcnNlIGFycmF5IHZhbHVlc1xuICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2KSlcbiAgICAgICAgdiA9IG5ldyBTVkcuQXJyYXkodilcblxuICAgICAgLy8gc3RvcmUgcGFyYW1ldHJpYyB0cmFuc2Zvcm1hdGlvbiB2YWx1ZXMgbG9jYWxseVxuICAgICAgZWxzZSBpZiAodiBpbnN0YW5jZW9mIFNWRy5NYXRyaXggJiYgdi5wYXJhbSlcbiAgICAgICAgdGhpcy5wYXJhbSA9IHYucGFyYW1cblxuICAgICAgLy8gaWYgdGhlIHBhc3NlZCBhdHRyaWJ1dGUgaXMgbGVhZGluZy4uLlxuICAgICAgaWYgKGEgPT0gJ2xlYWRpbmcnKSB7XG4gICAgICAgIC8vIC4uLiBjYWxsIHRoZSBsZWFkaW5nIG1ldGhvZCBpbnN0ZWFkXG4gICAgICAgIGlmICh0aGlzLmxlYWRpbmcpXG4gICAgICAgICAgdGhpcy5sZWFkaW5nKHYpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzZXQgZ2l2ZW4gYXR0cmlidXRlIG9uIG5vZGVcbiAgICAgICAgdHlwZW9mIG4gPT09ICdzdHJpbmcnID9cbiAgICAgICAgICB0aGlzLm5vZGUuc2V0QXR0cmlidXRlTlMobiwgYSwgdi50b1N0cmluZygpKSA6XG4gICAgICAgICAgdGhpcy5ub2RlLnNldEF0dHJpYnV0ZShhLCB2LnRvU3RyaW5nKCkpXG4gICAgICB9XG5cbiAgICAgIC8vIHJlYnVpbGQgaWYgcmVxdWlyZWRcbiAgICAgIGlmICh0aGlzLnJlYnVpbGQgJiYgKGEgPT0gJ2ZvbnQtc2l6ZScgfHwgYSA9PSAneCcpKVxuICAgICAgICB0aGlzLnJlYnVpbGQoYSwgdilcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG59KVxuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwgU1ZHLkZYLCB7XG4gIC8vIEFkZCB0cmFuc2Zvcm1hdGlvbnNcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbihvLCByZWxhdGl2ZSkge1xuICAgIC8vIGdldCB0YXJnZXQgaW4gY2FzZSBvZiB0aGUgZnggbW9kdWxlLCBvdGhlcndpc2UgcmVmZXJlbmNlIHRoaXNcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQgfHwgdGhpc1xuICAgICAgLCBtYXRyaXhcblxuICAgIC8vIGFjdCBhcyBhIGdldHRlclxuICAgIGlmICh0eXBlb2YgbyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIGdldCBjdXJyZW50IG1hdHJpeFxuICAgICAgbWF0cml4ID0gbmV3IFNWRy5NYXRyaXgodGFyZ2V0KS5leHRyYWN0KClcblxuICAgICAgLy8gYWRkIHBhcmFtZXRyaWMgcm90YXRpb25cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wYXJhbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbWF0cml4LnJvdGF0aW9uID0gdGhpcy5wYXJhbS5yb3RhdGlvblxuICAgICAgICBtYXRyaXguY3ggICAgICAgPSB0aGlzLnBhcmFtLmN4XG4gICAgICAgIG1hdHJpeC5jeSAgICAgICA9IHRoaXMucGFyYW0uY3lcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHR5cGVvZiBvID09PSAnc3RyaW5nJyA/IG1hdHJpeFtvXSA6IG1hdHJpeFxuICAgIH1cblxuICAgIC8vIGdldCBjdXJyZW50IG1hdHJpeFxuICAgIG1hdHJpeCA9IHRoaXMgaW5zdGFuY2VvZiBTVkcuRlggJiYgdGhpcy5hdHRycy50cmFuc2Zvcm0gP1xuICAgICAgdGhpcy5hdHRycy50cmFuc2Zvcm0gOlxuICAgICAgbmV3IFNWRy5NYXRyaXgodGFyZ2V0KVxuXG4gICAgLy8gZW5zdXJlIHJlbGF0aXZlIGZsYWdcbiAgICByZWxhdGl2ZSA9ICEhcmVsYXRpdmUgfHwgISFvLnJlbGF0aXZlXG5cbiAgICAvLyBhY3Qgb24gbWF0cml4XG4gICAgaWYgKG8uYSAhPSBudWxsKSB7XG4gICAgICBtYXRyaXggPSByZWxhdGl2ZSA/XG4gICAgICAgIC8vIHJlbGF0aXZlXG4gICAgICAgIG1hdHJpeC5tdWx0aXBseShuZXcgU1ZHLk1hdHJpeChvKSkgOlxuICAgICAgICAvLyBhYnNvbHV0ZVxuICAgICAgICBuZXcgU1ZHLk1hdHJpeChvKVxuXG4gICAgLy8gYWN0IG9uIHJvdGF0aW9uXG4gICAgfSBlbHNlIGlmIChvLnJvdGF0aW9uICE9IG51bGwpIHtcbiAgICAgIC8vIGVuc3VyZSBjZW50cmUgcG9pbnRcbiAgICAgIGVuc3VyZUNlbnRyZShvLCB0YXJnZXQpXG5cbiAgICAgIC8vIHJlbGF0aXZpemUgcm90YXRpb24gdmFsdWVcbiAgICAgIGlmIChyZWxhdGl2ZSkge1xuICAgICAgICBvLnJvdGF0aW9uICs9IHRoaXMucGFyYW0gJiYgdGhpcy5wYXJhbS5yb3RhdGlvbiAhPSBudWxsID9cbiAgICAgICAgICB0aGlzLnBhcmFtLnJvdGF0aW9uIDpcbiAgICAgICAgICBtYXRyaXguZXh0cmFjdCgpLnJvdGF0aW9uXG4gICAgICB9XG5cbiAgICAgIC8vIHN0b3JlIHBhcmFtZXRyaWMgdmFsdWVzXG4gICAgICB0aGlzLnBhcmFtID0gb1xuXG4gICAgICAvLyBhcHBseSB0cmFuc2Zvcm1hdGlvblxuICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBTVkcuRWxlbWVudCkge1xuICAgICAgICBtYXRyaXggPSByZWxhdGl2ZSA/XG4gICAgICAgICAgLy8gcmVsYXRpdmVcbiAgICAgICAgICBtYXRyaXgucm90YXRlKG8ucm90YXRpb24sIG8uY3gsIG8uY3kpIDpcbiAgICAgICAgICAvLyBhYnNvbHV0ZVxuICAgICAgICAgIG1hdHJpeC5yb3RhdGUoby5yb3RhdGlvbiAtIG1hdHJpeC5leHRyYWN0KCkucm90YXRpb24sIG8uY3gsIG8uY3kpXG4gICAgICB9XG5cbiAgICAvLyBhY3Qgb24gc2NhbGVcbiAgICB9IGVsc2UgaWYgKG8uc2NhbGUgIT0gbnVsbCB8fCBvLnNjYWxlWCAhPSBudWxsIHx8IG8uc2NhbGVZICE9IG51bGwpIHtcbiAgICAgIC8vIGVuc3VyZSBjZW50cmUgcG9pbnRcbiAgICAgIGVuc3VyZUNlbnRyZShvLCB0YXJnZXQpXG5cbiAgICAgIC8vIGVuc3VyZSBzY2FsZSB2YWx1ZXMgb24gYm90aCBheGVzXG4gICAgICBvLnNjYWxlWCA9IG8uc2NhbGUgIT0gbnVsbCA/IG8uc2NhbGUgOiBvLnNjYWxlWCAhPSBudWxsID8gby5zY2FsZVggOiAxXG4gICAgICBvLnNjYWxlWSA9IG8uc2NhbGUgIT0gbnVsbCA/IG8uc2NhbGUgOiBvLnNjYWxlWSAhPSBudWxsID8gby5zY2FsZVkgOiAxXG5cbiAgICAgIGlmICghcmVsYXRpdmUpIHtcbiAgICAgICAgLy8gYWJzb2x1dGU7IG11bHRpcGx5IGludmVyc2VkIHZhbHVlc1xuICAgICAgICB2YXIgZSA9IG1hdHJpeC5leHRyYWN0KClcbiAgICAgICAgby5zY2FsZVggPSBvLnNjYWxlWCAqIDEgLyBlLnNjYWxlWFxuICAgICAgICBvLnNjYWxlWSA9IG8uc2NhbGVZICogMSAvIGUuc2NhbGVZXG4gICAgICB9XG5cbiAgICAgIG1hdHJpeCA9IG1hdHJpeC5zY2FsZShvLnNjYWxlWCwgby5zY2FsZVksIG8uY3gsIG8uY3kpXG5cbiAgICAvLyBhY3Qgb24gc2tld1xuICAgIH0gZWxzZSBpZiAoby5za2V3WCAhPSBudWxsIHx8IG8uc2tld1kgIT0gbnVsbCkge1xuICAgICAgLy8gZW5zdXJlIGNlbnRyZSBwb2ludFxuICAgICAgZW5zdXJlQ2VudHJlKG8sIHRhcmdldClcblxuICAgICAgLy8gZW5zdXJlIHNrZXcgdmFsdWVzIG9uIGJvdGggYXhlc1xuICAgICAgby5za2V3WCA9IG8uc2tld1ggIT0gbnVsbCA/IG8uc2tld1ggOiAwXG4gICAgICBvLnNrZXdZID0gby5za2V3WSAhPSBudWxsID8gby5za2V3WSA6IDBcblxuICAgICAgaWYgKCFyZWxhdGl2ZSkge1xuICAgICAgICAvLyBhYnNvbHV0ZTsgcmVzZXQgc2tldyB2YWx1ZXNcbiAgICAgICAgdmFyIGUgPSBtYXRyaXguZXh0cmFjdCgpXG4gICAgICAgIG1hdHJpeCA9IG1hdHJpeC5tdWx0aXBseShuZXcgU1ZHLk1hdHJpeCgpLnNrZXcoZS5za2V3WCwgZS5za2V3WSwgby5jeCwgby5jeSkuaW52ZXJzZSgpKVxuICAgICAgfVxuXG4gICAgICBtYXRyaXggPSBtYXRyaXguc2tldyhvLnNrZXdYLCBvLnNrZXdZLCBvLmN4LCBvLmN5KVxuXG4gICAgLy8gYWN0IG9uIGZsaXBcbiAgICB9IGVsc2UgaWYgKG8uZmxpcCkge1xuICAgICAgbWF0cml4ID0gbWF0cml4LmZsaXAoXG4gICAgICAgIG8uZmxpcFxuICAgICAgLCBvLm9mZnNldCA9PSBudWxsID8gdGFyZ2V0LmJib3goKVsnYycgKyBvLmZsaXBdIDogby5vZmZzZXRcbiAgICAgIClcblxuICAgIC8vIGFjdCBvbiB0cmFuc2xhdGVcbiAgICB9IGVsc2UgaWYgKG8ueCAhPSBudWxsIHx8IG8ueSAhPSBudWxsKSB7XG4gICAgICBpZiAocmVsYXRpdmUpIHtcbiAgICAgICAgLy8gcmVsYXRpdmVcbiAgICAgICAgbWF0cml4ID0gbWF0cml4LnRyYW5zbGF0ZShvLngsIG8ueSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFic29sdXRlXG4gICAgICAgIGlmIChvLnggIT0gbnVsbCkgbWF0cml4LmUgPSBvLnhcbiAgICAgICAgaWYgKG8ueSAhPSBudWxsKSBtYXRyaXguZiA9IG8ueVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmF0dHIodGhpcyBpbnN0YW5jZW9mIFNWRy5QYXR0ZXJuID8gJ3BhdHRlcm5UcmFuc2Zvcm0nIDogdGhpcyBpbnN0YW5jZW9mIFNWRy5HcmFkaWVudCA/ICdncmFkaWVudFRyYW5zZm9ybScgOiAndHJhbnNmb3JtJywgbWF0cml4KVxuICB9XG59KVxuXG5TVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XG4gIC8vIFJlc2V0IGFsbCB0cmFuc2Zvcm1hdGlvbnNcbiAgdW50cmFuc2Zvcm06IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ3RyYW5zZm9ybScsIG51bGwpXG4gIH0sXG4gIC8vIG1lcmdlIHRoZSB3aG9sZSB0cmFuc2Zvcm1hdGlvbiBjaGFpbiBpbnRvIG9uZSBtYXRyaXhcbiAgbWF0cml4aWZ5OiBmdW5jdGlvbigpIHtcblxuICAgIHZhciBtYXRyaXggPSAodGhpcy5hdHRyKCd0cmFuc2Zvcm0nKSB8fCAnJylcbiAgICAgIC8vIHNwbGl0IHRyYW5zZm9ybWF0aW9uc1xuICAgICAgLnNwbGl0KC9cXClcXHMqLykuc2xpY2UoMCwtMSkubWFwKGZ1bmN0aW9uKHN0cil7XG4gICAgICAgIC8vIGdlbmVyYXRlIGtleSA9PiB2YWx1ZSBwYWlyc1xuICAgICAgICB2YXIga3YgPSBzdHIudHJpbSgpLnNwbGl0KCcoJylcbiAgICAgICAgcmV0dXJuIFtrdlswXSwga3ZbMV0uc3BsaXQoU1ZHLnJlZ2V4Lm1hdHJpeEVsZW1lbnRzKS5tYXAoZnVuY3Rpb24oc3RyKXsgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKSB9KV1cbiAgICAgIH0pXG4gICAgICAvLyBjYWxjdWxhdGUgZXZlcnkgdHJhbnNmb3JtYXRpb24gaW50byBvbmUgbWF0cml4XG4gICAgICAucmVkdWNlKGZ1bmN0aW9uKG1hdHJpeCwgdHJhbnNmb3JtKXtcblxuICAgICAgICBpZih0cmFuc2Zvcm1bMF0gPT0gJ21hdHJpeCcpIHJldHVybiBtYXRyaXgubXVsdGlwbHkoYXJyYXlUb01hdHJpeCh0cmFuc2Zvcm1bMV0pKVxuICAgICAgICByZXR1cm4gbWF0cml4W3RyYW5zZm9ybVswXV0uYXBwbHkobWF0cml4LCB0cmFuc2Zvcm1bMV0pXG5cbiAgICAgIH0sIG5ldyBTVkcuTWF0cml4KCkpXG4gICAgLy8gYXBwbHkgY2FsY3VsYXRlZCBtYXRyaXggdG8gZWxlbWVudFxuICAgIHRoaXMuYXR0cigndHJhbnNmb3JtJywgbWF0cml4KVxuXG4gICAgcmV0dXJuIG1hdHJpeFxuICB9LFxuICAvLyBhZGQgYW4gZWxlbWVudCB0byBhbm90aGVyIHBhcmVudCB3aXRob3V0IGNoYW5naW5nIHRoZSB2aXN1YWwgcmVwcmVzZW50YXRpb24gb24gdGhlIHNjcmVlblxuICB0b1BhcmVudDogZnVuY3Rpb24ocGFyZW50KSB7XG4gICAgaWYodGhpcyA9PSBwYXJlbnQpIHJldHVybiB0aGlzXG4gICAgdmFyIGN0bSA9IHRoaXMuc2NyZWVuQ1RNKClcbiAgICB2YXIgdGVtcCA9IHBhcmVudC5yZWN0KDEsMSlcbiAgICB2YXIgcEN0bSA9IHRlbXAuc2NyZWVuQ1RNKCkuaW52ZXJzZSgpXG4gICAgdGVtcC5yZW1vdmUoKVxuXG4gICAgdGhpcy5hZGRUbyhwYXJlbnQpLnVudHJhbnNmb3JtKCkudHJhbnNmb3JtKHBDdG0ubXVsdGlwbHkoY3RtKSlcblxuICAgIHJldHVybiB0aGlzXG4gIH0sXG4gIC8vIHNhbWUgYXMgYWJvdmUgd2l0aCBwYXJlbnQgZXF1YWxzIHJvb3Qtc3ZnXG4gIHRvRG9jOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50b1BhcmVudCh0aGlzLmRvYygpKVxuICB9XG5cbn0pXG5cblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcbiAgLy8gRHluYW1pYyBzdHlsZSBnZW5lcmF0b3JcbiAgc3R5bGU6IGZ1bmN0aW9uKHMsIHYpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAvLyBnZXQgZnVsbCBzdHlsZVxuICAgICAgcmV0dXJuIHRoaXMubm9kZS5zdHlsZS5jc3NUZXh0IHx8ICcnXG5cbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAvLyBhcHBseSBldmVyeSBzdHlsZSBpbmRpdmlkdWFsbHkgaWYgYW4gb2JqZWN0IGlzIHBhc3NlZFxuICAgICAgaWYgKHR5cGVvZiBzID09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodiBpbiBzKSB0aGlzLnN0eWxlKHYsIHNbdl0pXG5cbiAgICAgIH0gZWxzZSBpZiAoU1ZHLnJlZ2V4LmlzQ3NzLnRlc3QocykpIHtcbiAgICAgICAgLy8gcGFyc2UgY3NzIHN0cmluZ1xuICAgICAgICBzID0gcy5zcGxpdCgnOycpXG5cbiAgICAgICAgLy8gYXBwbHkgZXZlcnkgZGVmaW5pdGlvbiBpbmRpdmlkdWFsbHlcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdiA9IHNbaV0uc3BsaXQoJzonKVxuICAgICAgICAgIHRoaXMuc3R5bGUodlswXS5yZXBsYWNlKC9cXHMrL2csICcnKSwgdlsxXSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYWN0IGFzIGEgZ2V0dGVyIGlmIHRoZSBmaXJzdCBhbmQgb25seSBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuc3R5bGVbY2FtZWxDYXNlKHMpXVxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9kZS5zdHlsZVtjYW1lbENhc2UocyldID0gdiA9PT0gbnVsbCB8fCBTVkcucmVnZXguaXNCbGFuay50ZXN0KHYpID8gJycgOiB2XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufSlcblNWRy5QYXJlbnQgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbGVtZW50KVxuICB9XG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5FbGVtZW50XG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gUmV0dXJucyBhbGwgY2hpbGQgZWxlbWVudHNcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gU1ZHLnV0aWxzLm1hcChTVkcudXRpbHMuZmlsdGVyU1ZHRWxlbWVudHModGhpcy5ub2RlLmNoaWxkTm9kZXMpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBTVkcuYWRvcHQobm9kZSlcbiAgICAgIH0pXG4gICAgfVxuICAgIC8vIEFkZCBnaXZlbiBlbGVtZW50IGF0IGEgcG9zaXRpb25cbiAgLCBhZGQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGkpIHtcbiAgICAgIGlmICghdGhpcy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgLy8gZGVmaW5lIGluc2VydGlvbiBpbmRleCBpZiBub25lIGdpdmVuXG4gICAgICAgIGkgPSBpID09IG51bGwgPyB0aGlzLmNoaWxkcmVuKCkubGVuZ3RoIDogaVxuXG4gICAgICAgIC8vIGFkZCBlbGVtZW50IHJlZmVyZW5jZXNcbiAgICAgICAgdGhpcy5ub2RlLmluc2VydEJlZm9yZShlbGVtZW50Lm5vZGUsIHRoaXMubm9kZS5jaGlsZE5vZGVzW2ldIHx8IG51bGwpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIEJhc2ljYWxseSBkb2VzIHRoZSBzYW1lIGFzIGBhZGQoKWAgYnV0IHJldHVybnMgdGhlIGFkZGVkIGVsZW1lbnQgaW5zdGVhZFxuICAsIHB1dDogZnVuY3Rpb24oZWxlbWVudCwgaSkge1xuICAgICAgdGhpcy5hZGQoZWxlbWVudCwgaSlcbiAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfVxuICAgIC8vIENoZWNrcyBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBhIGNoaWxkXG4gICwgaGFzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5pbmRleChlbGVtZW50KSA+PSAwXG4gICAgfVxuICAgIC8vIEdldHMgaW5kZXggb2YgZ2l2ZW4gZWxlbWVudFxuICAsIGluZGV4OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbigpLmluZGV4T2YoZWxlbWVudClcbiAgICB9XG4gICAgLy8gR2V0IGEgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXhcbiAgLCBnZXQ6IGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuKClbaV1cbiAgICB9XG4gICAgLy8gR2V0IGZpcnN0IGNoaWxkLCBza2lwcGluZyB0aGUgZGVmcyBub2RlXG4gICwgZmlyc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4oKVswXVxuICAgIH1cbiAgICAvLyBHZXQgdGhlIGxhc3QgY2hpbGRcbiAgLCBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuKClbdGhpcy5jaGlsZHJlbigpLmxlbmd0aCAtIDFdXG4gICAgfVxuICAgIC8vIEl0ZXJhdGVzIG92ZXIgYWxsIGNoaWxkcmVuIGFuZCBpbnZva2VzIGEgZ2l2ZW4gYmxvY2tcbiAgLCBlYWNoOiBmdW5jdGlvbihibG9jaywgZGVlcCkge1xuICAgICAgdmFyIGksIGlsXG4gICAgICAgICwgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuKClcblxuICAgICAgZm9yIChpID0gMCwgaWwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltpXSBpbnN0YW5jZW9mIFNWRy5FbGVtZW50KVxuICAgICAgICAgIGJsb2NrLmFwcGx5KGNoaWxkcmVuW2ldLCBbaSwgY2hpbGRyZW5dKVxuXG4gICAgICAgIGlmIChkZWVwICYmIChjaGlsZHJlbltpXSBpbnN0YW5jZW9mIFNWRy5Db250YWluZXIpKVxuICAgICAgICAgIGNoaWxkcmVuW2ldLmVhY2goYmxvY2ssIGRlZXApXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIFJlbW92ZSBhIGdpdmVuIGNoaWxkXG4gICwgcmVtb3ZlRWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgdGhpcy5ub2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQubm9kZSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFsbCBlbGVtZW50cyBpbiB0aGlzIGNvbnRhaW5lclxuICAsIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHJlbW92ZSBjaGlsZHJlblxuICAgICAgd2hpbGUodGhpcy5ub2RlLmhhc0NoaWxkTm9kZXMoKSlcbiAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZS5sYXN0Q2hpbGQpXG5cbiAgICAgIC8vIHJlbW92ZSBkZWZzIHJlZmVyZW5jZVxuICAgICAgZGVsZXRlIHRoaXMuX2RlZnNcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICwgLy8gR2V0IGRlZnNcbiAgICBkZWZzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvYygpLmRlZnMoKVxuICAgIH1cbiAgfVxuXG59KVxuXG5TVkcuZXh0ZW5kKFNWRy5QYXJlbnQsIHtcblxuICB1bmdyb3VwOiBmdW5jdGlvbihwYXJlbnQsIGRlcHRoKSB7XG4gICAgaWYoZGVwdGggPT09IDAgfHwgdGhpcyBpbnN0YW5jZW9mIFNWRy5EZWZzKSByZXR1cm4gdGhpc1xuXG4gICAgcGFyZW50ID0gcGFyZW50IHx8ICh0aGlzIGluc3RhbmNlb2YgU1ZHLkRvYyA/IHRoaXMgOiB0aGlzLnBhcmVudChTVkcuUGFyZW50KSlcbiAgICBkZXB0aCA9IGRlcHRoIHx8IEluZmluaXR5XG5cbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBTVkcuRGVmcykgcmV0dXJuIHRoaXNcbiAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBTVkcuUGFyZW50KSByZXR1cm4gdGhpcy51bmdyb3VwKHBhcmVudCwgZGVwdGgtMSlcbiAgICAgIHJldHVybiB0aGlzLnRvUGFyZW50KHBhcmVudClcbiAgICB9KVxuXG4gICAgdGhpcy5ub2RlLmZpcnN0Q2hpbGQgfHwgdGhpcy5yZW1vdmUoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcblxuICBmbGF0dGVuOiBmdW5jdGlvbihwYXJlbnQsIGRlcHRoKSB7XG4gICAgcmV0dXJuIHRoaXMudW5ncm91cChwYXJlbnQsIGRlcHRoKVxuICB9XG5cbn0pXG5TVkcuQ29udGFpbmVyID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemUgbm9kZVxuICBjcmVhdGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgZWxlbWVudClcbiAgfVxuXG4gIC8vIEluaGVyaXQgZnJvbVxuLCBpbmhlcml0OiBTVkcuUGFyZW50XG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gR2V0IHRoZSB2aWV3Qm94IGFuZCBjYWxjdWxhdGUgdGhlIHpvb20gdmFsdWVcbiAgICB2aWV3Ym94OiBmdW5jdGlvbih2KSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKVxuICAgICAgICAvLyBhY3QgYXMgYSBnZXR0ZXIgaWYgdGhlcmUgYXJlIG5vIGFyZ3VtZW50c1xuICAgICAgICByZXR1cm4gbmV3IFNWRy5WaWV3Qm94KHRoaXMpXG5cbiAgICAgIC8vIG90aGVyd2lzZSBhY3QgYXMgYSBzZXR0ZXJcbiAgICAgIHYgPSBhcmd1bWVudHMubGVuZ3RoID09IDEgP1xuICAgICAgICBbdi54LCB2LnksIHYud2lkdGgsIHYuaGVpZ2h0XSA6XG4gICAgICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCd2aWV3Qm94JywgdilcbiAgICB9XG4gIH1cblxufSlcbi8vIEFkZCBldmVudHMgdG8gZWxlbWVudHNcbjtbICAnY2xpY2snXG4gICwgJ2RibGNsaWNrJ1xuICAsICdtb3VzZWRvd24nXG4gICwgJ21vdXNldXAnXG4gICwgJ21vdXNlb3ZlcidcbiAgLCAnbW91c2VvdXQnXG4gICwgJ21vdXNlbW92ZSdcbiAgLy8gLCAnbW91c2VlbnRlcicgLT4gbm90IHN1cHBvcnRlZCBieSBJRVxuICAvLyAsICdtb3VzZWxlYXZlJyAtPiBub3Qgc3VwcG9ydGVkIGJ5IElFXG4gICwgJ3RvdWNoc3RhcnQnXG4gICwgJ3RvdWNobW92ZSdcbiAgLCAndG91Y2hsZWF2ZSdcbiAgLCAndG91Y2hlbmQnXG4gICwgJ3RvdWNoY2FuY2VsJyBdLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcblxuICAvLyBhZGQgZXZlbnQgdG8gU1ZHLkVsZW1lbnRcbiAgU1ZHLkVsZW1lbnQucHJvdG90eXBlW2V2ZW50XSA9IGZ1bmN0aW9uKGYpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgIC8vIGJpbmQgZXZlbnQgdG8gZWxlbWVudCByYXRoZXIgdGhhbiBlbGVtZW50IG5vZGVcbiAgICB0aGlzLm5vZGVbJ29uJyArIGV2ZW50XSA9IHR5cGVvZiBmID09ICdmdW5jdGlvbicgP1xuICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBmLmFwcGx5KHNlbGYsIGFyZ3VtZW50cykgfSA6IG51bGxcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufSlcblxuLy8gSW5pdGlhbGl6ZSBsaXN0ZW5lcnMgc3RhY2tcblNWRy5saXN0ZW5lcnMgPSBbXVxuU1ZHLmhhbmRsZXJNYXAgPSBbXVxuXG4vLyBBZGQgZXZlbnQgYmluZGVyIGluIHRoZSBTVkcgbmFtZXNwYWNlXG5TVkcub24gPSBmdW5jdGlvbihub2RlLCBldmVudCwgbGlzdGVuZXIsIGJpbmRpbmcpIHtcbiAgLy8gY3JlYXRlIGxpc3RlbmVyLCBnZXQgb2JqZWN0LWluZGV4XG4gIHZhciBsICAgICA9IGxpc3RlbmVyLmJpbmQoYmluZGluZyB8fCBub2RlLmluc3RhbmNlIHx8IG5vZGUpXG4gICAgLCBpbmRleCA9IChTVkcuaGFuZGxlck1hcC5pbmRleE9mKG5vZGUpICsgMSB8fCBTVkcuaGFuZGxlck1hcC5wdXNoKG5vZGUpKSAtIDFcbiAgICAsIGV2ICAgID0gZXZlbnQuc3BsaXQoJy4nKVswXVxuICAgICwgbnMgICAgPSBldmVudC5zcGxpdCgnLicpWzFdIHx8ICcqJ1xuXG5cbiAgLy8gZW5zdXJlIHZhbGlkIG9iamVjdFxuICBTVkcubGlzdGVuZXJzW2luZGV4XSAgICAgICAgID0gU1ZHLmxpc3RlbmVyc1tpbmRleF0gICAgICAgICB8fCB7fVxuICBTVkcubGlzdGVuZXJzW2luZGV4XVtldl0gICAgID0gU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdICAgICB8fCB7fVxuICBTVkcubGlzdGVuZXJzW2luZGV4XVtldl1bbnNdID0gU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdW25zXSB8fCB7fVxuXG4gIC8vIHJlZmVyZW5jZSBsaXN0ZW5lclxuICBTVkcubGlzdGVuZXJzW2luZGV4XVtldl1bbnNdW2xpc3RlbmVyXSA9IGxcblxuICAvLyBhZGQgbGlzdGVuZXJcbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2LCBsLCBmYWxzZSlcbn1cblxuLy8gQWRkIGV2ZW50IHVuYmluZGVyIGluIHRoZSBTVkcgbmFtZXNwYWNlXG5TVkcub2ZmID0gZnVuY3Rpb24obm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHZhciBpbmRleCA9IFNWRy5oYW5kbGVyTWFwLmluZGV4T2Yobm9kZSlcbiAgICAsIGV2ICAgID0gZXZlbnQgJiYgZXZlbnQuc3BsaXQoJy4nKVswXVxuICAgICwgbnMgICAgPSBldmVudCAmJiBldmVudC5zcGxpdCgnLicpWzFdXG5cbiAgaWYoaW5kZXggPT0gLTEpIHJldHVyblxuXG4gIGlmIChsaXN0ZW5lcikge1xuICAgIC8vIHJlbW92ZSBsaXN0ZW5lciByZWZlcmVuY2VcbiAgICBpZiAoU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdICYmIFNWRy5saXN0ZW5lcnNbaW5kZXhdW2V2XVtucyB8fCAnKiddKSB7XG4gICAgICAvLyByZW1vdmUgbGlzdGVuZXJcbiAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldiwgU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdW25zIHx8ICcqJ11bbGlzdGVuZXJdLCBmYWxzZSlcblxuICAgICAgZGVsZXRlIFNWRy5saXN0ZW5lcnNbaW5kZXhdW2V2XVtucyB8fCAnKiddW2xpc3RlbmVyXVxuICAgIH1cblxuICB9IGVsc2UgaWYgKG5zICYmIGV2KSB7XG4gICAgLy8gcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIGEgbmFtZXNwYWNlZCBldmVudFxuICAgIGlmIChTVkcubGlzdGVuZXJzW2luZGV4XVtldl0gJiYgU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdW25zXSkge1xuICAgICAgZm9yIChsaXN0ZW5lciBpbiBTVkcubGlzdGVuZXJzW2luZGV4XVtldl1bbnNdKVxuICAgICAgICBTVkcub2ZmKG5vZGUsIFtldiwgbnNdLmpvaW4oJy4nKSwgbGlzdGVuZXIpXG5cbiAgICAgIGRlbGV0ZSBTVkcubGlzdGVuZXJzW2luZGV4XVtldl1bbnNdXG4gICAgfVxuXG4gIH0gZWxzZSBpZiAobnMpe1xuICAgIC8vIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvciBhIHNwZWNpZmljIG5hbWVzcGFjZVxuICAgIGZvcihldmVudCBpbiBTVkcubGlzdGVuZXJzW2luZGV4XSl7XG4gICAgICAgIGZvcihuYW1lc3BhY2UgaW4gU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZlbnRdKXtcbiAgICAgICAgICAgIGlmKG5zID09PSBuYW1lc3BhY2Upe1xuICAgICAgICAgICAgICAgIFNWRy5vZmYobm9kZSwgW2V2ZW50LCBuc10uam9pbignLicpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gIH0gZWxzZSBpZiAoZXYpIHtcbiAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50XG4gICAgaWYgKFNWRy5saXN0ZW5lcnNbaW5kZXhdW2V2XSkge1xuICAgICAgZm9yIChuYW1lc3BhY2UgaW4gU1ZHLmxpc3RlbmVyc1tpbmRleF1bZXZdKVxuICAgICAgICBTVkcub2ZmKG5vZGUsIFtldiwgbmFtZXNwYWNlXS5qb2luKCcuJykpXG5cbiAgICAgIGRlbGV0ZSBTVkcubGlzdGVuZXJzW2luZGV4XVtldl1cbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICAvLyByZW1vdmUgYWxsIGxpc3RlbmVycyBvbiBhIGdpdmVuIG5vZGVcbiAgICBmb3IgKGV2ZW50IGluIFNWRy5saXN0ZW5lcnNbaW5kZXhdKVxuICAgICAgU1ZHLm9mZihub2RlLCBldmVudClcblxuICAgIGRlbGV0ZSBTVkcubGlzdGVuZXJzW2luZGV4XVxuXG4gIH1cbn1cblxuLy9cblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcbiAgLy8gQmluZCBnaXZlbiBldmVudCB0byBsaXN0ZW5lclxuICBvbjogZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyLCBiaW5kaW5nKSB7XG4gICAgU1ZHLm9uKHRoaXMubm9kZSwgZXZlbnQsIGxpc3RlbmVyLCBiaW5kaW5nKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICAvLyBVbmJpbmQgZXZlbnQgZnJvbSBsaXN0ZW5lclxuLCBvZmY6IGZ1bmN0aW9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIFNWRy5vZmYodGhpcy5ub2RlLCBldmVudCwgbGlzdGVuZXIpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIC8vIEZpcmUgZ2l2ZW4gZXZlbnRcbiwgZmlyZTogZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcblxuICAgIC8vIERpc3BhdGNoIGV2ZW50XG4gICAgaWYoZXZlbnQgaW5zdGFuY2VvZiBFdmVudCl7XG4gICAgICAgIHRoaXMubm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICAgIH1lbHNle1xuICAgICAgICB0aGlzLm5vZGUuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnQsIHtkZXRhaWw6ZGF0YX0pKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn0pXG5cblNWRy5EZWZzID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemUgbm9kZVxuICBjcmVhdGU6ICdkZWZzJ1xuXG4gIC8vIEluaGVyaXQgZnJvbVxuLCBpbmhlcml0OiBTVkcuQ29udGFpbmVyXG5cbn0pXG5TVkcuRyA9IFNWRy5pbnZlbnQoe1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY3JlYXRlOiAnZydcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxuXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXG4sIGV4dGVuZDoge1xuICAgIC8vIE1vdmUgb3ZlciB4LWF4aXNcbiAgICB4OiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy50cmFuc2Zvcm0oJ3gnKSA6IHRoaXMudHJhbnNmb3JtKHsgeDogLXRoaXMueCgpICsgeCB9LCB0cnVlKVxuICAgIH1cbiAgICAvLyBNb3ZlIG92ZXIgeS1heGlzXG4gICwgeTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIHkgPT0gbnVsbCA/IHRoaXMudHJhbnNmb3JtKCd5JykgOiB0aGlzLnRyYW5zZm9ybSh7IHk6IC10aGlzLnkoKSArIHkgfSwgdHJ1ZSlcbiAgICB9XG4gICAgLy8gTW92ZSBieSBjZW50ZXIgb3ZlciB4LWF4aXNcbiAgLCBjeDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHggPT0gbnVsbCA/IHRoaXMudGJveCgpLmN4IDogdGhpcy54KHggLSB0aGlzLnRib3goKS53aWR0aCAvIDIpXG4gICAgfVxuICAgIC8vIE1vdmUgYnkgY2VudGVyIG92ZXIgeS1heGlzXG4gICwgY3k6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHJldHVybiB5ID09IG51bGwgPyB0aGlzLnRib3goKS5jeSA6IHRoaXMueSh5IC0gdGhpcy50Ym94KCkuaGVpZ2h0IC8gMilcbiAgICB9XG4gICwgZ2JveDogZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBiYm94ICA9IHRoaXMuYmJveCgpXG4gICAgICAgICwgdHJhbnMgPSB0aGlzLnRyYW5zZm9ybSgpXG5cbiAgICAgIGJib3gueCAgKz0gdHJhbnMueFxuICAgICAgYmJveC54MiArPSB0cmFucy54XG4gICAgICBiYm94LmN4ICs9IHRyYW5zLnhcblxuICAgICAgYmJveC55ICArPSB0cmFucy55XG4gICAgICBiYm94LnkyICs9IHRyYW5zLnlcbiAgICAgIGJib3guY3kgKz0gdHJhbnMueVxuXG4gICAgICByZXR1cm4gYmJveFxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIENyZWF0ZSBhIGdyb3VwIGVsZW1lbnRcbiAgICBncm91cDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5HKVxuICAgIH1cbiAgfVxufSlcbi8vICMjIyBUaGlzIG1vZHVsZSBhZGRzIGJhY2t3YXJkIC8gZm9yd2FyZCBmdW5jdGlvbmFsaXR5IHRvIGVsZW1lbnRzLlxuXG4vL1xuU1ZHLmV4dGVuZChTVkcuRWxlbWVudCwge1xuICAvLyBHZXQgYWxsIHNpYmxpbmdzLCBpbmNsdWRpbmcgbXlzZWxmXG4gIHNpYmxpbmdzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpXG4gIH1cbiAgLy8gR2V0IHRoZSBjdXJlbnQgcG9zaXRpb24gc2libGluZ3NcbiwgcG9zaXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudCgpLmluZGV4KHRoaXMpXG4gIH1cbiAgLy8gR2V0IHRoZSBuZXh0IGVsZW1lbnQgKHdpbGwgcmV0dXJuIG51bGwgaWYgdGhlcmUgaXMgbm9uZSlcbiwgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2libGluZ3MoKVt0aGlzLnBvc2l0aW9uKCkgKyAxXVxuICB9XG4gIC8vIEdldCB0aGUgbmV4dCBlbGVtZW50ICh3aWxsIHJldHVybiBudWxsIGlmIHRoZXJlIGlzIG5vbmUpXG4sIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zaWJsaW5ncygpW3RoaXMucG9zaXRpb24oKSAtIDFdXG4gIH1cbiAgLy8gU2VuZCBnaXZlbiBlbGVtZW50IG9uZSBzdGVwIGZvcndhcmRcbiwgZm9yd2FyZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGkgPSB0aGlzLnBvc2l0aW9uKCkgKyAxXG4gICAgICAsIHAgPSB0aGlzLnBhcmVudCgpXG5cbiAgICAvLyBtb3ZlIG5vZGUgb25lIHN0ZXAgZm9yd2FyZFxuICAgIHAucmVtb3ZlRWxlbWVudCh0aGlzKS5hZGQodGhpcywgaSlcblxuICAgIC8vIG1ha2Ugc3VyZSBkZWZzIG5vZGUgaXMgYWx3YXlzIGF0IHRoZSB0b3BcbiAgICBpZiAocCBpbnN0YW5jZW9mIFNWRy5Eb2MpXG4gICAgICBwLm5vZGUuYXBwZW5kQ2hpbGQocC5kZWZzKCkubm9kZSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgLy8gU2VuZCBnaXZlbiBlbGVtZW50IG9uZSBzdGVwIGJhY2t3YXJkXG4sIGJhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSA9IHRoaXMucG9zaXRpb24oKVxuXG4gICAgaWYgKGkgPiAwKVxuICAgICAgdGhpcy5wYXJlbnQoKS5yZW1vdmVFbGVtZW50KHRoaXMpLmFkZCh0aGlzLCBpIC0gMSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgLy8gU2VuZCBnaXZlbiBlbGVtZW50IGFsbCB0aGUgd2F5IHRvIHRoZSBmcm9udFxuLCBmcm9udDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhcmVudCgpXG5cbiAgICAvLyBNb3ZlIG5vZGUgZm9yd2FyZFxuICAgIHAubm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpXG5cbiAgICAvLyBNYWtlIHN1cmUgZGVmcyBub2RlIGlzIGFsd2F5cyBhdCB0aGUgdG9wXG4gICAgaWYgKHAgaW5zdGFuY2VvZiBTVkcuRG9jKVxuICAgICAgcC5ub2RlLmFwcGVuZENoaWxkKHAuZGVmcygpLm5vZGUpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIC8vIFNlbmQgZ2l2ZW4gZWxlbWVudCBhbGwgdGhlIHdheSB0byB0aGUgYmFja1xuLCBiYWNrOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wb3NpdGlvbigpID4gMClcbiAgICAgIHRoaXMucGFyZW50KCkucmVtb3ZlRWxlbWVudCh0aGlzKS5hZGQodGhpcywgMClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgLy8gSW5zZXJ0cyBhIGdpdmVuIGVsZW1lbnQgYmVmb3JlIHRoZSB0YXJnZXRlZCBlbGVtZW50XG4sIGJlZm9yZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGVsZW1lbnQucmVtb3ZlKClcblxuICAgIHZhciBpID0gdGhpcy5wb3NpdGlvbigpXG5cbiAgICB0aGlzLnBhcmVudCgpLmFkZChlbGVtZW50LCBpKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICAvLyBJbnN0ZXJzIGEgZ2l2ZW4gZWxlbWVudCBhZnRlciB0aGUgdGFyZ2V0ZWQgZWxlbWVudFxuLCBhZnRlcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGVsZW1lbnQucmVtb3ZlKClcblxuICAgIHZhciBpID0gdGhpcy5wb3NpdGlvbigpXG5cbiAgICB0aGlzLnBhcmVudCgpLmFkZChlbGVtZW50LCBpICsgMSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxufSlcblNWRy5NYXNrID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemUgbm9kZVxuICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdtYXNrJykpXG5cbiAgICAvLyBrZWVwIHJlZmVyZW5jZXMgdG8gbWFza2VkIGVsZW1lbnRzXG4gICAgdGhpcy50YXJnZXRzID0gW11cbiAgfVxuXG4gIC8vIEluaGVyaXQgZnJvbVxuLCBpbmhlcml0OiBTVkcuQ29udGFpbmVyXG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gVW5tYXNrIGFsbCBtYXNrZWQgZWxlbWVudHMgYW5kIHJlbW92ZSBpdHNlbGZcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gdW5tYXNrIGFsbCB0YXJnZXRzXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50YXJnZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICBpZiAodGhpcy50YXJnZXRzW2ldKVxuICAgICAgICAgIHRoaXMudGFyZ2V0c1tpXS51bm1hc2soKVxuICAgICAgZGVsZXRlIHRoaXMudGFyZ2V0c1xuXG4gICAgICAvLyByZW1vdmUgbWFzayBmcm9tIHBhcmVudFxuICAgICAgdGhpcy5wYXJlbnQoKS5yZW1vdmVFbGVtZW50KHRoaXMpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gQ3JlYXRlIG1hc2tpbmcgZWxlbWVudFxuICAgIG1hc2s6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLnB1dChuZXcgU1ZHLk1hc2spXG4gICAgfVxuICB9XG59KVxuXG5cblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcbiAgLy8gRGlzdHJpYnV0ZSBtYXNrIHRvIHN2ZyBlbGVtZW50XG4gIG1hc2tXaXRoOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gdXNlIGdpdmVuIG1hc2sgb3IgY3JlYXRlIGEgbmV3IG9uZVxuICAgIHRoaXMubWFza2VyID0gZWxlbWVudCBpbnN0YW5jZW9mIFNWRy5NYXNrID8gZWxlbWVudCA6IHRoaXMucGFyZW50KCkubWFzaygpLmFkZChlbGVtZW50KVxuXG4gICAgLy8gc3RvcmUgcmV2ZXJlbmNlIG9uIHNlbGYgaW4gbWFza1xuICAgIHRoaXMubWFza2VyLnRhcmdldHMucHVzaCh0aGlzKVxuXG4gICAgLy8gYXBwbHkgbWFza1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ21hc2snLCAndXJsKFwiIycgKyB0aGlzLm1hc2tlci5hdHRyKCdpZCcpICsgJ1wiKScpXG4gIH1cbiAgLy8gVW5tYXNrIGVsZW1lbnRcbiwgdW5tYXNrOiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpcy5tYXNrZXJcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdtYXNrJywgbnVsbClcbiAgfVxuXG59KVxuXG5TVkcuQ2xpcFBhdGggPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoJ2NsaXBQYXRoJykpXG5cbiAgICAvLyBrZWVwIHJlZmVyZW5jZXMgdG8gY2xpcHBlZCBlbGVtZW50c1xuICAgIHRoaXMudGFyZ2V0cyA9IFtdXG4gIH1cblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxuXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXG4sIGV4dGVuZDoge1xuICAgIC8vIFVuY2xpcCBhbGwgY2xpcHBlZCBlbGVtZW50cyBhbmQgcmVtb3ZlIGl0c2VsZlxuICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAvLyB1bmNsaXAgYWxsIHRhcmdldHNcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRhcmdldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIGlmICh0aGlzLnRhcmdldHNbaV0pXG4gICAgICAgICAgdGhpcy50YXJnZXRzW2ldLnVuY2xpcCgpXG4gICAgICBkZWxldGUgdGhpcy50YXJnZXRzXG5cbiAgICAgIC8vIHJlbW92ZSBjbGlwUGF0aCBmcm9tIHBhcmVudFxuICAgICAgdGhpcy5wYXJlbnQoKS5yZW1vdmVFbGVtZW50KHRoaXMpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gQ3JlYXRlIGNsaXBwaW5nIGVsZW1lbnRcbiAgICBjbGlwOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlZnMoKS5wdXQobmV3IFNWRy5DbGlwUGF0aClcbiAgICB9XG4gIH1cbn0pXG5cbi8vXG5TVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XG4gIC8vIERpc3RyaWJ1dGUgY2xpcFBhdGggdG8gc3ZnIGVsZW1lbnRcbiAgY2xpcFdpdGg6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyB1c2UgZ2l2ZW4gY2xpcCBvciBjcmVhdGUgYSBuZXcgb25lXG4gICAgdGhpcy5jbGlwcGVyID0gZWxlbWVudCBpbnN0YW5jZW9mIFNWRy5DbGlwUGF0aCA/IGVsZW1lbnQgOiB0aGlzLnBhcmVudCgpLmNsaXAoKS5hZGQoZWxlbWVudClcblxuICAgIC8vIHN0b3JlIHJldmVyZW5jZSBvbiBzZWxmIGluIG1hc2tcbiAgICB0aGlzLmNsaXBwZXIudGFyZ2V0cy5wdXNoKHRoaXMpXG5cbiAgICAvLyBhcHBseSBtYXNrXG4gICAgcmV0dXJuIHRoaXMuYXR0cignY2xpcC1wYXRoJywgJ3VybChcIiMnICsgdGhpcy5jbGlwcGVyLmF0dHIoJ2lkJykgKyAnXCIpJylcbiAgfVxuICAvLyBVbmNsaXAgZWxlbWVudFxuLCB1bmNsaXA6IGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzLmNsaXBwZXJcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdjbGlwLXBhdGgnLCBudWxsKVxuICB9XG5cbn0pXG5TVkcuR3JhZGllbnQgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24odHlwZSkge1xuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKHR5cGUgKyAnR3JhZGllbnQnKSlcblxuICAgIC8vIHN0b3JlIHR5cGVcbiAgICB0aGlzLnR5cGUgPSB0eXBlXG4gIH1cblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLkNvbnRhaW5lclxuXG4gIC8vIEFkZCBjbGFzcyBtZXRob2RzXG4sIGV4dGVuZDoge1xuICAgIC8vIEFkZCBhIGNvbG9yIHN0b3BcbiAgICBhdDogZnVuY3Rpb24ob2Zmc2V0LCBjb2xvciwgb3BhY2l0eSkge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuU3RvcCkudXBkYXRlKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpXG4gICAgfVxuICAgIC8vIFVwZGF0ZSBncmFkaWVudFxuICAsIHVwZGF0ZTogZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgIC8vIHJlbW92ZSBhbGwgc3RvcHNcbiAgICAgIHRoaXMuY2xlYXIoKVxuXG4gICAgICAvLyBpbnZva2UgcGFzc2VkIGJsb2NrXG4gICAgICBpZiAodHlwZW9mIGJsb2NrID09ICdmdW5jdGlvbicpXG4gICAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcylcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSBmaWxsIGlkXG4gICwgZmlsbDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ3VybCgjJyArIHRoaXMuaWQoKSArICcpJ1xuICAgIH1cbiAgICAvLyBBbGlhcyBzdHJpbmcgY29udmVydGlvbiB0byBmaWxsXG4gICwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsbCgpXG4gICAgfVxuICAgIC8vIGN1c3RvbSBhdHRyIHRvIGhhbmRsZSB0cmFuc2Zvcm1cbiAgLCBhdHRyOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICBpZihhID09ICd0cmFuc2Zvcm0nKSBhID0gJ2dyYWRpZW50VHJhbnNmb3JtJ1xuICAgICAgcmV0dXJuIFNWRy5Db250YWluZXIucHJvdG90eXBlLmF0dHIuY2FsbCh0aGlzLCBhLCBiLCBjKVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIENyZWF0ZSBncmFkaWVudCBlbGVtZW50IGluIGRlZnNcbiAgICBncmFkaWVudDogZnVuY3Rpb24odHlwZSwgYmxvY2spIHtcbiAgICAgIHJldHVybiB0aGlzLmRlZnMoKS5ncmFkaWVudCh0eXBlLCBibG9jaylcbiAgICB9XG4gIH1cbn0pXG5cbi8vIEFkZCBhbmltYXRhYmxlIG1ldGhvZHMgdG8gYm90aCBncmFkaWVudCBhbmQgZnggbW9kdWxlXG5TVkcuZXh0ZW5kKFNWRy5HcmFkaWVudCwgU1ZHLkZYLCB7XG4gIC8vIEZyb20gcG9zaXRpb25cbiAgZnJvbTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiAodGhpcy50YXJnZXQgfHwgdGhpcykudHlwZSA9PSAncmFkaWFsJyA/XG4gICAgICB0aGlzLmF0dHIoeyBmeDogbmV3IFNWRy5OdW1iZXIoeCksIGZ5OiBuZXcgU1ZHLk51bWJlcih5KSB9KSA6XG4gICAgICB0aGlzLmF0dHIoeyB4MTogbmV3IFNWRy5OdW1iZXIoeCksIHkxOiBuZXcgU1ZHLk51bWJlcih5KSB9KVxuICB9XG4gIC8vIFRvIHBvc2l0aW9uXG4sIHRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuICh0aGlzLnRhcmdldCB8fCB0aGlzKS50eXBlID09ICdyYWRpYWwnID9cbiAgICAgIHRoaXMuYXR0cih7IGN4OiBuZXcgU1ZHLk51bWJlcih4KSwgY3k6IG5ldyBTVkcuTnVtYmVyKHkpIH0pIDpcbiAgICAgIHRoaXMuYXR0cih7IHgyOiBuZXcgU1ZHLk51bWJlcih4KSwgeTI6IG5ldyBTVkcuTnVtYmVyKHkpIH0pXG4gIH1cbn0pXG5cbi8vIEJhc2UgZ3JhZGllbnQgZ2VuZXJhdGlvblxuU1ZHLmV4dGVuZChTVkcuRGVmcywge1xuICAvLyBkZWZpbmUgZ3JhZGllbnRcbiAgZ3JhZGllbnQ6IGZ1bmN0aW9uKHR5cGUsIGJsb2NrKSB7XG4gICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuR3JhZGllbnQodHlwZSkpLnVwZGF0ZShibG9jaylcbiAgfVxuXG59KVxuXG5TVkcuU3RvcCA9IFNWRy5pbnZlbnQoe1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY3JlYXRlOiAnc3RvcCdcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLkVsZW1lbnRcblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICAvLyBhZGQgY29sb3Igc3RvcHNcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKG8pIHtcbiAgICAgIGlmICh0eXBlb2YgbyA9PSAnbnVtYmVyJyB8fCBvIGluc3RhbmNlb2YgU1ZHLk51bWJlcikge1xuICAgICAgICBvID0ge1xuICAgICAgICAgIG9mZnNldDogIGFyZ3VtZW50c1swXVxuICAgICAgICAsIGNvbG9yOiAgIGFyZ3VtZW50c1sxXVxuICAgICAgICAsIG9wYWNpdHk6IGFyZ3VtZW50c1syXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBhdHRyaWJ1dGVzXG4gICAgICBpZiAoby5vcGFjaXR5ICE9IG51bGwpIHRoaXMuYXR0cignc3RvcC1vcGFjaXR5Jywgby5vcGFjaXR5KVxuICAgICAgaWYgKG8uY29sb3IgICAhPSBudWxsKSB0aGlzLmF0dHIoJ3N0b3AtY29sb3InLCBvLmNvbG9yKVxuICAgICAgaWYgKG8ub2Zmc2V0ICAhPSBudWxsKSB0aGlzLmF0dHIoJ29mZnNldCcsIG5ldyBTVkcuTnVtYmVyKG8ub2Zmc2V0KSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cblxufSlcblxuU1ZHLlBhdHRlcm4gPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ3BhdHRlcm4nXG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5Db250YWluZXJcblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICAvLyBSZXR1cm4gdGhlIGZpbGwgaWRcbiAgICBmaWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAndXJsKCMnICsgdGhpcy5pZCgpICsgJyknXG4gICAgfVxuICAgIC8vIFVwZGF0ZSBwYXR0ZXJuIGJ5IHJlYnVpbGRpbmdcbiAgLCB1cGRhdGU6IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAvLyByZW1vdmUgY29udGVudFxuICAgICAgdGhpcy5jbGVhcigpXG5cbiAgICAgIC8vIGludm9rZSBwYXNzZWQgYmxvY2tcbiAgICAgIGlmICh0eXBlb2YgYmxvY2sgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgYmxvY2suY2FsbCh0aGlzLCB0aGlzKVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBBbGlhcyBzdHJpbmcgY29udmVydGlvbiB0byBmaWxsXG4gICwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsbCgpXG4gICAgfVxuICAgIC8vIGN1c3RvbSBhdHRyIHRvIGhhbmRsZSB0cmFuc2Zvcm1cbiAgLCBhdHRyOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICBpZihhID09ICd0cmFuc2Zvcm0nKSBhID0gJ3BhdHRlcm5UcmFuc2Zvcm0nXG4gICAgICByZXR1cm4gU1ZHLkNvbnRhaW5lci5wcm90b3R5cGUuYXR0ci5jYWxsKHRoaXMsIGEsIGIsIGMpXG4gICAgfVxuXG4gIH1cblxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBDcmVhdGUgcGF0dGVybiBlbGVtZW50IGluIGRlZnNcbiAgICBwYXR0ZXJuOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBibG9jaykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLnBhdHRlcm4od2lkdGgsIGhlaWdodCwgYmxvY2spXG4gICAgfVxuICB9XG59KVxuXG5TVkcuZXh0ZW5kKFNWRy5EZWZzLCB7XG4gIC8vIERlZmluZSBncmFkaWVudFxuICBwYXR0ZXJuOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBibG9jaykge1xuICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlBhdHRlcm4pLnVwZGF0ZShibG9jaykuYXR0cih7XG4gICAgICB4OiAgICAgICAgICAgIDBcbiAgICAsIHk6ICAgICAgICAgICAgMFxuICAgICwgd2lkdGg6ICAgICAgICB3aWR0aFxuICAgICwgaGVpZ2h0OiAgICAgICBoZWlnaHRcbiAgICAsIHBhdHRlcm5Vbml0czogJ3VzZXJTcGFjZU9uVXNlJ1xuICAgIH0pXG4gIH1cblxufSlcblNWRy5Eb2MgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAvLyBlbnN1cmUgdGhlIHByZXNlbmNlIG9mIGEgZG9tIGVsZW1lbnRcbiAgICAgIGVsZW1lbnQgPSB0eXBlb2YgZWxlbWVudCA9PSAnc3RyaW5nJyA/XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnQpIDpcbiAgICAgICAgZWxlbWVudFxuXG4gICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGFuIHN2ZyBlbGVtZW50LCB1c2UgdGhhdCBlbGVtZW50IGFzIHRoZSBtYWluIHdyYXBwZXIuXG4gICAgICAvLyBUaGlzIGFsbG93cyBzdmcuanMgdG8gd29yayB3aXRoIHN2ZyBkb2N1bWVudHMgYXMgd2VsbC5cbiAgICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lID09ICdzdmcnKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbGVtZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoJ3N2ZycpKVxuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMubm9kZSlcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHN2ZyBlbGVtZW50IGF0dHJpYnV0ZXMgYW5kIGVuc3VyZSBkZWZzIG5vZGVcbiAgICAgIHRoaXMubmFtZXNwYWNlKCkuc2l6ZSgnMTAwJScsICcxMDAlJykuZGVmcygpXG4gICAgfVxuICB9XG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5Db250YWluZXJcblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICAvLyBBZGQgbmFtZXNwYWNlc1xuICAgIG5hbWVzcGFjZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgICAgICAuYXR0cih7IHhtbG5zOiBTVkcubnMsIHZlcnNpb246ICcxLjEnIH0pXG4gICAgICAgIC5hdHRyKCd4bWxuczp4bGluaycsIFNWRy54bGluaywgU1ZHLnhtbG5zKVxuICAgICAgICAuYXR0cigneG1sbnM6c3ZnanMnLCBTVkcuc3ZnanMsIFNWRy54bWxucylcbiAgICB9XG4gICAgLy8gQ3JlYXRlcyBhbmQgcmV0dXJucyBkZWZzIGVsZW1lbnRcbiAgLCBkZWZzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fZGVmcykge1xuICAgICAgICB2YXIgZGVmc1xuXG4gICAgICAgIC8vIEZpbmQgb3IgY3JlYXRlIGEgZGVmcyBlbGVtZW50IGluIHRoaXMgaW5zdGFuY2VcbiAgICAgICAgaWYgKGRlZnMgPSB0aGlzLm5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RlZnMnKVswXSlcbiAgICAgICAgICB0aGlzLl9kZWZzID0gU1ZHLmFkb3B0KGRlZnMpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aGlzLl9kZWZzID0gbmV3IFNWRy5EZWZzXG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBkZWZzIG5vZGUgaXMgYXQgdGhlIGVuZCBvZiB0aGUgc3RhY2tcbiAgICAgICAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKHRoaXMuX2RlZnMubm9kZSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2RlZnNcbiAgICB9XG4gICAgLy8gY3VzdG9tIHBhcmVudCBtZXRob2RcbiAgLCBwYXJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZS5wYXJlbnROb2RlLm5vZGVOYW1lID09ICcjZG9jdW1lbnQnID8gbnVsbCA6IHRoaXMubm9kZS5wYXJlbnROb2RlXG4gICAgfVxuICAgIC8vIEZpeCBmb3IgcG9zc2libGUgc3ViLXBpeGVsIG9mZnNldC4gU2VlOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYwODgxMlxuICAsIHNwb2Y6IGZ1bmN0aW9uKHNwb2YpIHtcbiAgICAgIHZhciBwb3MgPSB0aGlzLm5vZGUuZ2V0U2NyZWVuQ1RNKClcblxuICAgICAgaWYgKHBvcylcbiAgICAgICAgdGhpc1xuICAgICAgICAgIC5zdHlsZSgnbGVmdCcsICgtcG9zLmUgJSAxKSArICdweCcpXG4gICAgICAgICAgLnN0eWxlKCd0b3AnLCAgKC1wb3MuZiAlIDEpICsgJ3B4JylcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAgIC8vIFJlbW92ZXMgdGhlIGRvYyBmcm9tIHRoZSBET01cbiAgLCByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYodGhpcy5wYXJlbnQoKSkge1xuICAgICAgICB0aGlzLnBhcmVudCgpLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG59KVxuXG5TVkcuU2hhcGUgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBlbGVtZW50KVxuICB9XG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5FbGVtZW50XG5cbn0pXG5cblNWRy5CYXJlID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemVcbiAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50LCBpbmhlcml0KSB7XG4gICAgLy8gY29uc3RydWN0IGVsZW1lbnRcbiAgICB0aGlzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgU1ZHLmNyZWF0ZShlbGVtZW50KSlcblxuICAgIC8vIGluaGVyaXQgY3VzdG9tIG1ldGhvZHNcbiAgICBpZiAoaW5oZXJpdClcbiAgICAgIGZvciAodmFyIG1ldGhvZCBpbiBpbmhlcml0LnByb3RvdHlwZSlcbiAgICAgICAgaWYgKHR5cGVvZiBpbmhlcml0LnByb3RvdHlwZVttZXRob2RdID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgIHRoaXNbbWV0aG9kXSA9IGluaGVyaXQucHJvdG90eXBlW21ldGhvZF1cbiAgfVxuXG4gIC8vIEluaGVyaXQgZnJvbVxuLCBpbmhlcml0OiBTVkcuRWxlbWVudFxuXG4gIC8vIEFkZCBtZXRob2RzXG4sIGV4dGVuZDoge1xuICAgIC8vIEluc2VydCBzb21lIHBsYWluIHRleHRcbiAgICB3b3JkczogZnVuY3Rpb24odGV4dCkge1xuICAgICAgLy8gcmVtb3ZlIGNvbnRlbnRzXG4gICAgICB3aGlsZSAodGhpcy5ub2RlLmhhc0NoaWxkTm9kZXMoKSlcbiAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZS5sYXN0Q2hpbGQpXG5cbiAgICAgIC8vIGNyZWF0ZSB0ZXh0IG5vZGVcbiAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cbn0pXG5cblxuU1ZHLmV4dGVuZChTVkcuUGFyZW50LCB7XG4gIC8vIENyZWF0ZSBhbiBlbGVtZW50IHRoYXQgaXMgbm90IGRlc2NyaWJlZCBieSBTVkcuanNcbiAgZWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgaW5oZXJpdCkge1xuICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLkJhcmUoZWxlbWVudCwgaW5oZXJpdCkpXG4gIH1cbiAgLy8gQWRkIHN5bWJvbCBlbGVtZW50XG4sIHN5bWJvbDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmcygpLmVsZW1lbnQoJ3N5bWJvbCcsIFNWRy5Db250YWluZXIpXG4gIH1cblxufSlcblNWRy5Vc2UgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ3VzZSdcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLlNoYXBlXG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gVXNlIGVsZW1lbnQgYXMgYSByZWZlcmVuY2VcbiAgICBlbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBmaWxlKSB7XG4gICAgICAvLyBTZXQgbGluZWQgZWxlbWVudFxuICAgICAgcmV0dXJuIHRoaXMuYXR0cignaHJlZicsIChmaWxlIHx8ICcnKSArICcjJyArIGVsZW1lbnQsIFNWRy54bGluaylcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBDcmVhdGUgYSB1c2UgZWxlbWVudFxuICAgIHVzZTogZnVuY3Rpb24oZWxlbWVudCwgZmlsZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuVXNlKS5lbGVtZW50KGVsZW1lbnQsIGZpbGUpXG4gICAgfVxuICB9XG59KVxuU1ZHLlJlY3QgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ3JlY3QnXG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5TaGFwZVxuXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIENyZWF0ZSBhIHJlY3QgZWxlbWVudFxuICAgIHJlY3Q6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlJlY3QoKSkuc2l6ZSh3aWR0aCwgaGVpZ2h0KVxuICAgIH1cbiAgfVxufSlcblNWRy5DaXJjbGUgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ2NpcmNsZSdcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLlNoYXBlXG5cbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gQ3JlYXRlIGNpcmNsZSBlbGVtZW50LCBiYXNlZCBvbiBlbGxpcHNlXG4gICAgY2lyY2xlOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5DaXJjbGUpLnJ4KG5ldyBTVkcuTnVtYmVyKHNpemUpLmRpdmlkZSgyKSkubW92ZSgwLCAwKVxuICAgIH1cbiAgfVxufSlcblxuU1ZHLmV4dGVuZChTVkcuQ2lyY2xlLCBTVkcuRlgsIHtcbiAgLy8gUmFkaXVzIHggdmFsdWVcbiAgcng6IGZ1bmN0aW9uKHJ4KSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cigncicsIHJ4KVxuICB9XG4gIC8vIEFsaWFzIHJhZGl1cyB4IHZhbHVlXG4sIHJ5OiBmdW5jdGlvbihyeSkge1xuICAgIHJldHVybiB0aGlzLnJ4KHJ5KVxuICB9XG59KVxuXG5TVkcuRWxsaXBzZSA9IFNWRy5pbnZlbnQoe1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY3JlYXRlOiAnZWxsaXBzZSdcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLlNoYXBlXG5cbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gQ3JlYXRlIGFuIGVsbGlwc2VcbiAgICBlbGxpcHNlOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5FbGxpcHNlKS5zaXplKHdpZHRoLCBoZWlnaHQpLm1vdmUoMCwgMClcbiAgICB9XG4gIH1cbn0pXG5cblNWRy5leHRlbmQoU1ZHLkVsbGlwc2UsIFNWRy5SZWN0LCBTVkcuRlgsIHtcbiAgLy8gUmFkaXVzIHggdmFsdWVcbiAgcng6IGZ1bmN0aW9uKHJ4KSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cigncngnLCByeClcbiAgfVxuICAvLyBSYWRpdXMgeSB2YWx1ZVxuLCByeTogZnVuY3Rpb24ocnkpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKCdyeScsIHJ5KVxuICB9XG59KVxuXG4vLyBBZGQgY29tbW9uIG1ldGhvZFxuU1ZHLmV4dGVuZChTVkcuQ2lyY2xlLCBTVkcuRWxsaXBzZSwge1xuICAgIC8vIE1vdmUgb3ZlciB4LWF4aXNcbiAgICB4OiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy5jeCgpIC0gdGhpcy5yeCgpIDogdGhpcy5jeCh4ICsgdGhpcy5yeCgpKVxuICAgIH1cbiAgICAvLyBNb3ZlIG92ZXIgeS1heGlzXG4gICwgeTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIHkgPT0gbnVsbCA/IHRoaXMuY3koKSAtIHRoaXMucnkoKSA6IHRoaXMuY3koeSArIHRoaXMucnkoKSlcbiAgICB9XG4gICAgLy8gTW92ZSBieSBjZW50ZXIgb3ZlciB4LWF4aXNcbiAgLCBjeDogZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHggPT0gbnVsbCA/IHRoaXMuYXR0cignY3gnKSA6IHRoaXMuYXR0cignY3gnLCB4KVxuICAgIH1cbiAgICAvLyBNb3ZlIGJ5IGNlbnRlciBvdmVyIHktYXhpc1xuICAsIGN5OiBmdW5jdGlvbih5KSB7XG4gICAgICByZXR1cm4geSA9PSBudWxsID8gdGhpcy5hdHRyKCdjeScpIDogdGhpcy5hdHRyKCdjeScsIHkpXG4gICAgfVxuICAgIC8vIFNldCB3aWR0aCBvZiBlbGVtZW50XG4gICwgd2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgICByZXR1cm4gd2lkdGggPT0gbnVsbCA/IHRoaXMucngoKSAqIDIgOiB0aGlzLnJ4KG5ldyBTVkcuTnVtYmVyKHdpZHRoKS5kaXZpZGUoMikpXG4gICAgfVxuICAgIC8vIFNldCBoZWlnaHQgb2YgZWxlbWVudFxuICAsIGhlaWdodDogZnVuY3Rpb24oaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gaGVpZ2h0ID09IG51bGwgPyB0aGlzLnJ5KCkgKiAyIDogdGhpcy5yeShuZXcgU1ZHLk51bWJlcihoZWlnaHQpLmRpdmlkZSgyKSlcbiAgICB9XG4gICAgLy8gQ3VzdG9tIHNpemUgZnVuY3Rpb25cbiAgLCBzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICB2YXIgcCA9IHByb3BvcnRpb25hbFNpemUodGhpcy5iYm94KCksIHdpZHRoLCBoZWlnaHQpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIC5yeChuZXcgU1ZHLk51bWJlcihwLndpZHRoKS5kaXZpZGUoMikpXG4gICAgICAgIC5yeShuZXcgU1ZHLk51bWJlcihwLmhlaWdodCkuZGl2aWRlKDIpKVxuICAgIH1cbn0pXG5TVkcuTGluZSA9IFNWRy5pbnZlbnQoe1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY3JlYXRlOiAnbGluZSdcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLlNoYXBlXG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gR2V0IGFycmF5XG4gICAgYXJyYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBTVkcuUG9pbnRBcnJheShbXG4gICAgICAgIFsgdGhpcy5hdHRyKCd4MScpLCB0aGlzLmF0dHIoJ3kxJykgXVxuICAgICAgLCBbIHRoaXMuYXR0cigneDInKSwgdGhpcy5hdHRyKCd5MicpIF1cbiAgICAgIF0pXG4gICAgfVxuICAgIC8vIE92ZXJ3cml0ZSBuYXRpdmUgcGxvdCgpIG1ldGhvZFxuICAsIHBsb3Q6IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSA0KVxuICAgICAgICB4MSA9IHsgeDE6IHgxLCB5MTogeTEsIHgyOiB4MiwgeTI6IHkyIH1cbiAgICAgIGVsc2VcbiAgICAgICAgeDEgPSBuZXcgU1ZHLlBvaW50QXJyYXkoeDEpLnRvTGluZSgpXG5cbiAgICAgIHJldHVybiB0aGlzLmF0dHIoeDEpXG4gICAgfVxuICAgIC8vIE1vdmUgYnkgbGVmdCB0b3AgY29ybmVyXG4gICwgbW92ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cih0aGlzLmFycmF5KCkubW92ZSh4LCB5KS50b0xpbmUoKSlcbiAgICB9XG4gICAgLy8gU2V0IGVsZW1lbnQgc2l6ZSB0byBnaXZlbiB3aWR0aCBhbmQgaGVpZ2h0XG4gICwgc2l6ZTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgdmFyIHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMuYmJveCgpLCB3aWR0aCwgaGVpZ2h0KVxuXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKHRoaXMuYXJyYXkoKS5zaXplKHAud2lkdGgsIHAuaGVpZ2h0KS50b0xpbmUoKSlcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBDcmVhdGUgYSBsaW5lIGVsZW1lbnRcbiAgICBsaW5lOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuTGluZSkucGxvdCh4MSwgeTEsIHgyLCB5MilcbiAgICB9XG4gIH1cbn0pXG5cblNWRy5Qb2x5bGluZSA9IFNWRy5pbnZlbnQoe1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY3JlYXRlOiAncG9seWxpbmUnXG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5TaGFwZVxuXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIENyZWF0ZSBhIHdyYXBwZWQgcG9seWxpbmUgZWxlbWVudFxuICAgIHBvbHlsaW5lOiBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5Qb2x5bGluZSkucGxvdChwKVxuICAgIH1cbiAgfVxufSlcblxuU1ZHLlBvbHlnb24gPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ3BvbHlnb24nXG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5TaGFwZVxuXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIENyZWF0ZSBhIHdyYXBwZWQgcG9seWdvbiBlbGVtZW50XG4gICAgcG9seWdvbjogZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuUG9seWdvbikucGxvdChwKVxuICAgIH1cbiAgfVxufSlcblxuLy8gQWRkIHBvbHlnb24tc3BlY2lmaWMgZnVuY3Rpb25zXG5TVkcuZXh0ZW5kKFNWRy5Qb2x5bGluZSwgU1ZHLlBvbHlnb24sIHtcbiAgLy8gR2V0IGFycmF5XG4gIGFycmF5OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXkgfHwgKHRoaXMuX2FycmF5ID0gbmV3IFNWRy5Qb2ludEFycmF5KHRoaXMuYXR0cigncG9pbnRzJykpKVxuICB9XG4gIC8vIFBsb3QgbmV3IHBhdGhcbiwgcGxvdDogZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ3BvaW50cycsICh0aGlzLl9hcnJheSA9IG5ldyBTVkcuUG9pbnRBcnJheShwKSkpXG4gIH1cbiAgLy8gTW92ZSBieSBsZWZ0IHRvcCBjb3JuZXJcbiwgbW92ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmF0dHIoJ3BvaW50cycsIHRoaXMuYXJyYXkoKS5tb3ZlKHgsIHkpKVxuICB9XG4gIC8vIFNldCBlbGVtZW50IHNpemUgdG8gZ2l2ZW4gd2lkdGggYW5kIGhlaWdodFxuLCBzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIHAgPSBwcm9wb3J0aW9uYWxTaXplKHRoaXMuYmJveCgpLCB3aWR0aCwgaGVpZ2h0KVxuXG4gICAgcmV0dXJuIHRoaXMuYXR0cigncG9pbnRzJywgdGhpcy5hcnJheSgpLnNpemUocC53aWR0aCwgcC5oZWlnaHQpKVxuICB9XG5cbn0pXG4vLyB1bmlmeSBhbGwgcG9pbnQgdG8gcG9pbnQgZWxlbWVudHNcblNWRy5leHRlbmQoU1ZHLkxpbmUsIFNWRy5Qb2x5bGluZSwgU1ZHLlBvbHlnb24sIHtcbiAgLy8gRGVmaW5lIG1vcnBoYWJsZSBhcnJheVxuICBtb3JwaEFycmF5OiAgU1ZHLlBvaW50QXJyYXlcbiAgLy8gTW92ZSBieSBsZWZ0IHRvcCBjb3JuZXIgb3ZlciB4LWF4aXNcbiwgeDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4ID09IG51bGwgPyB0aGlzLmJib3goKS54IDogdGhpcy5tb3ZlKHgsIHRoaXMuYmJveCgpLnkpXG4gIH1cbiAgLy8gTW92ZSBieSBsZWZ0IHRvcCBjb3JuZXIgb3ZlciB5LWF4aXNcbiwgeTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ID09IG51bGwgPyB0aGlzLmJib3goKS55IDogdGhpcy5tb3ZlKHRoaXMuYmJveCgpLngsIHkpXG4gIH1cbiAgLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcbiwgd2lkdGg6IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgdmFyIGIgPSB0aGlzLmJib3goKVxuXG4gICAgcmV0dXJuIHdpZHRoID09IG51bGwgPyBiLndpZHRoIDogdGhpcy5zaXplKHdpZHRoLCBiLmhlaWdodClcbiAgfVxuICAvLyBTZXQgaGVpZ2h0IG9mIGVsZW1lbnRcbiwgaGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICB2YXIgYiA9IHRoaXMuYmJveCgpXG5cbiAgICByZXR1cm4gaGVpZ2h0ID09IG51bGwgPyBiLmhlaWdodCA6IHRoaXMuc2l6ZShiLndpZHRoLCBoZWlnaHQpXG4gIH1cbn0pXG5TVkcuUGF0aCA9IFNWRy5pbnZlbnQoe1xuICAvLyBJbml0aWFsaXplIG5vZGVcbiAgY3JlYXRlOiAncGF0aCdcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLlNoYXBlXG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gRGVmaW5lIG1vcnBoYWJsZSBhcnJheVxuICAgIG1vcnBoQXJyYXk6ICBTVkcuUGF0aEFycmF5XG4gICAgLy8gR2V0IGFycmF5XG4gICwgYXJyYXk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FycmF5IHx8ICh0aGlzLl9hcnJheSA9IG5ldyBTVkcuUGF0aEFycmF5KHRoaXMuYXR0cignZCcpKSlcbiAgICB9XG4gICAgLy8gUGxvdCBuZXcgcG9seSBwb2ludHNcbiAgLCBwbG90OiBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdkJywgKHRoaXMuX2FycmF5ID0gbmV3IFNWRy5QYXRoQXJyYXkocCkpKVxuICAgIH1cbiAgICAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lclxuICAsIG1vdmU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2QnLCB0aGlzLmFycmF5KCkubW92ZSh4LCB5KSlcbiAgICB9XG4gICAgLy8gTW92ZSBieSBsZWZ0IHRvcCBjb3JuZXIgb3ZlciB4LWF4aXNcbiAgLCB4OiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy5iYm94KCkueCA6IHRoaXMubW92ZSh4LCB0aGlzLmJib3goKS55KVxuICAgIH1cbiAgICAvLyBNb3ZlIGJ5IGxlZnQgdG9wIGNvcm5lciBvdmVyIHktYXhpc1xuICAsIHk6IGZ1bmN0aW9uKHkpIHtcbiAgICAgIHJldHVybiB5ID09IG51bGwgPyB0aGlzLmJib3goKS55IDogdGhpcy5tb3ZlKHRoaXMuYmJveCgpLngsIHkpXG4gICAgfVxuICAgIC8vIFNldCBlbGVtZW50IHNpemUgdG8gZ2l2ZW4gd2lkdGggYW5kIGhlaWdodFxuICAsIHNpemU6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHZhciBwID0gcHJvcG9ydGlvbmFsU2l6ZSh0aGlzLmJib3goKSwgd2lkdGgsIGhlaWdodClcblxuICAgICAgcmV0dXJuIHRoaXMuYXR0cignZCcsIHRoaXMuYXJyYXkoKS5zaXplKHAud2lkdGgsIHAuaGVpZ2h0KSlcbiAgICB9XG4gICAgLy8gU2V0IHdpZHRoIG9mIGVsZW1lbnRcbiAgLCB3aWR0aDogZnVuY3Rpb24od2lkdGgpIHtcbiAgICAgIHJldHVybiB3aWR0aCA9PSBudWxsID8gdGhpcy5iYm94KCkud2lkdGggOiB0aGlzLnNpemUod2lkdGgsIHRoaXMuYmJveCgpLmhlaWdodClcbiAgICB9XG4gICAgLy8gU2V0IGhlaWdodCBvZiBlbGVtZW50XG4gICwgaGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgIHJldHVybiBoZWlnaHQgPT0gbnVsbCA/IHRoaXMuYmJveCgpLmhlaWdodCA6IHRoaXMuc2l6ZSh0aGlzLmJib3goKS53aWR0aCwgaGVpZ2h0KVxuICAgIH1cblxuICB9XG5cbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gQ3JlYXRlIGEgd3JhcHBlZCBwYXRoIGVsZW1lbnRcbiAgICBwYXRoOiBmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5QYXRoKS5wbG90KGQpXG4gICAgfVxuICB9XG59KVxuU1ZHLkltYWdlID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemUgbm9kZVxuICBjcmVhdGU6ICdpbWFnZSdcblxuICAvLyBJbmhlcml0IGZyb21cbiwgaW5oZXJpdDogU1ZHLlNoYXBlXG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gKHJlKWxvYWQgaW1hZ2VcbiAgICBsb2FkOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgIGlmICghdXJsKSByZXR1cm4gdGhpc1xuXG4gICAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICAgICAgLCBpbWcgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJylcblxuICAgICAgLy8gcHJlbG9hZCBpbWFnZVxuICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcCA9IHNlbGYucGFyZW50KFNWRy5QYXR0ZXJuKVxuXG4gICAgICAgIC8vIGVuc3VyZSBpbWFnZSBzaXplXG4gICAgICAgIGlmIChzZWxmLndpZHRoKCkgPT0gMCAmJiBzZWxmLmhlaWdodCgpID09IDApXG4gICAgICAgICAgc2VsZi5zaXplKGltZy53aWR0aCwgaW1nLmhlaWdodClcblxuICAgICAgICAvLyBlbnN1cmUgcGF0dGVybiBzaXplIGlmIG5vdCBzZXRcbiAgICAgICAgaWYgKHAgJiYgcC53aWR0aCgpID09IDAgJiYgcC5oZWlnaHQoKSA9PSAwKVxuICAgICAgICAgIHAuc2l6ZShzZWxmLndpZHRoKCksIHNlbGYuaGVpZ2h0KCkpXG5cbiAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxmLl9sb2FkZWQgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgc2VsZi5fbG9hZGVkLmNhbGwoc2VsZiwge1xuICAgICAgICAgICAgd2lkdGg6ICBpbWcud2lkdGhcbiAgICAgICAgICAsIGhlaWdodDogaW1nLmhlaWdodFxuICAgICAgICAgICwgcmF0aW86ICBpbWcud2lkdGggLyBpbWcuaGVpZ2h0XG4gICAgICAgICAgLCB1cmw6ICAgIHVybFxuICAgICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2hyZWYnLCAoaW1nLnNyYyA9IHRoaXMuc3JjID0gdXJsKSwgU1ZHLnhsaW5rKVxuICAgIH1cbiAgICAvLyBBZGQgbG9hZGVkIGNhbGxiYWNrXG4gICwgbG9hZGVkOiBmdW5jdGlvbihsb2FkZWQpIHtcbiAgICAgIHRoaXMuX2xvYWRlZCA9IGxvYWRlZFxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBjcmVhdGUgaW1hZ2UgZWxlbWVudCwgbG9hZCBpbWFnZSBhbmQgc2V0IGl0cyBzaXplXG4gICAgaW1hZ2U6IGZ1bmN0aW9uKHNvdXJjZSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuSW1hZ2UpLmxvYWQoc291cmNlKS5zaXplKHdpZHRoIHx8IDAsIGhlaWdodCB8fCB3aWR0aCB8fCAwKVxuICAgIH1cbiAgfVxuXG59KVxuU1ZHLlRleHQgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIFNWRy5jcmVhdGUoJ3RleHQnKSlcblxuICAgIHRoaXMuZG9tLmxlYWRpbmcgPSBuZXcgU1ZHLk51bWJlcigxLjMpICAgIC8vIHN0b3JlIGxlYWRpbmcgdmFsdWUgZm9yIHJlYnVpbGRpbmdcbiAgICB0aGlzLl9yZWJ1aWxkID0gdHJ1ZSAgICAgICAgICAgICAgICAgICAgICAvLyBlbmFibGUgYXV0b21hdGljIHVwZGF0aW5nIG9mIGR5IHZhbHVlc1xuICAgIHRoaXMuX2J1aWxkICAgPSBmYWxzZSAgICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgYnVpbGQgbW9kZSBmb3IgYWRkaW5nIG11bHRpcGxlIGxpbmVzXG5cbiAgICAvLyBzZXQgZGVmYXVsdCBmb250XG4gICAgdGhpcy5hdHRyKCdmb250LWZhbWlseScsIFNWRy5kZWZhdWx0cy5hdHRyc1snZm9udC1mYW1pbHknXSlcbiAgfVxuXG4gIC8vIEluaGVyaXQgZnJvbVxuLCBpbmhlcml0OiBTVkcuU2hhcGVcblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICBjbG9uZTogZnVuY3Rpb24oKXtcbiAgICAgIC8vIGNsb25lIGVsZW1lbnQgYW5kIGFzc2lnbiBuZXcgaWRcbiAgICAgIHZhciBjbG9uZSA9IGFzc2lnbk5ld0lkKHRoaXMubm9kZS5jbG9uZU5vZGUodHJ1ZSkpXG5cbiAgICAgIC8vIGluc2VydCB0aGUgY2xvbmUgYWZ0ZXIgbXlzZWxmXG4gICAgICB0aGlzLmFmdGVyKGNsb25lKVxuXG4gICAgICByZXR1cm4gY2xvbmVcbiAgICB9XG4gICAgLy8gTW92ZSBvdmVyIHgtYXhpc1xuICAsIHg6IGZ1bmN0aW9uKHgpIHtcbiAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcbiAgICAgIGlmICh4ID09IG51bGwpXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ3gnKVxuXG4gICAgICAvLyBtb3ZlIGxpbmVzIGFzIHdlbGwgaWYgbm8gdGV4dFBhdGggaXMgcHJlc2VudFxuICAgICAgaWYgKCF0aGlzLnRleHRQYXRoKVxuICAgICAgICB0aGlzLmxpbmVzKCkuZWFjaChmdW5jdGlvbigpIHsgaWYgKHRoaXMuZG9tLm5ld0xpbmVkKSB0aGlzLngoeCkgfSlcblxuICAgICAgcmV0dXJuIHRoaXMuYXR0cigneCcsIHgpXG4gICAgfVxuICAgIC8vIE1vdmUgb3ZlciB5LWF4aXNcbiAgLCB5OiBmdW5jdGlvbih5KSB7XG4gICAgICB2YXIgb3kgPSB0aGlzLmF0dHIoJ3knKVxuICAgICAgICAsIG8gID0gdHlwZW9mIG95ID09PSAnbnVtYmVyJyA/IG95IC0gdGhpcy5iYm94KCkueSA6IDBcblxuICAgICAgLy8gYWN0IGFzIGdldHRlclxuICAgICAgaWYgKHkgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBveSA9PT0gJ251bWJlcicgPyBveSAtIG8gOiBveVxuXG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCd5JywgdHlwZW9mIHkgPT09ICdudW1iZXInID8geSArIG8gOiB5KVxuICAgIH1cbiAgICAvLyBNb3ZlIGNlbnRlciBvdmVyIHgtYXhpc1xuICAsIGN4OiBmdW5jdGlvbih4KSB7XG4gICAgICByZXR1cm4geCA9PSBudWxsID8gdGhpcy5iYm94KCkuY3ggOiB0aGlzLngoeCAtIHRoaXMuYmJveCgpLndpZHRoIC8gMilcbiAgICB9XG4gICAgLy8gTW92ZSBjZW50ZXIgb3ZlciB5LWF4aXNcbiAgLCBjeTogZnVuY3Rpb24oeSkge1xuICAgICAgcmV0dXJuIHkgPT0gbnVsbCA/IHRoaXMuYmJveCgpLmN5IDogdGhpcy55KHkgLSB0aGlzLmJib3goKS5oZWlnaHQgLyAyKVxuICAgIH1cbiAgICAvLyBTZXQgdGhlIHRleHQgY29udGVudFxuICAsIHRleHQ6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcbiAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICB2YXIgdGV4dCA9ICcnXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMubm9kZS5jaGlsZE5vZGVzXG4gICAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgKytpKXtcblxuICAgICAgICAgIC8vIGFkZCBuZXdsaW5lIGlmIGl0cyBub3QgdGhlIGZpcnN0IGNoaWxkIGFuZCBuZXdMaW5lZCBpcyBzZXQgdG8gdHJ1ZVxuICAgICAgICAgIGlmKGkgIT0gMCAmJiBjaGlsZHJlbltpXS5ub2RlVHlwZSAhPSAzICYmIFNWRy5hZG9wdChjaGlsZHJlbltpXSkuZG9tLm5ld0xpbmVkID09IHRydWUpe1xuICAgICAgICAgICAgdGV4dCArPSAnXFxuJ1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGFkZCBjb250ZW50IG9mIHRoaXMgbm9kZVxuICAgICAgICAgIHRleHQgKz0gY2hpbGRyZW5baV0udGV4dENvbnRlbnRcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0ZXh0XG4gICAgICB9XG5cbiAgICAgIC8vIHJlbW92ZSBleGlzdGluZyBjb250ZW50XG4gICAgICB0aGlzLmNsZWFyKCkuYnVpbGQodHJ1ZSlcblxuICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGNhbGwgYmxvY2tcbiAgICAgICAgdGV4dC5jYWxsKHRoaXMsIHRoaXMpXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHN0b3JlIHRleHQgYW5kIG1ha2Ugc3VyZSB0ZXh0IGlzIG5vdCBibGFua1xuICAgICAgICB0ZXh0ID0gdGV4dC5zcGxpdCgnXFxuJylcblxuICAgICAgICAvLyBidWlsZCBuZXcgbGluZXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gdGV4dC5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgICAgICAgIHRoaXMudHNwYW4odGV4dFtpXSkubmV3TGluZSgpXG4gICAgICB9XG5cbiAgICAgIC8vIGRpc2FibGUgYnVpbGQgbW9kZSBhbmQgcmVidWlsZCBsaW5lc1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGQoZmFsc2UpLnJlYnVpbGQoKVxuICAgIH1cbiAgICAvLyBTZXQgZm9udCBzaXplXG4gICwgc2l6ZTogZnVuY3Rpb24oc2l6ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignZm9udC1zaXplJywgc2l6ZSkucmVidWlsZCgpXG4gICAgfVxuICAgIC8vIFNldCAvIGdldCBsZWFkaW5nXG4gICwgbGVhZGluZzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIC8vIGFjdCBhcyBnZXR0ZXJcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICByZXR1cm4gdGhpcy5kb20ubGVhZGluZ1xuXG4gICAgICAvLyBhY3QgYXMgc2V0dGVyXG4gICAgICB0aGlzLmRvbS5sZWFkaW5nID0gbmV3IFNWRy5OdW1iZXIodmFsdWUpXG5cbiAgICAgIHJldHVybiB0aGlzLnJlYnVpbGQoKVxuICAgIH1cbiAgICAvLyBHZXQgYWxsIHRoZSBmaXJzdCBsZXZlbCBsaW5lc1xuICAsIGxpbmVzOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGZpbHRlciB0c3BhbnMgYW5kIG1hcCB0aGVtIHRvIFNWRy5qcyBpbnN0YW5jZXNcbiAgICAgIHZhciBsaW5lcyA9IFNWRy51dGlscy5tYXAoU1ZHLnV0aWxzLmZpbHRlclNWR0VsZW1lbnRzKHRoaXMubm9kZS5jaGlsZE5vZGVzKSwgZnVuY3Rpb24oZWwpe1xuICAgICAgICByZXR1cm4gU1ZHLmFkb3B0KGVsKVxuICAgICAgfSlcblxuICAgICAgLy8gcmV0dXJuIGFuIGluc3RhbmNlIG9mIFNWRy5zZXRcbiAgICAgIHJldHVybiBuZXcgU1ZHLlNldChsaW5lcylcbiAgICB9XG4gICAgLy8gUmVidWlsZCBhcHBlYXJhbmNlIHR5cGVcbiAgLCByZWJ1aWxkOiBmdW5jdGlvbihyZWJ1aWxkKSB7XG4gICAgICAvLyBzdG9yZSBuZXcgcmVidWlsZCBmbGFnIGlmIGdpdmVuXG4gICAgICBpZiAodHlwZW9mIHJlYnVpbGQgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICB0aGlzLl9yZWJ1aWxkID0gcmVidWlsZFxuXG4gICAgICAvLyBkZWZpbmUgcG9zaXRpb24gb2YgYWxsIGxpbmVzXG4gICAgICBpZiAodGhpcy5fcmVidWlsZCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgICAgICB0aGlzLmxpbmVzKCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy5kb20ubmV3TGluZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy50ZXh0UGF0aClcbiAgICAgICAgICAgICAgdGhpcy5hdHRyKCd4Jywgc2VsZi5hdHRyKCd4JykpXG5cbiAgICAgICAgICAgIHRoaXMuYXR0cignZHknLCBzZWxmLmRvbS5sZWFkaW5nICogbmV3IFNWRy5OdW1iZXIoc2VsZi5hdHRyKCdmb250LXNpemUnKSkpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuZmlyZSgncmVidWlsZCcpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIEVuYWJsZSAvIGRpc2FibGUgYnVpbGQgbW9kZVxuICAsIGJ1aWxkOiBmdW5jdGlvbihidWlsZCkge1xuICAgICAgdGhpcy5fYnVpbGQgPSAhIWJ1aWxkXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBvdmVyd3JpdGUgbWV0aG9kIGZyb20gcGFyZW50IHRvIHNldCBkYXRhIHByb3Blcmx5XG4gICwgc2V0RGF0YTogZnVuY3Rpb24obyl7XG4gICAgICB0aGlzLmRvbSA9IG9cbiAgICAgIHRoaXMuZG9tLmxlYWRpbmcgPSBvLmxlYWRpbmcgPyBuZXcgU1ZHLk51bWJlcihvLmxlYWRpbmcudmFsdWUsIG8ubGVhZGluZy51bml0KSA6IG5ldyBTVkcuTnVtYmVyKDEuMylcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhcmVudCBtZXRob2RcbiwgY29uc3RydWN0OiB7XG4gICAgLy8gQ3JlYXRlIHRleHQgZWxlbWVudFxuICAgIHRleHQ6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnB1dChuZXcgU1ZHLlRleHQpLnRleHQodGV4dClcbiAgICB9XG4gICAgLy8gQ3JlYXRlIHBsYWluIHRleHQgZWxlbWVudFxuICAsIHBsYWluOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5UZXh0KS5wbGFpbih0ZXh0KVxuICAgIH1cbiAgfVxuXG59KVxuXG5TVkcuVHNwYW4gPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ3RzcGFuJ1xuXG4gIC8vIEluaGVyaXQgZnJvbVxuLCBpbmhlcml0OiBTVkcuU2hhcGVcblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICAvLyBTZXQgdGV4dCBjb250ZW50XG4gICAgdGV4dDogZnVuY3Rpb24odGV4dCkge1xuICAgICAgdHlwZW9mIHRleHQgPT09ICdmdW5jdGlvbicgPyB0ZXh0LmNhbGwodGhpcywgdGhpcykgOiB0aGlzLnBsYWluKHRleHQpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIFNob3J0Y3V0IGR4XG4gICwgZHg6IGZ1bmN0aW9uKGR4KSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdkeCcsIGR4KVxuICAgIH1cbiAgICAvLyBTaG9ydGN1dCBkeVxuICAsIGR5OiBmdW5jdGlvbihkeSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignZHknLCBkeSlcbiAgICB9XG4gICAgLy8gQ3JlYXRlIG5ldyBsaW5lXG4gICwgbmV3TGluZTogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBmZXRjaCB0ZXh0IHBhcmVudFxuICAgICAgdmFyIHQgPSB0aGlzLnBhcmVudChTVkcuVGV4dClcblxuICAgICAgLy8gbWFyayBuZXcgbGluZVxuICAgICAgdGhpcy5kb20ubmV3TGluZWQgPSB0cnVlXG5cbiAgICAgIC8vIGFwcGx5IG5ldyBoecKhblxuICAgICAgcmV0dXJuIHRoaXMuZHkodC5kb20ubGVhZGluZyAqIHQuYXR0cignZm9udC1zaXplJykpLmF0dHIoJ3gnLCB0LngoKSlcbiAgICB9XG4gIH1cblxufSlcblxuU1ZHLmV4dGVuZChTVkcuVGV4dCwgU1ZHLlRzcGFuLCB7XG4gIC8vIENyZWF0ZSBwbGFpbiB0ZXh0IG5vZGVcbiAgcGxhaW46IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAvLyBjbGVhciBpZiBidWlsZCBtb2RlIGlzIGRpc2FibGVkXG4gICAgaWYgKHRoaXMuX2J1aWxkID09PSBmYWxzZSlcbiAgICAgIHRoaXMuY2xlYXIoKVxuXG4gICAgLy8gY3JlYXRlIHRleHQgbm9kZVxuICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgLy8gQ3JlYXRlIGEgdHNwYW5cbiwgdHNwYW46IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgbm9kZSAgPSAodGhpcy50ZXh0UGF0aCAmJiB0aGlzLnRleHRQYXRoKCkgfHwgdGhpcykubm9kZVxuICAgICAgLCB0c3BhbiA9IG5ldyBTVkcuVHNwYW5cblxuICAgIC8vIGNsZWFyIGlmIGJ1aWxkIG1vZGUgaXMgZGlzYWJsZWRcbiAgICBpZiAodGhpcy5fYnVpbGQgPT09IGZhbHNlKVxuICAgICAgdGhpcy5jbGVhcigpXG5cbiAgICAvLyBhZGQgbmV3IHRzcGFuXG4gICAgbm9kZS5hcHBlbmRDaGlsZCh0c3Bhbi5ub2RlKVxuXG4gICAgcmV0dXJuIHRzcGFuLnRleHQodGV4dClcbiAgfVxuICAvLyBDbGVhciBhbGwgbGluZXNcbiwgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gKHRoaXMudGV4dFBhdGggJiYgdGhpcy50ZXh0UGF0aCgpIHx8IHRoaXMpLm5vZGVcblxuICAgIC8vIHJlbW92ZSBleGlzdGluZyBjaGlsZCBub2Rlc1xuICAgIHdoaWxlIChub2RlLmhhc0NoaWxkTm9kZXMoKSlcbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIC8vIEdldCBsZW5ndGggb2YgdGV4dCBlbGVtZW50XG4sIGxlbmd0aDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKVxuICB9XG59KVxuXG5TVkcuVGV4dFBhdGggPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ3RleHRQYXRoJ1xuXG4gIC8vIEluaGVyaXQgZnJvbVxuLCBpbmhlcml0OiBTVkcuRWxlbWVudFxuXG4gIC8vIERlZmluZSBwYXJlbnQgY2xhc3NcbiwgcGFyZW50OiBTVkcuVGV4dFxuXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIENyZWF0ZSBwYXRoIGZvciB0ZXh0IHRvIHJ1biBvblxuICAgIHBhdGg6IGZ1bmN0aW9uKGQpIHtcbiAgICAgIC8vIGNyZWF0ZSB0ZXh0UGF0aCBlbGVtZW50XG4gICAgICB2YXIgcGF0aCAgPSBuZXcgU1ZHLlRleHRQYXRoXG4gICAgICAgICwgdHJhY2sgPSB0aGlzLmRvYygpLmRlZnMoKS5wYXRoKGQpXG5cbiAgICAgIC8vIG1vdmUgbGluZXMgdG8gdGV4dHBhdGhcbiAgICAgIHdoaWxlICh0aGlzLm5vZGUuaGFzQ2hpbGROb2RlcygpKVxuICAgICAgICBwYXRoLm5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlLmZpcnN0Q2hpbGQpXG5cbiAgICAgIC8vIGFkZCB0ZXh0UGF0aCBlbGVtZW50IGFzIGNoaWxkIG5vZGVcbiAgICAgIHRoaXMubm9kZS5hcHBlbmRDaGlsZChwYXRoLm5vZGUpXG5cbiAgICAgIC8vIGxpbmsgdGV4dFBhdGggdG8gcGF0aCBhbmQgYWRkIGNvbnRlbnRcbiAgICAgIHBhdGguYXR0cignaHJlZicsICcjJyArIHRyYWNrLCBTVkcueGxpbmspXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIFBsb3QgcGF0aCBpZiBhbnlcbiAgLCBwbG90OiBmdW5jdGlvbihkKSB7XG4gICAgICB2YXIgdHJhY2sgPSB0aGlzLnRyYWNrKClcblxuICAgICAgaWYgKHRyYWNrKVxuICAgICAgICB0cmFjay5wbG90KGQpXG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIC8vIEdldCB0aGUgcGF0aCB0cmFjayBlbGVtZW50XG4gICwgdHJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhdGggPSB0aGlzLnRleHRQYXRoKClcblxuICAgICAgaWYgKHBhdGgpXG4gICAgICAgIHJldHVybiBwYXRoLnJlZmVyZW5jZSgnaHJlZicpXG4gICAgfVxuICAgIC8vIEdldCB0aGUgdGV4dFBhdGggY2hpbGRcbiAgLCB0ZXh0UGF0aDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5ub2RlLmZpcnN0Q2hpbGQgJiYgdGhpcy5ub2RlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJ3RleHRQYXRoJylcbiAgICAgICAgcmV0dXJuIFNWRy5hZG9wdCh0aGlzLm5vZGUuZmlyc3RDaGlsZClcbiAgICB9XG4gIH1cbn0pXG5TVkcuTmVzdGVkID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemUgbm9kZVxuICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBTVkcuY3JlYXRlKCdzdmcnKSlcblxuICAgIHRoaXMuc3R5bGUoJ292ZXJmbG93JywgJ3Zpc2libGUnKVxuICB9XG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5Db250YWluZXJcblxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBDcmVhdGUgbmVzdGVkIHN2ZyBkb2N1bWVudFxuICAgIG5lc3RlZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5OZXN0ZWQpXG4gICAgfVxuICB9XG59KVxuU1ZHLkEgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogJ2EnXG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5Db250YWluZXJcblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICAvLyBMaW5rIHVybFxuICAgIHRvOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2hyZWYnLCB1cmwsIFNWRy54bGluaylcbiAgICB9XG4gICAgLy8gTGluayBzaG93IGF0dHJpYnV0ZVxuICAsIHNob3c6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignc2hvdycsIHRhcmdldCwgU1ZHLnhsaW5rKVxuICAgIH1cbiAgICAvLyBMaW5rIHRhcmdldCBhdHRyaWJ1dGVcbiAgLCB0YXJnZXQ6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cigndGFyZ2V0JywgdGFyZ2V0KVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYXJlbnQgbWV0aG9kXG4sIGNvbnN0cnVjdDoge1xuICAgIC8vIENyZWF0ZSBhIGh5cGVybGluayBlbGVtZW50XG4gICAgbGluazogZnVuY3Rpb24odXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXQobmV3IFNWRy5BKS50byh1cmwpXG4gICAgfVxuICB9XG59KVxuXG5TVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCB7XG4gIC8vIENyZWF0ZSBhIGh5cGVybGluayBlbGVtZW50XG4gIGxpbmtUbzogZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIGxpbmsgPSBuZXcgU1ZHLkFcblxuICAgIGlmICh0eXBlb2YgdXJsID09ICdmdW5jdGlvbicpXG4gICAgICB1cmwuY2FsbChsaW5rLCBsaW5rKVxuICAgIGVsc2VcbiAgICAgIGxpbmsudG8odXJsKVxuXG4gICAgcmV0dXJuIHRoaXMucGFyZW50KCkucHV0KGxpbmspLnB1dCh0aGlzKVxuICB9XG5cbn0pXG5TVkcuTWFya2VyID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemUgbm9kZVxuICBjcmVhdGU6ICdtYXJrZXInXG5cbiAgLy8gSW5oZXJpdCBmcm9tXG4sIGluaGVyaXQ6IFNWRy5Db250YWluZXJcblxuICAvLyBBZGQgY2xhc3MgbWV0aG9kc1xuLCBleHRlbmQ6IHtcbiAgICAvLyBTZXQgd2lkdGggb2YgZWxlbWVudFxuICAgIHdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cignbWFya2VyV2lkdGgnLCB3aWR0aClcbiAgICB9XG4gICAgLy8gU2V0IGhlaWdodCBvZiBlbGVtZW50XG4gICwgaGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmF0dHIoJ21hcmtlckhlaWdodCcsIGhlaWdodClcbiAgICB9XG4gICAgLy8gU2V0IG1hcmtlciByZWZYIGFuZCByZWZZXG4gICwgcmVmOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICByZXR1cm4gdGhpcy5hdHRyKCdyZWZYJywgeCkuYXR0cigncmVmWScsIHkpXG4gICAgfVxuICAgIC8vIFVwZGF0ZSBtYXJrZXJcbiAgLCB1cGRhdGU6IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAvLyByZW1vdmUgYWxsIGNvbnRlbnRcbiAgICAgIHRoaXMuY2xlYXIoKVxuXG4gICAgICAvLyBpbnZva2UgcGFzc2VkIGJsb2NrXG4gICAgICBpZiAodHlwZW9mIGJsb2NrID09ICdmdW5jdGlvbicpXG4gICAgICAgIGJsb2NrLmNhbGwodGhpcywgdGhpcylcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSBmaWxsIGlkXG4gICwgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICd1cmwoIycgKyB0aGlzLmlkKCkgKyAnKSdcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuLCBjb25zdHJ1Y3Q6IHtcbiAgICBtYXJrZXI6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQsIGJsb2NrKSB7XG4gICAgICAvLyBDcmVhdGUgbWFya2VyIGVsZW1lbnQgaW4gZGVmc1xuICAgICAgcmV0dXJuIHRoaXMuZGVmcygpLm1hcmtlcih3aWR0aCwgaGVpZ2h0LCBibG9jaylcbiAgICB9XG4gIH1cblxufSlcblxuU1ZHLmV4dGVuZChTVkcuRGVmcywge1xuICAvLyBDcmVhdGUgbWFya2VyXG4gIG1hcmtlcjogZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgYmxvY2spIHtcbiAgICAvLyBTZXQgZGVmYXVsdCB2aWV3Ym94IHRvIG1hdGNoIHRoZSB3aWR0aCBhbmQgaGVpZ2h0LCBzZXQgcmVmIHRvIGN4IGFuZCBjeSBhbmQgc2V0IG9yaWVudCB0byBhdXRvXG4gICAgcmV0dXJuIHRoaXMucHV0KG5ldyBTVkcuTWFya2VyKVxuICAgICAgLnNpemUod2lkdGgsIGhlaWdodClcbiAgICAgIC5yZWYod2lkdGggLyAyLCBoZWlnaHQgLyAyKVxuICAgICAgLnZpZXdib3goMCwgMCwgd2lkdGgsIGhlaWdodClcbiAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAudXBkYXRlKGJsb2NrKVxuICB9XG5cbn0pXG5cblNWRy5leHRlbmQoU1ZHLkxpbmUsIFNWRy5Qb2x5bGluZSwgU1ZHLlBvbHlnb24sIFNWRy5QYXRoLCB7XG4gIC8vIENyZWF0ZSBhbmQgYXR0YWNoIG1hcmtlcnNcbiAgbWFya2VyOiBmdW5jdGlvbihtYXJrZXIsIHdpZHRoLCBoZWlnaHQsIGJsb2NrKSB7XG4gICAgdmFyIGF0dHIgPSBbJ21hcmtlciddXG5cbiAgICAvLyBCdWlsZCBhdHRyaWJ1dGUgbmFtZVxuICAgIGlmIChtYXJrZXIgIT0gJ2FsbCcpIGF0dHIucHVzaChtYXJrZXIpXG4gICAgYXR0ciA9IGF0dHIuam9pbignLScpXG5cbiAgICAvLyBTZXQgbWFya2VyIGF0dHJpYnV0ZVxuICAgIG1hcmtlciA9IGFyZ3VtZW50c1sxXSBpbnN0YW5jZW9mIFNWRy5NYXJrZXIgP1xuICAgICAgYXJndW1lbnRzWzFdIDpcbiAgICAgIHRoaXMuZG9jKCkubWFya2VyKHdpZHRoLCBoZWlnaHQsIGJsb2NrKVxuXG4gICAgcmV0dXJuIHRoaXMuYXR0cihhdHRyLCBtYXJrZXIpXG4gIH1cblxufSlcbi8vIERlZmluZSBsaXN0IG9mIGF2YWlsYWJsZSBhdHRyaWJ1dGVzIGZvciBzdHJva2UgYW5kIGZpbGxcbnZhciBzdWdhciA9IHtcbiAgc3Ryb2tlOiBbJ2NvbG9yJywgJ3dpZHRoJywgJ29wYWNpdHknLCAnbGluZWNhcCcsICdsaW5lam9pbicsICdtaXRlcmxpbWl0JywgJ2Rhc2hhcnJheScsICdkYXNob2Zmc2V0J11cbiwgZmlsbDogICBbJ2NvbG9yJywgJ29wYWNpdHknLCAncnVsZSddXG4sIHByZWZpeDogZnVuY3Rpb24odCwgYSkge1xuICAgIHJldHVybiBhID09ICdjb2xvcicgPyB0IDogdCArICctJyArIGFcbiAgfVxufVxuXG4vLyBBZGQgc3VnYXIgZm9yIGZpbGwgYW5kIHN0cm9rZVxuO1snZmlsbCcsICdzdHJva2UnXS5mb3JFYWNoKGZ1bmN0aW9uKG0pIHtcbiAgdmFyIGksIGV4dGVuc2lvbiA9IHt9XG5cbiAgZXh0ZW5zaW9uW21dID0gZnVuY3Rpb24obykge1xuICAgIGlmICh0eXBlb2YgbyA9PSAnc3RyaW5nJyB8fCBTVkcuQ29sb3IuaXNSZ2IobykgfHwgKG8gJiYgdHlwZW9mIG8uZmlsbCA9PT0gJ2Z1bmN0aW9uJykpXG4gICAgICB0aGlzLmF0dHIobSwgbylcblxuICAgIGVsc2VcbiAgICAgIC8vIHNldCBhbGwgYXR0cmlidXRlcyBmcm9tIHN1Z2FyLmZpbGwgYW5kIHN1Z2FyLnN0cm9rZSBsaXN0XG4gICAgICBmb3IgKGkgPSBzdWdhclttXS5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgaWYgKG9bc3VnYXJbbV1baV1dICE9IG51bGwpXG4gICAgICAgICAgdGhpcy5hdHRyKHN1Z2FyLnByZWZpeChtLCBzdWdhclttXVtpXSksIG9bc3VnYXJbbV1baV1dKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIFNWRy5GWCwgZXh0ZW5zaW9uKVxuXG59KVxuXG5TVkcuZXh0ZW5kKFNWRy5FbGVtZW50LCBTVkcuRlgsIHtcbiAgLy8gTWFwIHJvdGF0aW9uIHRvIHRyYW5zZm9ybVxuICByb3RhdGU6IGZ1bmN0aW9uKGQsIGN4LCBjeSkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybSh7IHJvdGF0aW9uOiBkLCBjeDogY3gsIGN5OiBjeSB9KVxuICB9XG4gIC8vIE1hcCBza2V3IHRvIHRyYW5zZm9ybVxuLCBza2V3OiBmdW5jdGlvbih4LCB5LCBjeCwgY3kpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oeyBza2V3WDogeCwgc2tld1k6IHksIGN4OiBjeCwgY3k6IGN5IH0pXG4gIH1cbiAgLy8gTWFwIHNjYWxlIHRvIHRyYW5zZm9ybVxuLCBzY2FsZTogZnVuY3Rpb24oeCwgeSwgY3gsIGN5KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT0gMSAgfHwgYXJndW1lbnRzLmxlbmd0aCA9PSAzID9cbiAgICAgIHRoaXMudHJhbnNmb3JtKHsgc2NhbGU6IHgsIGN4OiB5LCBjeTogY3ggfSkgOlxuICAgICAgdGhpcy50cmFuc2Zvcm0oeyBzY2FsZVg6IHgsIHNjYWxlWTogeSwgY3g6IGN4LCBjeTogY3kgfSlcbiAgfVxuICAvLyBNYXAgdHJhbnNsYXRlIHRvIHRyYW5zZm9ybVxuLCB0cmFuc2xhdGU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oeyB4OiB4LCB5OiB5IH0pXG4gIH1cbiAgLy8gTWFwIGZsaXAgdG8gdHJhbnNmb3JtXG4sIGZsaXA6IGZ1bmN0aW9uKGEsIG8pIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oeyBmbGlwOiBhLCBvZmZzZXQ6IG8gfSlcbiAgfVxuICAvLyBNYXAgbWF0cml4IHRvIHRyYW5zZm9ybVxuLCBtYXRyaXg6IGZ1bmN0aW9uKG0pIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyKCd0cmFuc2Zvcm0nLCBuZXcgU1ZHLk1hdHJpeChtKSlcbiAgfVxuICAvLyBPcGFjaXR5XG4sIG9wYWNpdHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cignb3BhY2l0eScsIHZhbHVlKVxuICB9XG4gIC8vIFJlbGF0aXZlIG1vdmUgb3ZlciB4IGF4aXNcbiwgZHg6IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gdGhpcy54KCh0aGlzLnRhcmdldCB8fCB0aGlzKS54KCkgKyB4KVxuICB9XG4gIC8vIFJlbGF0aXZlIG1vdmUgb3ZlciB5IGF4aXNcbiwgZHk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gdGhpcy55KCh0aGlzLnRhcmdldCB8fCB0aGlzKS55KCkgKyB5KVxuICB9XG4gIC8vIFJlbGF0aXZlIG1vdmUgb3ZlciB4IGFuZCB5IGF4ZXNcbiwgZG1vdmU6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy5keCh4KS5keSh5KVxuICB9XG59KVxuXG5TVkcuZXh0ZW5kKFNWRy5SZWN0LCBTVkcuRWxsaXBzZSwgU1ZHLkNpcmNsZSwgU1ZHLkdyYWRpZW50LCBTVkcuRlgsIHtcbiAgLy8gQWRkIHggYW5kIHkgcmFkaXVzXG4gIHJhZGl1czogZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB0eXBlID0gKHRoaXMudGFyZ2V0IHx8IHRoaXMpLnR5cGU7XG4gICAgcmV0dXJuIHR5cGUgPT0gJ3JhZGlhbCcgfHwgdHlwZSA9PSAnY2lyY2xlJyA/XG4gICAgICB0aGlzLmF0dHIoeyAncic6IG5ldyBTVkcuTnVtYmVyKHgpIH0pIDpcbiAgICAgIHRoaXMucngoeCkucnkoeSA9PSBudWxsID8geCA6IHkpXG4gIH1cbn0pXG5cblNWRy5leHRlbmQoU1ZHLlBhdGgsIHtcbiAgLy8gR2V0IHBhdGggbGVuZ3RoXG4gIGxlbmd0aDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZS5nZXRUb3RhbExlbmd0aCgpXG4gIH1cbiAgLy8gR2V0IHBvaW50IGF0IGxlbmd0aFxuLCBwb2ludEF0OiBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlLmdldFBvaW50QXRMZW5ndGgobGVuZ3RoKVxuICB9XG59KVxuXG5TVkcuZXh0ZW5kKFNWRy5QYXJlbnQsIFNWRy5UZXh0LCBTVkcuRlgsIHtcbiAgLy8gU2V0IGZvbnRcbiAgZm9udDogZnVuY3Rpb24obykge1xuICAgIGZvciAodmFyIGsgaW4gbylcbiAgICAgIGsgPT0gJ2xlYWRpbmcnID9cbiAgICAgICAgdGhpcy5sZWFkaW5nKG9ba10pIDpcbiAgICAgIGsgPT0gJ2FuY2hvcicgP1xuICAgICAgICB0aGlzLmF0dHIoJ3RleHQtYW5jaG9yJywgb1trXSkgOlxuICAgICAgayA9PSAnc2l6ZScgfHwgayA9PSAnZmFtaWx5JyB8fCBrID09ICd3ZWlnaHQnIHx8IGsgPT0gJ3N0cmV0Y2gnIHx8IGsgPT0gJ3ZhcmlhbnQnIHx8IGsgPT0gJ3N0eWxlJyA/XG4gICAgICAgIHRoaXMuYXR0cignZm9udC0nKyBrLCBvW2tdKSA6XG4gICAgICAgIHRoaXMuYXR0cihrLCBvW2tdKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufSlcblxuXG5TVkcuU2V0ID0gU1ZHLmludmVudCh7XG4gIC8vIEluaXRpYWxpemVcbiAgY3JlYXRlOiBmdW5jdGlvbihtZW1iZXJzKSB7XG4gICAgLy8gU2V0IGluaXRpYWwgc3RhdGVcbiAgICBBcnJheS5pc0FycmF5KG1lbWJlcnMpID8gdGhpcy5tZW1iZXJzID0gbWVtYmVycyA6IHRoaXMuY2xlYXIoKVxuICB9XG5cbiAgLy8gQWRkIGNsYXNzIG1ldGhvZHNcbiwgZXh0ZW5kOiB7XG4gICAgLy8gQWRkIGVsZW1lbnQgdG8gc2V0XG4gICAgYWRkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBpbCwgZWxlbWVudHMgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cylcblxuICAgICAgZm9yIChpID0gMCwgaWwgPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgICAgICB0aGlzLm1lbWJlcnMucHVzaChlbGVtZW50c1tpXSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGVsZW1lbnQgZnJvbSBzZXRcbiAgLCByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHZhciBpID0gdGhpcy5pbmRleChlbGVtZW50KVxuXG4gICAgICAvLyByZW1vdmUgZ2l2ZW4gY2hpbGRcbiAgICAgIGlmIChpID4gLTEpXG4gICAgICAgIHRoaXMubWVtYmVycy5zcGxpY2UoaSwgMSlcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBtZW1iZXJzXG4gICwgZWFjaDogZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHRoaXMubWVtYmVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgICAgICBibG9jay5hcHBseSh0aGlzLm1lbWJlcnNbaV0sIFtpLCB0aGlzLm1lbWJlcnNdKVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICAvLyBSZXN0b3JlIHRvIGRlZmF1bHRzXG4gICwgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaW5pdGlhbGl6ZSBzdG9yZVxuICAgICAgdGhpcy5tZW1iZXJzID0gW11cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBsZW5ndGggb2YgYSBzZXRcbiAgLCBsZW5ndGg6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVtYmVycy5sZW5ndGhcbiAgICB9XG4gICAgLy8gQ2hlY2tzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBwcmVzZW50IGluIHNldFxuICAsIGhhczogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZXgoZWxlbWVudCkgPj0gMFxuICAgIH1cbiAgICAvLyByZXR1bnMgaW5kZXggb2YgZ2l2ZW4gZWxlbWVudCBpbiBzZXRcbiAgLCBpbmRleDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVtYmVycy5pbmRleE9mKGVsZW1lbnQpXG4gICAgfVxuICAgIC8vIEdldCBtZW1iZXIgYXQgZ2l2ZW4gaW5kZXhcbiAgLCBnZXQ6IGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiB0aGlzLm1lbWJlcnNbaV1cbiAgICB9XG4gICAgLy8gR2V0IGZpcnN0IG1lbWJlclxuICAsIGZpcnN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCgwKVxuICAgIH1cbiAgICAvLyBHZXQgbGFzdCBtZW1iZXJcbiAgLCBsYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldCh0aGlzLm1lbWJlcnMubGVuZ3RoIC0gMSlcbiAgICB9XG4gICAgLy8gRGVmYXVsdCB2YWx1ZVxuICAsIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVtYmVyc1xuICAgIH1cbiAgICAvLyBHZXQgdGhlIGJvdW5kaW5nIGJveCBvZiBhbGwgbWVtYmVycyBpbmNsdWRlZCBvciBlbXB0eSBib3ggaWYgc2V0IGhhcyBubyBpdGVtc1xuICAsIGJib3g6IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgYm94ID0gbmV3IFNWRy5CQm94KClcblxuICAgICAgLy8gcmV0dXJuIGFuIGVtcHR5IGJveCBvZiB0aGVyZSBhcmUgbm8gbWVtYmVyc1xuICAgICAgaWYgKHRoaXMubWVtYmVycy5sZW5ndGggPT0gMClcbiAgICAgICAgcmV0dXJuIGJveFxuXG4gICAgICAvLyBnZXQgdGhlIGZpcnN0IHJib3ggYW5kIHVwZGF0ZSB0aGUgdGFyZ2V0IGJib3hcbiAgICAgIHZhciByYm94ID0gdGhpcy5tZW1iZXJzWzBdLnJib3goKVxuICAgICAgYm94LnggICAgICA9IHJib3gueFxuICAgICAgYm94LnkgICAgICA9IHJib3gueVxuICAgICAgYm94LndpZHRoICA9IHJib3gud2lkdGhcbiAgICAgIGJveC5oZWlnaHQgPSByYm94LmhlaWdodFxuXG4gICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHVzZXIgcmJveCBmb3IgY29ycmVjdCBwb3NpdGlvbiBhbmQgdmlzdWFsIHJlcHJlc2VudGF0aW9uXG4gICAgICAgIGJveCA9IGJveC5tZXJnZSh0aGlzLnJib3goKSlcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBib3hcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFyZW50IG1ldGhvZFxuLCBjb25zdHJ1Y3Q6IHtcbiAgICAvLyBDcmVhdGUgYSBuZXcgc2V0XG4gICAgc2V0OiBmdW5jdGlvbihtZW1iZXJzKSB7XG4gICAgICByZXR1cm4gbmV3IFNWRy5TZXQobWVtYmVycylcbiAgICB9XG4gIH1cbn0pXG5cblNWRy5GWC5TZXQgPSBTVkcuaW52ZW50KHtcbiAgLy8gSW5pdGlhbGl6ZSBub2RlXG4gIGNyZWF0ZTogZnVuY3Rpb24oc2V0KSB7XG4gICAgLy8gc3RvcmUgcmVmZXJlbmNlIHRvIHNldFxuICAgIHRoaXMuc2V0ID0gc2V0XG4gIH1cblxufSlcblxuLy8gQWxpYXMgbWV0aG9kc1xuU1ZHLlNldC5pbmhlcml0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBtXG4gICAgLCBtZXRob2RzID0gW11cblxuICAvLyBnYXRoZXIgc2hhcGUgbWV0aG9kc1xuICBmb3IodmFyIG0gaW4gU1ZHLlNoYXBlLnByb3RvdHlwZSlcbiAgICBpZiAodHlwZW9mIFNWRy5TaGFwZS5wcm90b3R5cGVbbV0gPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU1ZHLlNldC5wcm90b3R5cGVbbV0gIT0gJ2Z1bmN0aW9uJylcbiAgICAgIG1ldGhvZHMucHVzaChtKVxuXG4gIC8vIGFwcGx5IHNoYXBlIGFsaWFzc2VzXG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICBTVkcuU2V0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSB0aGlzLm1lbWJlcnMubGVuZ3RoOyBpIDwgaWw7IGkrKylcbiAgICAgICAgaWYgKHRoaXMubWVtYmVyc1tpXSAmJiB0eXBlb2YgdGhpcy5tZW1iZXJzW2ldW21ldGhvZF0gPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICB0aGlzLm1lbWJlcnNbaV1bbWV0aG9kXS5hcHBseSh0aGlzLm1lbWJlcnNbaV0sIGFyZ3VtZW50cylcblxuICAgICAgcmV0dXJuIG1ldGhvZCA9PSAnYW5pbWF0ZScgPyAodGhpcy5meCB8fCAodGhpcy5meCA9IG5ldyBTVkcuRlguU2V0KHRoaXMpKSkgOiB0aGlzXG4gICAgfVxuICB9KVxuXG4gIC8vIGNsZWFyIG1ldGhvZHMgZm9yIHRoZSBuZXh0IHJvdW5kXG4gIG1ldGhvZHMgPSBbXVxuXG4gIC8vIGdhdGhlciBmeCBtZXRob2RzXG4gIGZvcih2YXIgbSBpbiBTVkcuRlgucHJvdG90eXBlKVxuICAgIGlmICh0eXBlb2YgU1ZHLkZYLnByb3RvdHlwZVttXSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTVkcuRlguU2V0LnByb3RvdHlwZVttXSAhPSAnZnVuY3Rpb24nKVxuICAgICAgbWV0aG9kcy5wdXNoKG0pXG5cbiAgLy8gYXBwbHkgZnggYWxpYXNzZXNcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIFNWRy5GWC5TZXQucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHRoaXMuc2V0Lm1lbWJlcnMubGVuZ3RoOyBpIDwgaWw7IGkrKylcbiAgICAgICAgdGhpcy5zZXQubWVtYmVyc1tpXS5meFttZXRob2RdLmFwcGx5KHRoaXMuc2V0Lm1lbWJlcnNbaV0uZngsIGFyZ3VtZW50cylcblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH0pXG59XG5cblxuXG5cblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcbiAgLy8gU3RvcmUgZGF0YSB2YWx1ZXMgb24gc3ZnIG5vZGVzXG4gIGRhdGE6IGZ1bmN0aW9uKGEsIHYsIHIpIHtcbiAgICBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcpIHtcbiAgICAgIGZvciAodiBpbiBhKVxuICAgICAgICB0aGlzLmRhdGEodiwgYVt2XSlcblxuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuYXR0cignZGF0YS0nICsgYSkpXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cignZGF0YS0nICsgYSlcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmF0dHIoXG4gICAgICAgICdkYXRhLScgKyBhXG4gICAgICAsIHYgPT09IG51bGwgP1xuICAgICAgICAgIG51bGwgOlxuICAgICAgICByID09PSB0cnVlIHx8IHR5cGVvZiB2ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcicgP1xuICAgICAgICAgIHYgOlxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHYpXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufSlcblNWRy5leHRlbmQoU1ZHLkVsZW1lbnQsIHtcbiAgLy8gUmVtZW1iZXIgYXJiaXRyYXJ5IGRhdGFcbiAgcmVtZW1iZXI6IGZ1bmN0aW9uKGssIHYpIHtcbiAgICAvLyByZW1lbWJlciBldmVyeSBpdGVtIGluIGFuIG9iamVjdCBpbmRpdmlkdWFsbHlcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PSAnb2JqZWN0JylcbiAgICAgIGZvciAodmFyIHYgaW4gaylcbiAgICAgICAgdGhpcy5yZW1lbWJlcih2LCBrW3ZdKVxuXG4gICAgLy8gcmV0cmlldmUgbWVtb3J5XG4gICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAxKVxuICAgICAgcmV0dXJuIHRoaXMubWVtb3J5KClba11cblxuICAgIC8vIHN0b3JlIG1lbW9yeVxuICAgIGVsc2VcbiAgICAgIHRoaXMubWVtb3J5KClba10gPSB2XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gRXJhc2UgYSBnaXZlbiBtZW1vcnlcbiwgZm9yZ2V0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKVxuICAgICAgdGhpcy5fbWVtb3J5ID0ge31cbiAgICBlbHNlXG4gICAgICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICBkZWxldGUgdGhpcy5tZW1vcnkoKVthcmd1bWVudHNbaV1dXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSBvciByZXR1cm4gbG9jYWwgbWVtb3J5IG9iamVjdFxuLCBtZW1vcnk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9tZW1vcnkgfHwgKHRoaXMuX21lbW9yeSA9IHt9KVxuICB9XG5cbn0pXG4vLyBNZXRob2QgZm9yIGdldHRpbmcgYW4gZWxlbWVudCBieSBpZFxuU1ZHLmdldCA9IGZ1bmN0aW9uKGlkKSB7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRGcm9tUmVmZXJlbmNlKGlkKSB8fCBpZClcbiAgcmV0dXJuIFNWRy5hZG9wdChub2RlKVxufVxuXG4vLyBTZWxlY3QgZWxlbWVudHMgYnkgcXVlcnkgc3RyaW5nXG5TVkcuc2VsZWN0ID0gZnVuY3Rpb24ocXVlcnksIHBhcmVudCkge1xuICByZXR1cm4gbmV3IFNWRy5TZXQoXG4gICAgU1ZHLnV0aWxzLm1hcCgocGFyZW50IHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgcmV0dXJuIFNWRy5hZG9wdChub2RlKVxuICAgIH0pXG4gIClcbn1cblxuU1ZHLmV4dGVuZChTVkcuUGFyZW50LCB7XG4gIC8vIFNjb3BlZCBzZWxlY3QgbWV0aG9kXG4gIHNlbGVjdDogZnVuY3Rpb24ocXVlcnkpIHtcbiAgICByZXR1cm4gU1ZHLnNlbGVjdChxdWVyeSwgdGhpcy5ub2RlKVxuICB9XG5cbn0pXG4vLyB0ZXN0cyBpZiBhIGdpdmVuIHNlbGVjdG9yIG1hdGNoZXMgYW4gZWxlbWVudFxuZnVuY3Rpb24gbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIChlbC5tYXRjaGVzIHx8IGVsLm1hdGNoZXNTZWxlY3RvciB8fCBlbC5tc01hdGNoZXNTZWxlY3RvciB8fCBlbC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsLm9NYXRjaGVzU2VsZWN0b3IpLmNhbGwoZWwsIHNlbGVjdG9yKTtcbn1cblxuLy8gQ29udmVydCBkYXNoLXNlcGFyYXRlZC1zdHJpbmcgdG8gY2FtZWxDYXNlXG5mdW5jdGlvbiBjYW1lbENhc2Uocykge1xuICByZXR1cm4gcy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24obSwgZykge1xuICAgIHJldHVybiBnLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLy8gQ2FwaXRhbGl6ZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcbmZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xuICByZXR1cm4gcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSlcbn1cblxuLy8gRW5zdXJlIHRvIHNpeC1iYXNlZCBoZXhcbmZ1bmN0aW9uIGZ1bGxIZXgoaGV4KSB7XG4gIHJldHVybiBoZXgubGVuZ3RoID09IDQgP1xuICAgIFsgJyMnLFxuICAgICAgaGV4LnN1YnN0cmluZygxLCAyKSwgaGV4LnN1YnN0cmluZygxLCAyKVxuICAgICwgaGV4LnN1YnN0cmluZygyLCAzKSwgaGV4LnN1YnN0cmluZygyLCAzKVxuICAgICwgaGV4LnN1YnN0cmluZygzLCA0KSwgaGV4LnN1YnN0cmluZygzLCA0KVxuICAgIF0uam9pbignJykgOiBoZXhcbn1cblxuLy8gQ29tcG9uZW50IHRvIGhleCB2YWx1ZVxuZnVuY3Rpb24gY29tcFRvSGV4KGNvbXApIHtcbiAgdmFyIGhleCA9IGNvbXAudG9TdHJpbmcoMTYpXG4gIHJldHVybiBoZXgubGVuZ3RoID09IDEgPyAnMCcgKyBoZXggOiBoZXhcbn1cblxuLy8gQ2FsY3VsYXRlIHByb3BvcnRpb25hbCB3aWR0aCBhbmQgaGVpZ2h0IHZhbHVlcyB3aGVuIG5lY2Vzc2FyeVxuZnVuY3Rpb24gcHJvcG9ydGlvbmFsU2l6ZShib3gsIHdpZHRoLCBoZWlnaHQpIHtcbiAgaWYgKGhlaWdodCA9PSBudWxsKVxuICAgIGhlaWdodCA9IGJveC5oZWlnaHQgLyBib3gud2lkdGggKiB3aWR0aFxuICBlbHNlIGlmICh3aWR0aCA9PSBudWxsKVxuICAgIHdpZHRoID0gYm94LndpZHRoIC8gYm94LmhlaWdodCAqIGhlaWdodFxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6ICB3aWR0aFxuICAsIGhlaWdodDogaGVpZ2h0XG4gIH1cbn1cblxuLy8gRGVsdGEgdHJhbnNmb3JtIHBvaW50XG5mdW5jdGlvbiBkZWx0YVRyYW5zZm9ybVBvaW50KG1hdHJpeCwgeCwgeSkge1xuICByZXR1cm4ge1xuICAgIHg6IHggKiBtYXRyaXguYSArIHkgKiBtYXRyaXguYyArIDBcbiAgLCB5OiB4ICogbWF0cml4LmIgKyB5ICogbWF0cml4LmQgKyAwXG4gIH1cbn1cblxuLy8gTWFwIG1hdHJpeCBhcnJheSB0byBvYmplY3RcbmZ1bmN0aW9uIGFycmF5VG9NYXRyaXgoYSkge1xuICByZXR1cm4geyBhOiBhWzBdLCBiOiBhWzFdLCBjOiBhWzJdLCBkOiBhWzNdLCBlOiBhWzRdLCBmOiBhWzVdIH1cbn1cblxuLy8gUGFyc2UgbWF0cml4IGlmIHJlcXVpcmVkXG5mdW5jdGlvbiBwYXJzZU1hdHJpeChtYXRyaXgpIHtcbiAgaWYgKCEobWF0cml4IGluc3RhbmNlb2YgU1ZHLk1hdHJpeCkpXG4gICAgbWF0cml4ID0gbmV3IFNWRy5NYXRyaXgobWF0cml4KVxuXG4gIHJldHVybiBtYXRyaXhcbn1cblxuLy8gQWRkIGNlbnRyZSBwb2ludCB0byB0cmFuc2Zvcm0gb2JqZWN0XG5mdW5jdGlvbiBlbnN1cmVDZW50cmUobywgdGFyZ2V0KSB7XG4gIG8uY3ggPSBvLmN4ID09IG51bGwgPyB0YXJnZXQuYmJveCgpLmN4IDogby5jeFxuICBvLmN5ID0gby5jeSA9PSBudWxsID8gdGFyZ2V0LmJib3goKS5jeSA6IG8uY3lcbn1cblxuLy8gQ29udmVydCBzdHJpbmcgdG8gbWF0cml4XG5mdW5jdGlvbiBzdHJpbmdUb01hdHJpeChzb3VyY2UpIHtcbiAgLy8gcmVtb3ZlIG1hdHJpeCB3cmFwcGVyIGFuZCBzcGxpdCB0byBpbmRpdmlkdWFsIG51bWJlcnNcbiAgc291cmNlID0gc291cmNlXG4gICAgLnJlcGxhY2UoU1ZHLnJlZ2V4LndoaXRlc3BhY2UsICcnKVxuICAgIC5yZXBsYWNlKFNWRy5yZWdleC5tYXRyaXgsICcnKVxuICAgIC5zcGxpdChTVkcucmVnZXgubWF0cml4RWxlbWVudHMpXG5cbiAgLy8gY29udmVydCBzdHJpbmcgdmFsdWVzIHRvIGZsb2F0cyBhbmQgY29udmVydCB0byBhIG1hdHJpeC1mb3JtYXR0ZWQgb2JqZWN0XG4gIHJldHVybiBhcnJheVRvTWF0cml4KFxuICAgIFNWRy51dGlscy5tYXAoc291cmNlLCBmdW5jdGlvbihuKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChuKVxuICAgIH0pXG4gIClcbn1cblxuLy8gQ2FsY3VsYXRlIHBvc2l0aW9uIGFjY29yZGluZyB0byBmcm9tIGFuZCB0b1xuZnVuY3Rpb24gYXQobywgcG9zKSB7XG4gIC8vIG51bWJlciByZWNhbGN1bGF0aW9uIChkb24ndCBib3RoZXIgY29udmVydGluZyB0byBTVkcuTnVtYmVyIGZvciBwZXJmb3JtYW5jZSByZWFzb25zKVxuICByZXR1cm4gdHlwZW9mIG8uZnJvbSA9PSAnbnVtYmVyJyA/XG4gICAgby5mcm9tICsgKG8udG8gLSBvLmZyb20pICogcG9zIDpcblxuICAvLyBpbnN0YW5jZSByZWNhbGN1bGF0aW9uXG4gIG8gaW5zdGFuY2VvZiBTVkcuQ29sb3IgfHwgbyBpbnN0YW5jZW9mIFNWRy5OdW1iZXIgfHwgbyBpbnN0YW5jZW9mIFNWRy5NYXRyaXggPyBvLmF0KHBvcykgOlxuXG4gIC8vIGZvciBhbGwgb3RoZXIgdmFsdWVzIHdhaXQgdW50aWwgcG9zIGhhcyByZWFjaGVkIDEgdG8gcmV0dXJuIHRoZSBmaW5hbCB2YWx1ZVxuICBwb3MgPCAxID8gby5mcm9tIDogby50b1xufVxuXG4vLyBQYXRoQXJyYXkgSGVscGVyc1xuZnVuY3Rpb24gYXJyYXlUb1N0cmluZyhhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBpbCA9IGEubGVuZ3RoLCBzID0gJyc7IGkgPCBpbDsgaSsrKSB7XG4gICAgcyArPSBhW2ldWzBdXG5cbiAgICBpZiAoYVtpXVsxXSAhPSBudWxsKSB7XG4gICAgICBzICs9IGFbaV1bMV1cblxuICAgICAgaWYgKGFbaV1bMl0gIT0gbnVsbCkge1xuICAgICAgICBzICs9ICcgJ1xuICAgICAgICBzICs9IGFbaV1bMl1cblxuICAgICAgICBpZiAoYVtpXVszXSAhPSBudWxsKSB7XG4gICAgICAgICAgcyArPSAnICdcbiAgICAgICAgICBzICs9IGFbaV1bM11cbiAgICAgICAgICBzICs9ICcgJ1xuICAgICAgICAgIHMgKz0gYVtpXVs0XVxuXG4gICAgICAgICAgaWYgKGFbaV1bNV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcyArPSAnICdcbiAgICAgICAgICAgIHMgKz0gYVtpXVs1XVxuICAgICAgICAgICAgcyArPSAnICdcbiAgICAgICAgICAgIHMgKz0gYVtpXVs2XVxuXG4gICAgICAgICAgICBpZiAoYVtpXVs3XSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHMgKz0gJyAnXG4gICAgICAgICAgICAgIHMgKz0gYVtpXVs3XVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzICsgJyAnXG59XG5cbi8vIERlZXAgbmV3IGlkIGFzc2lnbm1lbnRcbmZ1bmN0aW9uIGFzc2lnbk5ld0lkKG5vZGUpIHtcbiAgLy8gZG8gdGhlIHNhbWUgZm9yIFNWRyBjaGlsZCBub2RlcyBhcyB3ZWxsXG4gIGZvciAodmFyIGkgPSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgaWYgKG5vZGUuY2hpbGROb2Rlc1tpXSBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpXG4gICAgICBhc3NpZ25OZXdJZChub2RlLmNoaWxkTm9kZXNbaV0pXG5cbiAgcmV0dXJuIFNWRy5hZG9wdChub2RlKS5pZChTVkcuZWlkKG5vZGUubm9kZU5hbWUpKVxufVxuXG4vLyBBZGQgbW9yZSBib3VuZGluZyBib3ggcHJvcGVydGllc1xuZnVuY3Rpb24gZnVsbEJveChiKSB7XG4gIGlmIChiLnggPT0gbnVsbCkge1xuICAgIGIueCAgICAgID0gMFxuICAgIGIueSAgICAgID0gMFxuICAgIGIud2lkdGggID0gMFxuICAgIGIuaGVpZ2h0ID0gMFxuICB9XG5cbiAgYi53ICA9IGIud2lkdGhcbiAgYi5oICA9IGIuaGVpZ2h0XG4gIGIueDIgPSBiLnggKyBiLndpZHRoXG4gIGIueTIgPSBiLnkgKyBiLmhlaWdodFxuICBiLmN4ID0gYi54ICsgYi53aWR0aCAvIDJcbiAgYi5jeSA9IGIueSArIGIuaGVpZ2h0IC8gMlxuXG4gIHJldHVybiBiXG59XG5cbi8vIEdldCBpZCBmcm9tIHJlZmVyZW5jZSBzdHJpbmdcbmZ1bmN0aW9uIGlkRnJvbVJlZmVyZW5jZSh1cmwpIHtcbiAgdmFyIG0gPSB1cmwudG9TdHJpbmcoKS5tYXRjaChTVkcucmVnZXgucmVmZXJlbmNlKVxuXG4gIGlmIChtKSByZXR1cm4gbVsxXVxufVxuXG4vLyBDcmVhdGUgbWF0cml4IGFycmF5IGZvciBsb29waW5nXG52YXIgYWJjZGVmID0gJ2FiY2RlZicuc3BsaXQoJycpXG4vLyBBZGQgQ3VzdG9tRXZlbnQgdG8gSUU5IGFuZCBJRTEwXG5pZiAodHlwZW9mIEN1c3RvbUV2ZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gIC8vIENvZGUgZnJvbTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50XG4gIHZhciBDdXN0b21FdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkIH1cbiAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpXG4gICAgZS5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIG9wdGlvbnMuYnViYmxlcywgb3B0aW9ucy5jYW5jZWxhYmxlLCBvcHRpb25zLmRldGFpbClcbiAgICByZXR1cm4gZVxuICB9XG5cbiAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZVxuXG4gIHdpbmRvdy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50XG59XG5cbi8vIHJlcXVlc3RBbmltYXRpb25GcmFtZSAvIGNhbmNlbEFuaW1hdGlvbkZyYW1lIFBvbHlmaWxsIHdpdGggZmFsbGJhY2sgYmFzZWQgb24gUGF1bCBJcmlzaFxuKGZ1bmN0aW9uKHcpIHtcbiAgdmFyIGxhc3RUaW1lID0gMFxuICB2YXIgdmVuZG9ycyA9IFsnbW96JywgJ3dlYmtpdCddXG5cbiAgZm9yKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK3gpIHtcbiAgICB3LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdbdmVuZG9yc1t4XSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXVxuICAgIHcuY2FuY2VsQW5pbWF0aW9uRnJhbWUgID0gd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdbdmVuZG9yc1t4XSArICdDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXVxuICB9XG5cbiAgdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSlcblxuICAgICAgdmFyIGlkID0gdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpXG4gICAgICB9LCB0aW1lVG9DYWxsKVxuXG4gICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbFxuICAgICAgcmV0dXJuIGlkXG4gICAgfVxuXG4gIHcuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHcuY2xlYXJUaW1lb3V0O1xuXG59KHdpbmRvdykpXG5cbnJldHVybiBTVkdcblxufSkpOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsImZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBhc1Byb21pc2U7XHJcblxyXG4vKipcclxuICogQ2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgdXRpbC5hc1Byb21pc2V9LlxyXG4gKiBAdHlwZWRlZiBhc1Byb21pc2VDYWxsYmFja1xyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueVxyXG4gKiBAcGFyYW0gey4uLip9IHBhcmFtcyBBZGRpdGlvbmFsIGFyZ3VtZW50c1xyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBmcm9tIGEgbm9kZS1zdHlsZSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQHBhcmFtIHthc1Byb21pc2VDYWxsYmFja30gZm4gRnVuY3Rpb24gdG8gY2FsbFxyXG4gKiBAcGFyYW0geyp9IGN0eCBGdW5jdGlvbiBjb250ZXh0XHJcbiAqIEBwYXJhbSB7Li4uKn0gcGFyYW1zIEZ1bmN0aW9uIGFyZ3VtZW50c1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTwqPn0gUHJvbWlzaWZpZWQgZnVuY3Rpb25cclxuICovXHJcbmZ1bmN0aW9uIGFzUHJvbWlzZShmbiwgY3R4LyosIHZhcmFyZ3MgKi8pIHtcclxuICAgIHZhciBwYXJhbXMgID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKSxcclxuICAgICAgICBvZmZzZXQgID0gMCxcclxuICAgICAgICBpbmRleCAgID0gMixcclxuICAgICAgICBwZW5kaW5nID0gdHJ1ZTtcclxuICAgIHdoaWxlIChpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGgpXHJcbiAgICAgICAgcGFyYW1zW29mZnNldCsrXSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBwYXJhbXNbb2Zmc2V0XSA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVyci8qLCB2YXJhcmdzICovKSB7XHJcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG9mZnNldCA8IHBhcmFtcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tvZmZzZXQrK10gPSBhcmd1bWVudHNbb2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlLmFwcGx5KG51bGwsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZuLmFwcGx5KGN0eCB8fCBudWxsLCBwYXJhbXMpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBBIG1pbmltYWwgYmFzZTY0IGltcGxlbWVudGF0aW9uIGZvciBudW1iZXIgYXJyYXlzLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG52YXIgYmFzZTY0ID0gZXhwb3J0cztcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBieXRlIGxlbmd0aCBvZiBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBCYXNlNjQgZW5jb2RlZCBzdHJpbmdcclxuICogQHJldHVybnMge251bWJlcn0gQnl0ZSBsZW5ndGhcclxuICovXHJcbmJhc2U2NC5sZW5ndGggPSBmdW5jdGlvbiBsZW5ndGgoc3RyaW5nKSB7XHJcbiAgICB2YXIgcCA9IHN0cmluZy5sZW5ndGg7XHJcbiAgICBpZiAoIXApXHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB2YXIgbiA9IDA7XHJcbiAgICB3aGlsZSAoLS1wICUgNCA+IDEgJiYgc3RyaW5nLmNoYXJBdChwKSA9PT0gXCI9XCIpXHJcbiAgICAgICAgKytuO1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbChzdHJpbmcubGVuZ3RoICogMykgLyA0IC0gbjtcclxufTtcclxuXHJcbi8vIEJhc2U2NCBlbmNvZGluZyB0YWJsZVxyXG52YXIgYjY0ID0gbmV3IEFycmF5KDY0KTtcclxuXHJcbi8vIEJhc2U2NCBkZWNvZGluZyB0YWJsZVxyXG52YXIgczY0ID0gbmV3IEFycmF5KDEyMyk7XHJcblxyXG4vLyA2NS4uOTAsIDk3Li4xMjIsIDQ4Li41NywgNDMsIDQ3XHJcbmZvciAodmFyIGkgPSAwOyBpIDwgNjQ7KVxyXG4gICAgczY0W2I2NFtpXSA9IGkgPCAyNiA/IGkgKyA2NSA6IGkgPCA1MiA/IGkgKyA3MSA6IGkgPCA2MiA/IGkgLSA0IDogaSAtIDU5IHwgNDNdID0gaSsrO1xyXG5cclxuLyoqXHJcbiAqIEVuY29kZXMgYSBidWZmZXIgdG8gYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFNvdXJjZSBzdGFydFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFNvdXJjZSBlbmRcclxuICogQHJldHVybnMge3N0cmluZ30gQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5iYXNlNjQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGJ1ZmZlciwgc3RhcnQsIGVuZCkge1xyXG4gICAgdmFyIHBhcnRzID0gbnVsbCxcclxuICAgICAgICBjaHVuayA9IFtdO1xyXG4gICAgdmFyIGkgPSAwLCAvLyBvdXRwdXQgaW5kZXhcclxuICAgICAgICBqID0gMCwgLy8gZ290byBpbmRleFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xyXG4gICAgICAgIHZhciBiID0gYnVmZmVyW3N0YXJ0KytdO1xyXG4gICAgICAgIHN3aXRjaCAoaikge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W2IgPj4gMl07XHJcbiAgICAgICAgICAgICAgICB0ID0gKGIgJiAzKSA8PCA0O1xyXG4gICAgICAgICAgICAgICAgaiA9IDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFt0IHwgYiA+PiA0XTtcclxuICAgICAgICAgICAgICAgIHQgPSAoYiAmIDE1KSA8PCAyO1xyXG4gICAgICAgICAgICAgICAgaiA9IDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFt0IHwgYiA+PiA2XTtcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbYiAmIDYzXTtcclxuICAgICAgICAgICAgICAgIGogPSAwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpID4gODE5MSkge1xyXG4gICAgICAgICAgICAocGFydHMgfHwgKHBhcnRzID0gW10pKS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuaykpO1xyXG4gICAgICAgICAgICBpID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaikge1xyXG4gICAgICAgIGNodW5rW2krK10gPSBiNjRbdF07XHJcbiAgICAgICAgY2h1bmtbaSsrXSA9IDYxO1xyXG4gICAgICAgIGlmIChqID09PSAxKVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gNjE7XHJcbiAgICB9XHJcbiAgICBpZiAocGFydHMpIHtcclxuICAgICAgICBpZiAoaSlcclxuICAgICAgICAgICAgcGFydHMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmsuc2xpY2UoMCwgaSkpKTtcclxuICAgICAgICByZXR1cm4gcGFydHMuam9pbihcIlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmsuc2xpY2UoMCwgaSkpO1xyXG59O1xyXG5cclxudmFyIGludmFsaWRFbmNvZGluZyA9IFwiaW52YWxpZCBlbmNvZGluZ1wiO1xyXG5cclxuLyoqXHJcbiAqIERlY29kZXMgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gYSBidWZmZXIuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU291cmNlIHN0cmluZ1xyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBEZXN0aW5hdGlvbiBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBEZXN0aW5hdGlvbiBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gTnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW5cclxuICogQHRocm93cyB7RXJyb3J9IElmIGVuY29kaW5nIGlzIGludmFsaWRcclxuICovXHJcbmJhc2U2NC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoc3RyaW5nLCBidWZmZXIsIG9mZnNldCkge1xyXG4gICAgdmFyIHN0YXJ0ID0gb2Zmc2V0O1xyXG4gICAgdmFyIGogPSAwLCAvLyBnb3RvIGluZGV4XHJcbiAgICAgICAgdDsgICAgIC8vIHRlbXBvcmFyeVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOykge1xyXG4gICAgICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSsrKTtcclxuICAgICAgICBpZiAoYyA9PT0gNjEgJiYgaiA+IDEpXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGlmICgoYyA9IHM2NFtjXSkgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoaW52YWxpZEVuY29kaW5nKTtcclxuICAgICAgICBzd2l0Y2ggKGopIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgdCA9IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gdCA8PCAyIHwgKGMgJiA0OCkgPj4gNDtcclxuICAgICAgICAgICAgICAgIHQgPSBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9ICh0ICYgMTUpIDw8IDQgfCAoYyAmIDYwKSA+PiAyO1xyXG4gICAgICAgICAgICAgICAgdCA9IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gKHQgJiAzKSA8PCA2IHwgYztcclxuICAgICAgICAgICAgICAgIGogPSAwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGogPT09IDEpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoaW52YWxpZEVuY29kaW5nKTtcclxuICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIHN0cmluZyBhcHBlYXJzIHRvIGJlIGJhc2U2NCBlbmNvZGVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byB0ZXN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcHJvYmFibHkgYmFzZTY0IGVuY29kZWQsIG90aGVyd2lzZSBmYWxzZVxyXG4gKi9cclxuYmFzZTY0LnRlc3QgPSBmdW5jdGlvbiB0ZXN0KHN0cmluZykge1xyXG4gICAgcmV0dXJuIC9eKD86W0EtWmEtejAtOSsvXXs0fSkqKD86W0EtWmEtejAtOSsvXXsyfT09fFtBLVphLXowLTkrL117M309KT8kLy50ZXN0KHN0cmluZyk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGNvZGVnZW47XHJcblxyXG4vKipcclxuICogQmVnaW5zIGdlbmVyYXRpbmcgYSBmdW5jdGlvbi5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gZnVuY3Rpb25QYXJhbXMgRnVuY3Rpb24gcGFyYW1ldGVyIG5hbWVzXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZnVuY3Rpb25OYW1lXSBGdW5jdGlvbiBuYW1lIGlmIG5vdCBhbm9ueW1vdXNcclxuICogQHJldHVybnMge0NvZGVnZW59IEFwcGVuZGVyIHRoYXQgYXBwZW5kcyBjb2RlIHRvIHRoZSBmdW5jdGlvbidzIGJvZHlcclxuICovXHJcbmZ1bmN0aW9uIGNvZGVnZW4oZnVuY3Rpb25QYXJhbXMsIGZ1bmN0aW9uTmFtZSkge1xyXG5cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jdGlvblBhcmFtcyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uUGFyYW1zO1xyXG4gICAgICAgIGZ1bmN0aW9uUGFyYW1zID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBib2R5ID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBlbmRzIGNvZGUgdG8gdGhlIGZ1bmN0aW9uJ3MgYm9keSBvciBmaW5pc2hlcyBnZW5lcmF0aW9uLlxyXG4gICAgICogQHR5cGVkZWYgQ29kZWdlblxyXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmcsKj59IFtmb3JtYXRTdHJpbmdPclNjb3BlXSBGb3JtYXQgc3RyaW5nIG9yLCB0byBmaW5pc2ggdGhlIGZ1bmN0aW9uLCBhbiBvYmplY3Qgb2YgYWRkaXRpb25hbCBzY29wZSB2YXJpYWJsZXMsIGlmIGFueVxyXG4gICAgICogQHBhcmFtIHsuLi4qfSBbZm9ybWF0UGFyYW1zXSBGb3JtYXQgcGFyYW1ldGVyc1xyXG4gICAgICogQHJldHVybnMge0NvZGVnZW58RnVuY3Rpb259IEl0c2VsZiBvciB0aGUgZ2VuZXJhdGVkIGZ1bmN0aW9uIGlmIGZpbmlzaGVkXHJcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgZm9ybWF0IHBhcmFtZXRlciBjb3VudHMgZG8gbm90IG1hdGNoXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBDb2RlZ2VuKGZvcm1hdFN0cmluZ09yU2NvcGUpIHtcclxuICAgICAgICAvLyBub3RlIHRoYXQgZXhwbGljaXQgYXJyYXkgaGFuZGxpbmcgYmVsb3cgbWFrZXMgdGhpcyB+NTAlIGZhc3RlclxyXG5cclxuICAgICAgICAvLyBmaW5pc2ggdGhlIGZ1bmN0aW9uXHJcbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXRTdHJpbmdPclNjb3BlICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpZiAoY29kZWdlbi52ZXJib3NlKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb2RlZ2VuOiBcIiArIHNvdXJjZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG4gICAgICAgICAgICBzb3VyY2UgPSBcInJldHVybiBcIiArIHNvdXJjZTtcclxuICAgICAgICAgICAgaWYgKGZvcm1hdFN0cmluZ09yU2NvcGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzY29wZUtleXMgICA9IE9iamVjdC5rZXlzKGZvcm1hdFN0cmluZ09yU2NvcGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlUGFyYW1zID0gbmV3IEFycmF5KHNjb3BlS2V5cy5sZW5ndGggKyAxKSxcclxuICAgICAgICAgICAgICAgICAgICBzY29wZVZhbHVlcyA9IG5ldyBBcnJheShzY29wZUtleXMubGVuZ3RoKSxcclxuICAgICAgICAgICAgICAgICAgICBzY29wZU9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoc2NvcGVPZmZzZXQgPCBzY29wZUtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVQYXJhbXNbc2NvcGVPZmZzZXRdID0gc2NvcGVLZXlzW3Njb3BlT2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZVZhbHVlc1tzY29wZU9mZnNldF0gPSBmb3JtYXRTdHJpbmdPclNjb3BlW3Njb3BlS2V5c1tzY29wZU9mZnNldCsrXV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzY29wZVBhcmFtc1tzY29wZU9mZnNldF0gPSBzb3VyY2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24uYXBwbHkobnVsbCwgc2NvcGVQYXJhbXMpLmFwcGx5KG51bGwsIHNjb3BlVmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbihzb3VyY2UpKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LWZ1bmNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG90aGVyd2lzZSBhcHBlbmQgdG8gYm9keVxyXG4gICAgICAgIHZhciBmb3JtYXRQYXJhbXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgICAgICBmb3JtYXRPZmZzZXQgPSAwO1xyXG4gICAgICAgIHdoaWxlIChmb3JtYXRPZmZzZXQgPCBmb3JtYXRQYXJhbXMubGVuZ3RoKVxyXG4gICAgICAgICAgICBmb3JtYXRQYXJhbXNbZm9ybWF0T2Zmc2V0XSA9IGFyZ3VtZW50c1srK2Zvcm1hdE9mZnNldF07XHJcbiAgICAgICAgZm9ybWF0T2Zmc2V0ID0gMDtcclxuICAgICAgICBmb3JtYXRTdHJpbmdPclNjb3BlID0gZm9ybWF0U3RyaW5nT3JTY29wZS5yZXBsYWNlKC8lKFslZGZpanNdKS9nLCBmdW5jdGlvbiByZXBsYWNlKCQwLCAkMSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBmb3JtYXRQYXJhbXNbZm9ybWF0T2Zmc2V0KytdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKCQxKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZFwiOiBjYXNlIFwiZlwiOiByZXR1cm4gU3RyaW5nKE51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImlcIjogcmV0dXJuIFN0cmluZyhNYXRoLmZsb29yKHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwialwiOiByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInNcIjogcmV0dXJuIFN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFwiJVwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChmb3JtYXRPZmZzZXQgIT09IGZvcm1hdFBhcmFtcy5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwicGFyYW1ldGVyIGNvdW50IG1pc21hdGNoXCIpO1xyXG4gICAgICAgIGJvZHkucHVzaChmb3JtYXRTdHJpbmdPclNjb3BlKTtcclxuICAgICAgICByZXR1cm4gQ29kZWdlbjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b1N0cmluZyhmdW5jdGlvbk5hbWVPdmVycmlkZSkge1xyXG4gICAgICAgIHJldHVybiBcImZ1bmN0aW9uIFwiICsgKGZ1bmN0aW9uTmFtZU92ZXJyaWRlIHx8IGZ1bmN0aW9uTmFtZSB8fCBcIlwiKSArIFwiKFwiICsgKGZ1bmN0aW9uUGFyYW1zICYmIGZ1bmN0aW9uUGFyYW1zLmpvaW4oXCIsXCIpIHx8IFwiXCIpICsgXCIpe1xcbiAgXCIgKyBib2R5LmpvaW4oXCJcXG4gIFwiKSArIFwiXFxufVwiO1xyXG4gICAgfVxyXG5cclxuICAgIENvZGVnZW4udG9TdHJpbmcgPSB0b1N0cmluZztcclxuICAgIHJldHVybiBDb2RlZ2VuO1xyXG59XHJcblxyXG4vKipcclxuICogQmVnaW5zIGdlbmVyYXRpbmcgYSBmdW5jdGlvbi5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uIGNvZGVnZW5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtmdW5jdGlvbk5hbWVdIEZ1bmN0aW9uIG5hbWUgaWYgbm90IGFub255bW91c1xyXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQXBwZW5kZXIgdGhhdCBhcHBlbmRzIGNvZGUgdG8gdGhlIGZ1bmN0aW9uJ3MgYm9keVxyXG4gKiBAdmFyaWF0aW9uIDJcclxuICovXHJcblxyXG4vKipcclxuICogV2hlbiBzZXQgdG8gYHRydWVgLCBjb2RlZ2VuIHdpbGwgbG9nIGdlbmVyYXRlZCBjb2RlIHRvIGNvbnNvbGUuIFVzZWZ1bCBmb3IgZGVidWdnaW5nLlxyXG4gKiBAbmFtZSB1dGlsLmNvZGVnZW4udmVyYm9zZVxyXG4gKiBAdHlwZSB7Ym9vbGVhbn1cclxuICovXHJcbmNvZGVnZW4udmVyYm9zZSA9IGZhbHNlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBldmVudCBlbWl0dGVyIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIEEgbWluaW1hbCBldmVudCBlbWl0dGVyLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxyXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBMaXN0ZW5lclxyXG4gKiBAcGFyYW0geyp9IFtjdHhdIExpc3RlbmVyIGNvbnRleHRcclxuICogQHJldHVybnMge3V0aWwuRXZlbnRFbWl0dGVyfSBgdGhpc2BcclxuICovXHJcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldnQsIGZuLCBjdHgpIHtcclxuICAgICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSB8fCAodGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXSkpLnB1c2goe1xyXG4gICAgICAgIGZuICA6IGZuLFxyXG4gICAgICAgIGN0eCA6IGN0eCB8fCB0aGlzXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgb3IgYW55IG1hdGNoaW5nIGxpc3RlbmVycyBpZiBhcmd1bWVudHMgYXJlIG9taXR0ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXZ0XSBFdmVudCBuYW1lLiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgaWYgb21pdHRlZC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2ZuXSBMaXN0ZW5lciB0byByZW1vdmUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBvZiBgZXZ0YCBpZiBvbWl0dGVkLlxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiBvZmYoZXZ0LCBmbikge1xyXG4gICAgaWYgKGV2dCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGZuID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1tldnRdID0gW107XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0uZm4gPT09IGZuKVxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXRzIGFuIGV2ZW50IGJ5IGNhbGxpbmcgaXRzIGxpc3RlbmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZ0IEV2ZW50IG5hbWVcclxuICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50c1xyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldnQpIHtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgIGlmIChsaXN0ZW5lcnMpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdLFxyXG4gICAgICAgICAgICBpID0gMTtcclxuICAgICAgICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpKytdLmN0eCwgYXJncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gZmV0Y2g7XHJcblxyXG52YXIgYXNQcm9taXNlID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2FzcHJvbWlzZVwiKSxcclxuICAgIGlucXVpcmUgICA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9pbnF1aXJlXCIpO1xyXG5cclxudmFyIGZzID0gaW5xdWlyZShcImZzXCIpO1xyXG5cclxuLyoqXHJcbiAqIE5vZGUtc3R5bGUgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgdXRpbC5mZXRjaH0uXHJcbiAqIEB0eXBlZGVmIEZldGNoQ2FsbGJhY2tcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0gez9FcnJvcn0gZXJyb3IgRXJyb3IsIGlmIGFueSwgb3RoZXJ3aXNlIGBudWxsYFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRlbnRzXSBGaWxlIGNvbnRlbnRzLCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwuZmV0Y2h9LlxyXG4gKiBAdHlwZWRlZiBGZXRjaE9wdGlvbnNcclxuICogQHR5cGUge09iamVjdH1cclxuICogQHByb3BlcnR5IHtib29sZWFufSBbYmluYXJ5PWZhbHNlXSBXaGV0aGVyIGV4cGVjdGluZyBhIGJpbmFyeSByZXNwb25zZVxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt4aHI9ZmFsc2VdIElmIGB0cnVlYCwgZm9yY2VzIHRoZSB1c2Ugb2YgWE1MSHR0cFJlcXVlc3RcclxuICovXHJcblxyXG4vKipcclxuICogRmV0Y2hlcyB0aGUgY29udGVudHMgb2YgYSBmaWxlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgRmlsZSBwYXRoIG9yIHVybFxyXG4gKiBAcGFyYW0ge0ZldGNoT3B0aW9uc30gb3B0aW9ucyBGZXRjaCBvcHRpb25zXHJcbiAqIEBwYXJhbSB7RmV0Y2hDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcbmZ1bmN0aW9uIGZldGNoKGZpbGVuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XHJcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgfSBlbHNlIGlmICghb3B0aW9ucylcclxuICAgICAgICBvcHRpb25zID0ge307XHJcblxyXG4gICAgaWYgKCFjYWxsYmFjaylcclxuICAgICAgICByZXR1cm4gYXNQcm9taXNlKGZldGNoLCB0aGlzLCBmaWxlbmFtZSwgb3B0aW9ucyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXHJcblxyXG4gICAgLy8gaWYgYSBub2RlLWxpa2UgZmlsZXN5c3RlbSBpcyBwcmVzZW50LCB0cnkgaXQgZmlyc3QgYnV0IGZhbGwgYmFjayB0byBYSFIgaWYgbm90aGluZyBpcyBmb3VuZC5cclxuICAgIGlmICghb3B0aW9ucy54aHIgJiYgZnMgJiYgZnMucmVhZEZpbGUpXHJcbiAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlKGZpbGVuYW1lLCBmdW5jdGlvbiBmZXRjaFJlYWRGaWxlQ2FsbGJhY2soZXJyLCBjb250ZW50cykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyICYmIHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gXCJ1bmRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgPyBmZXRjaC54aHIoZmlsZW5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgOiBlcnJcclxuICAgICAgICAgICAgICAgID8gY2FsbGJhY2soZXJyKVxyXG4gICAgICAgICAgICAgICAgOiBjYWxsYmFjayhudWxsLCBvcHRpb25zLmJpbmFyeSA/IGNvbnRlbnRzIDogY29udGVudHMudG9TdHJpbmcoXCJ1dGY4XCIpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyB1c2UgdGhlIFhIUiB2ZXJzaW9uIG90aGVyd2lzZS5cclxuICAgIHJldHVybiBmZXRjaC54aHIoZmlsZW5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZldGNoZXMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS5cclxuICogQG5hbWUgdXRpbC5mZXRjaFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggRmlsZSBwYXRoIG9yIHVybFxyXG4gKiBAcGFyYW0ge0ZldGNoQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEB2YXJpYXRpb24gMlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUuXHJcbiAqIEBuYW1lIHV0aWwuZmV0Y2hcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIEZpbGUgcGF0aCBvciB1cmxcclxuICogQHBhcmFtIHtGZXRjaE9wdGlvbnN9IFtvcHRpb25zXSBGZXRjaCBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZ3xVaW50OEFycmF5Pn0gUHJvbWlzZVxyXG4gKiBAdmFyaWF0aW9uIDNcclxuICovXHJcblxyXG4vKiovXHJcbmZldGNoLnhociA9IGZ1bmN0aW9uIGZldGNoX3hocihmaWxlbmFtZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcclxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgLyogd29ya3MgZXZlcnl3aGVyZSAqLyA9IGZ1bmN0aW9uIGZldGNoT25SZWFkeVN0YXRlQ2hhbmdlKCkge1xyXG5cclxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIC8vIGxvY2FsIGNvcnMgc2VjdXJpdHkgZXJyb3JzIHJldHVybiBzdGF0dXMgMCAvIGVtcHR5IHN0cmluZywgdG9vLiBhZmFpayB0aGlzIGNhbm5vdCBiZVxyXG4gICAgICAgIC8vIHJlbGlhYmx5IGRpc3Rpbmd1aXNoZWQgZnJvbSBhbiBhY3R1YWxseSBlbXB0eSBmaWxlIGZvciBzZWN1cml0eSByZWFzb25zLiBmZWVsIGZyZWVcclxuICAgICAgICAvLyB0byBzZW5kIGEgcHVsbCByZXF1ZXN0IGlmIHlvdSBhcmUgYXdhcmUgb2YgYSBzb2x1dGlvbi5cclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMCAmJiB4aHIuc3RhdHVzICE9PSAyMDApXHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhFcnJvcihcInN0YXR1cyBcIiArIHhoci5zdGF0dXMpKTtcclxuXHJcbiAgICAgICAgLy8gaWYgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQsIG1ha2Ugc3VyZSB0aGF0IHNvbWUgc29ydCBvZiBhcnJheSBpcyByZXR1cm5lZCwgZXZlbiBpZlxyXG4gICAgICAgIC8vIEFycmF5QnVmZmVycyBhcmUgbm90IHN1cHBvcnRlZC4gdGhlIGJpbmFyeSBzdHJpbmcgZmFsbGJhY2ssIGhvd2V2ZXIsIGlzIHVuc2FmZS5cclxuICAgICAgICBpZiAob3B0aW9ucy5iaW5hcnkpIHtcclxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IHhoci5yZXNwb25zZTtcclxuICAgICAgICAgICAgaWYgKCFidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4aHIucmVzcG9uc2VUZXh0Lmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHhoci5yZXNwb25zZVRleHQuY2hhckNvZGVBdChpKSAmIDI1NSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiID8gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSA6IGJ1ZmZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCB4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuYmluYXJ5KSB7XHJcbiAgICAgICAgLy8gcmVmOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvWE1MSHR0cFJlcXVlc3QvU2VuZGluZ19hbmRfUmVjZWl2aW5nX0JpbmFyeV9EYXRhI1JlY2VpdmluZ19iaW5hcnlfZGF0YV9pbl9vbGRlcl9icm93c2Vyc1xyXG4gICAgICAgIGlmIChcIm92ZXJyaWRlTWltZVR5cGVcIiBpbiB4aHIpXHJcbiAgICAgICAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKTtcclxuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG4gICAgfVxyXG5cclxuICAgIHhoci5vcGVuKFwiR0VUXCIsIGZpbGVuYW1lKTtcclxuICAgIHhoci5zZW5kKCk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGZhY3RvcnkpO1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIC8gd3JpdGVzIGZsb2F0cyAvIGRvdWJsZXMgZnJvbSAvIHRvIGJ1ZmZlcnMuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXRcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSAzMiBiaXQgZmxvYXQgdG8gYSBidWZmZXIgdXNpbmcgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LndyaXRlRmxvYXRMRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgMzIgYml0IGZsb2F0IHRvIGEgYnVmZmVyIHVzaW5nIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZUZsb2F0QkVcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWYgVGFyZ2V0IGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFRhcmdldCBidWZmZXIgb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgMzIgYml0IGZsb2F0IGZyb20gYSBidWZmZXIgdXNpbmcgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWRGbG9hdExFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDMyIGJpdCBmbG9hdCBmcm9tIGEgYnVmZmVyIHVzaW5nIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC5yZWFkRmxvYXRCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWYgU291cmNlIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFNvdXJjZSBidWZmZXIgb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICovXHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgNjQgYml0IGRvdWJsZSB0byBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQud3JpdGVEb3VibGVMRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgNjQgYml0IGRvdWJsZSB0byBhIGJ1ZmZlciB1c2luZyBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQud3JpdGVEb3VibGVCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSA2NCBiaXQgZG91YmxlIGZyb20gYSBidWZmZXIgdXNpbmcgbGl0dGxlIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWREb3VibGVMRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWYgU291cmNlIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFNvdXJjZSBidWZmZXIgb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSA2NCBiaXQgZG91YmxlIGZyb20gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWREb3VibGVCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWYgU291cmNlIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gcG9zIFNvdXJjZSBidWZmZXIgb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICovXHJcblxyXG4vLyBGYWN0b3J5IGZ1bmN0aW9uIGZvciB0aGUgcHVycG9zZSBvZiBub2RlLWJhc2VkIHRlc3RpbmcgaW4gbW9kaWZpZWQgZ2xvYmFsIGVudmlyb25tZW50c1xyXG5mdW5jdGlvbiBmYWN0b3J5KGV4cG9ydHMpIHtcclxuXHJcbiAgICAvLyBmbG9hdDogdHlwZWQgYXJyYXlcclxuICAgIGlmICh0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBmMzIgPSBuZXcgRmxvYXQzMkFycmF5KFsgLTAgXSksXHJcbiAgICAgICAgICAgIGY4YiA9IG5ldyBVaW50OEFycmF5KGYzMi5idWZmZXIpLFxyXG4gICAgICAgICAgICBsZSAgPSBmOGJbM10gPT09IDEyODtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVGbG9hdF9mMzJfY3B5KHZhbCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjMyWzBdID0gdmFsO1xyXG4gICAgICAgICAgICBidWZbcG9zICAgIF0gPSBmOGJbMF07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAxXSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDJdID0gZjhiWzJdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgM10gPSBmOGJbM107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0X2YzMl9yZXYodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmMzJbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlszXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzJdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMV07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSBsZSA/IHdyaXRlRmxvYXRfZjMyX2NweSA6IHdyaXRlRmxvYXRfZjMyX3JldjtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVGbG9hdEJFID0gbGUgPyB3cml0ZUZsb2F0X2YzMl9yZXYgOiB3cml0ZUZsb2F0X2YzMl9jcHk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRGbG9hdF9mMzJfY3B5KGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY4YlswXSA9IGJ1Zltwb3MgICAgXTtcclxuICAgICAgICAgICAgZjhiWzFdID0gYnVmW3BvcyArIDFdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgMl07XHJcbiAgICAgICAgICAgIGY4YlszXSA9IGJ1Zltwb3MgKyAzXTtcclxuICAgICAgICAgICAgcmV0dXJuIGYzMlswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRGbG9hdF9mMzJfcmV2KGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY4YlszXSA9IGJ1Zltwb3MgICAgXTtcclxuICAgICAgICAgICAgZjhiWzJdID0gYnVmW3BvcyArIDFdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMl07XHJcbiAgICAgICAgICAgIGY4YlswXSA9IGJ1Zltwb3MgKyAzXTtcclxuICAgICAgICAgICAgcmV0dXJuIGYzMlswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRMRSA9IGxlID8gcmVhZEZsb2F0X2YzMl9jcHkgOiByZWFkRmxvYXRfZjMyX3JldjtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMucmVhZEZsb2F0QkUgPSBsZSA/IHJlYWRGbG9hdF9mMzJfcmV2IDogcmVhZEZsb2F0X2YzMl9jcHk7XHJcblxyXG4gICAgLy8gZmxvYXQ6IGllZWU3NTRcclxuICAgIH0pKCk7IGVsc2UgKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0X2llZWU3NTQod3JpdGVVaW50LCB2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIHZhciBzaWduID0gdmFsIDwgMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICBpZiAoc2lnbilcclxuICAgICAgICAgICAgICAgIHZhbCA9IC12YWw7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09IDApXHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMSAvIHZhbCA+IDAgPyAvKiBwb3NpdGl2ZSAqLyAwIDogLyogbmVnYXRpdmUgMCAqLyAyMTQ3NDgzNjQ4LCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTmFOKHZhbCkpXHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMjE0MzI4OTM0NCwgYnVmLCBwb3MpO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWwgPiAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KSAvLyArLUluZmluaXR5XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoKHNpZ24gPDwgMzEgfCAyMTM5MDk1MDQwKSA+Pj4gMCwgYnVmLCBwb3MpO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWwgPCAxLjE3NTQ5NDM1MDgyMjI4NzVlLTM4KSAvLyBkZW5vcm1hbFxyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgTWF0aC5yb3VuZCh2YWwgLyAxLjQwMTI5ODQ2NDMyNDgxN2UtNDUpKSA+Pj4gMCwgYnVmLCBwb3MpO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBleHBvbmVudCA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSAvIE1hdGguTE4yKSxcclxuICAgICAgICAgICAgICAgICAgICBtYW50aXNzYSA9IE1hdGgucm91bmQodmFsICogTWF0aC5wb3coMiwgLWV4cG9uZW50KSAqIDgzODg2MDgpICYgODM4ODYwNztcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IGV4cG9uZW50ICsgMTI3IDw8IDIzIHwgbWFudGlzc2EpID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydHMud3JpdGVGbG9hdExFID0gd3JpdGVGbG9hdF9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50TEUpO1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVGbG9hdEJFID0gd3JpdGVGbG9hdF9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50QkUpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRmxvYXRfaWVlZTc1NChyZWFkVWludCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIHVpbnQgPSByZWFkVWludChidWYsIHBvcyksXHJcbiAgICAgICAgICAgICAgICBzaWduID0gKHVpbnQgPj4gMzEpICogMiArIDEsXHJcbiAgICAgICAgICAgICAgICBleHBvbmVudCA9IHVpbnQgPj4+IDIzICYgMjU1LFxyXG4gICAgICAgICAgICAgICAgbWFudGlzc2EgPSB1aW50ICYgODM4ODYwNztcclxuICAgICAgICAgICAgcmV0dXJuIGV4cG9uZW50ID09PSAyNTVcclxuICAgICAgICAgICAgICAgID8gbWFudGlzc2FcclxuICAgICAgICAgICAgICAgID8gTmFOXHJcbiAgICAgICAgICAgICAgICA6IHNpZ24gKiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgOiBleHBvbmVudCA9PT0gMCAvLyBkZW5vcm1hbFxyXG4gICAgICAgICAgICAgICAgPyBzaWduICogMS40MDEyOTg0NjQzMjQ4MTdlLTQ1ICogbWFudGlzc2FcclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIE1hdGgucG93KDIsIGV4cG9uZW50IC0gMTUwKSAqIChtYW50aXNzYSArIDgzODg2MDgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRMRSA9IHJlYWRGbG9hdF9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRMRSk7XHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IHJlYWRGbG9hdF9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRCRSk7XHJcblxyXG4gICAgfSkoKTtcclxuXHJcbiAgICAvLyBkb3VibGU6IHR5cGVkIGFycmF5XHJcbiAgICBpZiAodHlwZW9mIEZsb2F0NjRBcnJheSAhPT0gXCJ1bmRlZmluZWRcIikgKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgZjY0ID0gbmV3IEZsb2F0NjRBcnJheShbLTBdKSxcclxuICAgICAgICAgICAgZjhiID0gbmV3IFVpbnQ4QXJyYXkoZjY0LmJ1ZmZlciksXHJcbiAgICAgICAgICAgIGxlICA9IGY4Yls3XSA9PT0gMTI4O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZURvdWJsZV9mNjRfY3B5KHZhbCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjY0WzBdID0gdmFsO1xyXG4gICAgICAgICAgICBidWZbcG9zICAgIF0gPSBmOGJbMF07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAxXSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDJdID0gZjhiWzJdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgM10gPSBmOGJbM107XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA0XSA9IGY4Yls0XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDVdID0gZjhiWzVdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNl0gPSBmOGJbNl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA3XSA9IGY4Yls3XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2Y2NF9yZXYodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmNjRbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4Yls3XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzZdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbNV07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4Yls0XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDRdID0gZjhiWzNdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNV0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA2XSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDddID0gZjhiWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSBsZSA/IHdyaXRlRG91YmxlX2Y2NF9jcHkgOiB3cml0ZURvdWJsZV9mNjRfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZURvdWJsZUJFID0gbGUgPyB3cml0ZURvdWJsZV9mNjRfcmV2IDogd3JpdGVEb3VibGVfZjY0X2NweTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZERvdWJsZV9mNjRfY3B5KGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY4YlswXSA9IGJ1Zltwb3MgICAgXTtcclxuICAgICAgICAgICAgZjhiWzFdID0gYnVmW3BvcyArIDFdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgMl07XHJcbiAgICAgICAgICAgIGY4YlszXSA9IGJ1Zltwb3MgKyAzXTtcclxuICAgICAgICAgICAgZjhiWzRdID0gYnVmW3BvcyArIDRdO1xyXG4gICAgICAgICAgICBmOGJbNV0gPSBidWZbcG9zICsgNV07XHJcbiAgICAgICAgICAgIGY4Yls2XSA9IGJ1Zltwb3MgKyA2XTtcclxuICAgICAgICAgICAgZjhiWzddID0gYnVmW3BvcyArIDddO1xyXG4gICAgICAgICAgICByZXR1cm4gZjY0WzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZERvdWJsZV9mNjRfcmV2KGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY4Yls3XSA9IGJ1Zltwb3MgICAgXTtcclxuICAgICAgICAgICAgZjhiWzZdID0gYnVmW3BvcyArIDFdO1xyXG4gICAgICAgICAgICBmOGJbNV0gPSBidWZbcG9zICsgMl07XHJcbiAgICAgICAgICAgIGY4Yls0XSA9IGJ1Zltwb3MgKyAzXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDRdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgNV07XHJcbiAgICAgICAgICAgIGY4YlsxXSA9IGJ1Zltwb3MgKyA2XTtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyArIDddO1xyXG4gICAgICAgICAgICByZXR1cm4gZjY0WzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWREb3VibGVMRSA9IGxlID8gcmVhZERvdWJsZV9mNjRfY3B5IDogcmVhZERvdWJsZV9mNjRfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSBsZSA/IHJlYWREb3VibGVfZjY0X3JldiA6IHJlYWREb3VibGVfZjY0X2NweTtcclxuXHJcbiAgICAvLyBkb3VibGU6IGllZWU3NTRcclxuICAgIH0pKCk7IGVsc2UgKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZURvdWJsZV9pZWVlNzU0KHdyaXRlVWludCwgb2ZmMCwgb2ZmMSwgdmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICB2YXIgc2lnbiA9IHZhbCA8IDAgPyAxIDogMDtcclxuICAgICAgICAgICAgaWYgKHNpZ24pXHJcbiAgICAgICAgICAgICAgICB2YWwgPSAtdmFsO1xyXG4gICAgICAgICAgICBpZiAodmFsID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgxIC8gdmFsID4gMCA/IC8qIHBvc2l0aXZlICovIDAgOiAvKiBuZWdhdGl2ZSAwICovIDIxNDc0ODM2NDgsIGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KDAsIGJ1ZiwgcG9zICsgb2ZmMCk7XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMjE0Njk1OTM2MCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWwgPiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCkgeyAvLyArLUluZmluaXR5XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IDIxNDY0MzUwNzIpID4+PiAwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hbnRpc3NhO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA8IDIuMjI1MDczODU4NTA3MjAxNGUtMzA4KSB7IC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFudGlzc2EgPSB2YWwgLyA1ZS0zMjQ7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVVaW50KG1hbnRpc3NhID4+PiAwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IG1hbnRpc3NhIC8gNDI5NDk2NzI5NikgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBvbmVudCA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSAvIE1hdGguTE4yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwb25lbnQgPT09IDEwMjQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9uZW50ID0gMTAyMztcclxuICAgICAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHZhbCAqIE1hdGgucG93KDIsIC1leHBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVVaW50KG1hbnRpc3NhICogNDUwMzU5OTYyNzM3MDQ5NiA+Pj4gMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQoKHNpZ24gPDwgMzEgfCBleHBvbmVudCArIDEwMjMgPDwgMjAgfCBtYW50aXNzYSAqIDEwNDg1NzYgJiAxMDQ4NTc1KSA+Pj4gMCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZURvdWJsZUxFID0gd3JpdGVEb3VibGVfaWVlZTc1NC5iaW5kKG51bGwsIHdyaXRlVWludExFLCAwLCA0KTtcclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSB3cml0ZURvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50QkUsIDQsIDApO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2llZWU3NTQocmVhZFVpbnQsIG9mZjAsIG9mZjEsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIHZhciBsbyA9IHJlYWRVaW50KGJ1ZiwgcG9zICsgb2ZmMCksXHJcbiAgICAgICAgICAgICAgICBoaSA9IHJlYWRVaW50KGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgIHZhciBzaWduID0gKGhpID4+IDMxKSAqIDIgKyAxLFxyXG4gICAgICAgICAgICAgICAgZXhwb25lbnQgPSBoaSA+Pj4gMjAgJiAyMDQ3LFxyXG4gICAgICAgICAgICAgICAgbWFudGlzc2EgPSA0Mjk0OTY3Mjk2ICogKGhpICYgMTA0ODU3NSkgKyBsbztcclxuICAgICAgICAgICAgcmV0dXJuIGV4cG9uZW50ID09PSAyMDQ3XHJcbiAgICAgICAgICAgICAgICA/IG1hbnRpc3NhXHJcbiAgICAgICAgICAgICAgICA/IE5hTlxyXG4gICAgICAgICAgICAgICAgOiBzaWduICogSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIDogZXhwb25lbnQgPT09IDAgLy8gZGVub3JtYWxcclxuICAgICAgICAgICAgICAgID8gc2lnbiAqIDVlLTMyNCAqIG1hbnRpc3NhXHJcbiAgICAgICAgICAgICAgICA6IHNpZ24gKiBNYXRoLnBvdygyLCBleHBvbmVudCAtIDEwNzUpICogKG1hbnRpc3NhICsgNDUwMzU5OTYyNzM3MDQ5Nik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLnJlYWREb3VibGVMRSA9IHJlYWREb3VibGVfaWVlZTc1NC5iaW5kKG51bGwsIHJlYWRVaW50TEUsIDAsIDQpO1xyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUJFID0gcmVhZERvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRCRSwgNCwgMCk7XHJcblxyXG4gICAgfSkoKTtcclxuXHJcbiAgICByZXR1cm4gZXhwb3J0cztcclxufVxyXG5cclxuLy8gdWludCBoZWxwZXJzXHJcblxyXG5mdW5jdGlvbiB3cml0ZVVpbnRMRSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsICAgICAgICAmIDI1NTtcclxuICAgIGJ1Zltwb3MgKyAxXSA9ICB2YWwgPj4+IDggICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gMTYgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgM10gPSAgdmFsID4+PiAyNDtcclxufVxyXG5cclxuZnVuY3Rpb24gd3JpdGVVaW50QkUodmFsLCBidWYsIHBvcykge1xyXG4gICAgYnVmW3BvcyAgICBdID0gIHZhbCA+Pj4gMjQ7XHJcbiAgICBidWZbcG9zICsgMV0gPSAgdmFsID4+PiAxNiAmIDI1NTtcclxuICAgIGJ1Zltwb3MgKyAyXSA9ICB2YWwgPj4+IDggICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDNdID0gIHZhbCAgICAgICAgJiAyNTU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRVaW50TEUoYnVmLCBwb3MpIHtcclxuICAgIHJldHVybiAoYnVmW3BvcyAgICBdXHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAxXSA8PCA4XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAyXSA8PCAxNlxyXG4gICAgICAgICAgfCBidWZbcG9zICsgM10gPDwgMjQpID4+PiAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWFkVWludEJFKGJ1ZiwgcG9zKSB7XHJcbiAgICByZXR1cm4gKGJ1Zltwb3MgICAgXSA8PCAyNFxyXG4gICAgICAgICAgfCBidWZbcG9zICsgMV0gPDwgMTZcclxuICAgICAgICAgIHwgYnVmW3BvcyArIDJdIDw8IDhcclxuICAgICAgICAgIHwgYnVmW3BvcyArIDNdKSA+Pj4gMDtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBpbnF1aXJlO1xyXG5cclxuLyoqXHJcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIG9ubHkgaWYgYXZhaWxhYmxlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlTmFtZSBNb2R1bGUgdG8gcmVxdWlyZVxyXG4gKiBAcmV0dXJucyB7P09iamVjdH0gUmVxdWlyZWQgbW9kdWxlIGlmIGF2YWlsYWJsZSBhbmQgbm90IGVtcHR5LCBvdGhlcndpc2UgYG51bGxgXHJcbiAqL1xyXG5mdW5jdGlvbiBpbnF1aXJlKG1vZHVsZU5hbWUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIG1vZCA9IGV2YWwoXCJxdWlyZVwiLnJlcGxhY2UoL14vLFwicmVcIikpKG1vZHVsZU5hbWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcclxuICAgICAgICBpZiAobW9kICYmIChtb2QubGVuZ3RoIHx8IE9iamVjdC5rZXlzKG1vZCkubGVuZ3RoKSlcclxuICAgICAgICAgICAgcmV0dXJuIG1vZDtcclxuICAgIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIEEgbWluaW1hbCBwYXRoIG1vZHVsZSB0byByZXNvbHZlIFVuaXgsIFdpbmRvd3MgYW5kIFVSTCBwYXRocyBhbGlrZS5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHBhdGggPSBleHBvcnRzO1xyXG5cclxudmFyIGlzQWJzb2x1dGUgPVxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBwYXRoIGlzIGFic29sdXRlLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBwYXRoIGlzIGFic29sdXRlXHJcbiAqL1xyXG5wYXRoLmlzQWJzb2x1dGUgPSBmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGgpIHtcclxuICAgIHJldHVybiAvXig/OlxcL3xcXHcrOikvLnRlc3QocGF0aCk7XHJcbn07XHJcblxyXG52YXIgbm9ybWFsaXplID1cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZXMgdGhlIHNwZWNpZmllZCBwYXRoLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBQYXRoIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOb3JtYWxpemVkIHBhdGhcclxuICovXHJcbnBhdGgubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcclxuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpXHJcbiAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC97Mix9L2csIFwiL1wiKTtcclxuICAgIHZhciBwYXJ0cyAgICA9IHBhdGguc3BsaXQoXCIvXCIpLFxyXG4gICAgICAgIGFic29sdXRlID0gaXNBYnNvbHV0ZShwYXRoKSxcclxuICAgICAgICBwcmVmaXggICA9IFwiXCI7XHJcbiAgICBpZiAoYWJzb2x1dGUpXHJcbiAgICAgICAgcHJlZml4ID0gcGFydHMuc2hpZnQoKSArIFwiL1wiO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7KSB7XHJcbiAgICAgICAgaWYgKHBhcnRzW2ldID09PSBcIi4uXCIpIHtcclxuICAgICAgICAgICAgaWYgKGkgPiAwICYmIHBhcnRzW2kgLSAxXSAhPT0gXCIuLlwiKVxyXG4gICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKC0taSwgMik7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFic29sdXRlKVxyXG4gICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSA9PT0gXCIuXCIpXHJcbiAgICAgICAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICsraTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcmVmaXggKyBwYXJ0cy5qb2luKFwiL1wiKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXNvbHZlcyB0aGUgc3BlY2lmaWVkIGluY2x1ZGUgcGF0aCBhZ2FpbnN0IHRoZSBzcGVjaWZpZWQgb3JpZ2luIHBhdGguXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW5QYXRoIFBhdGggdG8gdGhlIG9yaWdpbiBmaWxlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbmNsdWRlUGF0aCBJbmNsdWRlIHBhdGggcmVsYXRpdmUgdG8gb3JpZ2luIHBhdGhcclxuICogQHBhcmFtIHtib29sZWFufSBbYWxyZWFkeU5vcm1hbGl6ZWQ9ZmFsc2VdIGB0cnVlYCBpZiBib3RoIHBhdGhzIGFyZSBhbHJlYWR5IGtub3duIHRvIGJlIG5vcm1hbGl6ZWRcclxuICogQHJldHVybnMge3N0cmluZ30gUGF0aCB0byB0aGUgaW5jbHVkZSBmaWxlXHJcbiAqL1xyXG5wYXRoLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKG9yaWdpblBhdGgsIGluY2x1ZGVQYXRoLCBhbHJlYWR5Tm9ybWFsaXplZCkge1xyXG4gICAgaWYgKCFhbHJlYWR5Tm9ybWFsaXplZClcclxuICAgICAgICBpbmNsdWRlUGF0aCA9IG5vcm1hbGl6ZShpbmNsdWRlUGF0aCk7XHJcbiAgICBpZiAoaXNBYnNvbHV0ZShpbmNsdWRlUGF0aCkpXHJcbiAgICAgICAgcmV0dXJuIGluY2x1ZGVQYXRoO1xyXG4gICAgaWYgKCFhbHJlYWR5Tm9ybWFsaXplZClcclxuICAgICAgICBvcmlnaW5QYXRoID0gbm9ybWFsaXplKG9yaWdpblBhdGgpO1xyXG4gICAgcmV0dXJuIChvcmlnaW5QYXRoID0gb3JpZ2luUGF0aC5yZXBsYWNlKC8oPzpcXC98XilbXi9dKyQvLCBcIlwiKSkubGVuZ3RoID8gbm9ybWFsaXplKG9yaWdpblBhdGggKyBcIi9cIiArIGluY2x1ZGVQYXRoKSA6IGluY2x1ZGVQYXRoO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBwb29sO1xyXG5cclxuLyoqXHJcbiAqIEFuIGFsbG9jYXRvciBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLnBvb2x9LlxyXG4gKiBAdHlwZWRlZiBQb29sQWxsb2NhdG9yXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcclxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IEJ1ZmZlclxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIHNsaWNlciBhcyB1c2VkIGJ5IHtAbGluayB1dGlsLnBvb2x9LlxyXG4gKiBAdHlwZWRlZiBQb29sU2xpY2VyXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFN0YXJ0IG9mZnNldFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIEVuZCBvZmZzZXRcclxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IEJ1ZmZlciBzbGljZVxyXG4gKiBAdGhpcyB7VWludDhBcnJheX1cclxuICovXHJcblxyXG4vKipcclxuICogQSBnZW5lcmFsIHB1cnBvc2UgYnVmZmVyIHBvb2wuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1Bvb2xBbGxvY2F0b3J9IGFsbG9jIEFsbG9jYXRvclxyXG4gKiBAcGFyYW0ge1Bvb2xTbGljZXJ9IHNsaWNlIFNsaWNlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gW3NpemU9ODE5Ml0gU2xhYiBzaXplXHJcbiAqIEByZXR1cm5zIHtQb29sQWxsb2NhdG9yfSBQb29sZWQgYWxsb2NhdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBwb29sKGFsbG9jLCBzbGljZSwgc2l6ZSkge1xyXG4gICAgdmFyIFNJWkUgICA9IHNpemUgfHwgODE5MjtcclxuICAgIHZhciBNQVggICAgPSBTSVpFID4+PiAxO1xyXG4gICAgdmFyIHNsYWIgICA9IG51bGw7XHJcbiAgICB2YXIgb2Zmc2V0ID0gU0laRTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBwb29sX2FsbG9jKHNpemUpIHtcclxuICAgICAgICBpZiAoc2l6ZSA8IDEgfHwgc2l6ZSA+IE1BWClcclxuICAgICAgICAgICAgcmV0dXJuIGFsbG9jKHNpemUpO1xyXG4gICAgICAgIGlmIChvZmZzZXQgKyBzaXplID4gU0laRSkge1xyXG4gICAgICAgICAgICBzbGFiID0gYWxsb2MoU0laRSk7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBidWYgPSBzbGljZS5jYWxsKHNsYWIsIG9mZnNldCwgb2Zmc2V0ICs9IHNpemUpO1xyXG4gICAgICAgIGlmIChvZmZzZXQgJiA3KSAvLyBhbGlnbiB0byAzMiBiaXRcclxuICAgICAgICAgICAgb2Zmc2V0ID0gKG9mZnNldCB8IDcpICsgMTtcclxuICAgICAgICByZXR1cm4gYnVmO1xyXG4gICAgfTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBBIG1pbmltYWwgVVRGOCBpbXBsZW1lbnRhdGlvbiBmb3IgbnVtYmVyIGFycmF5cy5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHV0ZjggPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIFVURjggYnl0ZSBsZW5ndGggb2YgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAqL1xyXG51dGY4Lmxlbmd0aCA9IGZ1bmN0aW9uIHV0ZjhfbGVuZ3RoKHN0cmluZykge1xyXG4gICAgdmFyIGxlbiA9IDAsXHJcbiAgICAgICAgYyA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOClcclxuICAgICAgICAgICAgbGVuICs9IDE7XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpXHJcbiAgICAgICAgICAgIGxlbiArPSAyO1xyXG4gICAgICAgIGVsc2UgaWYgKChjICYgMHhGQzAwKSA9PT0gMHhEODAwICYmIChzdHJpbmcuY2hhckNvZGVBdChpICsgMSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBsZW4gKz0gNDtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgbGVuICs9IDM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVuO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIFVURjggYnl0ZXMgYXMgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFNvdXJjZSBzdGFydFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFNvdXJjZSBlbmRcclxuICogQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHJlYWRcclxuICovXHJcbnV0ZjgucmVhZCA9IGZ1bmN0aW9uIHV0ZjhfcmVhZChidWZmZXIsIHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcclxuICAgIGlmIChsZW4gPCAxKVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgdmFyIHBhcnRzID0gbnVsbCxcclxuICAgICAgICBjaHVuayA9IFtdLFxyXG4gICAgICAgIGkgPSAwLCAvLyBjaGFyIG9mZnNldFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xyXG4gICAgICAgIHQgPSBidWZmZXJbc3RhcnQrK107XHJcbiAgICAgICAgaWYgKHQgPCAxMjgpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSB0O1xyXG4gICAgICAgIGVsc2UgaWYgKHQgPiAxOTEgJiYgdCA8IDIyNClcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9ICh0ICYgMzEpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBlbHNlIGlmICh0ID4gMjM5ICYmIHQgPCAzNjUpIHtcclxuICAgICAgICAgICAgdCA9ICgodCAmIDcpIDw8IDE4IHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCAxMiB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgNiB8IGJ1ZmZlcltzdGFydCsrXSAmIDYzKSAtIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweEQ4MDAgKyAodCA+PiAxMCk7XHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAweERDMDAgKyAodCAmIDEwMjMpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gKHQgJiAxNSkgPDwgMTIgfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MztcclxuICAgICAgICBpZiAoaSA+IDgxOTEpIHtcclxuICAgICAgICAgICAgKHBhcnRzIHx8IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgaWYgKGkpXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBzdHJpbmcgYXMgVVRGOCBieXRlcy5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTb3VyY2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIERlc3RpbmF0aW9uIGJ1ZmZlclxyXG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IERlc3RpbmF0aW9uIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlcyB3cml0dGVuXHJcbiAqL1xyXG51dGY4LndyaXRlID0gZnVuY3Rpb24gdXRmOF93cml0ZShzdHJpbmcsIGJ1ZmZlciwgb2Zmc2V0KSB7XHJcbiAgICB2YXIgc3RhcnQgPSBvZmZzZXQsXHJcbiAgICAgICAgYzEsIC8vIGNoYXJhY3RlciAxXHJcbiAgICAgICAgYzI7IC8vIGNoYXJhY3RlciAyXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGMxID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMTtcclxuICAgICAgICB9IGVsc2UgaWYgKGMxIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiAgICAgICB8IDE5MjtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxICAgICAgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoYzEgJiAweEZDMDApID09PSAweEQ4MDAgJiYgKChjMiA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKSkgJiAweEZDMDApID09PSAweERDMDApIHtcclxuICAgICAgICAgICAgYzEgPSAweDEwMDAwICsgKChjMSAmIDB4MDNGRikgPDwgMTApICsgKGMyICYgMHgwM0ZGKTtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTggICAgICB8IDI0MDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gMTIgICAgICB8IDIyNDtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvZmZzZXQgLSBzdGFydDtcclxufTtcclxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IG9iamVjdENyZWF0ZVBvbHlmaWxsXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IG9iamVjdEtleXNQb2x5ZmlsbFxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBmdW5jdGlvbkJpbmRQb2x5ZmlsbFxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ19ldmVudHMnKSkge1xuICAgIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG52YXIgaGFzRGVmaW5lUHJvcGVydHk7XG50cnkge1xuICB2YXIgbyA9IHt9O1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgJ3gnLCB7IHZhbHVlOiAwIH0pO1xuICBoYXNEZWZpbmVQcm9wZXJ0eSA9IG8ueCA9PT0gMDtcbn0gY2F0Y2ggKGVycikgeyBoYXNEZWZpbmVQcm9wZXJ0eSA9IGZhbHNlIH1cbmlmIChoYXNEZWZpbmVQcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgICAvLyBjaGVjayB3aGV0aGVyIHRoZSBpbnB1dCBpcyBhIHBvc2l0aXZlIG51bWJlciAod2hvc2UgdmFsdWUgaXMgemVybyBvclxuICAgICAgLy8gZ3JlYXRlciBhbmQgbm90IGEgTmFOKS5cbiAgICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IGFyZyAhPT0gYXJnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gICAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG59XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJuXCIgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uICRnZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuICRnZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG4vLyBUaGVzZSBzdGFuZGFsb25lIGVtaXQqIGZ1bmN0aW9ucyBhcmUgdXNlZCB0byBvcHRpbWl6ZSBjYWxsaW5nIG9mIGV2ZW50XG4vLyBoYW5kbGVycyBmb3IgZmFzdCBjYXNlcyBiZWNhdXNlIGVtaXQoKSBpdHNlbGYgb2Z0ZW4gaGFzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG4vLyBhcmd1bWVudHMgYW5kIGNhbiBiZSBkZW9wdGltaXplZCBiZWNhdXNlIG9mIHRoYXQuIFRoZXNlIGZ1bmN0aW9ucyBhbHdheXMgaGF2ZVxuLy8gdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhbmQgdGh1cyBkbyBub3QgZ2V0IGRlb3B0aW1pemVkLCBzbyB0aGUgY29kZVxuLy8gaW5zaWRlIHRoZW0gY2FuIGV4ZWN1dGUgZmFzdGVyLlxuZnVuY3Rpb24gZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgc2VsZikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdE9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCBzZWxmLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZ3MpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGV2ZW50cztcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT0gbnVsbCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKVxuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKCFoYW5kbGVyKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgaXNGbiA9IHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nO1xuICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICBzd2l0Y2ggKGxlbikge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgIGNhc2UgMTpcbiAgICAgIGVtaXROb25lKGhhbmRsZXIsIGlzRm4sIHRoaXMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgZW1pdE9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgZW1pdFR3byhoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBlbWl0VGhyZWUoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSk7XG4gICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgIGRlZmF1bHQ6XG4gICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGVtaXRNYW55KGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoIWV2ZW50cykge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKCFleGlzdGluZykge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgICBpZiAocHJlcGVuZCkge1xuICAgICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgaWYgKCFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIG0gPSAkZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgICBpZiAobSAmJiBtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtKSB7XG4gICAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyBcIicgKyBTdHJpbmcodHlwZSkgKyAnXCIgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdC4nKTtcbiAgICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJyVzOiAlcycsIHcubmFtZSwgdy5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCwgYXJndW1lbnRzWzBdKTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCwgYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0LCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSxcbiAgICAgICAgICAgIGFyZ3VtZW50c1syXSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKVxuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3MpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBiaW5kLmNhbGwob25jZVdyYXBwZXIsIHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoIWV2ZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAoIWxpc3QpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoIWV2ZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmICghZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0pIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IG9iamVjdENyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmICghZXZlbnRzKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKCFldmxpc3RlbmVyKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgPyB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3Qub3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKCkuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKVxuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9iamVjdENyZWF0ZVBvbHlmaWxsKHByb3RvKSB7XG4gIHZhciBGID0gZnVuY3Rpb24oKSB7fTtcbiAgRi5wcm90b3R5cGUgPSBwcm90bztcbiAgcmV0dXJuIG5ldyBGO1xufVxuZnVuY3Rpb24gb2JqZWN0S2V5c1BvbHlmaWxsKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrIGluIG9iaikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGspKSB7XG4gICAga2V5cy5wdXNoKGspO1xuICB9XG4gIHJldHVybiBrO1xufVxuZnVuY3Rpb24gZnVuY3Rpb25CaW5kUG9seWZpbGwoY29udGV4dCkge1xuICB2YXIgZm4gPSB0aGlzO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiLy8gZnVsbCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4XCIpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBjb21tb247XHJcblxyXG52YXIgY29tbW9uUmUgPSAvXFwvfFxcLi87XHJcblxyXG4vKipcclxuICogUHJvdmlkZXMgY29tbW9uIHR5cGUgZGVmaW5pdGlvbnMuXHJcbiAqIENhbiBhbHNvIGJlIHVzZWQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGdvb2dsZSB0eXBlcyBvciB5b3VyIG93biBjdXN0b20gdHlwZXMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFNob3J0IG5hbWUgYXMgaW4gYGdvb2dsZS9wcm90b2J1Zi9bbmFtZV0ucHJvdG9gIG9yIGZ1bGwgZmlsZSBuYW1lXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGpzb24gSlNPTiBkZWZpbml0aW9uIHdpdGhpbiBgZ29vZ2xlLnByb3RvYnVmYCBpZiBhIHNob3J0IG5hbWUsIG90aGVyd2lzZSB0aGUgZmlsZSdzIHJvb3QgZGVmaW5pdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8gQW55XHJcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvIER1cmF0aW9uXHJcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvIEVtcHR5XHJcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJvdG8gRmllbGRNYXNrXHJcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90byBTdHJ1Y3QsIFZhbHVlLCBOdWxsVmFsdWUgYW5kIExpc3RWYWx1ZVxyXG4gKiBAcHJvcGVydHkge0lOYW1lc3BhY2V9IGdvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8gVGltZXN0YW1wXHJcbiAqIEBwcm9wZXJ0eSB7SU5hbWVzcGFjZX0gZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIFdyYXBwZXJzXHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIG1hbnVhbGx5IHByb3ZpZGVzIGRlc2NyaXB0b3IucHJvdG8gKGFzc3VtZXMgZ29vZ2xlL3Byb3RvYnVmLyBuYW1lc3BhY2UgYW5kIC5wcm90byBleHRlbnNpb24pXHJcbiAqIHByb3RvYnVmLmNvbW1vbihcImRlc2NyaXB0b3JcIiwgZGVzY3JpcHRvckpzb24pO1xyXG4gKlxyXG4gKiAvLyBtYW51YWxseSBwcm92aWRlcyBhIGN1c3RvbSBkZWZpbml0aW9uICh1c2VzIG15LmZvbyBuYW1lc3BhY2UpXHJcbiAqIHByb3RvYnVmLmNvbW1vbihcIm15L2Zvby9iYXIucHJvdG9cIiwgbXlGb29CYXJKc29uKTtcclxuICovXHJcbmZ1bmN0aW9uIGNvbW1vbihuYW1lLCBqc29uKSB7XHJcbiAgICBpZiAoIWNvbW1vblJlLnRlc3QobmFtZSkpIHtcclxuICAgICAgICBuYW1lID0gXCJnb29nbGUvcHJvdG9idWYvXCIgKyBuYW1lICsgXCIucHJvdG9cIjtcclxuICAgICAgICBqc29uID0geyBuZXN0ZWQ6IHsgZ29vZ2xlOiB7IG5lc3RlZDogeyBwcm90b2J1ZjogeyBuZXN0ZWQ6IGpzb24gfSB9IH0gfSB9O1xyXG4gICAgfVxyXG4gICAgY29tbW9uW25hbWVdID0ganNvbjtcclxufVxyXG5cclxuLy8gTm90IHByb3ZpZGVkIGJlY2F1c2Ugb2YgbGltaXRlZCB1c2UgKGZlZWwgZnJlZSB0byBkaXNjdXNzIG9yIHRvIHByb3ZpZGUgeW91cnNlbGYpOlxyXG4vL1xyXG4vLyBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90b1xyXG4vLyBnb29nbGUvcHJvdG9idWYvc291cmNlX2NvbnRleHQucHJvdG9cclxuLy8gZ29vZ2xlL3Byb3RvYnVmL3R5cGUucHJvdG9cclxuLy9cclxuLy8gU3RyaXBwZWQgYW5kIHByZS1wYXJzZWQgdmVyc2lvbnMgb2YgdGhlc2Ugbm9uLWJ1bmRsZWQgZmlsZXMgYXJlIGluc3RlYWQgYXZhaWxhYmxlIGFzIHBhcnQgb2ZcclxuLy8gdGhlIHJlcG9zaXRvcnkgb3IgcGFja2FnZSB3aXRoaW4gdGhlIGdvb2dsZS9wcm90b2J1ZiBkaXJlY3RvcnkuXHJcblxyXG5jb21tb24oXCJhbnlcIiwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5BbnkgbWVzc2FnZS5cclxuICAgICAqIEBpbnRlcmZhY2UgSUFueVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZVVybF1cclxuICAgICAqIEBwcm9wZXJ0eSB7VWludDhBcnJheX0gW2J5dGVzXVxyXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxyXG4gICAgICovXHJcbiAgICBBbnk6IHtcclxuICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgdHlwZV91cmw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBpZDogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG52YXIgdGltZVR5cGU7XHJcblxyXG5jb21tb24oXCJkdXJhdGlvblwiLCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uIG1lc3NhZ2UuXHJcbiAgICAgKiBAaW50ZXJmYWNlIElEdXJhdGlvblxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd9IFtzZWNvbmRzXVxyXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtuYW5vc11cclxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cclxuICAgICAqL1xyXG4gICAgRHVyYXRpb246IHRpbWVUeXBlID0ge1xyXG4gICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICBzZWNvbmRzOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImludDY0XCIsXHJcbiAgICAgICAgICAgICAgICBpZDogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBuYW5vczoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbnQzMlwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG5jb21tb24oXCJ0aW1lc3RhbXBcIiwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAgbWVzc2FnZS5cclxuICAgICAqIEBpbnRlcmZhY2UgSVRpbWVzdGFtcFxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd9IFtzZWNvbmRzXVxyXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtuYW5vc11cclxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cclxuICAgICAqL1xyXG4gICAgVGltZXN0YW1wOiB0aW1lVHlwZVxyXG59KTtcclxuXHJcbmNvbW1vbihcImVtcHR5XCIsIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuRW1wdHkgbWVzc2FnZS5cclxuICAgICAqIEBpbnRlcmZhY2UgSUVtcHR5XHJcbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXHJcbiAgICAgKi9cclxuICAgIEVtcHR5OiB7XHJcbiAgICAgICAgZmllbGRzOiB7fVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbW1vbihcInN0cnVjdFwiLCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCBtZXNzYWdlLlxyXG4gICAgICogQGludGVyZmFjZSBJU3RydWN0XHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxJVmFsdWU+fSBbZmllbGRzXVxyXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxyXG4gICAgICovXHJcbiAgICBTdHJ1Y3Q6IHtcclxuICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgICAgICBrZXlUeXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlZhbHVlIG1lc3NhZ2UuXHJcbiAgICAgKiBAaW50ZXJmYWNlIElWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBba2luZF1cclxuICAgICAqIEBwcm9wZXJ0eSB7MH0gW251bGxWYWx1ZV1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbnVtYmVyVmFsdWVdXHJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3N0cmluZ1ZhbHVlXVxyXG4gICAgICogQHByb3BlcnR5IHtib29sZWFufSBbYm9vbFZhbHVlXVxyXG4gICAgICogQHByb3BlcnR5IHtJU3RydWN0fSBbc3RydWN0VmFsdWVdXHJcbiAgICAgKiBAcHJvcGVydHkge0lMaXN0VmFsdWV9IFtsaXN0VmFsdWVdXHJcbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXHJcbiAgICAgKi9cclxuICAgIFZhbHVlOiB7XHJcbiAgICAgICAgb25lb2ZzOiB7XHJcbiAgICAgICAgICAgIGtpbmQ6IHtcclxuICAgICAgICAgICAgICAgIG9uZW9mOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgXCJudWxsVmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICBcIm51bWJlclZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYm9vbFZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzdHJ1Y3RWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibGlzdFZhbHVlXCJcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgIG51bGxWYWx1ZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJOdWxsVmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGlkOiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG51bWJlclZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRvdWJsZVwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RyaW5nVmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBpZDogM1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib29sVmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RydWN0VmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiU3RydWN0XCIsXHJcbiAgICAgICAgICAgICAgICBpZDogNVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaXN0VmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiTGlzdFZhbHVlXCIsXHJcbiAgICAgICAgICAgICAgICBpZDogNlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBOdWxsVmFsdWU6IHtcclxuICAgICAgICB2YWx1ZXM6IHtcclxuICAgICAgICAgICAgTlVMTF9WQUxVRTogMFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkxpc3RWYWx1ZSBtZXNzYWdlLlxyXG4gICAgICogQGludGVyZmFjZSBJTGlzdFZhbHVlXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48SVZhbHVlPn0gW3ZhbHVlc11cclxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cclxuICAgICAqL1xyXG4gICAgTGlzdFZhbHVlOiB7XHJcbiAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgIHZhbHVlczoge1xyXG4gICAgICAgICAgICAgICAgcnVsZTogXCJyZXBlYXRlZFwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJWYWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG5jb21tb24oXCJ3cmFwcGVyc1wiLCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlIG1lc3NhZ2UuXHJcbiAgICAgKiBAaW50ZXJmYWNlIElEb3VibGVWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdmFsdWVdXHJcbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXHJcbiAgICAgKi9cclxuICAgIERvdWJsZVZhbHVlOiB7XHJcbiAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImRvdWJsZVwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUgbWVzc2FnZS5cclxuICAgICAqIEBpbnRlcmZhY2UgSUZsb2F0VmFsdWVcclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3ZhbHVlXVxyXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxyXG4gICAgICovXHJcbiAgICBGbG9hdFZhbHVlOiB7XHJcbiAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZsb2F0XCIsXHJcbiAgICAgICAgICAgICAgICBpZDogMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSBtZXNzYWdlLlxyXG4gICAgICogQGludGVyZmFjZSBJSW50NjRWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd9IFt2YWx1ZV1cclxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cclxuICAgICAqL1xyXG4gICAgSW50NjRWYWx1ZToge1xyXG4gICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbnQ2NFwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlVJbnQ2NFZhbHVlIG1lc3NhZ2UuXHJcbiAgICAgKiBAaW50ZXJmYWNlIElVSW50NjRWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd9IFt2YWx1ZV1cclxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cclxuICAgICAqL1xyXG4gICAgVUludDY0VmFsdWU6IHtcclxuICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDY0XCIsXHJcbiAgICAgICAgICAgICAgICBpZDogMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSBtZXNzYWdlLlxyXG4gICAgICogQGludGVyZmFjZSBJSW50MzJWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdmFsdWVdXHJcbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXHJcbiAgICAgKi9cclxuICAgIEludDMyVmFsdWU6IHtcclxuICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW50MzJcIixcclxuICAgICAgICAgICAgICAgIGlkOiAxXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZSBtZXNzYWdlLlxyXG4gICAgICogQGludGVyZmFjZSBJVUludDMyVmFsdWVcclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gW3ZhbHVlXVxyXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxyXG4gICAgICovXHJcbiAgICBVSW50MzJWYWx1ZToge1xyXG4gICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MzJcIixcclxuICAgICAgICAgICAgICAgIGlkOiAxXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGVydGllcyBvZiBhIGdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUgbWVzc2FnZS5cclxuICAgICAqIEBpbnRlcmZhY2UgSUJvb2xWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3ZhbHVlXVxyXG4gICAgICogQG1lbWJlcm9mIGNvbW1vblxyXG4gICAgICovXHJcbiAgICBCb29sVmFsdWU6IHtcclxuICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIG1lc3NhZ2UuXHJcbiAgICAgKiBAaW50ZXJmYWNlIElTdHJpbmdWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdmFsdWVdXHJcbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXHJcbiAgICAgKi9cclxuICAgIFN0cmluZ1ZhbHVlOiB7XHJcbiAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgZ29vZ2xlLnByb3RvYnVmLkJ5dGVzVmFsdWUgbWVzc2FnZS5cclxuICAgICAqIEBpbnRlcmZhY2UgSUJ5dGVzVmFsdWVcclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKiBAcHJvcGVydHkge1VpbnQ4QXJyYXl9IFt2YWx1ZV1cclxuICAgICAqIEBtZW1iZXJvZiBjb21tb25cclxuICAgICAqL1xyXG4gICAgQnl0ZXNWYWx1ZToge1xyXG4gICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiLFxyXG4gICAgICAgICAgICAgICAgaWQ6IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG5jb21tb24oXCJmaWVsZF9tYXNrXCIsIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBnb29nbGUucHJvdG9idWYuRmllbGRNYXNrIG1lc3NhZ2UuXHJcbiAgICAgKiBAaW50ZXJmYWNlIElEb3VibGVWYWx1ZVxyXG4gICAgICogQHR5cGUge09iamVjdH1cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdmFsdWVdXHJcbiAgICAgKiBAbWVtYmVyb2YgY29tbW9uXHJcbiAgICAgKi9cclxuICAgIEZpZWxkTWFzazoge1xyXG4gICAgICAgIGZpZWxkczoge1xyXG4gICAgICAgICAgICBwYXRoczoge1xyXG4gICAgICAgICAgICAgICAgcnVsZTogXCJyZXBlYXRlZFwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcclxuICAgICAgICAgICAgICAgIGlkOiAxXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHJvb3QgZGVmaW5pdGlvbiBvZiB0aGUgc3BlY2lmaWVkIGNvbW1vbiBwcm90byBmaWxlLlxyXG4gKlxyXG4gKiBCdW5kbGVkIGRlZmluaXRpb25zIGFyZTpcclxuICogLSBnb29nbGUvcHJvdG9idWYvYW55LnByb3RvXHJcbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvXHJcbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvXHJcbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJvdG9cclxuICogLSBnb29nbGUvcHJvdG9idWYvc3RydWN0LnByb3RvXHJcbiAqIC0gZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90b1xyXG4gKiAtIGdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90b1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBQcm90byBmaWxlIG5hbWVcclxuICogQHJldHVybnMge0lOYW1lc3BhY2V8bnVsbH0gUm9vdCBkZWZpbml0aW9uIG9yIGBudWxsYCBpZiBub3QgZGVmaW5lZFxyXG4gKi9cclxuY29tbW9uLmdldCA9IGZ1bmN0aW9uIGdldChmaWxlKSB7XHJcbiAgICByZXR1cm4gY29tbW9uW2ZpbGVdIHx8IG51bGw7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogUnVudGltZSBtZXNzYWdlIGZyb20vdG8gcGxhaW4gb2JqZWN0IGNvbnZlcnRlcnMuXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciBjb252ZXJ0ZXIgPSBleHBvcnRzO1xyXG5cclxudmFyIEVudW0gPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxyXG4gICAgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgcGFydGlhbCB2YWx1ZSBmcm9tT2JqZWN0IGNvbnZldGVyLlxyXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJbmRleCBGaWVsZCBpbmRleFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSByZWZlcmVuY2VcclxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuVmFsdWVQYXJ0aWFsX2Zyb21PYmplY3QoZ2VuLCBmaWVsZCwgZmllbGRJbmRleCwgcHJvcCkge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xyXG4gICAgaWYgKGZpZWxkLnJlc29sdmVkVHlwZSkge1xyXG4gICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSB7IGdlblxyXG4gICAgICAgICAgICAoXCJzd2l0Y2goZCVzKXtcIiwgcHJvcCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHZhbHVlcyA9IGZpZWxkLnJlc29sdmVkVHlwZS52YWx1ZXMsIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmaWVsZC5yZXBlYXRlZCAmJiB2YWx1ZXNba2V5c1tpXV0gPT09IGZpZWxkLnR5cGVEZWZhdWx0KSBnZW5cclxuICAgICAgICAgICAgICAgIChcImRlZmF1bHQ6XCIpO1xyXG4gICAgICAgICAgICAgICAgZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCJjYXNlJWo6XCIsIGtleXNbaV0pXHJcbiAgICAgICAgICAgICAgICAoXCJjYXNlICVpOlwiLCB2YWx1ZXNba2V5c1tpXV0pXHJcbiAgICAgICAgICAgICAgICAgICAgKFwibSVzPSVqXCIsIHByb3AsIHZhbHVlc1trZXlzW2ldXSlcclxuICAgICAgICAgICAgICAgICAgICAoXCJicmVha1wiKTtcclxuICAgICAgICAgICAgfSBnZW5cclxuICAgICAgICAgICAgKFwifVwiKTtcclxuICAgICAgICB9IGVsc2UgZ2VuXHJcbiAgICAgICAgICAgIChcImlmKHR5cGVvZiBkJXMhPT1cXFwib2JqZWN0XFxcIilcIiwgcHJvcClcclxuICAgICAgICAgICAgICAgIChcInRocm93IFR5cGVFcnJvciglailcIiwgZmllbGQuZnVsbE5hbWUgKyBcIjogb2JqZWN0IGV4cGVjdGVkXCIpXHJcbiAgICAgICAgICAgIChcIm0lcz10eXBlc1slaV0uZnJvbU9iamVjdChkJXMpXCIsIHByb3AsIGZpZWxkSW5kZXgsIHByb3ApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgaXNVbnNpZ25lZCA9IGZhbHNlO1xyXG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiZG91YmxlXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJmbG9hdFwiOiBnZW5cclxuICAgICAgICAgICAgICAgIChcIm0lcz1OdW1iZXIoZCVzKVwiLCBwcm9wLCBwcm9wKTsgLy8gYWxzbyBjYXRjaGVzIFwiTmFOXCIsIFwiSW5maW5pdHlcIlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1aW50MzJcIjpcclxuICAgICAgICAgICAgY2FzZSBcImZpeGVkMzJcIjogZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzPj4+MFwiLCBwcm9wLCBwcm9wKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW50MzJcIjpcclxuICAgICAgICAgICAgY2FzZSBcInNpbnQzMlwiOlxyXG4gICAgICAgICAgICBjYXNlIFwic2ZpeGVkMzJcIjogZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzfDBcIiwgcHJvcCwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInVpbnQ2NFwiOlxyXG4gICAgICAgICAgICAgICAgaXNVbnNpZ25lZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWZhbGx0aHJvdWdoXHJcbiAgICAgICAgICAgIGNhc2UgXCJpbnQ2NFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwic2ludDY0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJmaXhlZDY0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQ2NFwiOiBnZW5cclxuICAgICAgICAgICAgICAgIChcImlmKHV0aWwuTG9uZylcIilcclxuICAgICAgICAgICAgICAgICAgICAoXCIobSVzPXV0aWwuTG9uZy5mcm9tVmFsdWUoZCVzKSkudW5zaWduZWQ9JWpcIiwgcHJvcCwgcHJvcCwgaXNVbnNpZ25lZClcclxuICAgICAgICAgICAgICAgIChcImVsc2UgaWYodHlwZW9mIGQlcz09PVxcXCJzdHJpbmdcXFwiKVwiLCBwcm9wKVxyXG4gICAgICAgICAgICAgICAgICAgIChcIm0lcz1wYXJzZUludChkJXMsMTApXCIsIHByb3AsIHByb3ApXHJcbiAgICAgICAgICAgICAgICAoXCJlbHNlIGlmKHR5cGVvZiBkJXM9PT1cXFwibnVtYmVyXFxcIilcIiwgcHJvcClcclxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzXCIsIHByb3AsIHByb3ApXHJcbiAgICAgICAgICAgICAgICAoXCJlbHNlIGlmKHR5cGVvZiBkJXM9PT1cXFwib2JqZWN0XFxcIilcIiwgcHJvcClcclxuICAgICAgICAgICAgICAgICAgICAoXCJtJXM9bmV3IHV0aWwuTG9uZ0JpdHMoZCVzLmxvdz4+PjAsZCVzLmhpZ2g+Pj4wKS50b051bWJlciglcylcIiwgcHJvcCwgcHJvcCwgcHJvcCwgaXNVbnNpZ25lZCA/IFwidHJ1ZVwiIDogXCJcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJ5dGVzXCI6IGdlblxyXG4gICAgICAgICAgICAgICAgKFwiaWYodHlwZW9mIGQlcz09PVxcXCJzdHJpbmdcXFwiKVwiLCBwcm9wKVxyXG4gICAgICAgICAgICAgICAgICAgIChcInV0aWwuYmFzZTY0LmRlY29kZShkJXMsbSVzPXV0aWwubmV3QnVmZmVyKHV0aWwuYmFzZTY0Lmxlbmd0aChkJXMpKSwwKVwiLCBwcm9wLCBwcm9wLCBwcm9wKVxyXG4gICAgICAgICAgICAgICAgKFwiZWxzZSBpZihkJXMubGVuZ3RoKVwiLCBwcm9wKVxyXG4gICAgICAgICAgICAgICAgICAgIChcIm0lcz1kJXNcIiwgcHJvcCwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiBnZW5cclxuICAgICAgICAgICAgICAgIChcIm0lcz1TdHJpbmcoZCVzKVwiLCBwcm9wLCBwcm9wKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOiBnZW5cclxuICAgICAgICAgICAgICAgIChcIm0lcz1Cb29sZWFuKGQlcylcIiwgcHJvcCwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgLyogZGVmYXVsdDogZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCJtJXM9ZCVzXCIsIHByb3AsIHByb3ApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7ICovXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdlbjtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgcGxhaW4gb2JqZWN0IHRvIHJ1bnRpbWUgbWVzc2FnZSBjb252ZXJ0ZXIgc3BlY2lmaWMgdG8gdGhlIHNwZWNpZmllZCBtZXNzYWdlIHR5cGUuXHJcbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXHJcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXHJcbiAqL1xyXG5jb252ZXJ0ZXIuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QobXR5cGUpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cclxuICAgIHZhciBmaWVsZHMgPSBtdHlwZS5maWVsZHNBcnJheTtcclxuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wiZFwiXSwgbXR5cGUubmFtZSArIFwiJGZyb21PYmplY3RcIilcclxuICAgIChcImlmKGQgaW5zdGFuY2VvZiB0aGlzLmN0b3IpXCIpXHJcbiAgICAgICAgKFwicmV0dXJuIGRcIik7XHJcbiAgICBpZiAoIWZpZWxkcy5sZW5ndGgpIHJldHVybiBnZW5cclxuICAgIChcInJldHVybiBuZXcgdGhpcy5jdG9yXCIpO1xyXG4gICAgZ2VuXHJcbiAgICAoXCJ2YXIgbT1uZXcgdGhpcy5jdG9yXCIpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgZmllbGQgID0gZmllbGRzW2ldLnJlc29sdmUoKSxcclxuICAgICAgICAgICAgcHJvcCAgID0gdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTtcclxuXHJcbiAgICAgICAgLy8gTWFwIGZpZWxkc1xyXG4gICAgICAgIGlmIChmaWVsZC5tYXApIHsgZ2VuXHJcbiAgICAoXCJpZihkJXMpe1wiLCBwcm9wKVxyXG4gICAgICAgIChcImlmKHR5cGVvZiBkJXMhPT1cXFwib2JqZWN0XFxcIilcIiwgcHJvcClcclxuICAgICAgICAgICAgKFwidGhyb3cgVHlwZUVycm9yKCVqKVwiLCBmaWVsZC5mdWxsTmFtZSArIFwiOiBvYmplY3QgZXhwZWN0ZWRcIilcclxuICAgICAgICAoXCJtJXM9e31cIiwgcHJvcClcclxuICAgICAgICAoXCJmb3IodmFyIGtzPU9iamVjdC5rZXlzKGQlcyksaT0wO2k8a3MubGVuZ3RoOysraSl7XCIsIHByb3ApO1xyXG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfZnJvbU9iamVjdChnZW4sIGZpZWxkLCAvKiBub3Qgc29ydGVkICovIGksIHByb3AgKyBcIltrc1tpXV1cIilcclxuICAgICAgICAoXCJ9XCIpXHJcbiAgICAoXCJ9XCIpO1xyXG5cclxuICAgICAgICAvLyBSZXBlYXRlZCBmaWVsZHNcclxuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLnJlcGVhdGVkKSB7IGdlblxyXG4gICAgKFwiaWYoZCVzKXtcIiwgcHJvcClcclxuICAgICAgICAoXCJpZighQXJyYXkuaXNBcnJheShkJXMpKVwiLCBwcm9wKVxyXG4gICAgICAgICAgICAoXCJ0aHJvdyBUeXBlRXJyb3IoJWopXCIsIGZpZWxkLmZ1bGxOYW1lICsgXCI6IGFycmF5IGV4cGVjdGVkXCIpXHJcbiAgICAgICAgKFwibSVzPVtdXCIsIHByb3ApXHJcbiAgICAgICAgKFwiZm9yKHZhciBpPTA7aTxkJXMubGVuZ3RoOysraSl7XCIsIHByb3ApO1xyXG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfZnJvbU9iamVjdChnZW4sIGZpZWxkLCAvKiBub3Qgc29ydGVkICovIGksIHByb3AgKyBcIltpXVwiKVxyXG4gICAgICAgIChcIn1cIilcclxuICAgIChcIn1cIik7XHJcblxyXG4gICAgICAgIC8vIE5vbi1yZXBlYXRlZCBmaWVsZHNcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIShmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSkgZ2VuIC8vIG5vIG5lZWQgdG8gdGVzdCBmb3IgbnVsbC91bmRlZmluZWQgaWYgYW4gZW51bSAodXNlcyBzd2l0Y2gpXHJcbiAgICAoXCJpZihkJXMhPW51bGwpe1wiLCBwcm9wKTsgLy8gIT09IHVuZGVmaW5lZCAmJiAhPT0gbnVsbFxyXG4gICAgICAgIGdlblZhbHVlUGFydGlhbF9mcm9tT2JqZWN0KGdlbiwgZmllbGQsIC8qIG5vdCBzb3J0ZWQgKi8gaSwgcHJvcCk7XHJcbiAgICAgICAgICAgIGlmICghKGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pKSBnZW5cclxuICAgIChcIn1cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSByZXR1cm4gZ2VuXHJcbiAgICAoXCJyZXR1cm4gbVwiKTtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHBhcnRpYWwgdmFsdWUgdG9PYmplY3QgY29udmVydGVyLlxyXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJbmRleCBGaWVsZCBpbmRleFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSByZWZlcmVuY2VcclxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuVmFsdWVQYXJ0aWFsX3RvT2JqZWN0KGdlbiwgZmllbGQsIGZpZWxkSW5kZXgsIHByb3ApIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cclxuICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUpIHtcclxuICAgICAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgRW51bSkgZ2VuXHJcbiAgICAgICAgICAgIChcImQlcz1vLmVudW1zPT09U3RyaW5nP3R5cGVzWyVpXS52YWx1ZXNbbSVzXTptJXNcIiwgcHJvcCwgZmllbGRJbmRleCwgcHJvcCwgcHJvcCk7XHJcbiAgICAgICAgZWxzZSBnZW5cclxuICAgICAgICAgICAgKFwiZCVzPXR5cGVzWyVpXS50b09iamVjdChtJXMsbylcIiwgcHJvcCwgZmllbGRJbmRleCwgcHJvcCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBpc1Vuc2lnbmVkID0gZmFsc2U7XHJcbiAgICAgICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkb3VibGVcIjpcclxuICAgICAgICAgICAgY2FzZSBcImZsb2F0XCI6IGdlblxyXG4gICAgICAgICAgICAoXCJkJXM9by5qc29uJiYhaXNGaW5pdGUobSVzKT9TdHJpbmcobSVzKTptJXNcIiwgcHJvcCwgcHJvcCwgcHJvcCwgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInVpbnQ2NFwiOlxyXG4gICAgICAgICAgICAgICAgaXNVbnNpZ25lZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWZhbGx0aHJvdWdoXHJcbiAgICAgICAgICAgIGNhc2UgXCJpbnQ2NFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwic2ludDY0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJmaXhlZDY0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzZml4ZWQ2NFwiOiBnZW5cclxuICAgICAgICAgICAgKFwiaWYodHlwZW9mIG0lcz09PVxcXCJudW1iZXJcXFwiKVwiLCBwcm9wKVxyXG4gICAgICAgICAgICAgICAgKFwiZCVzPW8ubG9uZ3M9PT1TdHJpbmc/U3RyaW5nKG0lcyk6bSVzXCIsIHByb3AsIHByb3AsIHByb3ApXHJcbiAgICAgICAgICAgIChcImVsc2VcIikgLy8gTG9uZy1saWtlXHJcbiAgICAgICAgICAgICAgICAoXCJkJXM9by5sb25ncz09PVN0cmluZz91dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobSVzKTpvLmxvbmdzPT09TnVtYmVyP25ldyB1dGlsLkxvbmdCaXRzKG0lcy5sb3c+Pj4wLG0lcy5oaWdoPj4+MCkudG9OdW1iZXIoJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wLCBpc1Vuc2lnbmVkID8gXCJ0cnVlXCI6IFwiXCIsIHByb3ApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJieXRlc1wiOiBnZW5cclxuICAgICAgICAgICAgKFwiZCVzPW8uYnl0ZXM9PT1TdHJpbmc/dXRpbC5iYXNlNjQuZW5jb2RlKG0lcywwLG0lcy5sZW5ndGgpOm8uYnl0ZXM9PT1BcnJheT9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtJXMpOm0lc1wiLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wLCBwcm9wKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBnZW5cclxuICAgICAgICAgICAgKFwiZCVzPW0lc1wiLCBwcm9wLCBwcm9wKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBnZW47XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJ1bnRpbWUgbWVzc2FnZSB0byBwbGFpbiBvYmplY3QgY29udmVydGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxyXG4gKiBAcGFyYW0ge1R5cGV9IG10eXBlIE1lc3NhZ2UgdHlwZVxyXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxyXG4gKi9cclxuY29udmVydGVyLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobXR5cGUpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lLCBibG9jay1zY29wZWQtdmFyLCBuby1yZWRlY2xhcmUgKi9cclxuICAgIHZhciBmaWVsZHMgPSBtdHlwZS5maWVsZHNBcnJheS5zbGljZSgpLnNvcnQodXRpbC5jb21wYXJlRmllbGRzQnlJZCk7XHJcbiAgICBpZiAoIWZpZWxkcy5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIHV0aWwuY29kZWdlbigpKFwicmV0dXJuIHt9XCIpO1xyXG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJtXCIsIFwib1wiXSwgbXR5cGUubmFtZSArIFwiJHRvT2JqZWN0XCIpXHJcbiAgICAoXCJpZighbylcIilcclxuICAgICAgICAoXCJvPXt9XCIpXHJcbiAgICAoXCJ2YXIgZD17fVwiKTtcclxuXHJcbiAgICB2YXIgcmVwZWF0ZWRGaWVsZHMgPSBbXSxcclxuICAgICAgICBtYXBGaWVsZHMgPSBbXSxcclxuICAgICAgICBub3JtYWxGaWVsZHMgPSBbXSxcclxuICAgICAgICBpID0gMDtcclxuICAgIGZvciAoOyBpIDwgZmllbGRzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgIGlmICghZmllbGRzW2ldLnBhcnRPZilcclxuICAgICAgICAgICAgKCBmaWVsZHNbaV0ucmVzb2x2ZSgpLnJlcGVhdGVkID8gcmVwZWF0ZWRGaWVsZHNcclxuICAgICAgICAgICAgOiBmaWVsZHNbaV0ubWFwID8gbWFwRmllbGRzXHJcbiAgICAgICAgICAgIDogbm9ybWFsRmllbGRzKS5wdXNoKGZpZWxkc1tpXSk7XHJcblxyXG4gICAgaWYgKHJlcGVhdGVkRmllbGRzLmxlbmd0aCkgeyBnZW5cclxuICAgIChcImlmKG8uYXJyYXlzfHxvLmRlZmF1bHRzKXtcIik7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlcGVhdGVkRmllbGRzLmxlbmd0aDsgKytpKSBnZW5cclxuICAgICAgICAoXCJkJXM9W11cIiwgdXRpbC5zYWZlUHJvcChyZXBlYXRlZEZpZWxkc1tpXS5uYW1lKSk7XHJcbiAgICAgICAgZ2VuXHJcbiAgICAoXCJ9XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtYXBGaWVsZHMubGVuZ3RoKSB7IGdlblxyXG4gICAgKFwiaWYoby5vYmplY3RzfHxvLmRlZmF1bHRzKXtcIik7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1hcEZpZWxkcy5sZW5ndGg7ICsraSkgZ2VuXHJcbiAgICAgICAgKFwiZCVzPXt9XCIsIHV0aWwuc2FmZVByb3AobWFwRmllbGRzW2ldLm5hbWUpKTtcclxuICAgICAgICBnZW5cclxuICAgIChcIn1cIik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5vcm1hbEZpZWxkcy5sZW5ndGgpIHsgZ2VuXHJcbiAgICAoXCJpZihvLmRlZmF1bHRzKXtcIik7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vcm1hbEZpZWxkcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgZmllbGQgPSBub3JtYWxGaWVsZHNbaV0sXHJcbiAgICAgICAgICAgICAgICBwcm9wICA9IHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtKSBnZW5cclxuICAgICAgICAoXCJkJXM9by5lbnVtcz09PVN0cmluZz8lajolalwiLCBwcm9wLCBmaWVsZC5yZXNvbHZlZFR5cGUudmFsdWVzQnlJZFtmaWVsZC50eXBlRGVmYXVsdF0sIGZpZWxkLnR5cGVEZWZhdWx0KTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQubG9uZykgZ2VuXHJcbiAgICAgICAgKFwiaWYodXRpbC5Mb25nKXtcIilcclxuICAgICAgICAgICAgKFwidmFyIG49bmV3IHV0aWwuTG9uZyglaSwlaSwlailcIiwgZmllbGQudHlwZURlZmF1bHQubG93LCBmaWVsZC50eXBlRGVmYXVsdC5oaWdoLCBmaWVsZC50eXBlRGVmYXVsdC51bnNpZ25lZClcclxuICAgICAgICAgICAgKFwiZCVzPW8ubG9uZ3M9PT1TdHJpbmc/bi50b1N0cmluZygpOm8ubG9uZ3M9PT1OdW1iZXI/bi50b051bWJlcigpOm5cIiwgcHJvcClcclxuICAgICAgICAoXCJ9ZWxzZVwiKVxyXG4gICAgICAgICAgICAoXCJkJXM9by5sb25ncz09PVN0cmluZz8lajolaVwiLCBwcm9wLCBmaWVsZC50eXBlRGVmYXVsdC50b1N0cmluZygpLCBmaWVsZC50eXBlRGVmYXVsdC50b051bWJlcigpKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQuYnl0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcnJheURlZmF1bHQgPSBcIltcIiArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZpZWxkLnR5cGVEZWZhdWx0KS5qb2luKFwiLFwiKSArIFwiXVwiO1xyXG4gICAgICAgICAgICAgICAgZ2VuXHJcbiAgICAgICAgKFwiaWYoby5ieXRlcz09PVN0cmluZylkJXM9JWpcIiwgcHJvcCwgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGZpZWxkLnR5cGVEZWZhdWx0KSlcclxuICAgICAgICAoXCJlbHNle1wiKVxyXG4gICAgICAgICAgICAoXCJkJXM9JXNcIiwgcHJvcCwgYXJyYXlEZWZhdWx0KVxyXG4gICAgICAgICAgICAoXCJpZihvLmJ5dGVzIT09QXJyYXkpZCVzPXV0aWwubmV3QnVmZmVyKGQlcylcIiwgcHJvcCwgcHJvcClcclxuICAgICAgICAoXCJ9XCIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgZ2VuXHJcbiAgICAgICAgKFwiZCVzPSVqXCIsIHByb3AsIGZpZWxkLnR5cGVEZWZhdWx0KTsgLy8gYWxzbyBtZXNzYWdlcyAoPW51bGwpXHJcbiAgICAgICAgfSBnZW5cclxuICAgIChcIn1cIik7XHJcbiAgICB9XHJcbiAgICB2YXIgaGFzS3MyID0gZmFsc2U7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgdmFyIGZpZWxkID0gZmllbGRzW2ldLFxyXG4gICAgICAgICAgICBpbmRleCA9IG10eXBlLl9maWVsZHNBcnJheS5pbmRleE9mKGZpZWxkKSxcclxuICAgICAgICAgICAgcHJvcCAgPSB1dGlsLnNhZmVQcm9wKGZpZWxkLm5hbWUpO1xyXG4gICAgICAgIGlmIChmaWVsZC5tYXApIHtcclxuICAgICAgICAgICAgaWYgKCFoYXNLczIpIHsgaGFzS3MyID0gdHJ1ZTsgZ2VuXHJcbiAgICAoXCJ2YXIga3MyXCIpO1xyXG4gICAgICAgICAgICB9IGdlblxyXG4gICAgKFwiaWYobSVzJiYoa3MyPU9iamVjdC5rZXlzKG0lcykpLmxlbmd0aCl7XCIsIHByb3AsIHByb3ApXHJcbiAgICAgICAgKFwiZCVzPXt9XCIsIHByb3ApXHJcbiAgICAgICAgKFwiZm9yKHZhciBqPTA7ajxrczIubGVuZ3RoOysrail7XCIpO1xyXG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QoZ2VuLCBmaWVsZCwgLyogc29ydGVkICovIGluZGV4LCBwcm9wICsgXCJba3MyW2pdXVwiKVxyXG4gICAgICAgIChcIn1cIik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkgeyBnZW5cclxuICAgIChcImlmKG0lcyYmbSVzLmxlbmd0aCl7XCIsIHByb3AsIHByb3ApXHJcbiAgICAgICAgKFwiZCVzPVtdXCIsIHByb3ApXHJcbiAgICAgICAgKFwiZm9yKHZhciBqPTA7ajxtJXMubGVuZ3RoOysrail7XCIsIHByb3ApO1xyXG4gICAgICAgICAgICBnZW5WYWx1ZVBhcnRpYWxfdG9PYmplY3QoZ2VuLCBmaWVsZCwgLyogc29ydGVkICovIGluZGV4LCBwcm9wICsgXCJbal1cIilcclxuICAgICAgICAoXCJ9XCIpO1xyXG4gICAgICAgIH0gZWxzZSB7IGdlblxyXG4gICAgKFwiaWYobSVzIT1udWxsJiZtLmhhc093blByb3BlcnR5KCVqKSl7XCIsIHByb3AsIGZpZWxkLm5hbWUpOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXHJcbiAgICAgICAgZ2VuVmFsdWVQYXJ0aWFsX3RvT2JqZWN0KGdlbiwgZmllbGQsIC8qIHNvcnRlZCAqLyBpbmRleCwgcHJvcCk7XHJcbiAgICAgICAgaWYgKGZpZWxkLnBhcnRPZikgZ2VuXHJcbiAgICAgICAgKFwiaWYoby5vbmVvZnMpXCIpXHJcbiAgICAgICAgICAgIChcImQlcz0lalwiLCB1dGlsLnNhZmVQcm9wKGZpZWxkLnBhcnRPZi5uYW1lKSwgZmllbGQubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdlblxyXG4gICAgKFwifVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZW5cclxuICAgIChcInJldHVybiBkXCIpO1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSwgYmxvY2stc2NvcGVkLXZhciwgbm8tcmVkZWNsYXJlICovXHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZXI7XHJcblxyXG52YXIgRW51bSAgICA9IHJlcXVpcmUoXCIuL2VudW1cIiksXHJcbiAgICB0eXBlcyAgID0gcmVxdWlyZShcIi4vdHlwZXNcIiksXHJcbiAgICB1dGlsICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxuXHJcbmZ1bmN0aW9uIG1pc3NpbmcoZmllbGQpIHtcclxuICAgIHJldHVybiBcIm1pc3NpbmcgcmVxdWlyZWQgJ1wiICsgZmllbGQubmFtZSArIFwiJ1wiO1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgZGVjb2RlciBzcGVjaWZpYyB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZS5cclxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcclxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcclxuICovXHJcbmZ1bmN0aW9uIGRlY29kZXIobXR5cGUpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXHJcbiAgICB2YXIgZ2VuID0gdXRpbC5jb2RlZ2VuKFtcInJcIiwgXCJsXCJdLCBtdHlwZS5uYW1lICsgXCIkZGVjb2RlXCIpXHJcbiAgICAoXCJpZighKHIgaW5zdGFuY2VvZiBSZWFkZXIpKVwiKVxyXG4gICAgICAgIChcInI9UmVhZGVyLmNyZWF0ZShyKVwiKVxyXG4gICAgKFwidmFyIGM9bD09PXVuZGVmaW5lZD9yLmxlbjpyLnBvcytsLG09bmV3IHRoaXMuY3RvclwiICsgKG10eXBlLmZpZWxkc0FycmF5LmZpbHRlcihmdW5jdGlvbihmaWVsZCkgeyByZXR1cm4gZmllbGQubWFwOyB9KS5sZW5ndGggPyBcIixrXCIgOiBcIlwiKSlcclxuICAgIChcIndoaWxlKHIucG9zPGMpe1wiKVxyXG4gICAgICAgIChcInZhciB0PXIudWludDMyKClcIik7XHJcbiAgICBpZiAobXR5cGUuZ3JvdXApIGdlblxyXG4gICAgICAgIChcImlmKCh0JjcpPT09NClcIilcclxuICAgICAgICAgICAgKFwiYnJlYWtcIik7XHJcbiAgICBnZW5cclxuICAgICAgICAoXCJzd2l0Y2godD4+PjMpe1wiKTtcclxuXHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICBmb3IgKDsgaSA8IC8qIGluaXRpYWxpemVzICovIG10eXBlLmZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgdmFyIGZpZWxkID0gbXR5cGUuX2ZpZWxkc0FycmF5W2ldLnJlc29sdmUoKSxcclxuICAgICAgICAgICAgdHlwZSAgPSBmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtID8gXCJpbnQzMlwiIDogZmllbGQudHlwZSxcclxuICAgICAgICAgICAgcmVmICAgPSBcIm1cIiArIHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7IGdlblxyXG4gICAgICAgICAgICAoXCJjYXNlICVpOlwiLCBmaWVsZC5pZCk7XHJcblxyXG4gICAgICAgIC8vIE1hcCBmaWVsZHNcclxuICAgICAgICBpZiAoZmllbGQubWFwKSB7IGdlblxyXG4gICAgICAgICAgICAgICAgKFwici5za2lwKCkucG9zKytcIikgLy8gYXNzdW1lcyBpZCAxICsga2V5IHdpcmVUeXBlXHJcbiAgICAgICAgICAgICAgICAoXCJpZiglcz09PXV0aWwuZW1wdHlPYmplY3QpXCIsIHJlZilcclxuICAgICAgICAgICAgICAgICAgICAoXCIlcz17fVwiLCByZWYpXHJcbiAgICAgICAgICAgICAgICAoXCJrPXIuJXMoKVwiLCBmaWVsZC5rZXlUeXBlKVxyXG4gICAgICAgICAgICAgICAgKFwici5wb3MrK1wiKTsgLy8gYXNzdW1lcyBpZCAyICsgdmFsdWUgd2lyZVR5cGVcclxuICAgICAgICAgICAgaWYgKHR5cGVzLmxvbmdbZmllbGQua2V5VHlwZV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVzLmJhc2ljW3R5cGVdID09PSB1bmRlZmluZWQpIGdlblxyXG4gICAgICAgICAgICAgICAgKFwiJXNbdHlwZW9mIGs9PT1cXFwib2JqZWN0XFxcIj91dGlsLmxvbmdUb0hhc2goayk6a109dHlwZXNbJWldLmRlY29kZShyLHIudWludDMyKCkpXCIsIHJlZiwgaSk7IC8vIGNhbid0IGJlIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgZWxzZSBnZW5cclxuICAgICAgICAgICAgICAgIChcIiVzW3R5cGVvZiBrPT09XFxcIm9iamVjdFxcXCI/dXRpbC5sb25nVG9IYXNoKGspOmtdPXIuJXMoKVwiLCByZWYsIHR5cGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVzLmJhc2ljW3R5cGVdID09PSB1bmRlZmluZWQpIGdlblxyXG4gICAgICAgICAgICAgICAgKFwiJXNba109dHlwZXNbJWldLmRlY29kZShyLHIudWludDMyKCkpXCIsIHJlZiwgaSk7IC8vIGNhbid0IGJlIGdyb3Vwc1xyXG4gICAgICAgICAgICAgICAgZWxzZSBnZW5cclxuICAgICAgICAgICAgICAgIChcIiVzW2tdPXIuJXMoKVwiLCByZWYsIHR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlcGVhdGVkIGZpZWxkc1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHsgZ2VuXHJcblxyXG4gICAgICAgICAgICAgICAgKFwiaWYoISglcyYmJXMubGVuZ3RoKSlcIiwgcmVmLCByZWYpXHJcbiAgICAgICAgICAgICAgICAgICAgKFwiJXM9W11cIiwgcmVmKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFBhY2thYmxlIChhbHdheXMgY2hlY2sgZm9yIGZvcndhcmQgYW5kIGJhY2t3YXJkIGNvbXBhdGlibGl0eSlcclxuICAgICAgICAgICAgaWYgKHR5cGVzLnBhY2tlZFt0eXBlXSAhPT0gdW5kZWZpbmVkKSBnZW5cclxuICAgICAgICAgICAgICAgIChcImlmKCh0JjcpPT09Mil7XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgKFwidmFyIGMyPXIudWludDMyKCkrci5wb3NcIilcclxuICAgICAgICAgICAgICAgICAgICAoXCJ3aGlsZShyLnBvczxjMilcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgKFwiJXMucHVzaChyLiVzKCkpXCIsIHJlZiwgdHlwZSlcclxuICAgICAgICAgICAgICAgIChcIn1lbHNlXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gTm9uLXBhY2tlZFxyXG4gICAgICAgICAgICBpZiAodHlwZXMuYmFzaWNbdHlwZV0gPT09IHVuZGVmaW5lZCkgZ2VuKGZpZWxkLnJlc29sdmVkVHlwZS5ncm91cFxyXG4gICAgICAgICAgICAgICAgICAgID8gXCIlcy5wdXNoKHR5cGVzWyVpXS5kZWNvZGUocikpXCJcclxuICAgICAgICAgICAgICAgICAgICA6IFwiJXMucHVzaCh0eXBlc1slaV0uZGVjb2RlKHIsci51aW50MzIoKSkpXCIsIHJlZiwgaSk7XHJcbiAgICAgICAgICAgIGVsc2UgZ2VuXHJcbiAgICAgICAgICAgICAgICAgICAgKFwiJXMucHVzaChyLiVzKCkpXCIsIHJlZiwgdHlwZSk7XHJcblxyXG4gICAgICAgIC8vIE5vbi1yZXBlYXRlZFxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZXMuYmFzaWNbdHlwZV0gPT09IHVuZGVmaW5lZCkgZ2VuKGZpZWxkLnJlc29sdmVkVHlwZS5ncm91cFxyXG4gICAgICAgICAgICAgICAgPyBcIiVzPXR5cGVzWyVpXS5kZWNvZGUocilcIlxyXG4gICAgICAgICAgICAgICAgOiBcIiVzPXR5cGVzWyVpXS5kZWNvZGUocixyLnVpbnQzMigpKVwiLCByZWYsIGkpO1xyXG4gICAgICAgIGVsc2UgZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCIlcz1yLiVzKClcIiwgcmVmLCB0eXBlKTtcclxuICAgICAgICBnZW5cclxuICAgICAgICAgICAgICAgIChcImJyZWFrXCIpO1xyXG4gICAgLy8gVW5rbm93biBmaWVsZHNcclxuICAgIH0gZ2VuXHJcbiAgICAgICAgICAgIChcImRlZmF1bHQ6XCIpXHJcbiAgICAgICAgICAgICAgICAoXCJyLnNraXBUeXBlKHQmNylcIilcclxuICAgICAgICAgICAgICAgIChcImJyZWFrXCIpXHJcblxyXG4gICAgICAgIChcIn1cIilcclxuICAgIChcIn1cIik7XHJcblxyXG4gICAgLy8gRmllbGQgcHJlc2VuY2VcclxuICAgIGZvciAoaSA9IDA7IGkgPCBtdHlwZS5fZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgcmZpZWxkID0gbXR5cGUuX2ZpZWxkc0FycmF5W2ldO1xyXG4gICAgICAgIGlmIChyZmllbGQucmVxdWlyZWQpIGdlblxyXG4gICAgKFwiaWYoIW0uaGFzT3duUHJvcGVydHkoJWopKVwiLCByZmllbGQubmFtZSlcclxuICAgICAgICAoXCJ0aHJvdyB1dGlsLlByb3RvY29sRXJyb3IoJWose2luc3RhbmNlOm19KVwiLCBtaXNzaW5nKHJmaWVsZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZW5cclxuICAgIChcInJldHVybiBtXCIpO1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZXI7XHJcblxyXG52YXIgRW51bSAgICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxyXG4gICAgdHlwZXMgICAgPSByZXF1aXJlKFwiLi90eXBlc1wiKSxcclxuICAgIHV0aWwgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBwYXJ0aWFsIG1lc3NhZ2UgdHlwZSBlbmNvZGVyLlxyXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJbmRleCBGaWVsZCBpbmRleFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmIFZhcmlhYmxlIHJlZmVyZW5jZVxyXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5UeXBlUGFydGlhbChnZW4sIGZpZWxkLCBmaWVsZEluZGV4LCByZWYpIHtcclxuICAgIHJldHVybiBmaWVsZC5yZXNvbHZlZFR5cGUuZ3JvdXBcclxuICAgICAgICA/IGdlbihcInR5cGVzWyVpXS5lbmNvZGUoJXMsdy51aW50MzIoJWkpKS51aW50MzIoJWkpXCIsIGZpZWxkSW5kZXgsIHJlZiwgKGZpZWxkLmlkIDw8IDMgfCAzKSA+Pj4gMCwgKGZpZWxkLmlkIDw8IDMgfCA0KSA+Pj4gMClcclxuICAgICAgICA6IGdlbihcInR5cGVzWyVpXS5lbmNvZGUoJXMsdy51aW50MzIoJWkpLmZvcmsoKSkubGRlbGltKClcIiwgZmllbGRJbmRleCwgcmVmLCAoZmllbGQuaWQgPDwgMyB8IDIpID4+PiAwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhbiBlbmNvZGVyIHNwZWNpZmljIHRvIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSB0eXBlLlxyXG4gKiBAcGFyYW0ge1R5cGV9IG10eXBlIE1lc3NhZ2UgdHlwZVxyXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlcihtdHlwZSkge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xyXG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJtXCIsIFwid1wiXSwgbXR5cGUubmFtZSArIFwiJGVuY29kZVwiKVxyXG4gICAgKFwiaWYoIXcpXCIpXHJcbiAgICAgICAgKFwidz1Xcml0ZXIuY3JlYXRlKClcIik7XHJcblxyXG4gICAgdmFyIGksIHJlZjtcclxuXHJcbiAgICAvLyBcIndoZW4gYSBtZXNzYWdlIGlzIHNlcmlhbGl6ZWQgaXRzIGtub3duIGZpZWxkcyBzaG91bGQgYmUgd3JpdHRlbiBzZXF1ZW50aWFsbHkgYnkgZmllbGQgbnVtYmVyXCJcclxuICAgIHZhciBmaWVsZHMgPSAvKiBpbml0aWFsaXplcyAqLyBtdHlwZS5maWVsZHNBcnJheS5zbGljZSgpLnNvcnQodXRpbC5jb21wYXJlRmllbGRzQnlJZCk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgZmllbGQgICAgPSBmaWVsZHNbaV0ucmVzb2x2ZSgpLFxyXG4gICAgICAgICAgICBpbmRleCAgICA9IG10eXBlLl9maWVsZHNBcnJheS5pbmRleE9mKGZpZWxkKSxcclxuICAgICAgICAgICAgdHlwZSAgICAgPSBmaWVsZC5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBFbnVtID8gXCJpbnQzMlwiIDogZmllbGQudHlwZSxcclxuICAgICAgICAgICAgd2lyZVR5cGUgPSB0eXBlcy5iYXNpY1t0eXBlXTtcclxuICAgICAgICAgICAgcmVmICAgICAgPSBcIm1cIiArIHV0aWwuc2FmZVByb3AoZmllbGQubmFtZSk7XHJcblxyXG4gICAgICAgIC8vIE1hcCBmaWVsZHNcclxuICAgICAgICBpZiAoZmllbGQubWFwKSB7XHJcbiAgICAgICAgICAgIGdlblxyXG4gICAgKFwiaWYoJXMhPW51bGwmJm0uaGFzT3duUHJvcGVydHkoJWopKXtcIiwgcmVmLCBmaWVsZC5uYW1lKSAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXHJcbiAgICAgICAgKFwiZm9yKHZhciBrcz1PYmplY3Qua2V5cyglcyksaT0wO2k8a3MubGVuZ3RoOysraSl7XCIsIHJlZilcclxuICAgICAgICAgICAgKFwidy51aW50MzIoJWkpLmZvcmsoKS51aW50MzIoJWkpLiVzKGtzW2ldKVwiLCAoZmllbGQuaWQgPDwgMyB8IDIpID4+PiAwLCA4IHwgdHlwZXMubWFwS2V5W2ZpZWxkLmtleVR5cGVdLCBmaWVsZC5rZXlUeXBlKTtcclxuICAgICAgICAgICAgaWYgKHdpcmVUeXBlID09PSB1bmRlZmluZWQpIGdlblxyXG4gICAgICAgICAgICAoXCJ0eXBlc1slaV0uZW5jb2RlKCVzW2tzW2ldXSx3LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKS5sZGVsaW0oKVwiLCBpbmRleCwgcmVmKTsgLy8gY2FuJ3QgYmUgZ3JvdXBzXHJcbiAgICAgICAgICAgIGVsc2UgZ2VuXHJcbiAgICAgICAgICAgIChcIi51aW50MzIoJWkpLiVzKCVzW2tzW2ldXSkubGRlbGltKClcIiwgMTYgfCB3aXJlVHlwZSwgdHlwZSwgcmVmKTtcclxuICAgICAgICAgICAgZ2VuXHJcbiAgICAgICAgKFwifVwiKVxyXG4gICAgKFwifVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlcGVhdGVkIGZpZWxkc1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHsgZ2VuXHJcbiAgICAoXCJpZiglcyE9bnVsbCYmJXMubGVuZ3RoKXtcIiwgcmVmLCByZWYpOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXHJcblxyXG4gICAgICAgICAgICAvLyBQYWNrZWQgcmVwZWF0ZWRcclxuICAgICAgICAgICAgaWYgKGZpZWxkLnBhY2tlZCAmJiB0eXBlcy5wYWNrZWRbdHlwZV0gIT09IHVuZGVmaW5lZCkgeyBnZW5cclxuXHJcbiAgICAgICAgKFwidy51aW50MzIoJWkpLmZvcmsoKVwiLCAoZmllbGQuaWQgPDwgMyB8IDIpID4+PiAwKVxyXG4gICAgICAgIChcImZvcih2YXIgaT0wO2k8JXMubGVuZ3RoOysraSlcIiwgcmVmKVxyXG4gICAgICAgICAgICAoXCJ3LiVzKCVzW2ldKVwiLCB0eXBlLCByZWYpXHJcbiAgICAgICAgKFwidy5sZGVsaW0oKVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE5vbi1wYWNrZWRcclxuICAgICAgICAgICAgfSBlbHNlIHsgZ2VuXHJcblxyXG4gICAgICAgIChcImZvcih2YXIgaT0wO2k8JXMubGVuZ3RoOysraSlcIiwgcmVmKTtcclxuICAgICAgICAgICAgICAgIGlmICh3aXJlVHlwZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBnZW5UeXBlUGFydGlhbChnZW4sIGZpZWxkLCBpbmRleCwgcmVmICsgXCJbaV1cIik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGdlblxyXG4gICAgICAgICAgICAoXCJ3LnVpbnQzMiglaSkuJXMoJXNbaV0pXCIsIChmaWVsZC5pZCA8PCAzIHwgd2lyZVR5cGUpID4+PiAwLCB0eXBlLCByZWYpO1xyXG5cclxuICAgICAgICAgICAgfSBnZW5cclxuICAgIChcIn1cIik7XHJcblxyXG4gICAgICAgIC8vIE5vbi1yZXBlYXRlZFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChmaWVsZC5vcHRpb25hbCkgZ2VuXHJcbiAgICAoXCJpZiglcyE9bnVsbCYmbS5oYXNPd25Qcm9wZXJ0eSglaikpXCIsIHJlZiwgZmllbGQubmFtZSk7IC8vICE9PSB1bmRlZmluZWQgJiYgIT09IG51bGxcclxuXHJcbiAgICAgICAgICAgIGlmICh3aXJlVHlwZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIGdlblR5cGVQYXJ0aWFsKGdlbiwgZmllbGQsIGluZGV4LCByZWYpO1xyXG4gICAgICAgICAgICBlbHNlIGdlblxyXG4gICAgICAgIChcIncudWludDMyKCVpKS4lcyglcylcIiwgKGZpZWxkLmlkIDw8IDMgfCB3aXJlVHlwZSkgPj4+IDAsIHR5cGUsIHJlZik7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZ2VuXHJcbiAgICAoXCJyZXR1cm4gd1wiKTtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUsIGJsb2NrLXNjb3BlZC12YXIsIG5vLXJlZGVjbGFyZSAqL1xyXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gRW51bTtcclxuXHJcbi8vIGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxyXG52YXIgUmVmbGVjdGlvbk9iamVjdCA9IHJlcXVpcmUoXCIuL29iamVjdFwiKTtcclxuKChFbnVtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEVudW0pLmNsYXNzTmFtZSA9IFwiRW51bVwiO1xyXG5cclxudmFyIE5hbWVzcGFjZSA9IHJlcXVpcmUoXCIuL25hbWVzcGFjZVwiKSxcclxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgZW51bSBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgZW51bS5cclxuICogQGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVW5pcXVlIG5hbWUgd2l0aGluIGl0cyBuYW1lc3BhY2VcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fSBbdmFsdWVzXSBFbnVtIHZhbHVlcyBhcyBhbiBvYmplY3QsIGJ5IG5hbWVcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcclxuICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSBUaGUgY29tbWVudCBmb3IgdGhpcyBlbnVtXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPn0gW2NvbW1lbnRzXSBUaGUgdmFsdWUgY29tbWVudHMgZm9yIHRoaXMgZW51bVxyXG4gKi9cclxuZnVuY3Rpb24gRW51bShuYW1lLCB2YWx1ZXMsIG9wdGlvbnMsIGNvbW1lbnQsIGNvbW1lbnRzKSB7XHJcbiAgICBSZWZsZWN0aW9uT2JqZWN0LmNhbGwodGhpcywgbmFtZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgaWYgKHZhbHVlcyAmJiB0eXBlb2YgdmFsdWVzICE9PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInZhbHVlcyBtdXN0IGJlIGFuIG9iamVjdFwiKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVudW0gdmFsdWVzIGJ5IGlkLlxyXG4gICAgICogQHR5cGUge09iamVjdC48bnVtYmVyLHN0cmluZz59XHJcbiAgICAgKi9cclxuICAgIHRoaXMudmFsdWVzQnlJZCA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW51bSB2YWx1ZXMgYnkgbmFtZS5cclxuICAgICAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxyXG4gICAgICovXHJcbiAgICB0aGlzLnZhbHVlcyA9IE9iamVjdC5jcmVhdGUodGhpcy52YWx1ZXNCeUlkKTsgLy8gdG9KU09OLCBtYXJrZXJcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVudW0gY29tbWVudCB0ZXh0LlxyXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmNvbW1lbnQgPSBjb21tZW50O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsdWUgY29tbWVudCB0ZXh0cywgaWYgYW55LlxyXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLHN0cmluZz59XHJcbiAgICAgKi9cclxuICAgIHRoaXMuY29tbWVudHMgPSBjb21tZW50cyB8fCB7fTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2VydmVkIHJhbmdlcywgaWYgYW55LlxyXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXJbXXxzdHJpbmc+fVxyXG4gICAgICovXHJcbiAgICB0aGlzLnJlc2VydmVkID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cclxuXHJcbiAgICAvLyBOb3RlIHRoYXQgdmFsdWVzIGluaGVyaXQgdmFsdWVzQnlJZCBvbiB0aGVpciBwcm90b3R5cGUgd2hpY2ggbWFrZXMgdGhlbSBhIFR5cGVTY3JpcHQtXHJcbiAgICAvLyBjb21wYXRpYmxlIGVudW0uIFRoaXMgaXMgdXNlZCBieSBwYnRzIHRvIHdyaXRlIGFjdHVhbCBlbnVtIGRlZmluaXRpb25zIHRoYXQgd29yayBmb3JcclxuICAgIC8vIHN0YXRpYyBhbmQgcmVmbGVjdGlvbiBjb2RlIGFsaWtlIGluc3RlYWQgb2YgZW1pdHRpbmcgZ2VuZXJpYyBvYmplY3QgZGVmaW5pdGlvbnMuXHJcblxyXG4gICAgaWYgKHZhbHVlcylcclxuICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlc1trZXlzW2ldXSA9PT0gXCJudW1iZXJcIikgLy8gdXNlIGZvcndhcmQgZW50cmllcyBvbmx5XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc0J5SWRbIHRoaXMudmFsdWVzW2tleXNbaV1dID0gdmFsdWVzW2tleXNbaV1dIF0gPSBrZXlzW2ldO1xyXG59XHJcblxyXG4vKipcclxuICogRW51bSBkZXNjcmlwdG9yLlxyXG4gKiBAaW50ZXJmYWNlIElFbnVtXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn0gdmFsdWVzIEVudW0gdmFsdWVzXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBFbnVtIG9wdGlvbnNcclxuICovXHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhbiBlbnVtIGZyb20gYW4gZW51bSBkZXNjcmlwdG9yLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFbnVtIG5hbWVcclxuICogQHBhcmFtIHtJRW51bX0ganNvbiBFbnVtIGRlc2NyaXB0b3JcclxuICogQHJldHVybnMge0VudW19IENyZWF0ZWQgZW51bVxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxyXG4gKi9cclxuRW51bS5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKG5hbWUsIGpzb24pIHtcclxuICAgIHZhciBlbm0gPSBuZXcgRW51bShuYW1lLCBqc29uLnZhbHVlcywganNvbi5vcHRpb25zLCBqc29uLmNvbW1lbnQsIGpzb24uY29tbWVudHMpO1xyXG4gICAgZW5tLnJlc2VydmVkID0ganNvbi5yZXNlcnZlZDtcclxuICAgIHJldHVybiBlbm07XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBlbnVtIHRvIGFuIGVudW0gZGVzY3JpcHRvci5cclxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtJRW51bX0gRW51bSBkZXNjcmlwdG9yXHJcbiAqL1xyXG5FbnVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xyXG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xyXG4gICAgcmV0dXJuIHV0aWwudG9PYmplY3QoW1xyXG4gICAgICAgIFwib3B0aW9uc1wiICAsIHRoaXMub3B0aW9ucyxcclxuICAgICAgICBcInZhbHVlc1wiICAgLCB0aGlzLnZhbHVlcyxcclxuICAgICAgICBcInJlc2VydmVkXCIgLCB0aGlzLnJlc2VydmVkICYmIHRoaXMucmVzZXJ2ZWQubGVuZ3RoID8gdGhpcy5yZXNlcnZlZCA6IHVuZGVmaW5lZCxcclxuICAgICAgICBcImNvbW1lbnRcIiAgLCBrZWVwQ29tbWVudHMgPyB0aGlzLmNvbW1lbnQgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgXCJjb21tZW50c1wiICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50cyA6IHVuZGVmaW5lZFxyXG4gICAgXSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhIHZhbHVlIHRvIHRoaXMgZW51bS5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVmFsdWUgbmFtZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgVmFsdWUgaWRcclxuICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSBDb21tZW50LCBpZiBhbnlcclxuICogQHJldHVybnMge0VudW19IGB0aGlzYFxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgaXMgYWxyZWFkeSBhIHZhbHVlIHdpdGggdGhpcyBuYW1lIG9yIGlkXHJcbiAqL1xyXG5FbnVtLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQobmFtZSwgaWQsIGNvbW1lbnQpIHtcclxuICAgIC8vIHV0aWxpemVkIGJ5IHRoZSBwYXJzZXIgYnV0IG5vdCBieSAuZnJvbUpTT05cclxuXHJcbiAgICBpZiAoIXV0aWwuaXNTdHJpbmcobmFtZSkpXHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwibmFtZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG5cclxuICAgIGlmICghdXRpbC5pc0ludGVnZXIoaWQpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImlkIG11c3QgYmUgYW4gaW50ZWdlclwiKTtcclxuXHJcbiAgICBpZiAodGhpcy52YWx1ZXNbbmFtZV0gIT09IHVuZGVmaW5lZClcclxuICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBuYW1lICdcIiArIG5hbWUgKyBcIicgaW4gXCIgKyB0aGlzKTtcclxuXHJcbiAgICBpZiAodGhpcy5pc1Jlc2VydmVkSWQoaWQpKVxyXG4gICAgICAgIHRocm93IEVycm9yKFwiaWQgXCIgKyBpZCArIFwiIGlzIHJlc2VydmVkIGluIFwiICsgdGhpcyk7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNSZXNlcnZlZE5hbWUobmFtZSkpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJuYW1lICdcIiArIG5hbWUgKyBcIicgaXMgcmVzZXJ2ZWQgaW4gXCIgKyB0aGlzKTtcclxuXHJcbiAgICBpZiAodGhpcy52YWx1ZXNCeUlkW2lkXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCEodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5hbGxvd19hbGlhcykpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiZHVwbGljYXRlIGlkIFwiICsgaWQgKyBcIiBpbiBcIiArIHRoaXMpO1xyXG4gICAgICAgIHRoaXMudmFsdWVzW25hbWVdID0gaWQ7XHJcbiAgICB9IGVsc2VcclxuICAgICAgICB0aGlzLnZhbHVlc0J5SWRbdGhpcy52YWx1ZXNbbmFtZV0gPSBpZF0gPSBuYW1lO1xyXG5cclxuICAgIHRoaXMuY29tbWVudHNbbmFtZV0gPSBjb21tZW50IHx8IG51bGw7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSB0aGlzIGVudW1cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVmFsdWUgbmFtZVxyXG4gKiBAcmV0dXJucyB7RW51bX0gYHRoaXNgXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgbmFtZWAgaXMgbm90IGEgbmFtZSBvZiB0aGlzIGVudW1cclxuICovXHJcbkVudW0ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XHJcblxyXG4gICAgaWYgKCF1dGlsLmlzU3RyaW5nKG5hbWUpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIm5hbWUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcclxuXHJcbiAgICB2YXIgdmFsID0gdGhpcy52YWx1ZXNbbmFtZV07XHJcbiAgICBpZiAodmFsID09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJuYW1lICdcIiArIG5hbWUgKyBcIicgZG9lcyBub3QgZXhpc3QgaW4gXCIgKyB0aGlzKTtcclxuXHJcbiAgICBkZWxldGUgdGhpcy52YWx1ZXNCeUlkW3ZhbF07XHJcbiAgICBkZWxldGUgdGhpcy52YWx1ZXNbbmFtZV07XHJcbiAgICBkZWxldGUgdGhpcy5jb21tZW50c1tuYW1lXTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIGlkIGlzIHJlc2VydmVkLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgSWQgdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHJlc2VydmVkLCBvdGhlcndpc2UgYGZhbHNlYFxyXG4gKi9cclxuRW51bS5wcm90b3R5cGUuaXNSZXNlcnZlZElkID0gZnVuY3Rpb24gaXNSZXNlcnZlZElkKGlkKSB7XHJcbiAgICByZXR1cm4gTmFtZXNwYWNlLmlzUmVzZXJ2ZWRJZCh0aGlzLnJlc2VydmVkLCBpZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBuYW1lIGlzIHJlc2VydmVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcclxuICovXHJcbkVudW0ucHJvdG90eXBlLmlzUmVzZXJ2ZWROYW1lID0gZnVuY3Rpb24gaXNSZXNlcnZlZE5hbWUobmFtZSkge1xyXG4gICAgcmV0dXJuIE5hbWVzcGFjZS5pc1Jlc2VydmVkTmFtZSh0aGlzLnJlc2VydmVkLCBuYW1lKTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gRmllbGQ7XHJcblxyXG4vLyBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcclxudmFyIFJlZmxlY3Rpb25PYmplY3QgPSByZXF1aXJlKFwiLi9vYmplY3RcIik7XHJcbigoRmllbGQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gRmllbGQpLmNsYXNzTmFtZSA9IFwiRmllbGRcIjtcclxuXHJcbnZhciBFbnVtICA9IHJlcXVpcmUoXCIuL2VudW1cIiksXHJcbiAgICB0eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpLFxyXG4gICAgdXRpbCAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5cclxudmFyIFR5cGU7IC8vIGN5Y2xpY1xyXG5cclxudmFyIHJ1bGVSZSA9IC9ecmVxdWlyZWR8b3B0aW9uYWx8cmVwZWF0ZWQkLztcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc3NhZ2UgZmllbGQgaW5zdGFuY2UuIE5vdGUgdGhhdCB7QGxpbmsgTWFwRmllbGR8bWFwIGZpZWxkc30gaGF2ZSB0aGVpciBvd24gY2xhc3MuXHJcbiAqIEBuYW1lIEZpZWxkXHJcbiAqIEBjbGFzc2Rlc2MgUmVmbGVjdGVkIG1lc3NhZ2UgZmllbGQuXHJcbiAqIEBleHRlbmRzIEZpZWxkQmFzZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVW5pcXVlIG5hbWUgd2l0aGluIGl0cyBuYW1lc3BhY2VcclxuICogQHBhcmFtIHtudW1iZXJ9IGlkIFVuaXF1ZSBpZCB3aXRoaW4gaXRzIG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBWYWx1ZSB0eXBlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nLCo+fSBbcnVsZT1cIm9wdGlvbmFsXCJdIEZpZWxkIHJ1bGVcclxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmcsKj59IFtleHRlbmRdIEV4dGVuZGVkIHR5cGUgaWYgZGlmZmVyZW50IGZyb20gcGFyZW50XHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBmaWVsZCBmcm9tIGEgZmllbGQgZGVzY3JpcHRvci5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmllbGQgbmFtZVxyXG4gKiBAcGFyYW0ge0lGaWVsZH0ganNvbiBGaWVsZCBkZXNjcmlwdG9yXHJcbiAqIEByZXR1cm5zIHtGaWVsZH0gQ3JlYXRlZCBmaWVsZFxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxyXG4gKi9cclxuRmllbGQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XHJcbiAgICByZXR1cm4gbmV3IEZpZWxkKG5hbWUsIGpzb24uaWQsIGpzb24udHlwZSwganNvbi5ydWxlLCBqc29uLmV4dGVuZCwganNvbi5vcHRpb25zLCBqc29uLmNvbW1lbnQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE5vdCBhbiBhY3R1YWwgY29uc3RydWN0b3IuIFVzZSB7QGxpbmsgRmllbGR9IGluc3RlYWQuXHJcbiAqIEBjbGFzc2Rlc2MgQmFzZSBjbGFzcyBvZiBhbGwgcmVmbGVjdGVkIG1lc3NhZ2UgZmllbGRzLiBUaGlzIGlzIG5vdCBhbiBhY3R1YWwgY2xhc3MgYnV0IGhlcmUgZm9yIHRoZSBzYWtlIG9mIGhhdmluZyBjb25zaXN0ZW50IHR5cGUgZGVmaW5pdGlvbnMuXHJcbiAqIEBleHBvcnRzIEZpZWxkQmFzZVxyXG4gKiBAZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBVbmlxdWUgbmFtZSB3aXRoaW4gaXRzIG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgVW5pcXVlIGlkIHdpdGhpbiBpdHMgbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFZhbHVlIHR5cGVcclxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmcsKj59IFtydWxlPVwib3B0aW9uYWxcIl0gRmllbGQgcnVsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZywqPn0gW2V4dGVuZF0gRXh0ZW5kZWQgdHlwZSBpZiBkaWZmZXJlbnQgZnJvbSBwYXJlbnRcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcclxuICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSBDb21tZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGZpZWxkXHJcbiAqL1xyXG5mdW5jdGlvbiBGaWVsZChuYW1lLCBpZCwgdHlwZSwgcnVsZSwgZXh0ZW5kLCBvcHRpb25zLCBjb21tZW50KSB7XHJcblxyXG4gICAgaWYgKHV0aWwuaXNPYmplY3QocnVsZSkpIHtcclxuICAgICAgICBjb21tZW50ID0gZXh0ZW5kO1xyXG4gICAgICAgIG9wdGlvbnMgPSBydWxlO1xyXG4gICAgICAgIHJ1bGUgPSBleHRlbmQgPSB1bmRlZmluZWQ7XHJcbiAgICB9IGVsc2UgaWYgKHV0aWwuaXNPYmplY3QoZXh0ZW5kKSkge1xyXG4gICAgICAgIGNvbW1lbnQgPSBvcHRpb25zO1xyXG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQ7XHJcbiAgICAgICAgZXh0ZW5kID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcclxuXHJcbiAgICBpZiAoIXV0aWwuaXNJbnRlZ2VyKGlkKSB8fCBpZCA8IDApXHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiaWQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyXCIpO1xyXG5cclxuICAgIGlmICghdXRpbC5pc1N0cmluZyh0eXBlKSlcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJ0eXBlIG11c3QgYmUgYSBzdHJpbmdcIik7XHJcblxyXG4gICAgaWYgKHJ1bGUgIT09IHVuZGVmaW5lZCAmJiAhcnVsZVJlLnRlc3QocnVsZSA9IHJ1bGUudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSlcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJydWxlIG11c3QgYmUgYSBzdHJpbmcgcnVsZVwiKTtcclxuXHJcbiAgICBpZiAoZXh0ZW5kICE9PSB1bmRlZmluZWQgJiYgIXV0aWwuaXNTdHJpbmcoZXh0ZW5kKSlcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJleHRlbmQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpZWxkIHJ1bGUsIGlmIGFueS5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICB0aGlzLnJ1bGUgPSBydWxlICYmIHJ1bGUgIT09IFwib3B0aW9uYWxcIiA/IHJ1bGUgOiB1bmRlZmluZWQ7IC8vIHRvSlNPTlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmllbGQgdHlwZS5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRoaXMudHlwZSA9IHR5cGU7IC8vIHRvSlNPTlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVW5pcXVlIGZpZWxkIGlkLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5pZCA9IGlkOyAvLyB0b0pTT04sIG1hcmtlclxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXh0ZW5kZWQgdHlwZSBpZiBkaWZmZXJlbnQgZnJvbSBwYXJlbnQuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5leHRlbmQgPSBleHRlbmQgfHwgdW5kZWZpbmVkOyAvLyB0b0pTT05cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyByZXF1aXJlZC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLnJlcXVpcmVkID0gcnVsZSA9PT0gXCJyZXF1aXJlZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGlzIGZpZWxkIGlzIG9wdGlvbmFsLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHRoaXMub3B0aW9uYWwgPSAhdGhpcy5yZXF1aXJlZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCBpcyByZXBlYXRlZC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLnJlcGVhdGVkID0gcnVsZSA9PT0gXCJyZXBlYXRlZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGlzIGZpZWxkIGlzIGEgbWFwIG9yIG5vdC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLm1hcCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWVzc2FnZSB0aGlzIGZpZWxkIGJlbG9uZ3MgdG8uXHJcbiAgICAgKiBAdHlwZSB7VHlwZXxudWxsfVxyXG4gICAgICovXHJcbiAgICB0aGlzLm1lc3NhZ2UgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT25lT2YgdGhpcyBmaWVsZCBiZWxvbmdzIHRvLCBpZiBhbnksXHJcbiAgICAgKiBAdHlwZSB7T25lT2Z8bnVsbH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5wYXJ0T2YgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZpZWxkIHR5cGUncyBkZWZhdWx0IHZhbHVlLlxyXG4gICAgICogQHR5cGUgeyp9XHJcbiAgICAgKi9cclxuICAgIHRoaXMudHlwZURlZmF1bHQgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZpZWxkJ3MgZGVmYXVsdCB2YWx1ZSBvbiBwcm90b3R5cGVzLlxyXG4gICAgICogQHR5cGUgeyp9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCdzIHZhbHVlIHNob3VsZCBiZSB0cmVhdGVkIGFzIGEgbG9uZy5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxvbmcgPSB1dGlsLkxvbmcgPyB0eXBlcy5sb25nW3R5cGVdICE9PSB1bmRlZmluZWQgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhpcyBmaWVsZCdzIHZhbHVlIGlzIGEgYnVmZmVyLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHRoaXMuYnl0ZXMgPSB0eXBlID09PSBcImJ5dGVzXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlZCB0eXBlIGlmIG5vdCBhIGJhc2ljIHR5cGUuXHJcbiAgICAgKiBAdHlwZSB7VHlwZXxFbnVtfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNpc3Rlci1maWVsZCB3aXRoaW4gdGhlIGV4dGVuZGVkIHR5cGUgaWYgYSBkZWNsYXJpbmcgZXh0ZW5zaW9uIGZpZWxkLlxyXG4gICAgICogQHR5cGUge0ZpZWxkfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuZXh0ZW5zaW9uRmllbGQgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2lzdGVyLWZpZWxkIHdpdGhpbiB0aGUgZGVjbGFyaW5nIG5hbWVzcGFjZSBpZiBhbiBleHRlbmRlZCBmaWVsZC5cclxuICAgICAqIEB0eXBlIHtGaWVsZHxudWxsfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmRlY2xhcmluZ0ZpZWxkID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsbHkgcmVtZW1iZXJzIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBwYWNrZWQuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbnxudWxsfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fcGFja2VkID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbW1lbnQgZm9yIHRoaXMgZmllbGQuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBwYWNrZWQuIE9ubHkgcmVsZXZhbnQgd2hlbiByZXBlYXRlZCBhbmQgd29ya2luZyB3aXRoIHByb3RvMi5cclxuICogQG5hbWUgRmllbGQjcGFja2VkXHJcbiAqIEB0eXBlIHtib29sZWFufVxyXG4gKiBAcmVhZG9ubHlcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWVsZC5wcm90b3R5cGUsIFwicGFja2VkXCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gZGVmYXVsdHMgdG8gcGFja2VkPXRydWUgaWYgbm90IGV4cGxpY2l0eSBzZXQgdG8gZmFsc2VcclxuICAgICAgICBpZiAodGhpcy5fcGFja2VkID09PSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLl9wYWNrZWQgPSB0aGlzLmdldE9wdGlvbihcInBhY2tlZFwiKSAhPT0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhY2tlZDtcclxuICAgIH1cclxufSk7XHJcblxyXG4vKipcclxuICogQG92ZXJyaWRlXHJcbiAqL1xyXG5GaWVsZC5wcm90b3R5cGUuc2V0T3B0aW9uID0gZnVuY3Rpb24gc2V0T3B0aW9uKG5hbWUsIHZhbHVlLCBpZk5vdFNldCkge1xyXG4gICAgaWYgKG5hbWUgPT09IFwicGFja2VkXCIpIC8vIGNsZWFyIGNhY2hlZCBiZWZvcmUgc2V0dGluZ1xyXG4gICAgICAgIHRoaXMuX3BhY2tlZCA9IG51bGw7XHJcbiAgICByZXR1cm4gUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUuc2V0T3B0aW9uLmNhbGwodGhpcywgbmFtZSwgdmFsdWUsIGlmTm90U2V0KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGaWVsZCBkZXNjcmlwdG9yLlxyXG4gKiBAaW50ZXJmYWNlIElGaWVsZFxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3J1bGU9XCJvcHRpb25hbFwiXSBGaWVsZCBydWxlXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIEZpZWxkIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGlkIEZpZWxkIGlkXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBGaWVsZCBvcHRpb25zXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEV4dGVuc2lvbiBmaWVsZCBkZXNjcmlwdG9yLlxyXG4gKiBAaW50ZXJmYWNlIElFeHRlbnNpb25GaWVsZFxyXG4gKiBAZXh0ZW5kcyBJRmllbGRcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IGV4dGVuZCBFeHRlbmRlZCB0eXBlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgZmllbGQgdG8gYSBmaWVsZCBkZXNjcmlwdG9yLlxyXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcclxuICogQHJldHVybnMge0lGaWVsZH0gRmllbGQgZGVzY3JpcHRvclxyXG4gKi9cclxuRmllbGQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XHJcbiAgICB2YXIga2VlcENvbW1lbnRzID0gdG9KU09OT3B0aW9ucyA/IEJvb2xlYW4odG9KU09OT3B0aW9ucy5rZWVwQ29tbWVudHMpIDogZmFsc2U7XHJcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXHJcbiAgICAgICAgXCJydWxlXCIgICAgLCB0aGlzLnJ1bGUgIT09IFwib3B0aW9uYWxcIiAmJiB0aGlzLnJ1bGUgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIFwidHlwZVwiICAgICwgdGhpcy50eXBlLFxyXG4gICAgICAgIFwiaWRcIiAgICAgICwgdGhpcy5pZCxcclxuICAgICAgICBcImV4dGVuZFwiICAsIHRoaXMuZXh0ZW5kLFxyXG4gICAgICAgIFwib3B0aW9uc1wiICwgdGhpcy5vcHRpb25zLFxyXG4gICAgICAgIFwiY29tbWVudFwiICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkXHJcbiAgICBdKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXNvbHZlcyB0aGlzIGZpZWxkJ3MgdHlwZSByZWZlcmVuY2VzLlxyXG4gKiBAcmV0dXJucyB7RmllbGR9IGB0aGlzYFxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYW55IHJlZmVyZW5jZSBjYW5ub3QgYmUgcmVzb2x2ZWRcclxuICovXHJcbkZpZWxkLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSgpIHtcclxuXHJcbiAgICBpZiAodGhpcy5yZXNvbHZlZClcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICBpZiAoKHRoaXMudHlwZURlZmF1bHQgPSB0eXBlcy5kZWZhdWx0c1t0aGlzLnR5cGVdKSA9PT0gdW5kZWZpbmVkKSB7IC8vIGlmIG5vdCBhIGJhc2ljIHR5cGUsIHJlc29sdmUgaXRcclxuICAgICAgICB0aGlzLnJlc29sdmVkVHlwZSA9ICh0aGlzLmRlY2xhcmluZ0ZpZWxkID8gdGhpcy5kZWNsYXJpbmdGaWVsZC5wYXJlbnQgOiB0aGlzLnBhcmVudCkubG9va3VwVHlwZU9yRW51bSh0aGlzLnR5cGUpO1xyXG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFR5cGUpXHJcbiAgICAgICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSBudWxsO1xyXG4gICAgICAgIGVsc2UgLy8gaW5zdGFuY2VvZiBFbnVtXHJcbiAgICAgICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSB0aGlzLnJlc29sdmVkVHlwZS52YWx1ZXNbT2JqZWN0LmtleXModGhpcy5yZXNvbHZlZFR5cGUudmFsdWVzKVswXV07IC8vIGZpcnN0IGRlZmluZWRcclxuICAgIH1cclxuXHJcbiAgICAvLyB1c2UgZXhwbGljaXRseSBzZXQgZGVmYXVsdCB2YWx1ZSBpZiBwcmVzZW50XHJcbiAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9uc1tcImRlZmF1bHRcIl0gIT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSB0aGlzLm9wdGlvbnNbXCJkZWZhdWx0XCJdO1xyXG4gICAgICAgIGlmICh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0gJiYgdHlwZW9mIHRoaXMudHlwZURlZmF1bHQgPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSB0aGlzLnJlc29sdmVkVHlwZS52YWx1ZXNbdGhpcy50eXBlRGVmYXVsdF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIHVubmVjZXNzYXJ5IG9wdGlvbnNcclxuICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhY2tlZCA9PT0gdHJ1ZSB8fCB0aGlzLm9wdGlvbnMucGFja2VkICE9PSB1bmRlZmluZWQgJiYgdGhpcy5yZXNvbHZlZFR5cGUgJiYgISh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pKVxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLnBhY2tlZDtcclxuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHRoaXMub3B0aW9ucykubGVuZ3RoKVxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29udmVydCB0byBpbnRlcm5hbCBkYXRhIHR5cGUgaWYgbmVjZXNzc2FyeVxyXG4gICAgaWYgKHRoaXMubG9uZykge1xyXG4gICAgICAgIHRoaXMudHlwZURlZmF1bHQgPSB1dGlsLkxvbmcuZnJvbU51bWJlcih0aGlzLnR5cGVEZWZhdWx0LCB0aGlzLnR5cGUuY2hhckF0KDApID09PSBcInVcIik7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgaWYgKE9iamVjdC5mcmVlemUpXHJcbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUodGhpcy50eXBlRGVmYXVsdCk7IC8vIGxvbmcgaW5zdGFuY2VzIGFyZSBtZWFudCB0byBiZSBpbW11dGFibGUgYW55d2F5IChpLmUuIHVzZSBzbWFsbCBpbnQgY2FjaGUgdGhhdCBldmVuIHJlcXVpcmVzIGl0KVxyXG5cclxuICAgIH0gZWxzZSBpZiAodGhpcy5ieXRlcyAmJiB0eXBlb2YgdGhpcy50eXBlRGVmYXVsdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHZhciBidWY7XHJcbiAgICAgICAgaWYgKHV0aWwuYmFzZTY0LnRlc3QodGhpcy50eXBlRGVmYXVsdCkpXHJcbiAgICAgICAgICAgIHV0aWwuYmFzZTY0LmRlY29kZSh0aGlzLnR5cGVEZWZhdWx0LCBidWYgPSB1dGlsLm5ld0J1ZmZlcih1dGlsLmJhc2U2NC5sZW5ndGgodGhpcy50eXBlRGVmYXVsdCkpLCAwKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHV0aWwudXRmOC53cml0ZSh0aGlzLnR5cGVEZWZhdWx0LCBidWYgPSB1dGlsLm5ld0J1ZmZlcih1dGlsLnV0ZjgubGVuZ3RoKHRoaXMudHlwZURlZmF1bHQpKSwgMCk7XHJcbiAgICAgICAgdGhpcy50eXBlRGVmYXVsdCA9IGJ1ZjtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0YWtlIHNwZWNpYWwgY2FyZSBvZiBtYXBzIGFuZCByZXBlYXRlZCBmaWVsZHNcclxuICAgIGlmICh0aGlzLm1hcClcclxuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IHV0aWwuZW1wdHlPYmplY3Q7XHJcbiAgICBlbHNlIGlmICh0aGlzLnJlcGVhdGVkKVxyXG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gdXRpbC5lbXB0eUFycmF5O1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gdGhpcy50eXBlRGVmYXVsdDtcclxuXHJcbiAgICAvLyBlbnN1cmUgcHJvcGVyIHZhbHVlIG9uIHByb3RvdHlwZVxyXG4gICAgaWYgKHRoaXMucGFyZW50IGluc3RhbmNlb2YgVHlwZSlcclxuICAgICAgICB0aGlzLnBhcmVudC5jdG9yLnByb3RvdHlwZVt0aGlzLm5hbWVdID0gdGhpcy5kZWZhdWx0VmFsdWU7XHJcblxyXG4gICAgcmV0dXJuIFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnJlc29sdmUuY2FsbCh0aGlzKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEZWNvcmF0b3IgZnVuY3Rpb24gYXMgcmV0dXJuZWQgYnkge0BsaW5rIEZpZWxkLmR9IGFuZCB7QGxpbmsgTWFwRmllbGQuZH0gKFR5cGVTY3JpcHQpLlxyXG4gKiBAdHlwZWRlZiBGaWVsZERlY29yYXRvclxyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGFyZ2V0IHByb3RvdHlwZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGROYW1lIEZpZWxkIG5hbWVcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogRmllbGQgZGVjb3JhdG9yIChUeXBlU2NyaXB0KS5cclxuICogQG5hbWUgRmllbGQuZFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSWQgRmllbGQgaWRcclxuICogQHBhcmFtIHtcImRvdWJsZVwifFwiZmxvYXRcInxcImludDMyXCJ8XCJ1aW50MzJcInxcInNpbnQzMlwifFwiZml4ZWQzMlwifFwic2ZpeGVkMzJcInxcImludDY0XCJ8XCJ1aW50NjRcInxcInNpbnQ2NFwifFwiZml4ZWQ2NFwifFwic2ZpeGVkNjRcInxcInN0cmluZ1wifFwiYm9vbFwifFwiYnl0ZXNcInxPYmplY3R9IGZpZWxkVHlwZSBGaWVsZCB0eXBlXHJcbiAqIEBwYXJhbSB7XCJvcHRpb25hbFwifFwicmVxdWlyZWRcInxcInJlcGVhdGVkXCJ9IFtmaWVsZFJ1bGU9XCJvcHRpb25hbFwiXSBGaWVsZCBydWxlXHJcbiAqIEBwYXJhbSB7VH0gW2RlZmF1bHRWYWx1ZV0gRGVmYXVsdCB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7RmllbGREZWNvcmF0b3J9IERlY29yYXRvciBmdW5jdGlvblxyXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIG51bWJlciB8IG51bWJlcltdIHwgTG9uZyB8IExvbmdbXSB8IHN0cmluZyB8IHN0cmluZ1tdIHwgYm9vbGVhbiB8IGJvb2xlYW5bXSB8IFVpbnQ4QXJyYXkgfCBVaW50OEFycmF5W10gfCBCdWZmZXIgfCBCdWZmZXJbXVxyXG4gKi9cclxuRmllbGQuZCA9IGZ1bmN0aW9uIGRlY29yYXRlRmllbGQoZmllbGRJZCwgZmllbGRUeXBlLCBmaWVsZFJ1bGUsIGRlZmF1bHRWYWx1ZSkge1xyXG5cclxuICAgIC8vIHN1Ym1lc3NhZ2U6IGRlY29yYXRlIHRoZSBzdWJtZXNzYWdlIGFuZCB1c2UgaXRzIG5hbWUgYXMgdGhlIHR5cGVcclxuICAgIGlmICh0eXBlb2YgZmllbGRUeXBlID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZmllbGRUeXBlID0gdXRpbC5kZWNvcmF0ZVR5cGUoZmllbGRUeXBlKS5uYW1lO1xyXG5cclxuICAgIC8vIGVudW0gcmVmZXJlbmNlOiBjcmVhdGUgYSByZWZsZWN0ZWQgY29weSBvZiB0aGUgZW51bSBhbmQga2VlcCByZXVzZWluZyBpdFxyXG4gICAgZWxzZSBpZiAoZmllbGRUeXBlICYmIHR5cGVvZiBmaWVsZFR5cGUgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgZmllbGRUeXBlID0gdXRpbC5kZWNvcmF0ZUVudW0oZmllbGRUeXBlKS5uYW1lO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbiBmaWVsZERlY29yYXRvcihwcm90b3R5cGUsIGZpZWxkTmFtZSkge1xyXG4gICAgICAgIHV0aWwuZGVjb3JhdGVUeXBlKHByb3RvdHlwZS5jb25zdHJ1Y3RvcilcclxuICAgICAgICAgICAgLmFkZChuZXcgRmllbGQoZmllbGROYW1lLCBmaWVsZElkLCBmaWVsZFR5cGUsIGZpZWxkUnVsZSwgeyBcImRlZmF1bHRcIjogZGVmYXVsdFZhbHVlIH0pKTtcclxuICAgIH07XHJcbn07XHJcblxyXG4vKipcclxuICogRmllbGQgZGVjb3JhdG9yIChUeXBlU2NyaXB0KS5cclxuICogQG5hbWUgRmllbGQuZFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IGZpZWxkSWQgRmllbGQgaWRcclxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUPnxzdHJpbmd9IGZpZWxkVHlwZSBGaWVsZCB0eXBlXHJcbiAqIEBwYXJhbSB7XCJvcHRpb25hbFwifFwicmVxdWlyZWRcInxcInJlcGVhdGVkXCJ9IFtmaWVsZFJ1bGU9XCJvcHRpb25hbFwiXSBGaWVsZCBydWxlXHJcbiAqIEByZXR1cm5zIHtGaWVsZERlY29yYXRvcn0gRGVjb3JhdG9yIGZ1bmN0aW9uXHJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxyXG4gKiBAdmFyaWF0aW9uIDJcclxuICovXHJcbi8vIGxpa2UgRmllbGQuZCBidXQgd2l0aG91dCBhIGRlZmF1bHQgdmFsdWVcclxuXHJcbi8vIFNldHMgdXAgY3ljbGljIGRlcGVuZGVuY2llcyAoY2FsbGVkIGluIGluZGV4LWxpZ2h0KVxyXG5GaWVsZC5fY29uZmlndXJlID0gZnVuY3Rpb24gY29uZmlndXJlKFR5cGVfKSB7XHJcbiAgICBUeXBlID0gVHlwZV87XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgcHJvdG9idWYgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2luZGV4LW1pbmltYWxcIik7XHJcblxyXG5wcm90b2J1Zi5idWlsZCA9IFwibGlnaHRcIjtcclxuXHJcbi8qKlxyXG4gKiBBIG5vZGUtc3R5bGUgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgbG9hZH0gYW5kIHtAbGluayBSb290I2xvYWR9LlxyXG4gKiBAdHlwZWRlZiBMb2FkQ2FsbGJhY2tcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnksIG90aGVyd2lzZSBgbnVsbGBcclxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCwgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrLlxyXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgT25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcclxuICogQHBhcmFtIHtSb290fSByb290IFJvb3QgbmFtZXNwYWNlLCBkZWZhdWx0cyB0byBjcmVhdGUgYSBuZXcgb25lIGlmIG9taXR0ZWQuXHJcbiAqIEBwYXJhbSB7TG9hZENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKiBAc2VlIHtAbGluayBSb290I2xvYWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCByb290LCBjYWxsYmFjaykge1xyXG4gICAgaWYgKHR5cGVvZiByb290ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBjYWxsYmFjayA9IHJvb3Q7XHJcbiAgICAgICAgcm9vdCA9IG5ldyBwcm90b2J1Zi5Sb290KCk7XHJcbiAgICB9IGVsc2UgaWYgKCFyb290KVxyXG4gICAgICAgIHJvb3QgPSBuZXcgcHJvdG9idWYuUm9vdCgpO1xyXG4gICAgcmV0dXJuIHJvb3QubG9hZChmaWxlbmFtZSwgY2FsbGJhY2spO1xyXG59XHJcblxyXG4vKipcclxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSBhbmQgY2FsbHMgdGhlIGNhbGxiYWNrLlxyXG4gKiBAbmFtZSBsb2FkXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgT25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcclxuICogQHBhcmFtIHtMb2FkQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZH1cclxuICogQHZhcmlhdGlvbiAyXHJcbiAqL1xyXG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgY2FsbGJhY2s6TG9hZENhbGxiYWNrKTp1bmRlZmluZWRcclxuXHJcbi8qKlxyXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIGEgY29tbW9uIHJvb3QgbmFtZXNwYWNlIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cclxuICogQG5hbWUgbG9hZFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXHJcbiAqIEBwYXJhbSB7Um9vdH0gW3Jvb3RdIFJvb3QgbmFtZXNwYWNlLCBkZWZhdWx0cyB0byBjcmVhdGUgYSBuZXcgb25lIGlmIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPFJvb3Q+fSBQcm9taXNlXHJcbiAqIEBzZWUge0BsaW5rIFJvb3QjbG9hZH1cclxuICogQHZhcmlhdGlvbiAzXHJcbiAqL1xyXG4vLyBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lOnN0cmluZywgW3Jvb3Q6Um9vdF0pOlByb21pc2U8Um9vdD5cclxuXHJcbnByb3RvYnVmLmxvYWQgPSBsb2FkO1xyXG5cclxuLyoqXHJcbiAqIFN5bmNocm9ub3VzbHkgbG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byBhIGNvbW1vbiByb290IG5hbWVzcGFjZSAobm9kZSBvbmx5KS5cclxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXHJcbiAqIEBwYXJhbSB7Um9vdH0gW3Jvb3RdIFJvb3QgbmFtZXNwYWNlLCBkZWZhdWx0cyB0byBjcmVhdGUgYSBuZXcgb25lIGlmIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHtSb290fSBSb290IG5hbWVzcGFjZVxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgc3luY2hyb25vdXMgZmV0Y2hpbmcgaXMgbm90IHN1cHBvcnRlZCAoaS5lLiBpbiBicm93c2Vycykgb3IgaWYgYSBmaWxlJ3Mgc3ludGF4IGlzIGludmFsaWRcclxuICogQHNlZSB7QGxpbmsgUm9vdCNsb2FkU3luY31cclxuICovXHJcbmZ1bmN0aW9uIGxvYWRTeW5jKGZpbGVuYW1lLCByb290KSB7XHJcbiAgICBpZiAoIXJvb3QpXHJcbiAgICAgICAgcm9vdCA9IG5ldyBwcm90b2J1Zi5Sb290KCk7XHJcbiAgICByZXR1cm4gcm9vdC5sb2FkU3luYyhmaWxlbmFtZSk7XHJcbn1cclxuXHJcbnByb3RvYnVmLmxvYWRTeW5jID0gbG9hZFN5bmM7XHJcblxyXG4vLyBTZXJpYWxpemF0aW9uXHJcbnByb3RvYnVmLmVuY29kZXIgICAgICAgICAgPSByZXF1aXJlKFwiLi9lbmNvZGVyXCIpO1xyXG5wcm90b2J1Zi5kZWNvZGVyICAgICAgICAgID0gcmVxdWlyZShcIi4vZGVjb2RlclwiKTtcclxucHJvdG9idWYudmVyaWZpZXIgICAgICAgICA9IHJlcXVpcmUoXCIuL3ZlcmlmaWVyXCIpO1xyXG5wcm90b2J1Zi5jb252ZXJ0ZXIgICAgICAgID0gcmVxdWlyZShcIi4vY29udmVydGVyXCIpO1xyXG5cclxuLy8gUmVmbGVjdGlvblxyXG5wcm90b2J1Zi5SZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xyXG5wcm90b2J1Zi5OYW1lc3BhY2UgICAgICAgID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpO1xyXG5wcm90b2J1Zi5Sb290ICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vcm9vdFwiKTtcclxucHJvdG9idWYuRW51bSAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIik7XHJcbnByb3RvYnVmLlR5cGUgICAgICAgICAgICAgPSByZXF1aXJlKFwiLi90eXBlXCIpO1xyXG5wcm90b2J1Zi5GaWVsZCAgICAgICAgICAgID0gcmVxdWlyZShcIi4vZmllbGRcIik7XHJcbnByb3RvYnVmLk9uZU9mICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKTtcclxucHJvdG9idWYuTWFwRmllbGQgICAgICAgICA9IHJlcXVpcmUoXCIuL21hcGZpZWxkXCIpO1xyXG5wcm90b2J1Zi5TZXJ2aWNlICAgICAgICAgID0gcmVxdWlyZShcIi4vc2VydmljZVwiKTtcclxucHJvdG9idWYuTWV0aG9kICAgICAgICAgICA9IHJlcXVpcmUoXCIuL21ldGhvZFwiKTtcclxuXHJcbi8vIFJ1bnRpbWVcclxucHJvdG9idWYuTWVzc2FnZSAgICAgICAgICA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIik7XHJcbnByb3RvYnVmLndyYXBwZXJzICAgICAgICAgPSByZXF1aXJlKFwiLi93cmFwcGVyc1wiKTtcclxuXHJcbi8vIFV0aWxpdHlcclxucHJvdG9idWYudHlwZXMgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xyXG5wcm90b2J1Zi51dGlsICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxuXHJcbi8vIFNldCB1cCBwb3NzaWJseSBjeWNsaWMgcmVmbGVjdGlvbiBkZXBlbmRlbmNpZXNcclxucHJvdG9idWYuUmVmbGVjdGlvbk9iamVjdC5fY29uZmlndXJlKHByb3RvYnVmLlJvb3QpO1xyXG5wcm90b2J1Zi5OYW1lc3BhY2UuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlLCBwcm90b2J1Zi5TZXJ2aWNlLCBwcm90b2J1Zi5FbnVtKTtcclxucHJvdG9idWYuUm9vdC5fY29uZmlndXJlKHByb3RvYnVmLlR5cGUpO1xyXG5wcm90b2J1Zi5GaWVsZC5fY29uZmlndXJlKHByb3RvYnVmLlR5cGUpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIHByb3RvYnVmID0gZXhwb3J0cztcclxuXHJcbi8qKlxyXG4gKiBCdWlsZCB0eXBlLCBvbmUgb2YgYFwiZnVsbFwiYCwgYFwibGlnaHRcImAgb3IgYFwibWluaW1hbFwiYC5cclxuICogQG5hbWUgYnVpbGRcclxuICogQHR5cGUge3N0cmluZ31cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90b2J1Zi5idWlsZCA9IFwibWluaW1hbFwiO1xyXG5cclxuLy8gU2VyaWFsaXphdGlvblxyXG5wcm90b2J1Zi5Xcml0ZXIgICAgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XHJcbnByb3RvYnVmLkJ1ZmZlcldyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlcl9idWZmZXJcIik7XHJcbnByb3RvYnVmLlJlYWRlciAgICAgICA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxucHJvdG9idWYuQnVmZmVyUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyX2J1ZmZlclwiKTtcclxuXHJcbi8vIFV0aWxpdHlcclxucHJvdG9idWYudXRpbCAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xyXG5wcm90b2J1Zi5ycGMgICAgICAgICAgPSByZXF1aXJlKFwiLi9ycGNcIik7XHJcbnByb3RvYnVmLnJvb3RzICAgICAgICA9IHJlcXVpcmUoXCIuL3Jvb3RzXCIpO1xyXG5wcm90b2J1Zi5jb25maWd1cmUgICAgPSBjb25maWd1cmU7XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4vKipcclxuICogUmVjb25maWd1cmVzIHRoZSBsaWJyYXJ5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnQuXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBjb25maWd1cmUoKSB7XHJcbiAgICBwcm90b2J1Zi5SZWFkZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJSZWFkZXIpO1xyXG4gICAgcHJvdG9idWYudXRpbC5fY29uZmlndXJlKCk7XHJcbn1cclxuXHJcbi8vIFNldCB1cCBidWZmZXIgdXRpbGl0eSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50XHJcbnByb3RvYnVmLldyaXRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlcldyaXRlcik7XHJcbmNvbmZpZ3VyZSgpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIHByb3RvYnVmID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9pbmRleC1saWdodFwiKTtcclxuXHJcbnByb3RvYnVmLmJ1aWxkID0gXCJmdWxsXCI7XHJcblxyXG4vLyBQYXJzZXJcclxucHJvdG9idWYudG9rZW5pemUgICAgICAgICA9IHJlcXVpcmUoXCIuL3Rva2VuaXplXCIpO1xyXG5wcm90b2J1Zi5wYXJzZSAgICAgICAgICAgID0gcmVxdWlyZShcIi4vcGFyc2VcIik7XHJcbnByb3RvYnVmLmNvbW1vbiAgICAgICAgICAgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XHJcblxyXG4vLyBDb25maWd1cmUgcGFyc2VyXHJcbnByb3RvYnVmLlJvb3QuX2NvbmZpZ3VyZShwcm90b2J1Zi5UeXBlLCBwcm90b2J1Zi5wYXJzZSwgcHJvdG9idWYuY29tbW9uKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gTWFwRmllbGQ7XHJcblxyXG4vLyBleHRlbmRzIEZpZWxkXHJcbnZhciBGaWVsZCA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpO1xyXG4oKE1hcEZpZWxkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRmllbGQucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBNYXBGaWVsZCkuY2xhc3NOYW1lID0gXCJNYXBGaWVsZFwiO1xyXG5cclxudmFyIHR5cGVzICAgPSByZXF1aXJlKFwiLi90eXBlc1wiKSxcclxuICAgIHV0aWwgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgbWFwIGZpZWxkIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBtYXAgZmllbGQuXHJcbiAqIEBleHRlbmRzIEZpZWxkQmFzZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVW5pcXVlIG5hbWUgd2l0aGluIGl0cyBuYW1lc3BhY2VcclxuICogQHBhcmFtIHtudW1iZXJ9IGlkIFVuaXF1ZSBpZCB3aXRoaW4gaXRzIG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5VHlwZSBLZXkgdHlwZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBWYWx1ZSB0eXBlXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gQ29tbWVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBmaWVsZFxyXG4gKi9cclxuZnVuY3Rpb24gTWFwRmllbGQobmFtZSwgaWQsIGtleVR5cGUsIHR5cGUsIG9wdGlvbnMsIGNvbW1lbnQpIHtcclxuICAgIEZpZWxkLmNhbGwodGhpcywgbmFtZSwgaWQsIHR5cGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvcHRpb25zLCBjb21tZW50KTtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICghdXRpbC5pc1N0cmluZyhrZXlUeXBlKSlcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJrZXlUeXBlIG11c3QgYmUgYSBzdHJpbmdcIik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBLZXkgdHlwZS5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRoaXMua2V5VHlwZSA9IGtleVR5cGU7IC8vIHRvSlNPTiwgbWFya2VyXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlZCBrZXkgdHlwZSBpZiBub3QgYSBiYXNpYyB0eXBlLlxyXG4gICAgICogQHR5cGUge1JlZmxlY3Rpb25PYmplY3R8bnVsbH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5yZXNvbHZlZEtleVR5cGUgPSBudWxsO1xyXG5cclxuICAgIC8vIE92ZXJyaWRlcyBGaWVsZCNtYXBcclxuICAgIHRoaXMubWFwID0gdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hcCBmaWVsZCBkZXNjcmlwdG9yLlxyXG4gKiBAaW50ZXJmYWNlIElNYXBGaWVsZFxyXG4gKiBAZXh0ZW5kcyB7SUZpZWxkfVxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30ga2V5VHlwZSBLZXkgdHlwZVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBFeHRlbnNpb24gbWFwIGZpZWxkIGRlc2NyaXB0b3IuXHJcbiAqIEBpbnRlcmZhY2UgSUV4dGVuc2lvbk1hcEZpZWxkXHJcbiAqIEBleHRlbmRzIElNYXBGaWVsZFxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZXh0ZW5kIEV4dGVuZGVkIHR5cGVcclxuICovXHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG1hcCBmaWVsZCBmcm9tIGEgbWFwIGZpZWxkIGRlc2NyaXB0b3IuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEZpZWxkIG5hbWVcclxuICogQHBhcmFtIHtJTWFwRmllbGR9IGpzb24gTWFwIGZpZWxkIGRlc2NyaXB0b3JcclxuICogQHJldHVybnMge01hcEZpZWxkfSBDcmVhdGVkIG1hcCBmaWVsZFxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxyXG4gKi9cclxuTWFwRmllbGQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XHJcbiAgICByZXR1cm4gbmV3IE1hcEZpZWxkKG5hbWUsIGpzb24uaWQsIGpzb24ua2V5VHlwZSwganNvbi50eXBlLCBqc29uLm9wdGlvbnMsIGpzb24uY29tbWVudCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBtYXAgZmllbGQgdG8gYSBtYXAgZmllbGQgZGVzY3JpcHRvci5cclxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtJTWFwRmllbGR9IE1hcCBmaWVsZCBkZXNjcmlwdG9yXHJcbiAqL1xyXG5NYXBGaWVsZC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKHRvSlNPTk9wdGlvbnMpIHtcclxuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcclxuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcclxuICAgICAgICBcImtleVR5cGVcIiAsIHRoaXMua2V5VHlwZSxcclxuICAgICAgICBcInR5cGVcIiAgICAsIHRoaXMudHlwZSxcclxuICAgICAgICBcImlkXCIgICAgICAsIHRoaXMuaWQsXHJcbiAgICAgICAgXCJleHRlbmRcIiAgLCB0aGlzLmV4dGVuZCxcclxuICAgICAgICBcIm9wdGlvbnNcIiAsIHRoaXMub3B0aW9ucyxcclxuICAgICAgICBcImNvbW1lbnRcIiAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZFxyXG4gICAgXSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQG92ZXJyaWRlXHJcbiAqL1xyXG5NYXBGaWVsZC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XHJcbiAgICBpZiAodGhpcy5yZXNvbHZlZClcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAvLyBCZXNpZGVzIGEgdmFsdWUgdHlwZSwgbWFwIGZpZWxkcyBoYXZlIGEga2V5IHR5cGUgdGhhdCBtYXkgYmUgXCJhbnkgc2NhbGFyIHR5cGUgZXhjZXB0IGZvciBmbG9hdGluZyBwb2ludCB0eXBlcyBhbmQgYnl0ZXNcIlxyXG4gICAgaWYgKHR5cGVzLm1hcEtleVt0aGlzLmtleVR5cGVdID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGtleSB0eXBlOiBcIiArIHRoaXMua2V5VHlwZSk7XHJcblxyXG4gICAgcmV0dXJuIEZpZWxkLnByb3RvdHlwZS5yZXNvbHZlLmNhbGwodGhpcyk7XHJcbn07XHJcblxyXG4vKipcclxuICogTWFwIGZpZWxkIGRlY29yYXRvciAoVHlwZVNjcmlwdCkuXHJcbiAqIEBuYW1lIE1hcEZpZWxkLmRcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmaWVsZElkIEZpZWxkIGlkXHJcbiAqIEBwYXJhbSB7XCJpbnQzMlwifFwidWludDMyXCJ8XCJzaW50MzJcInxcImZpeGVkMzJcInxcInNmaXhlZDMyXCJ8XCJpbnQ2NFwifFwidWludDY0XCJ8XCJzaW50NjRcInxcImZpeGVkNjRcInxcInNmaXhlZDY0XCJ8XCJib29sXCJ8XCJzdHJpbmdcIn0gZmllbGRLZXlUeXBlIEZpZWxkIGtleSB0eXBlXHJcbiAqIEBwYXJhbSB7XCJkb3VibGVcInxcImZsb2F0XCJ8XCJpbnQzMlwifFwidWludDMyXCJ8XCJzaW50MzJcInxcImZpeGVkMzJcInxcInNmaXhlZDMyXCJ8XCJpbnQ2NFwifFwidWludDY0XCJ8XCJzaW50NjRcInxcImZpeGVkNjRcInxcInNmaXhlZDY0XCJ8XCJib29sXCJ8XCJzdHJpbmdcInxcImJ5dGVzXCJ8T2JqZWN0fENvbnN0cnVjdG9yPHt9Pn0gZmllbGRWYWx1ZVR5cGUgRmllbGQgdmFsdWUgdHlwZVxyXG4gKiBAcmV0dXJucyB7RmllbGREZWNvcmF0b3J9IERlY29yYXRvciBmdW5jdGlvblxyXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogbnVtYmVyIHwgTG9uZyB8IHN0cmluZyB8IGJvb2xlYW4gfCBVaW50OEFycmF5IHwgQnVmZmVyIHwgbnVtYmVyW10gfCBNZXNzYWdlPHt9PiB9XHJcbiAqL1xyXG5NYXBGaWVsZC5kID0gZnVuY3Rpb24gZGVjb3JhdGVNYXBGaWVsZChmaWVsZElkLCBmaWVsZEtleVR5cGUsIGZpZWxkVmFsdWVUeXBlKSB7XHJcblxyXG4gICAgLy8gc3VibWVzc2FnZSB2YWx1ZTogZGVjb3JhdGUgdGhlIHN1Ym1lc3NhZ2UgYW5kIHVzZSBpdHMgbmFtZSBhcyB0aGUgdHlwZVxyXG4gICAgaWYgKHR5cGVvZiBmaWVsZFZhbHVlVHlwZSA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZpZWxkVmFsdWVUeXBlID0gdXRpbC5kZWNvcmF0ZVR5cGUoZmllbGRWYWx1ZVR5cGUpLm5hbWU7XHJcblxyXG4gICAgLy8gZW51bSByZWZlcmVuY2UgdmFsdWU6IGNyZWF0ZSBhIHJlZmxlY3RlZCBjb3B5IG9mIHRoZSBlbnVtIGFuZCBrZWVwIHJldXNlaW5nIGl0XHJcbiAgICBlbHNlIGlmIChmaWVsZFZhbHVlVHlwZSAmJiB0eXBlb2YgZmllbGRWYWx1ZVR5cGUgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgZmllbGRWYWx1ZVR5cGUgPSB1dGlsLmRlY29yYXRlRW51bShmaWVsZFZhbHVlVHlwZSkubmFtZTtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gbWFwRmllbGREZWNvcmF0b3IocHJvdG90eXBlLCBmaWVsZE5hbWUpIHtcclxuICAgICAgICB1dGlsLmRlY29yYXRlVHlwZShwcm90b3R5cGUuY29uc3RydWN0b3IpXHJcbiAgICAgICAgICAgIC5hZGQobmV3IE1hcEZpZWxkKGZpZWxkTmFtZSwgZmllbGRJZCwgZmllbGRLZXlUeXBlLCBmaWVsZFZhbHVlVHlwZSkpO1xyXG4gICAgfTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnZTtcclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgbWVzc2FnZSBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBBYnN0cmFjdCBydW50aW1lIG1lc3NhZ2UuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge1Byb3BlcnRpZXM8VD59IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxyXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIG9iamVjdCA9IG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gTWVzc2FnZShwcm9wZXJ0aWVzKSB7XHJcbiAgICAvLyBub3QgdXNlZCBpbnRlcm5hbGx5XHJcbiAgICBpZiAocHJvcGVydGllcylcclxuICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHJlZmxlY3RlZCB0eXBlLlxyXG4gKiBAbmFtZSBNZXNzYWdlLiR0eXBlXHJcbiAqIEB0eXBlIHtUeXBlfVxyXG4gKiBAcmVhZG9ubHlcclxuICovXHJcblxyXG4vKipcclxuICogUmVmZXJlbmNlIHRvIHRoZSByZWZsZWN0ZWQgdHlwZS5cclxuICogQG5hbWUgTWVzc2FnZSMkdHlwZVxyXG4gKiBAdHlwZSB7VHlwZX1cclxuICogQHJlYWRvbmx5XHJcbiAqL1xyXG5cclxuLyplc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYyovXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtZXNzYWdlIG9mIHRoaXMgdHlwZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxyXG4gKiBAcmV0dXJucyB7TWVzc2FnZTxUPn0gTWVzc2FnZSBpbnN0YW5jZVxyXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cclxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cclxuICovXHJcbk1lc3NhZ2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcclxuICAgIHJldHVybiB0aGlzLiR0eXBlLmNyZWF0ZShwcm9wZXJ0aWVzKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbmNvZGVzIGEgbWVzc2FnZSBvZiB0aGlzIHR5cGUuXHJcbiAqIEBwYXJhbSB7VHxPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBNZXNzYWdlIHRvIGVuY29kZVxyXG4gKiBAcGFyYW0ge1dyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIHVzZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBXcml0ZXJcclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XHJcbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XHJcbiAqL1xyXG5NZXNzYWdlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcclxuICAgIHJldHVybiB0aGlzLiR0eXBlLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cclxuICogQHBhcmFtIHtUfE9iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIE1lc3NhZ2UgdG8gZW5jb2RlXHJcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gdXNlXHJcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IFdyaXRlclxyXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cclxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cclxuICovXHJcbk1lc3NhZ2UuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuJHR5cGUuZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcik7XHJcbn07XHJcblxyXG4vKipcclxuICogRGVjb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxyXG4gKiBAbmFtZSBNZXNzYWdlLmRlY29kZVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtSZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlXHJcbiAqIEByZXR1cm5zIHtUfSBEZWNvZGVkIG1lc3NhZ2VcclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XHJcbiAqIEB0aGlzIENvbnN0cnVjdG9yPFQ+XHJcbiAqL1xyXG5NZXNzYWdlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIpIHtcclxuICAgIHJldHVybiB0aGlzLiR0eXBlLmRlY29kZShyZWFkZXIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cclxuICogQG5hbWUgTWVzc2FnZS5kZWNvZGVEZWxpbWl0ZWRcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZVxyXG4gKiBAcmV0dXJucyB7VH0gRGVjb2RlZCBtZXNzYWdlXHJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxyXG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxyXG4gKi9cclxuTWVzc2FnZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kdHlwZS5kZWNvZGVEZWxpbWl0ZWQocmVhZGVyKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBWZXJpZmllcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxyXG4gKiBAbmFtZSBNZXNzYWdlLnZlcmlmeVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XHJcbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XHJcbiAqL1xyXG5NZXNzYWdlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kdHlwZS52ZXJpZnkobWVzc2FnZSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtZXNzYWdlIG9mIHRoaXMgdHlwZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxyXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvYmplY3QgUGxhaW4gb2JqZWN0XHJcbiAqIEByZXR1cm5zIHtUfSBNZXNzYWdlIGluc3RhbmNlXHJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxyXG4gKiBAdGhpcyBDb25zdHJ1Y3RvcjxUPlxyXG4gKi9cclxuTWVzc2FnZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChvYmplY3QpIHtcclxuICAgIHJldHVybiB0aGlzLiR0eXBlLmZyb21PYmplY3Qob2JqZWN0KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxyXG4gKiBAcGFyYW0ge1R9IG1lc3NhZ2UgTWVzc2FnZSBpbnN0YW5jZVxyXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxyXG4gKiBAdGVtcGxhdGUgVCBleHRlbmRzIE1lc3NhZ2U8VD5cclxuICogQHRoaXMgQ29uc3RydWN0b3I8VD5cclxuICovXHJcbk1lc3NhZ2UudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kdHlwZS50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIG1lc3NhZ2UgdG8gSlNPTi5cclxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxyXG4gKi9cclxuTWVzc2FnZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJHR5cGUudG9PYmplY3QodGhpcywgdXRpbC50b0pTT05PcHRpb25zKTtcclxufTtcclxuXHJcbi8qZXNsaW50LWVuYWJsZSB2YWxpZC1qc2RvYyovIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gTWV0aG9kO1xyXG5cclxuLy8gZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XHJcbnZhciBSZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xyXG4oKE1ldGhvZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBNZXRob2QpLmNsYXNzTmFtZSA9IFwiTWV0aG9kXCI7XHJcblxyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBzZXJ2aWNlIG1ldGhvZCBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgc2VydmljZSBtZXRob2QuXHJcbiAqIEBleHRlbmRzIFJlZmxlY3Rpb25PYmplY3RcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE1ldGhvZCBuYW1lXHJcbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gdHlwZSBNZXRob2QgdHlwZSwgdXN1YWxseSBgXCJycGNcImBcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RUeXBlIFJlcXVlc3QgbWVzc2FnZSB0eXBlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXNwb25zZVR5cGUgUmVzcG9uc2UgbWVzc2FnZSB0eXBlXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3QuPHN0cmluZywqPn0gW3JlcXVlc3RTdHJlYW1dIFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgc3RyZWFtZWRcclxuICogQHBhcmFtIHtib29sZWFufE9iamVjdC48c3RyaW5nLCo+fSBbcmVzcG9uc2VTdHJlYW1dIFdoZXRoZXIgdGhlIHJlc3BvbnNlIGlzIHN0cmVhbWVkXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tbWVudF0gVGhlIGNvbW1lbnQgZm9yIHRoaXMgbWV0aG9kXHJcbiAqL1xyXG5mdW5jdGlvbiBNZXRob2QobmFtZSwgdHlwZSwgcmVxdWVzdFR5cGUsIHJlc3BvbnNlVHlwZSwgcmVxdWVzdFN0cmVhbSwgcmVzcG9uc2VTdHJlYW0sIG9wdGlvbnMsIGNvbW1lbnQpIHtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKHV0aWwuaXNPYmplY3QocmVxdWVzdFN0cmVhbSkpIHtcclxuICAgICAgICBvcHRpb25zID0gcmVxdWVzdFN0cmVhbTtcclxuICAgICAgICByZXF1ZXN0U3RyZWFtID0gcmVzcG9uc2VTdHJlYW0gPSB1bmRlZmluZWQ7XHJcbiAgICB9IGVsc2UgaWYgKHV0aWwuaXNPYmplY3QocmVzcG9uc2VTdHJlYW0pKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IHJlc3BvbnNlU3RyZWFtO1xyXG4gICAgICAgIHJlc3BvbnNlU3RyZWFtID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKCEodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHV0aWwuaXNTdHJpbmcodHlwZSkpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInR5cGUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICghdXRpbC5pc1N0cmluZyhyZXF1ZXN0VHlwZSkpXHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwicmVxdWVzdFR5cGUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICghdXRpbC5pc1N0cmluZyhyZXNwb25zZVR5cGUpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInJlc3BvbnNlVHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG5cclxuICAgIFJlZmxlY3Rpb25PYmplY3QuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0eXBlLlxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgdGhpcy50eXBlID0gdHlwZSB8fCBcInJwY1wiOyAvLyB0b0pTT05cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlcXVlc3QgdHlwZS5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVxdWVzdFR5cGUgPSByZXF1ZXN0VHlwZTsgLy8gdG9KU09OLCBtYXJrZXJcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgcmVxdWVzdHMgYXJlIHN0cmVhbWVkIG9yIG5vdC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5yZXF1ZXN0U3RyZWFtID0gcmVxdWVzdFN0cmVhbSA/IHRydWUgOiB1bmRlZmluZWQ7IC8vIHRvSlNPTlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzcG9uc2UgdHlwZS5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlOyAvLyB0b0pTT05cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBzdHJlYW1lZCBvciBub3QuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVzcG9uc2VTdHJlYW0gPSByZXNwb25zZVN0cmVhbSA/IHRydWUgOiB1bmRlZmluZWQ7IC8vIHRvSlNPTlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZWQgcmVxdWVzdCB0eXBlLlxyXG4gICAgICogQHR5cGUge1R5cGV8bnVsbH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5yZXNvbHZlZFJlcXVlc3RUeXBlID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc29sdmVkIHJlc3BvbnNlIHR5cGUuXHJcbiAgICAgKiBAdHlwZSB7VHlwZXxudWxsfVxyXG4gICAgICovXHJcbiAgICB0aGlzLnJlc29sdmVkUmVzcG9uc2VUeXBlID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbW1lbnQgZm9yIHRoaXMgbWV0aG9kXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZXRob2QgZGVzY3JpcHRvci5cclxuICogQGludGVyZmFjZSBJTWV0aG9kXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZT1cInJwY1wiXSBNZXRob2QgdHlwZVxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcmVxdWVzdFR5cGUgUmVxdWVzdCB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByZXNwb25zZVR5cGUgUmVzcG9uc2UgdHlwZVxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXF1ZXN0U3RyZWFtPWZhbHNlXSBXaGV0aGVyIHJlcXVlc3RzIGFyZSBzdHJlYW1lZFxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXNwb25zZVN0cmVhbT1mYWxzZV0gV2hldGhlciByZXNwb25zZXMgYXJlIHN0cmVhbWVkXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBNZXRob2Qgb3B0aW9uc1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbWV0aG9kIGZyb20gYSBtZXRob2QgZGVzY3JpcHRvci5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTWV0aG9kIG5hbWVcclxuICogQHBhcmFtIHtJTWV0aG9kfSBqc29uIE1ldGhvZCBkZXNjcmlwdG9yXHJcbiAqIEByZXR1cm5zIHtNZXRob2R9IENyZWF0ZWQgbWV0aG9kXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXHJcbiAqL1xyXG5NZXRob2QuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XHJcbiAgICByZXR1cm4gbmV3IE1ldGhvZChuYW1lLCBqc29uLnR5cGUsIGpzb24ucmVxdWVzdFR5cGUsIGpzb24ucmVzcG9uc2VUeXBlLCBqc29uLnJlcXVlc3RTdHJlYW0sIGpzb24ucmVzcG9uc2VTdHJlYW0sIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIG1ldGhvZCB0byBhIG1ldGhvZCBkZXNjcmlwdG9yLlxyXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcclxuICogQHJldHVybnMge0lNZXRob2R9IE1ldGhvZCBkZXNjcmlwdG9yXHJcbiAqL1xyXG5NZXRob2QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XHJcbiAgICB2YXIga2VlcENvbW1lbnRzID0gdG9KU09OT3B0aW9ucyA/IEJvb2xlYW4odG9KU09OT3B0aW9ucy5rZWVwQ29tbWVudHMpIDogZmFsc2U7XHJcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXHJcbiAgICAgICAgXCJ0eXBlXCIgICAgICAgICAgICwgdGhpcy50eXBlICE9PSBcInJwY1wiICYmIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHRoaXMudHlwZSB8fCB1bmRlZmluZWQsXHJcbiAgICAgICAgXCJyZXF1ZXN0VHlwZVwiICAgICwgdGhpcy5yZXF1ZXN0VHlwZSxcclxuICAgICAgICBcInJlcXVlc3RTdHJlYW1cIiAgLCB0aGlzLnJlcXVlc3RTdHJlYW0sXHJcbiAgICAgICAgXCJyZXNwb25zZVR5cGVcIiAgICwgdGhpcy5yZXNwb25zZVR5cGUsXHJcbiAgICAgICAgXCJyZXNwb25zZVN0cmVhbVwiICwgdGhpcy5yZXNwb25zZVN0cmVhbSxcclxuICAgICAgICBcIm9wdGlvbnNcIiAgICAgICAgLCB0aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgXCJjb21tZW50XCIgICAgICAgICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkXHJcbiAgICBdKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcbk1ldGhvZC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAodGhpcy5yZXNvbHZlZClcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICB0aGlzLnJlc29sdmVkUmVxdWVzdFR5cGUgPSB0aGlzLnBhcmVudC5sb29rdXBUeXBlKHRoaXMucmVxdWVzdFR5cGUpO1xyXG4gICAgdGhpcy5yZXNvbHZlZFJlc3BvbnNlVHlwZSA9IHRoaXMucGFyZW50Lmxvb2t1cFR5cGUodGhpcy5yZXNwb25zZVR5cGUpO1xyXG5cclxuICAgIHJldHVybiBSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5yZXNvbHZlLmNhbGwodGhpcyk7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IE5hbWVzcGFjZTtcclxuXHJcbi8vIGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxyXG52YXIgUmVmbGVjdGlvbk9iamVjdCA9IHJlcXVpcmUoXCIuL29iamVjdFwiKTtcclxuKChOYW1lc3BhY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gTmFtZXNwYWNlKS5jbGFzc05hbWUgPSBcIk5hbWVzcGFjZVwiO1xyXG5cclxudmFyIEZpZWxkICAgID0gcmVxdWlyZShcIi4vZmllbGRcIiksXHJcbiAgICB1dGlsICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XHJcblxyXG52YXIgVHlwZSwgICAgLy8gY3ljbGljXHJcbiAgICBTZXJ2aWNlLFxyXG4gICAgRW51bTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG5hbWVzcGFjZSBpbnN0YW5jZS5cclxuICogQG5hbWUgTmFtZXNwYWNlXHJcbiAqIEBjbGFzc2Rlc2MgUmVmbGVjdGVkIG5hbWVzcGFjZS5cclxuICogQGV4dGVuZHMgTmFtZXNwYWNlQmFzZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZXNwYWNlIG5hbWVcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcclxuICovXHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5hbWVzcGFjZSBmcm9tIEpTT04uXHJcbiAqIEBtZW1iZXJvZiBOYW1lc3BhY2VcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBuYW1lXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGpzb24gSlNPTiBvYmplY3RcclxuICogQHJldHVybnMge05hbWVzcGFjZX0gQ3JlYXRlZCBuYW1lc3BhY2VcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcclxuICovXHJcbk5hbWVzcGFjZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKG5hbWUsIGpzb24pIHtcclxuICAgIHJldHVybiBuZXcgTmFtZXNwYWNlKG5hbWUsIGpzb24ub3B0aW9ucykuYWRkSlNPTihqc29uLm5lc3RlZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgYW4gYXJyYXkgb2YgcmVmbGVjdGlvbiBvYmplY3RzIHRvIEpTT04uXHJcbiAqIEBtZW1iZXJvZiBOYW1lc3BhY2VcclxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0W119IGFycmF5IE9iamVjdCBhcnJheVxyXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcclxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fHVuZGVmaW5lZH0gSlNPTiBvYmplY3Qgb3IgYHVuZGVmaW5lZGAgd2hlbiBhcnJheSBpcyBlbXB0eVxyXG4gKi9cclxuZnVuY3Rpb24gYXJyYXlUb0pTT04oYXJyYXksIHRvSlNPTk9wdGlvbnMpIHtcclxuICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpXHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgb2JqW2FycmF5W2ldLm5hbWVdID0gYXJyYXlbaV0udG9KU09OKHRvSlNPTk9wdGlvbnMpO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuTmFtZXNwYWNlLmFycmF5VG9KU09OID0gYXJyYXlUb0pTT047XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBpZCBpcyByZXNlcnZlZC5cclxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyW118c3RyaW5nPnx1bmRlZmluZWR9IHJlc2VydmVkIEFycmF5IG9mIHJlc2VydmVkIHJhbmdlcyBhbmQgbmFtZXNcclxuICogQHBhcmFtIHtudW1iZXJ9IGlkIElkIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcclxuICovXHJcbk5hbWVzcGFjZS5pc1Jlc2VydmVkSWQgPSBmdW5jdGlvbiBpc1Jlc2VydmVkSWQocmVzZXJ2ZWQsIGlkKSB7XHJcbiAgICBpZiAocmVzZXJ2ZWQpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNlcnZlZC5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNlcnZlZFtpXSAhPT0gXCJzdHJpbmdcIiAmJiByZXNlcnZlZFtpXVswXSA8PSBpZCAmJiByZXNlcnZlZFtpXVsxXSA+PSBpZClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgbmFtZSBpcyByZXNlcnZlZC5cclxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyW118c3RyaW5nPnx1bmRlZmluZWR9IHJlc2VydmVkIEFycmF5IG9mIHJlc2VydmVkIHJhbmdlcyBhbmQgbmFtZXNcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byB0ZXN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVzZXJ2ZWQsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAqL1xyXG5OYW1lc3BhY2UuaXNSZXNlcnZlZE5hbWUgPSBmdW5jdGlvbiBpc1Jlc2VydmVkTmFtZShyZXNlcnZlZCwgbmFtZSkge1xyXG4gICAgaWYgKHJlc2VydmVkKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzZXJ2ZWQubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgIGlmIChyZXNlcnZlZFtpXSA9PT0gbmFtZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE5vdCBhbiBhY3R1YWwgY29uc3RydWN0b3IuIFVzZSB7QGxpbmsgTmFtZXNwYWNlfSBpbnN0ZWFkLlxyXG4gKiBAY2xhc3NkZXNjIEJhc2UgY2xhc3Mgb2YgYWxsIHJlZmxlY3Rpb24gb2JqZWN0cyBjb250YWluaW5nIG5lc3RlZCBvYmplY3RzLiBUaGlzIGlzIG5vdCBhbiBhY3R1YWwgY2xhc3MgYnV0IGhlcmUgZm9yIHRoZSBzYWtlIG9mIGhhdmluZyBjb25zaXN0ZW50IHR5cGUgZGVmaW5pdGlvbnMuXHJcbiAqIEBleHBvcnRzIE5hbWVzcGFjZUJhc2VcclxuICogQGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxyXG4gKiBAYWJzdHJhY3RcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBuYW1lXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBEZWNsYXJlZCBvcHRpb25zXHJcbiAqIEBzZWUge0BsaW5rIE5hbWVzcGFjZX1cclxuICovXHJcbmZ1bmN0aW9uIE5hbWVzcGFjZShuYW1lLCBvcHRpb25zKSB7XHJcbiAgICBSZWZsZWN0aW9uT2JqZWN0LmNhbGwodGhpcywgbmFtZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOZXN0ZWQgb2JqZWN0cyBieSBuYW1lLlxyXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLFJlZmxlY3Rpb25PYmplY3Q+fHVuZGVmaW5lZH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5uZXN0ZWQgPSB1bmRlZmluZWQ7IC8vIHRvSlNPTlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FjaGVkIG5lc3RlZCBvYmplY3RzIGFzIGFuIGFycmF5LlxyXG4gICAgICogQHR5cGUge1JlZmxlY3Rpb25PYmplY3RbXXxudWxsfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fbmVzdGVkQXJyYXkgPSBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhckNhY2hlKG5hbWVzcGFjZSkge1xyXG4gICAgbmFtZXNwYWNlLl9uZXN0ZWRBcnJheSA9IG51bGw7XHJcbiAgICByZXR1cm4gbmFtZXNwYWNlO1xyXG59XHJcblxyXG4vKipcclxuICogTmVzdGVkIG9iamVjdHMgb2YgdGhpcyBuYW1lc3BhY2UgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cclxuICogQG5hbWUgTmFtZXNwYWNlQmFzZSNuZXN0ZWRBcnJheVxyXG4gKiBAdHlwZSB7UmVmbGVjdGlvbk9iamVjdFtdfVxyXG4gKiBAcmVhZG9ubHlcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShOYW1lc3BhY2UucHJvdG90eXBlLCBcIm5lc3RlZEFycmF5XCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25lc3RlZEFycmF5IHx8ICh0aGlzLl9uZXN0ZWRBcnJheSA9IHV0aWwudG9BcnJheSh0aGlzLm5lc3RlZCkpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBOYW1lc3BhY2UgZGVzY3JpcHRvci5cclxuICogQGludGVyZmFjZSBJTmFtZXNwYWNlXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBOYW1lc3BhY2Ugb3B0aW9uc1xyXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLEFueU5lc3RlZE9iamVjdD59IFtuZXN0ZWRdIE5lc3RlZCBvYmplY3QgZGVzY3JpcHRvcnNcclxuICovXHJcblxyXG4vKipcclxuICogQW55IGV4dGVuc2lvbiBmaWVsZCBkZXNjcmlwdG9yLlxyXG4gKiBAdHlwZWRlZiBBbnlFeHRlbnNpb25GaWVsZFxyXG4gKiBAdHlwZSB7SUV4dGVuc2lvbkZpZWxkfElFeHRlbnNpb25NYXBGaWVsZH1cclxuICovXHJcblxyXG4vKipcclxuICogQW55IG5lc3RlZCBvYmplY3QgZGVzY3JpcHRvci5cclxuICogQHR5cGVkZWYgQW55TmVzdGVkT2JqZWN0XHJcbiAqIEB0eXBlIHtJRW51bXxJVHlwZXxJU2VydmljZXxBbnlFeHRlbnNpb25GaWVsZHxJTmFtZXNwYWNlfVxyXG4gKi9cclxuLy8gXiBCRVdBUkU6IFZTQ29kZSBoYW5ncyBmb3JldmVyIHdoZW4gdXNpbmcgbW9yZSB0aGFuIDUgdHlwZXMgKHRoYXQncyB3aHkgQW55RXh0ZW5zaW9uRmllbGQgZXhpc3RzIGluIHRoZSBmaXJzdCBwbGFjZSlcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIG5hbWVzcGFjZSB0byBhIG5hbWVzcGFjZSBkZXNjcmlwdG9yLlxyXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcclxuICogQHJldHVybnMge0lOYW1lc3BhY2V9IE5hbWVzcGFjZSBkZXNjcmlwdG9yXHJcbiAqL1xyXG5OYW1lc3BhY2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XHJcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXHJcbiAgICAgICAgXCJvcHRpb25zXCIgLCB0aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgXCJuZXN0ZWRcIiAgLCBhcnJheVRvSlNPTih0aGlzLm5lc3RlZEFycmF5LCB0b0pTT05PcHRpb25zKVxyXG4gICAgXSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBuZXN0ZWQgb2JqZWN0cyB0byB0aGlzIG5hbWVzcGFjZSBmcm9tIG5lc3RlZCBvYmplY3QgZGVzY3JpcHRvcnMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsQW55TmVzdGVkT2JqZWN0Pn0gbmVzdGVkSnNvbiBBbnkgbmVzdGVkIG9iamVjdCBkZXNjcmlwdG9yc1xyXG4gKiBAcmV0dXJucyB7TmFtZXNwYWNlfSBgdGhpc2BcclxuICovXHJcbk5hbWVzcGFjZS5wcm90b3R5cGUuYWRkSlNPTiA9IGZ1bmN0aW9uIGFkZEpTT04obmVzdGVkSnNvbikge1xyXG4gICAgdmFyIG5zID0gdGhpcztcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICBpZiAobmVzdGVkSnNvbikge1xyXG4gICAgICAgIGZvciAodmFyIG5hbWVzID0gT2JqZWN0LmtleXMobmVzdGVkSnNvbiksIGkgPSAwLCBuZXN0ZWQ7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRKc29uW25hbWVzW2ldXTtcclxuICAgICAgICAgICAgbnMuYWRkKCAvLyBtb3N0IHRvIGxlYXN0IGxpa2VseVxyXG4gICAgICAgICAgICAgICAgKCBuZXN0ZWQuZmllbGRzICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgID8gVHlwZS5mcm9tSlNPTlxyXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQudmFsdWVzICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgID8gRW51bS5mcm9tSlNPTlxyXG4gICAgICAgICAgICAgICAgOiBuZXN0ZWQubWV0aG9kcyAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICA/IFNlcnZpY2UuZnJvbUpTT05cclxuICAgICAgICAgICAgICAgIDogbmVzdGVkLmlkICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgID8gRmllbGQuZnJvbUpTT05cclxuICAgICAgICAgICAgICAgIDogTmFtZXNwYWNlLmZyb21KU09OICkobmFtZXNbaV0sIG5lc3RlZClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBuZXN0ZWQgb2JqZWN0IG9mIHRoZSBzcGVjaWZpZWQgbmFtZS5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmVzdGVkIG9iamVjdCBuYW1lXHJcbiAqIEByZXR1cm5zIHtSZWZsZWN0aW9uT2JqZWN0fG51bGx9IFRoZSByZWZsZWN0aW9uIG9iamVjdCBvciBgbnVsbGAgaWYgaXQgZG9lc24ndCBleGlzdFxyXG4gKi9cclxuTmFtZXNwYWNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xyXG4gICAgcmV0dXJuIHRoaXMubmVzdGVkICYmIHRoaXMubmVzdGVkW25hbWVdXHJcbiAgICAgICAgfHwgbnVsbDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSB2YWx1ZXMgb2YgdGhlIG5lc3RlZCB7QGxpbmsgRW51bXxlbnVtfSBvZiB0aGUgc3BlY2lmaWVkIG5hbWUuXHJcbiAqIFRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNnZXR8Z2V0fSBpbiB0aGF0IGl0IHJldHVybnMgYW4gZW51bSdzIHZhbHVlcyBkaXJlY3RseSBhbmQgdGhyb3dzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYC5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmVzdGVkIGVudW0gbmFtZVxyXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn0gRW51bSB2YWx1ZXNcclxuICogQHRocm93cyB7RXJyb3J9IElmIHRoZXJlIGlzIG5vIHN1Y2ggZW51bVxyXG4gKi9cclxuTmFtZXNwYWNlLnByb3RvdHlwZS5nZXRFbnVtID0gZnVuY3Rpb24gZ2V0RW51bShuYW1lKSB7XHJcbiAgICBpZiAodGhpcy5uZXN0ZWQgJiYgdGhpcy5uZXN0ZWRbbmFtZV0gaW5zdGFuY2VvZiBFbnVtKVxyXG4gICAgICAgIHJldHVybiB0aGlzLm5lc3RlZFtuYW1lXS52YWx1ZXM7XHJcbiAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggZW51bTogXCIgKyBuYW1lKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgbmVzdGVkIG9iamVjdCB0byB0aGlzIG5hbWVzcGFjZS5cclxuICogQHBhcmFtIHtSZWZsZWN0aW9uT2JqZWN0fSBvYmplY3QgTmVzdGVkIG9iamVjdCB0byBhZGRcclxuICogQHJldHVybnMge05hbWVzcGFjZX0gYHRoaXNgXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgbmVzdGVkIG9iamVjdCB3aXRoIHRoaXMgbmFtZVxyXG4gKi9cclxuTmFtZXNwYWNlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQob2JqZWN0KSB7XHJcblxyXG4gICAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgRmllbGQgJiYgb2JqZWN0LmV4dGVuZCAhPT0gdW5kZWZpbmVkIHx8IG9iamVjdCBpbnN0YW5jZW9mIFR5cGUgfHwgb2JqZWN0IGluc3RhbmNlb2YgRW51bSB8fCBvYmplY3QgaW5zdGFuY2VvZiBTZXJ2aWNlIHx8IG9iamVjdCBpbnN0YW5jZW9mIE5hbWVzcGFjZSkpXHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwib2JqZWN0IG11c3QgYmUgYSB2YWxpZCBuZXN0ZWQgb2JqZWN0XCIpO1xyXG5cclxuICAgIGlmICghdGhpcy5uZXN0ZWQpXHJcbiAgICAgICAgdGhpcy5uZXN0ZWQgPSB7fTtcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBwcmV2ID0gdGhpcy5nZXQob2JqZWN0Lm5hbWUpO1xyXG4gICAgICAgIGlmIChwcmV2KSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2IGluc3RhbmNlb2YgTmFtZXNwYWNlICYmIG9iamVjdCBpbnN0YW5jZW9mIE5hbWVzcGFjZSAmJiAhKHByZXYgaW5zdGFuY2VvZiBUeXBlIHx8IHByZXYgaW5zdGFuY2VvZiBTZXJ2aWNlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBwbGFpbiBuYW1lc3BhY2UgYnV0IGtlZXAgZXhpc3RpbmcgbmVzdGVkIGVsZW1lbnRzIGFuZCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICB2YXIgbmVzdGVkID0gcHJldi5uZXN0ZWRBcnJheTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVzdGVkLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5hZGQobmVzdGVkW2ldKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHByZXYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5lc3RlZClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5lc3RlZCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0LnNldE9wdGlvbnMocHJldi5vcHRpb25zLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJkdXBsaWNhdGUgbmFtZSAnXCIgKyBvYmplY3QubmFtZSArIFwiJyBpbiBcIiArIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMubmVzdGVkW29iamVjdC5uYW1lXSA9IG9iamVjdDtcclxuICAgIG9iamVjdC5vbkFkZCh0aGlzKTtcclxuICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYSBuZXN0ZWQgb2JqZWN0IGZyb20gdGhpcyBuYW1lc3BhY2UuXHJcbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE5lc3RlZCBvYmplY3QgdG8gcmVtb3ZlXHJcbiAqIEByZXR1cm5zIHtOYW1lc3BhY2V9IGB0aGlzYFxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYG9iamVjdGAgaXMgbm90IGEgbWVtYmVyIG9mIHRoaXMgbmFtZXNwYWNlXHJcbiAqL1xyXG5OYW1lc3BhY2UucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShvYmplY3QpIHtcclxuXHJcbiAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBSZWZsZWN0aW9uT2JqZWN0KSlcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJvYmplY3QgbXVzdCBiZSBhIFJlZmxlY3Rpb25PYmplY3RcIik7XHJcbiAgICBpZiAob2JqZWN0LnBhcmVudCAhPT0gdGhpcylcclxuICAgICAgICB0aHJvdyBFcnJvcihvYmplY3QgKyBcIiBpcyBub3QgYSBtZW1iZXIgb2YgXCIgKyB0aGlzKTtcclxuXHJcbiAgICBkZWxldGUgdGhpcy5uZXN0ZWRbb2JqZWN0Lm5hbWVdO1xyXG4gICAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLm5lc3RlZCkubGVuZ3RoKVxyXG4gICAgICAgIHRoaXMubmVzdGVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIG9iamVjdC5vblJlbW92ZSh0aGlzKTtcclxuICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgYWRkaXRpYWwgbmFtZXNwYWNlcyB3aXRoaW4gdGhpcyBvbmUgaWYgbm90IHlldCBleGlzdGluZy5cclxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBjcmVhdGVcclxuICogQHBhcmFtIHsqfSBbanNvbl0gTmVzdGVkIHR5cGVzIHRvIGNyZWF0ZSBmcm9tIEpTT05cclxuICogQHJldHVybnMge05hbWVzcGFjZX0gUG9pbnRlciB0byB0aGUgbGFzdCBuYW1lc3BhY2UgY3JlYXRlZCBvciBgdGhpc2AgaWYgcGF0aCBpcyBlbXB0eVxyXG4gKi9cclxuTmFtZXNwYWNlLnByb3RvdHlwZS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUocGF0aCwganNvbikge1xyXG5cclxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHBhdGgpKVxyXG4gICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KFwiLlwiKTtcclxuICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHBhdGgpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImlsbGVnYWwgcGF0aFwiKTtcclxuICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoICYmIHBhdGhbMF0gPT09IFwiXCIpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJwYXRoIG11c3QgYmUgcmVsYXRpdmVcIik7XHJcblxyXG4gICAgdmFyIHB0ciA9IHRoaXM7XHJcbiAgICB3aGlsZSAocGF0aC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHBhcnQgPSBwYXRoLnNoaWZ0KCk7XHJcbiAgICAgICAgaWYgKHB0ci5uZXN0ZWQgJiYgcHRyLm5lc3RlZFtwYXJ0XSkge1xyXG4gICAgICAgICAgICBwdHIgPSBwdHIubmVzdGVkW3BhcnRdO1xyXG4gICAgICAgICAgICBpZiAoIShwdHIgaW5zdGFuY2VvZiBOYW1lc3BhY2UpKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJwYXRoIGNvbmZsaWN0cyB3aXRoIG5vbi1uYW1lc3BhY2Ugb2JqZWN0c1wiKTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgcHRyLmFkZChwdHIgPSBuZXcgTmFtZXNwYWNlKHBhcnQpKTtcclxuICAgIH1cclxuICAgIGlmIChqc29uKVxyXG4gICAgICAgIHB0ci5hZGRKU09OKGpzb24pO1xyXG4gICAgcmV0dXJuIHB0cjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXNvbHZlcyB0aGlzIG5hbWVzcGFjZSdzIGFuZCBhbGwgaXRzIG5lc3RlZCBvYmplY3RzJyB0eXBlIHJlZmVyZW5jZXMuIFVzZWZ1bCB0byB2YWxpZGF0ZSBhIHJlZmxlY3Rpb24gdHJlZSwgYnV0IGNvbWVzIGF0IGEgY29zdC5cclxuICogQHJldHVybnMge05hbWVzcGFjZX0gYHRoaXNgXHJcbiAqL1xyXG5OYW1lc3BhY2UucHJvdG90eXBlLnJlc29sdmVBbGwgPSBmdW5jdGlvbiByZXNvbHZlQWxsKCkge1xyXG4gICAgdmFyIG5lc3RlZCA9IHRoaXMubmVzdGVkQXJyYXksIGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBuZXN0ZWQubGVuZ3RoKVxyXG4gICAgICAgIGlmIChuZXN0ZWRbaV0gaW5zdGFuY2VvZiBOYW1lc3BhY2UpXHJcbiAgICAgICAgICAgIG5lc3RlZFtpKytdLnJlc29sdmVBbGwoKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIG5lc3RlZFtpKytdLnJlc29sdmUoKTtcclxuICAgIHJldHVybiB0aGlzLnJlc29sdmUoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBsb29rcyB1cCB0aGUgcmVmbGVjdGlvbiBvYmplY3QgbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCBwYXRoIGluIHRoZSBzY29wZSBvZiB0aGlzIG5hbWVzcGFjZS5cclxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXHJcbiAqIEBwYXJhbSB7KnxBcnJheS48Kj59IGZpbHRlclR5cGVzIEZpbHRlciB0eXBlcywgYW55IGNvbWJpbmF0aW9uIG9mIHRoZSBjb25zdHJ1Y3RvcnMgb2YgYHByb3RvYnVmLlR5cGVgLCBgcHJvdG9idWYuRW51bWAsIGBwcm90b2J1Zi5TZXJ2aWNlYCBldGMuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmVudEFscmVhZHlDaGVja2VkPWZhbHNlXSBJZiBrbm93biwgd2hldGhlciB0aGUgcGFyZW50IGhhcyBhbHJlYWR5IGJlZW4gY2hlY2tlZFxyXG4gKiBAcmV0dXJucyB7UmVmbGVjdGlvbk9iamVjdHxudWxsfSBMb29rZWQgdXAgb2JqZWN0IG9yIGBudWxsYCBpZiBub25lIGNvdWxkIGJlIGZvdW5kXHJcbiAqL1xyXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cCA9IGZ1bmN0aW9uIGxvb2t1cChwYXRoLCBmaWx0ZXJUeXBlcywgcGFyZW50QWxyZWFkeUNoZWNrZWQpIHtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJUeXBlcyA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICBwYXJlbnRBbHJlYWR5Q2hlY2tlZCA9IGZpbHRlclR5cGVzO1xyXG4gICAgICAgIGZpbHRlclR5cGVzID0gdW5kZWZpbmVkO1xyXG4gICAgfSBlbHNlIGlmIChmaWx0ZXJUeXBlcyAmJiAhQXJyYXkuaXNBcnJheShmaWx0ZXJUeXBlcykpXHJcbiAgICAgICAgZmlsdGVyVHlwZXMgPSBbIGZpbHRlclR5cGVzIF07XHJcblxyXG4gICAgaWYgKHV0aWwuaXNTdHJpbmcocGF0aCkgJiYgcGF0aC5sZW5ndGgpIHtcclxuICAgICAgICBpZiAocGF0aCA9PT0gXCIuXCIpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvb3Q7XHJcbiAgICAgICAgcGF0aCA9IHBhdGguc3BsaXQoXCIuXCIpO1xyXG4gICAgfSBlbHNlIGlmICghcGF0aC5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgLy8gU3RhcnQgYXQgcm9vdCBpZiBwYXRoIGlzIGFic29sdXRlXHJcbiAgICBpZiAocGF0aFswXSA9PT0gXCJcIilcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Lmxvb2t1cChwYXRoLnNsaWNlKDEpLCBmaWx0ZXJUeXBlcyk7XHJcblxyXG4gICAgLy8gVGVzdCBpZiB0aGUgZmlyc3QgcGFydCBtYXRjaGVzIGFueSBuZXN0ZWQgb2JqZWN0LCBhbmQgaWYgc28sIHRyYXZlcnNlIGlmIHBhdGggY29udGFpbnMgbW9yZVxyXG4gICAgdmFyIGZvdW5kID0gdGhpcy5nZXQocGF0aFswXSk7XHJcbiAgICBpZiAoZm91bmQpIHtcclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKCFmaWx0ZXJUeXBlcyB8fCBmaWx0ZXJUeXBlcy5pbmRleE9mKGZvdW5kLmNvbnN0cnVjdG9yKSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZm91bmQgaW5zdGFuY2VvZiBOYW1lc3BhY2UgJiYgKGZvdW5kID0gZm91bmQubG9va3VwKHBhdGguc2xpY2UoMSksIGZpbHRlclR5cGVzLCB0cnVlKSkpXHJcbiAgICAgICAgICAgIHJldHVybiBmb3VuZDtcclxuXHJcbiAgICAvLyBPdGhlcndpc2UgdHJ5IGVhY2ggbmVzdGVkIG5hbWVzcGFjZVxyXG4gICAgfSBlbHNlXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5lc3RlZEFycmF5Lmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fbmVzdGVkQXJyYXlbaV0gaW5zdGFuY2VvZiBOYW1lc3BhY2UgJiYgKGZvdW5kID0gdGhpcy5fbmVzdGVkQXJyYXlbaV0ubG9va3VwKHBhdGgsIGZpbHRlclR5cGVzLCB0cnVlKSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmQ7XHJcblxyXG4gICAgLy8gSWYgdGhlcmUgaGFzbid0IGJlZW4gYSBtYXRjaCwgdHJ5IGFnYWluIGF0IHRoZSBwYXJlbnRcclxuICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnRBbHJlYWR5Q2hlY2tlZClcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiB0aGlzLnBhcmVudC5sb29rdXAocGF0aCwgZmlsdGVyVHlwZXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIExvb2tzIHVwIHRoZSByZWZsZWN0aW9uIG9iamVjdCBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxyXG4gKiBAbmFtZSBOYW1lc3BhY2VCYXNlI2xvb2t1cFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmVudEFscmVhZHlDaGVja2VkPWZhbHNlXSBXaGV0aGVyIHRoZSBwYXJlbnQgaGFzIGFscmVhZHkgYmVlbiBjaGVja2VkXHJcbiAqIEByZXR1cm5zIHtSZWZsZWN0aW9uT2JqZWN0fG51bGx9IExvb2tlZCB1cCBvYmplY3Qgb3IgYG51bGxgIGlmIG5vbmUgY291bGQgYmUgZm91bmRcclxuICogQHZhcmlhdGlvbiAyXHJcbiAqL1xyXG4vLyBsb29rdXAocGF0aDogc3RyaW5nLCBbcGFyZW50QWxyZWFkeUNoZWNrZWQ6IGJvb2xlYW5dKVxyXG5cclxuLyoqXHJcbiAqIExvb2tzIHVwIHRoZSB7QGxpbmsgVHlwZXx0eXBlfSBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxyXG4gKiBCZXNpZGVzIGl0cyBzaWduYXR1cmUsIHRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNsb29rdXB8bG9va3VwfSBpbiB0aGF0IGl0IHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxyXG4gKiBAcmV0dXJucyB7VHlwZX0gTG9va2VkIHVwIHR5cGVcclxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhIHR5cGVcclxuICovXHJcbk5hbWVzcGFjZS5wcm90b3R5cGUubG9va3VwVHlwZSA9IGZ1bmN0aW9uIGxvb2t1cFR5cGUocGF0aCkge1xyXG4gICAgdmFyIGZvdW5kID0gdGhpcy5sb29rdXAocGF0aCwgWyBUeXBlIF0pO1xyXG4gICAgaWYgKCFmb3VuZClcclxuICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggdHlwZTogXCIgKyBwYXRoKTtcclxuICAgIHJldHVybiBmb3VuZDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBMb29rcyB1cCB0aGUgdmFsdWVzIG9mIHRoZSB7QGxpbmsgRW51bXxlbnVtfSBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxyXG4gKiBCZXNpZGVzIGl0cyBzaWduYXR1cmUsIHRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNsb29rdXB8bG9va3VwfSBpbiB0aGF0IGl0IHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxyXG4gKiBAcmV0dXJucyB7RW51bX0gTG9va2VkIHVwIGVudW1cclxuICogQHRocm93cyB7RXJyb3J9IElmIGBwYXRoYCBkb2VzIG5vdCBwb2ludCB0byBhbiBlbnVtXHJcbiAqL1xyXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cEVudW0gPSBmdW5jdGlvbiBsb29rdXBFbnVtKHBhdGgpIHtcclxuICAgIHZhciBmb3VuZCA9IHRoaXMubG9va3VwKHBhdGgsIFsgRW51bSBdKTtcclxuICAgIGlmICghZm91bmQpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIEVudW0gJ1wiICsgcGF0aCArIFwiJyBpbiBcIiArIHRoaXMpO1xyXG4gICAgcmV0dXJuIGZvdW5kO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIExvb2tzIHVwIHRoZSB7QGxpbmsgVHlwZXx0eXBlfSBvciB7QGxpbmsgRW51bXxlbnVtfSBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIHJlbGF0aXZlIHRvIHRoaXMgbmFtZXNwYWNlLlxyXG4gKiBCZXNpZGVzIGl0cyBzaWduYXR1cmUsIHRoaXMgbWV0aG9kcyBkaWZmZXJzIGZyb20ge0BsaW5rIE5hbWVzcGFjZSNsb29rdXB8bG9va3VwfSBpbiB0aGF0IGl0IHRocm93cyBpbnN0ZWFkIG9mIHJldHVybmluZyBgbnVsbGAuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBwYXRoIFBhdGggdG8gbG9vayB1cFxyXG4gKiBAcmV0dXJucyB7VHlwZX0gTG9va2VkIHVwIHR5cGUgb3IgZW51bVxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYHBhdGhgIGRvZXMgbm90IHBvaW50IHRvIGEgdHlwZSBvciBlbnVtXHJcbiAqL1xyXG5OYW1lc3BhY2UucHJvdG90eXBlLmxvb2t1cFR5cGVPckVudW0gPSBmdW5jdGlvbiBsb29rdXBUeXBlT3JFbnVtKHBhdGgpIHtcclxuICAgIHZhciBmb3VuZCA9IHRoaXMubG9va3VwKHBhdGgsIFsgVHlwZSwgRW51bSBdKTtcclxuICAgIGlmICghZm91bmQpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIFR5cGUgb3IgRW51bSAnXCIgKyBwYXRoICsgXCInIGluIFwiICsgdGhpcyk7XHJcbiAgICByZXR1cm4gZm91bmQ7XHJcbn07XHJcblxyXG4vKipcclxuICogTG9va3MgdXAgdGhlIHtAbGluayBTZXJ2aWNlfHNlcnZpY2V9IGF0IHRoZSBzcGVjaWZpZWQgcGF0aCwgcmVsYXRpdmUgdG8gdGhpcyBuYW1lc3BhY2UuXHJcbiAqIEJlc2lkZXMgaXRzIHNpZ25hdHVyZSwgdGhpcyBtZXRob2RzIGRpZmZlcnMgZnJvbSB7QGxpbmsgTmFtZXNwYWNlI2xvb2t1cHxsb29rdXB9IGluIHRoYXQgaXQgdGhyb3dzIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYC5cclxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IHBhdGggUGF0aCB0byBsb29rIHVwXHJcbiAqIEByZXR1cm5zIHtTZXJ2aWNlfSBMb29rZWQgdXAgc2VydmljZVxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYHBhdGhgIGRvZXMgbm90IHBvaW50IHRvIGEgc2VydmljZVxyXG4gKi9cclxuTmFtZXNwYWNlLnByb3RvdHlwZS5sb29rdXBTZXJ2aWNlID0gZnVuY3Rpb24gbG9va3VwU2VydmljZShwYXRoKSB7XHJcbiAgICB2YXIgZm91bmQgPSB0aGlzLmxvb2t1cChwYXRoLCBbIFNlcnZpY2UgXSk7XHJcbiAgICBpZiAoIWZvdW5kKVxyXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gc3VjaCBTZXJ2aWNlICdcIiArIHBhdGggKyBcIicgaW4gXCIgKyB0aGlzKTtcclxuICAgIHJldHVybiBmb3VuZDtcclxufTtcclxuXHJcbi8vIFNldHMgdXAgY3ljbGljIGRlcGVuZGVuY2llcyAoY2FsbGVkIGluIGluZGV4LWxpZ2h0KVxyXG5OYW1lc3BhY2UuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKFR5cGVfLCBTZXJ2aWNlXywgRW51bV8pIHtcclxuICAgIFR5cGUgICAgPSBUeXBlXztcclxuICAgIFNlcnZpY2UgPSBTZXJ2aWNlXztcclxuICAgIEVudW0gICAgPSBFbnVtXztcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdGlvbk9iamVjdDtcclxuXHJcblJlZmxlY3Rpb25PYmplY3QuY2xhc3NOYW1lID0gXCJSZWZsZWN0aW9uT2JqZWN0XCI7XHJcblxyXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XHJcblxyXG52YXIgUm9vdDsgLy8gY3ljbGljXHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyByZWZsZWN0aW9uIG9iamVjdCBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBCYXNlIGNsYXNzIG9mIGFsbCByZWZsZWN0aW9uIG9iamVjdHMuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBPYmplY3QgbmFtZVxyXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xyXG4gKiBAYWJzdHJhY3RcclxuICovXHJcbmZ1bmN0aW9uIFJlZmxlY3Rpb25PYmplY3QobmFtZSwgb3B0aW9ucykge1xyXG5cclxuICAgIGlmICghdXRpbC5pc1N0cmluZyhuYW1lKSlcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJuYW1lIG11c3QgYmUgYSBzdHJpbmdcIik7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMgJiYgIXV0aWwuaXNPYmplY3Qob3B0aW9ucykpXHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwib3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdFwiKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj58dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zOyAvLyB0b0pTT05cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlLlxyXG4gICAgICogQHR5cGUge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmVudCBuYW1lc3BhY2UuXHJcbiAgICAgKiBAdHlwZSB7TmFtZXNwYWNlfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgYWxyZWFkeSByZXNvbHZlZCBvciBub3QuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tbWVudCB0ZXh0LCBpZiBhbnkuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuY29tbWVudCA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWZpbmluZyBmaWxlIG5hbWUuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuZmlsZW5hbWUgPSBudWxsO1xyXG59XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZSwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IG5hbWVzcGFjZS5cclxuICAgICAqIEBuYW1lIFJlZmxlY3Rpb25PYmplY3Qjcm9vdFxyXG4gICAgICogQHR5cGUge1Jvb3R9XHJcbiAgICAgKiBAcmVhZG9ubHlcclxuICAgICAqL1xyXG4gICAgcm9vdDoge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwdHIgPSB0aGlzO1xyXG4gICAgICAgICAgICB3aGlsZSAocHRyLnBhcmVudCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHB0ciA9IHB0ci5wYXJlbnQ7XHJcbiAgICAgICAgICAgIHJldHVybiBwdHI7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bGwgbmFtZSBpbmNsdWRpbmcgbGVhZGluZyBkb3QuXHJcbiAgICAgKiBAbmFtZSBSZWZsZWN0aW9uT2JqZWN0I2Z1bGxOYW1lXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICogQHJlYWRvbmx5XHJcbiAgICAgKi9cclxuICAgIGZ1bGxOYW1lOiB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHBhdGggPSBbIHRoaXMubmFtZSBdLFxyXG4gICAgICAgICAgICAgICAgcHRyID0gdGhpcy5wYXJlbnQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChwdHIpIHtcclxuICAgICAgICAgICAgICAgIHBhdGgudW5zaGlmdChwdHIubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBwdHIgPSBwdHIucGFyZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoLmpvaW4oXCIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyByZWZsZWN0aW9uIG9iamVjdCB0byBpdHMgZGVzY3JpcHRvciByZXByZXNlbnRhdGlvbi5cclxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBEZXNjcmlwdG9yXHJcbiAqIEBhYnN0cmFjdFxyXG4gKi9cclxuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUudG9KU09OID0gLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gdG9KU09OKCkge1xyXG4gICAgdGhyb3cgRXJyb3IoKTsgLy8gbm90IGltcGxlbWVudGVkLCBzaG91bGRuJ3QgaGFwcGVuXHJcbn07XHJcblxyXG4vKipcclxuICogQ2FsbGVkIHdoZW4gdGhpcyBvYmplY3QgaXMgYWRkZWQgdG8gYSBwYXJlbnQuXHJcbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gcGFyZW50IFBhcmVudCBhZGRlZCB0b1xyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUub25BZGQgPSBmdW5jdGlvbiBvbkFkZChwYXJlbnQpIHtcclxuICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudCAhPT0gcGFyZW50KVxyXG4gICAgICAgIHRoaXMucGFyZW50LnJlbW92ZSh0aGlzKTtcclxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xyXG4gICAgdmFyIHJvb3QgPSBwYXJlbnQucm9vdDtcclxuICAgIGlmIChyb290IGluc3RhbmNlb2YgUm9vdClcclxuICAgICAgICByb290Ll9oYW5kbGVBZGQodGhpcyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2FsbGVkIHdoZW4gdGhpcyBvYmplY3QgaXMgcmVtb3ZlZCBmcm9tIGEgcGFyZW50LlxyXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IHBhcmVudCBQYXJlbnQgcmVtb3ZlZCBmcm9tXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uIG9uUmVtb3ZlKHBhcmVudCkge1xyXG4gICAgdmFyIHJvb3QgPSBwYXJlbnQucm9vdDtcclxuICAgIGlmIChyb290IGluc3RhbmNlb2YgUm9vdClcclxuICAgICAgICByb290Ll9oYW5kbGVSZW1vdmUodGhpcyk7XHJcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2U7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVzb2x2ZXMgdGhpcyBvYmplY3RzIHR5cGUgcmVmZXJlbmNlcy5cclxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R9IGB0aGlzYFxyXG4gKi9cclxuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XHJcbiAgICBpZiAodGhpcy5yZXNvbHZlZClcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIGlmICh0aGlzLnJvb3QgaW5zdGFuY2VvZiBSb290KVxyXG4gICAgICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlOyAvLyBvbmx5IGlmIHBhcnQgb2YgYSByb290XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIGFuIG9wdGlvbiB2YWx1ZS5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT3B0aW9uIG5hbWVcclxuICogQHJldHVybnMgeyp9IE9wdGlvbiB2YWx1ZSBvciBgdW5kZWZpbmVkYCBpZiBub3Qgc2V0XHJcbiAqL1xyXG5SZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5nZXRPcHRpb24gPSBmdW5jdGlvbiBnZXRPcHRpb24obmFtZSkge1xyXG4gICAgaWYgKHRoaXMub3B0aW9ucylcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW25hbWVdO1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIGFuIG9wdGlvbi5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT3B0aW9uIG5hbWVcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBPcHRpb24gdmFsdWVcclxuICogQHBhcmFtIHtib29sZWFufSBbaWZOb3RTZXRdIFNldHMgdGhlIG9wdGlvbiBvbmx5IGlmIGl0IGlzbid0IGN1cnJlbnRseSBzZXRcclxuICogQHJldHVybnMge1JlZmxlY3Rpb25PYmplY3R9IGB0aGlzYFxyXG4gKi9cclxuUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUuc2V0T3B0aW9uID0gZnVuY3Rpb24gc2V0T3B0aW9uKG5hbWUsIHZhbHVlLCBpZk5vdFNldCkge1xyXG4gICAgaWYgKCFpZk5vdFNldCB8fCAhdGhpcy5vcHRpb25zIHx8IHRoaXMub3B0aW9uc1tuYW1lXSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICh0aGlzLm9wdGlvbnMgfHwgKHRoaXMub3B0aW9ucyA9IHt9KSlbbmFtZV0gPSB2YWx1ZTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgbXVsdGlwbGUgb3B0aW9ucy5cclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gb3B0aW9ucyBPcHRpb25zIHRvIHNldFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpZk5vdFNldF0gU2V0cyBhbiBvcHRpb24gb25seSBpZiBpdCBpc24ndCBjdXJyZW50bHkgc2V0XHJcbiAqIEByZXR1cm5zIHtSZWZsZWN0aW9uT2JqZWN0fSBgdGhpc2BcclxuICovXHJcblJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMsIGlmTm90U2V0KSB7XHJcbiAgICBpZiAob3B0aW9ucylcclxuICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgdGhpcy5zZXRPcHRpb24oa2V5c1tpXSwgb3B0aW9uc1trZXlzW2ldXSwgaWZOb3RTZXQpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBpbnN0YW5jZSB0byBpdHMgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDbGFzcyBuYW1lWywgc3BhY2UsIGZ1bGwgbmFtZV1cclxuICovXHJcblJlZmxlY3Rpb25PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5jbGFzc05hbWUsXHJcbiAgICAgICAgZnVsbE5hbWUgID0gdGhpcy5mdWxsTmFtZTtcclxuICAgIGlmIChmdWxsTmFtZS5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZSArIFwiIFwiICsgZnVsbE5hbWU7XHJcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xyXG59O1xyXG5cclxuLy8gU2V0cyB1cCBjeWNsaWMgZGVwZW5kZW5jaWVzIChjYWxsZWQgaW4gaW5kZXgtbGlnaHQpXHJcblJlZmxlY3Rpb25PYmplY3QuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKFJvb3RfKSB7XHJcbiAgICBSb290ID0gUm9vdF87XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IE9uZU9mO1xyXG5cclxuLy8gZXh0ZW5kcyBSZWZsZWN0aW9uT2JqZWN0XHJcbnZhciBSZWZsZWN0aW9uT2JqZWN0ID0gcmVxdWlyZShcIi4vb2JqZWN0XCIpO1xyXG4oKE9uZU9mLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IE9uZU9mKS5jbGFzc05hbWUgPSBcIk9uZU9mXCI7XHJcblxyXG52YXIgRmllbGQgPSByZXF1aXJlKFwiLi9maWVsZFwiKSxcclxuICAgIHV0aWwgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG9uZW9mIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBvbmVvZi5cclxuICogQGV4dGVuZHMgUmVmbGVjdGlvbk9iamVjdFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT25lb2YgbmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfE9iamVjdC48c3RyaW5nLCo+fSBbZmllbGROYW1lc10gRmllbGQgbmFtZXNcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIERlY2xhcmVkIG9wdGlvbnNcclxuICogQHBhcmFtIHtzdHJpbmd9IFtjb21tZW50XSBDb21tZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGZpZWxkXHJcbiAqL1xyXG5mdW5jdGlvbiBPbmVPZihuYW1lLCBmaWVsZE5hbWVzLCBvcHRpb25zLCBjb21tZW50KSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmllbGROYW1lcykpIHtcclxuICAgICAgICBvcHRpb25zID0gZmllbGROYW1lcztcclxuICAgICAgICBmaWVsZE5hbWVzID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgUmVmbGVjdGlvbk9iamVjdC5jYWxsKHRoaXMsIG5hbWUsIG9wdGlvbnMpO1xyXG5cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKCEoZmllbGROYW1lcyA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkoZmllbGROYW1lcykpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImZpZWxkTmFtZXMgbXVzdCBiZSBhbiBBcnJheVwiKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpZWxkIG5hbWVzIHRoYXQgYmVsb25nIHRvIHRoaXMgb25lb2YuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nW119XHJcbiAgICAgKi9cclxuICAgIHRoaXMub25lb2YgPSBmaWVsZE5hbWVzIHx8IFtdOyAvLyB0b0pTT04sIG1hcmtlclxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmllbGRzIHRoYXQgYmVsb25nIHRvIHRoaXMgb25lb2YgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cclxuICAgICAqIEB0eXBlIHtGaWVsZFtdfVxyXG4gICAgICogQHJlYWRvbmx5XHJcbiAgICAgKi9cclxuICAgIHRoaXMuZmllbGRzQXJyYXkgPSBbXTsgLy8gZGVjbGFyZWQgcmVhZG9ubHkgZm9yIGNvbmZvcm1hbmNlLCBwb3NzaWJseSBub3QgeWV0IGFkZGVkIHRvIHBhcmVudFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tbWVudCBmb3IgdGhpcyBmaWVsZC5cclxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5jb21tZW50ID0gY29tbWVudDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE9uZW9mIGRlc2NyaXB0b3IuXHJcbiAqIEBpbnRlcmZhY2UgSU9uZU9mXHJcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz59IG9uZW9mIE9uZW9mIGZpZWxkIG5hbWVzXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBPbmVvZiBvcHRpb25zXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBvbmVvZiBmcm9tIGEgb25lb2YgZGVzY3JpcHRvci5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT25lb2YgbmFtZVxyXG4gKiBAcGFyYW0ge0lPbmVPZn0ganNvbiBPbmVvZiBkZXNjcmlwdG9yXHJcbiAqIEByZXR1cm5zIHtPbmVPZn0gQ3JlYXRlZCBvbmVvZlxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFyZ3VtZW50cyBhcmUgaW52YWxpZFxyXG4gKi9cclxuT25lT2YuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XHJcbiAgICByZXR1cm4gbmV3IE9uZU9mKG5hbWUsIGpzb24ub25lb2YsIGpzb24ub3B0aW9ucywganNvbi5jb21tZW50KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIG9uZW9mIHRvIGEgb25lb2YgZGVzY3JpcHRvci5cclxuICogQHBhcmFtIHtJVG9KU09OT3B0aW9uc30gW3RvSlNPTk9wdGlvbnNdIEpTT04gY29udmVyc2lvbiBvcHRpb25zXHJcbiAqIEByZXR1cm5zIHtJT25lT2Z9IE9uZW9mIGRlc2NyaXB0b3JcclxuICovXHJcbk9uZU9mLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xyXG4gICAgdmFyIGtlZXBDb21tZW50cyA9IHRvSlNPTk9wdGlvbnMgPyBCb29sZWFuKHRvSlNPTk9wdGlvbnMua2VlcENvbW1lbnRzKSA6IGZhbHNlO1xyXG4gICAgcmV0dXJuIHV0aWwudG9PYmplY3QoW1xyXG4gICAgICAgIFwib3B0aW9uc1wiICwgdGhpcy5vcHRpb25zLFxyXG4gICAgICAgIFwib25lb2ZcIiAgICwgdGhpcy5vbmVvZixcclxuICAgICAgICBcImNvbW1lbnRcIiAsIGtlZXBDb21tZW50cyA/IHRoaXMuY29tbWVudCA6IHVuZGVmaW5lZFxyXG4gICAgXSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyB0aGUgZmllbGRzIG9mIHRoZSBzcGVjaWZpZWQgb25lb2YgdG8gdGhlIHBhcmVudCBpZiBub3QgYWxyZWFkeSBkb25lIHNvLlxyXG4gKiBAcGFyYW0ge09uZU9mfSBvbmVvZiBUaGUgb25lb2ZcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICogQGlubmVyXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbmZ1bmN0aW9uIGFkZEZpZWxkc1RvUGFyZW50KG9uZW9mKSB7XHJcbiAgICBpZiAob25lb2YucGFyZW50KVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb25lb2YuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgIGlmICghb25lb2YuZmllbGRzQXJyYXlbaV0ucGFyZW50KVxyXG4gICAgICAgICAgICAgICAgb25lb2YucGFyZW50LmFkZChvbmVvZi5maWVsZHNBcnJheVtpXSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgZmllbGQgdG8gdGhpcyBvbmVvZiBhbmQgcmVtb3ZlcyBpdCBmcm9tIGl0cyBjdXJyZW50IHBhcmVudCwgaWYgYW55LlxyXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBGaWVsZCB0byBhZGRcclxuICogQHJldHVybnMge09uZU9mfSBgdGhpc2BcclxuICovXHJcbk9uZU9mLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoZmllbGQpIHtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICghKGZpZWxkIGluc3RhbmNlb2YgRmllbGQpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImZpZWxkIG11c3QgYmUgYSBGaWVsZFwiKTtcclxuXHJcbiAgICBpZiAoZmllbGQucGFyZW50ICYmIGZpZWxkLnBhcmVudCAhPT0gdGhpcy5wYXJlbnQpXHJcbiAgICAgICAgZmllbGQucGFyZW50LnJlbW92ZShmaWVsZCk7XHJcbiAgICB0aGlzLm9uZW9mLnB1c2goZmllbGQubmFtZSk7XHJcbiAgICB0aGlzLmZpZWxkc0FycmF5LnB1c2goZmllbGQpO1xyXG4gICAgZmllbGQucGFydE9mID0gdGhpczsgLy8gZmllbGQucGFyZW50IHJlbWFpbnMgbnVsbFxyXG4gICAgYWRkRmllbGRzVG9QYXJlbnQodGhpcyk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGEgZmllbGQgZnJvbSB0aGlzIG9uZW9mIGFuZCBwdXRzIGl0IGJhY2sgdG8gdGhlIG9uZW9mJ3MgcGFyZW50LlxyXG4gKiBAcGFyYW0ge0ZpZWxkfSBmaWVsZCBGaWVsZCB0byByZW1vdmVcclxuICogQHJldHVybnMge09uZU9mfSBgdGhpc2BcclxuICovXHJcbk9uZU9mLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoZmllbGQpIHtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICghKGZpZWxkIGluc3RhbmNlb2YgRmllbGQpKVxyXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcImZpZWxkIG11c3QgYmUgYSBGaWVsZFwiKTtcclxuXHJcbiAgICB2YXIgaW5kZXggPSB0aGlzLmZpZWxkc0FycmF5LmluZGV4T2YoZmllbGQpO1xyXG5cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGluZGV4IDwgMClcclxuICAgICAgICB0aHJvdyBFcnJvcihmaWVsZCArIFwiIGlzIG5vdCBhIG1lbWJlciBvZiBcIiArIHRoaXMpO1xyXG5cclxuICAgIHRoaXMuZmllbGRzQXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIGluZGV4ID0gdGhpcy5vbmVvZi5pbmRleE9mKGZpZWxkLm5hbWUpO1xyXG5cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICBpZiAoaW5kZXggPiAtMSkgLy8gdGhlb3JldGljYWxcclxuICAgICAgICB0aGlzLm9uZW9mLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgZmllbGQucGFydE9mID0gbnVsbDtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuT25lT2YucHJvdG90eXBlLm9uQWRkID0gZnVuY3Rpb24gb25BZGQocGFyZW50KSB7XHJcbiAgICBSZWZsZWN0aW9uT2JqZWN0LnByb3RvdHlwZS5vbkFkZC5jYWxsKHRoaXMsIHBhcmVudCk7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAvLyBDb2xsZWN0IHByZXNlbnQgZmllbGRzXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub25lb2YubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgZmllbGQgPSBwYXJlbnQuZ2V0KHRoaXMub25lb2ZbaV0pO1xyXG4gICAgICAgIGlmIChmaWVsZCAmJiAhZmllbGQucGFydE9mKSB7XHJcbiAgICAgICAgICAgIGZpZWxkLnBhcnRPZiA9IHNlbGY7XHJcbiAgICAgICAgICAgIHNlbGYuZmllbGRzQXJyYXkucHVzaChmaWVsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQWRkIG5vdCB5ZXQgcHJlc2VudCBmaWVsZHNcclxuICAgIGFkZEZpZWxkc1RvUGFyZW50KHRoaXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuT25lT2YucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24gb25SZW1vdmUocGFyZW50KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgZmllbGQ7IGkgPCB0aGlzLmZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKVxyXG4gICAgICAgIGlmICgoZmllbGQgPSB0aGlzLmZpZWxkc0FycmF5W2ldKS5wYXJlbnQpXHJcbiAgICAgICAgICAgIGZpZWxkLnBhcmVudC5yZW1vdmUoZmllbGQpO1xyXG4gICAgUmVmbGVjdGlvbk9iamVjdC5wcm90b3R5cGUub25SZW1vdmUuY2FsbCh0aGlzLCBwYXJlbnQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciBmdW5jdGlvbiBhcyByZXR1cm5lZCBieSB7QGxpbmsgT25lT2YuZH0gKFR5cGVTY3JpcHQpLlxyXG4gKiBAdHlwZWRlZiBPbmVPZkRlY29yYXRvclxyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGFyZ2V0IHByb3RvdHlwZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gb25lb2ZOYW1lIE9uZU9mIG5hbWVcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogT25lT2YgZGVjb3JhdG9yIChUeXBlU2NyaXB0KS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBmaWVsZE5hbWVzIEZpZWxkIG5hbWVzXHJcbiAqIEByZXR1cm5zIHtPbmVPZkRlY29yYXRvcn0gRGVjb3JhdG9yIGZ1bmN0aW9uXHJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgc3RyaW5nXHJcbiAqL1xyXG5PbmVPZi5kID0gZnVuY3Rpb24gZGVjb3JhdGVPbmVPZigpIHtcclxuICAgIHZhciBmaWVsZE5hbWVzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLFxyXG4gICAgICAgIGluZGV4ID0gMDtcclxuICAgIHdoaWxlIChpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGgpXHJcbiAgICAgICAgZmllbGROYW1lc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gb25lT2ZEZWNvcmF0b3IocHJvdG90eXBlLCBvbmVvZk5hbWUpIHtcclxuICAgICAgICB1dGlsLmRlY29yYXRlVHlwZShwcm90b3R5cGUuY29uc3RydWN0b3IpXHJcbiAgICAgICAgICAgIC5hZGQobmV3IE9uZU9mKG9uZW9mTmFtZSwgZmllbGROYW1lcykpO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsIG9uZW9mTmFtZSwge1xyXG4gICAgICAgICAgICBnZXQ6IHV0aWwub25lT2ZHZXR0ZXIoZmllbGROYW1lcyksXHJcbiAgICAgICAgICAgIHNldDogdXRpbC5vbmVPZlNldHRlcihmaWVsZE5hbWVzKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XHJcblxyXG5wYXJzZS5maWxlbmFtZSA9IG51bGw7XHJcbnBhcnNlLmRlZmF1bHRzID0geyBrZWVwQ2FzZTogZmFsc2UgfTtcclxuXHJcbnZhciB0b2tlbml6ZSAgPSByZXF1aXJlKFwiLi90b2tlbml6ZVwiKSxcclxuICAgIFJvb3QgICAgICA9IHJlcXVpcmUoXCIuL3Jvb3RcIiksXHJcbiAgICBUeXBlICAgICAgPSByZXF1aXJlKFwiLi90eXBlXCIpLFxyXG4gICAgRmllbGQgICAgID0gcmVxdWlyZShcIi4vZmllbGRcIiksXHJcbiAgICBNYXBGaWVsZCAgPSByZXF1aXJlKFwiLi9tYXBmaWVsZFwiKSxcclxuICAgIE9uZU9mICAgICA9IHJlcXVpcmUoXCIuL29uZW9mXCIpLFxyXG4gICAgRW51bSAgICAgID0gcmVxdWlyZShcIi4vZW51bVwiKSxcclxuICAgIFNlcnZpY2UgICA9IHJlcXVpcmUoXCIuL3NlcnZpY2VcIiksXHJcbiAgICBNZXRob2QgICAgPSByZXF1aXJlKFwiLi9tZXRob2RcIiksXHJcbiAgICB0eXBlcyAgICAgPSByZXF1aXJlKFwiLi90eXBlc1wiKSxcclxuICAgIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XHJcblxyXG52YXIgYmFzZTEwUmUgICAgPSAvXlsxLTldWzAtOV0qJC8sXHJcbiAgICBiYXNlMTBOZWdSZSA9IC9eLT9bMS05XVswLTldKiQvLFxyXG4gICAgYmFzZTE2UmUgICAgPSAvXjBbeF1bMC05YS1mQS1GXSskLyxcclxuICAgIGJhc2UxNk5lZ1JlID0gL14tPzBbeF1bMC05YS1mQS1GXSskLyxcclxuICAgIGJhc2U4UmUgICAgID0gL14wWzAtN10rJC8sXHJcbiAgICBiYXNlOE5lZ1JlICA9IC9eLT8wWzAtN10rJC8sXHJcbiAgICBudW1iZXJSZSAgICA9IC9eKD8hW2VFXSlbMC05XSooPzpcXC5bMC05XSopPyg/OltlRV1bKy1dP1swLTldKyk/JC8sXHJcbiAgICBuYW1lUmUgICAgICA9IC9eW2EtekEtWl9dW2EtekEtWl8wLTldKiQvLFxyXG4gICAgdHlwZVJlZlJlICAgPSAvXig/OlxcLj9bYS16QS1aX11bYS16QS1aXzAtOV0qKSg/OlxcLlthLXpBLVpfXVthLXpBLVpfMC05XSopKiQvLFxyXG4gICAgZnFUeXBlUmVmUmUgPSAvXig/OlxcLlthLXpBLVpfXVthLXpBLVpfMC05XSopKyQvO1xyXG5cclxuLyoqXHJcbiAqIFJlc3VsdCBvYmplY3QgcmV0dXJuZWQgZnJvbSB7QGxpbmsgcGFyc2V9LlxyXG4gKiBAaW50ZXJmYWNlIElQYXJzZXJSZXN1bHRcclxuICogQHByb3BlcnR5IHtzdHJpbmd8dW5kZWZpbmVkfSBwYWNrYWdlIFBhY2thZ2UgbmFtZSwgaWYgZGVjbGFyZWRcclxuICogQHByb3BlcnR5IHtzdHJpbmdbXXx1bmRlZmluZWR9IGltcG9ydHMgSW1wb3J0cywgaWYgYW55XHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW118dW5kZWZpbmVkfSB3ZWFrSW1wb3J0cyBXZWFrIGltcG9ydHMsIGlmIGFueVxyXG4gKiBAcHJvcGVydHkge3N0cmluZ3x1bmRlZmluZWR9IHN5bnRheCBTeW50YXgsIGlmIHNwZWNpZmllZCAoZWl0aGVyIGBcInByb3RvMlwiYCBvciBgXCJwcm90bzNcImApXHJcbiAqIEBwcm9wZXJ0eSB7Um9vdH0gcm9vdCBQb3B1bGF0ZWQgcm9vdCBpbnN0YW5jZVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIHBhcnNlfS5cclxuICogQGludGVyZmFjZSBJUGFyc2VPcHRpb25zXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2tlZXBDYXNlPWZhbHNlXSBLZWVwcyBmaWVsZCBjYXNpbmcgaW5zdGVhZCBvZiBjb252ZXJ0aW5nIHRvIGNhbWVsIGNhc2VcclxuICogQHByb3BlcnR5IHtib29sZWFufSBbYWx0ZXJuYXRlQ29tbWVudE1vZGU9ZmFsc2VdIFJlY29nbml6ZSBkb3VibGUtc2xhc2ggY29tbWVudHMgaW4gYWRkaXRpb24gdG8gZG9jLWJsb2NrIGNvbW1lbnRzLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBPcHRpb25zIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb2YgSlNPTiBzZXJpYWxpemF0aW9uLlxyXG4gKiBAaW50ZXJmYWNlIElUb0pTT05PcHRpb25zXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2tlZXBDb21tZW50cz1mYWxzZV0gU2VyaWFsaXplcyBjb21tZW50cy5cclxuICovXHJcblxyXG4vKipcclxuICogUGFyc2VzIHRoZSBnaXZlbiAucHJvdG8gc291cmNlIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBwYXJzZWQgY29udGVudHMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgU291cmNlIGNvbnRlbnRzXHJcbiAqIEBwYXJhbSB7Um9vdH0gcm9vdCBSb290IHRvIHBvcHVsYXRlXHJcbiAqIEBwYXJhbSB7SVBhcnNlT3B0aW9uc30gW29wdGlvbnNdIFBhcnNlIG9wdGlvbnMuIERlZmF1bHRzIHRvIHtAbGluayBwYXJzZS5kZWZhdWx0c30gd2hlbiBvbWl0dGVkLlxyXG4gKiBAcmV0dXJucyB7SVBhcnNlclJlc3VsdH0gUGFyc2VyIHJlc3VsdFxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmlsZW5hbWU9bnVsbCBDdXJyZW50bHkgcHJvY2Vzc2luZyBmaWxlIG5hbWUgZm9yIGVycm9yIHJlcG9ydGluZywgaWYga25vd25cclxuICogQHByb3BlcnR5IHtJUGFyc2VPcHRpb25zfSBkZWZhdWx0cyBEZWZhdWx0IHtAbGluayBJUGFyc2VPcHRpb25zfVxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2Uoc291cmNlLCByb290LCBvcHRpb25zKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjYWxsYmFjay1yZXR1cm4gKi9cclxuICAgIGlmICghKHJvb3QgaW5zdGFuY2VvZiBSb290KSkge1xyXG4gICAgICAgIG9wdGlvbnMgPSByb290O1xyXG4gICAgICAgIHJvb3QgPSBuZXcgUm9vdCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFvcHRpb25zKVxyXG4gICAgICAgIG9wdGlvbnMgPSBwYXJzZS5kZWZhdWx0cztcclxuXHJcbiAgICB2YXIgdG4gPSB0b2tlbml6ZShzb3VyY2UsIG9wdGlvbnMuYWx0ZXJuYXRlQ29tbWVudE1vZGUgfHwgZmFsc2UpLFxyXG4gICAgICAgIG5leHQgPSB0bi5uZXh0LFxyXG4gICAgICAgIHB1c2ggPSB0bi5wdXNoLFxyXG4gICAgICAgIHBlZWsgPSB0bi5wZWVrLFxyXG4gICAgICAgIHNraXAgPSB0bi5za2lwLFxyXG4gICAgICAgIGNtbnQgPSB0bi5jbW50O1xyXG5cclxuICAgIHZhciBoZWFkID0gdHJ1ZSxcclxuICAgICAgICBwa2csXHJcbiAgICAgICAgaW1wb3J0cyxcclxuICAgICAgICB3ZWFrSW1wb3J0cyxcclxuICAgICAgICBzeW50YXgsXHJcbiAgICAgICAgaXNQcm90bzMgPSBmYWxzZTtcclxuXHJcbiAgICB2YXIgcHRyID0gcm9vdDtcclxuXHJcbiAgICB2YXIgYXBwbHlDYXNlID0gb3B0aW9ucy5rZWVwQ2FzZSA/IGZ1bmN0aW9uKG5hbWUpIHsgcmV0dXJuIG5hbWU7IH0gOiB1dGlsLmNhbWVsQ2FzZTtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgZnVuY3Rpb24gaWxsZWdhbCh0b2tlbiwgbmFtZSwgaW5zaWRlVHJ5Q2F0Y2gpIHtcclxuICAgICAgICB2YXIgZmlsZW5hbWUgPSBwYXJzZS5maWxlbmFtZTtcclxuICAgICAgICBpZiAoIWluc2lkZVRyeUNhdGNoKVxyXG4gICAgICAgICAgICBwYXJzZS5maWxlbmFtZSA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIEVycm9yKFwiaWxsZWdhbCBcIiArIChuYW1lIHx8IFwidG9rZW5cIikgKyBcIiAnXCIgKyB0b2tlbiArIFwiJyAoXCIgKyAoZmlsZW5hbWUgPyBmaWxlbmFtZSArIFwiLCBcIiA6IFwiXCIpICsgXCJsaW5lIFwiICsgdG4ubGluZSArIFwiKVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWFkU3RyaW5nKCkge1xyXG4gICAgICAgIHZhciB2YWx1ZXMgPSBbXSxcclxuICAgICAgICAgICAgdG9rZW47XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgaWYgKCh0b2tlbiA9IG5leHQoKSkgIT09IFwiXFxcIlwiICYmIHRva2VuICE9PSBcIidcIilcclxuICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgdmFsdWVzLnB1c2gobmV4dCgpKTtcclxuICAgICAgICAgICAgc2tpcCh0b2tlbik7XHJcbiAgICAgICAgICAgIHRva2VuID0gcGVlaygpO1xyXG4gICAgICAgIH0gd2hpbGUgKHRva2VuID09PSBcIlxcXCJcIiB8fCB0b2tlbiA9PT0gXCInXCIpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZXMuam9pbihcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWFkVmFsdWUoYWNjZXB0VHlwZVJlZikge1xyXG4gICAgICAgIHZhciB0b2tlbiA9IG5leHQoKTtcclxuICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCInXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJcXFwiXCI6XHJcbiAgICAgICAgICAgICAgICBwdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWFkU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6IGNhc2UgXCJUUlVFXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSBcImZhbHNlXCI6IGNhc2UgXCJGQUxTRVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOdW1iZXIodG9rZW4sIC8qIGluc2lkZVRyeUNhdGNoICovIHRydWUpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgICAgIGlmIChhY2NlcHRUeXBlUmVmICYmIHR5cGVSZWZSZS50ZXN0KHRva2VuKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcclxuXHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwidmFsdWVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlYWRSYW5nZXModGFyZ2V0LCBhY2NlcHRTdHJpbmdzKSB7XHJcbiAgICAgICAgdmFyIHRva2VuLCBzdGFydDtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGlmIChhY2NlcHRTdHJpbmdzICYmICgodG9rZW4gPSBwZWVrKCkpID09PSBcIlxcXCJcIiB8fCB0b2tlbiA9PT0gXCInXCIpKVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2gocmVhZFN0cmluZygpKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goWyBzdGFydCA9IHBhcnNlSWQobmV4dCgpKSwgc2tpcChcInRvXCIsIHRydWUpID8gcGFyc2VJZChuZXh0KCkpIDogc3RhcnQgXSk7XHJcbiAgICAgICAgfSB3aGlsZSAoc2tpcChcIixcIiwgdHJ1ZSkpO1xyXG4gICAgICAgIHNraXAoXCI7XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlTnVtYmVyKHRva2VuLCBpbnNpZGVUcnlDYXRjaCkge1xyXG4gICAgICAgIHZhciBzaWduID0gMTtcclxuICAgICAgICBpZiAodG9rZW4uY2hhckF0KDApID09PSBcIi1cIikge1xyXG4gICAgICAgICAgICBzaWduID0gLTE7XHJcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW4uc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbmZcIjogY2FzZSBcIklORlwiOiBjYXNlIFwiSW5mXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2lnbiAqIEluZmluaXR5O1xyXG4gICAgICAgICAgICBjYXNlIFwibmFuXCI6IGNhc2UgXCJOQU5cIjogY2FzZSBcIk5hblwiOiBjYXNlIFwiTmFOXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTmFOO1xyXG4gICAgICAgICAgICBjYXNlIFwiMFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChiYXNlMTBSZS50ZXN0KHRva2VuKSlcclxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh0b2tlbiwgMTApO1xyXG4gICAgICAgIGlmIChiYXNlMTZSZS50ZXN0KHRva2VuKSlcclxuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh0b2tlbiwgMTYpO1xyXG4gICAgICAgIGlmIChiYXNlOFJlLnRlc3QodG9rZW4pKVxyXG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHRva2VuLCA4KTtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICBpZiAobnVtYmVyUmUudGVzdCh0b2tlbikpXHJcbiAgICAgICAgICAgIHJldHVybiBzaWduICogcGFyc2VGbG9hdCh0b2tlbik7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJudW1iZXJcIiwgaW5zaWRlVHJ5Q2F0Y2gpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlSWQodG9rZW4sIGFjY2VwdE5lZ2F0aXZlKSB7XHJcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xyXG4gICAgICAgICAgICBjYXNlIFwibWF4XCI6IGNhc2UgXCJNQVhcIjogY2FzZSBcIk1heFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDUzNjg3MDkxMTtcclxuICAgICAgICAgICAgY2FzZSBcIjBcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCFhY2NlcHROZWdhdGl2ZSAmJiB0b2tlbi5jaGFyQXQoMCkgPT09IFwiLVwiKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcImlkXCIpO1xyXG5cclxuICAgICAgICBpZiAoYmFzZTEwTmVnUmUudGVzdCh0b2tlbikpXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0b2tlbiwgMTApO1xyXG4gICAgICAgIGlmIChiYXNlMTZOZWdSZS50ZXN0KHRva2VuKSlcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRva2VuLCAxNik7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgaWYgKGJhc2U4TmVnUmUudGVzdCh0b2tlbikpXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0b2tlbiwgOCk7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJpZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVBhY2thZ2UoKSB7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmIChwa2cgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChcInBhY2thZ2VcIik7XHJcblxyXG4gICAgICAgIHBrZyA9IG5leHQoKTtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdChwa2cpKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHBrZywgXCJuYW1lXCIpO1xyXG5cclxuICAgICAgICBwdHIgPSBwdHIuZGVmaW5lKHBrZyk7XHJcbiAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VJbXBvcnQoKSB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gcGVlaygpO1xyXG4gICAgICAgIHZhciB3aGljaEltcG9ydHM7XHJcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xyXG4gICAgICAgICAgICBjYXNlIFwid2Vha1wiOlxyXG4gICAgICAgICAgICAgICAgd2hpY2hJbXBvcnRzID0gd2Vha0ltcG9ydHMgfHwgKHdlYWtJbXBvcnRzID0gW10pO1xyXG4gICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJwdWJsaWNcIjpcclxuICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZmFsbHRocm91Z2hcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHdoaWNoSW1wb3J0cyA9IGltcG9ydHMgfHwgKGltcG9ydHMgPSBbXSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdG9rZW4gPSByZWFkU3RyaW5nKCk7XHJcbiAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICAgICAgd2hpY2hJbXBvcnRzLnB1c2godG9rZW4pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlU3ludGF4KCkge1xyXG4gICAgICAgIHNraXAoXCI9XCIpO1xyXG4gICAgICAgIHN5bnRheCA9IHJlYWRTdHJpbmcoKTtcclxuICAgICAgICBpc1Byb3RvMyA9IHN5bnRheCA9PT0gXCJwcm90bzNcIjtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCFpc1Byb3RvMyAmJiBzeW50YXggIT09IFwicHJvdG8yXCIpXHJcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwoc3ludGF4LCBcInN5bnRheFwiKTtcclxuXHJcbiAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VDb21tb24ocGFyZW50LCB0b2tlbikge1xyXG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcclxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHBhcmVudCwgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XHJcbiAgICAgICAgICAgICAgICBwYXJzZVR5cGUocGFyZW50LCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XHJcbiAgICAgICAgICAgICAgICBwYXJzZUVudW0ocGFyZW50LCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJzZXJ2aWNlXCI6XHJcbiAgICAgICAgICAgICAgICBwYXJzZVNlcnZpY2UocGFyZW50LCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJleHRlbmRcIjpcclxuICAgICAgICAgICAgICAgIHBhcnNlRXh0ZW5zaW9uKHBhcmVudCwgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpZkJsb2NrKG9iaiwgZm5JZiwgZm5FbHNlKSB7XHJcbiAgICAgICAgdmFyIHRyYWlsaW5nTGluZSA9IHRuLmxpbmU7XHJcbiAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICBvYmouY29tbWVudCA9IGNtbnQoKTsgLy8gdHJ5IGJsb2NrLXR5cGUgY29tbWVudFxyXG4gICAgICAgICAgICBvYmouZmlsZW5hbWUgPSBwYXJzZS5maWxlbmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNraXAoXCJ7XCIsIHRydWUpKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbjtcclxuICAgICAgICAgICAgd2hpbGUgKCh0b2tlbiA9IG5leHQoKSkgIT09IFwifVwiKVxyXG4gICAgICAgICAgICAgICAgZm5JZih0b2tlbik7XHJcbiAgICAgICAgICAgIHNraXAoXCI7XCIsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChmbkVsc2UpXHJcbiAgICAgICAgICAgICAgICBmbkVsc2UoKTtcclxuICAgICAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICAgICAgICAgIGlmIChvYmogJiYgdHlwZW9mIG9iai5jb21tZW50ICE9PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICAgICAgb2JqLmNvbW1lbnQgPSBjbW50KHRyYWlsaW5nTGluZSk7IC8vIHRyeSBsaW5lLXR5cGUgY29tbWVudCBpZiBubyBibG9ja1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVR5cGUocGFyZW50LCB0b2tlbikge1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJ0eXBlIG5hbWVcIik7XHJcblxyXG4gICAgICAgIHZhciB0eXBlID0gbmV3IFR5cGUodG9rZW4pO1xyXG4gICAgICAgIGlmQmxvY2sodHlwZSwgZnVuY3Rpb24gcGFyc2VUeXBlX2Jsb2NrKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUNvbW1vbih0eXBlLCB0b2tlbikpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hcFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlTWFwRmllbGQodHlwZSwgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvbmFsXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVwZWF0ZWRcIjpcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHR5cGUsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwib25lb2ZcIjpcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZU9uZU9mKHR5cGUsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXh0ZW5zaW9uc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRSYW5nZXModHlwZS5leHRlbnNpb25zIHx8ICh0eXBlLmV4dGVuc2lvbnMgPSBbXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXNlcnZlZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRSYW5nZXModHlwZS5yZXNlcnZlZCB8fCAodHlwZS5yZXNlcnZlZCA9IFtdKSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvdG8zIHx8ICF0eXBlUmVmUmUudGVzdCh0b2tlbikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHR5cGUsIFwib3B0aW9uYWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBwYXJlbnQuYWRkKHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlRmllbGQocGFyZW50LCBydWxlLCBleHRlbmQpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IG5leHQoKTtcclxuICAgICAgICBpZiAodHlwZSA9PT0gXCJncm91cFwiKSB7XHJcbiAgICAgICAgICAgIHBhcnNlR3JvdXAocGFyZW50LCBydWxlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdCh0eXBlKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0eXBlLCBcInR5cGVcIik7XHJcblxyXG4gICAgICAgIHZhciBuYW1lID0gbmV4dCgpO1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KG5hbWUpKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKG5hbWUsIFwibmFtZVwiKTtcclxuXHJcbiAgICAgICAgbmFtZSA9IGFwcGx5Q2FzZShuYW1lKTtcclxuICAgICAgICBza2lwKFwiPVwiKTtcclxuXHJcbiAgICAgICAgdmFyIGZpZWxkID0gbmV3IEZpZWxkKG5hbWUsIHBhcnNlSWQobmV4dCgpKSwgdHlwZSwgcnVsZSwgZXh0ZW5kKTtcclxuICAgICAgICBpZkJsb2NrKGZpZWxkLCBmdW5jdGlvbiBwYXJzZUZpZWxkX2Jsb2NrKHRva2VuKSB7XHJcblxyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwib3B0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKGZpZWxkLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcclxuXHJcbiAgICAgICAgfSwgZnVuY3Rpb24gcGFyc2VGaWVsZF9saW5lKCkge1xyXG4gICAgICAgICAgICBwYXJzZUlubGluZU9wdGlvbnMoZmllbGQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBhcmVudC5hZGQoZmllbGQpO1xyXG5cclxuICAgICAgICAvLyBKU09OIGRlZmF1bHRzIHRvIHBhY2tlZD10cnVlIGlmIG5vdCBzZXQgc28gd2UgaGF2ZSB0byBzZXQgcGFja2VkPWZhbHNlIGV4cGxpY2l0eSB3aGVuXHJcbiAgICAgICAgLy8gcGFyc2luZyBwcm90bzIgZGVzY3JpcHRvcnMgd2l0aG91dCB0aGUgb3B0aW9uLCB3aGVyZSBhcHBsaWNhYmxlLiBUaGlzIG11c3QgYmUgZG9uZSBmb3JcclxuICAgICAgICAvLyBhbGwga25vd24gcGFja2FibGUgdHlwZXMgYW5kIGFueXRoaW5nIHRoYXQgY291bGQgYmUgYW4gZW51bSAoPSBpcyBub3QgYSBiYXNpYyB0eXBlKS5cclxuICAgICAgICBpZiAoIWlzUHJvdG8zICYmIGZpZWxkLnJlcGVhdGVkICYmICh0eXBlcy5wYWNrZWRbdHlwZV0gIT09IHVuZGVmaW5lZCB8fCB0eXBlcy5iYXNpY1t0eXBlXSA9PT0gdW5kZWZpbmVkKSlcclxuICAgICAgICAgICAgZmllbGQuc2V0T3B0aW9uKFwicGFja2VkXCIsIGZhbHNlLCAvKiBpZk5vdFNldCAqLyB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZUdyb3VwKHBhcmVudCwgcnVsZSkge1xyXG4gICAgICAgIHZhciBuYW1lID0gbmV4dCgpO1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KG5hbWUpKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKG5hbWUsIFwibmFtZVwiKTtcclxuXHJcbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IHV0aWwubGNGaXJzdChuYW1lKTtcclxuICAgICAgICBpZiAobmFtZSA9PT0gZmllbGROYW1lKVxyXG4gICAgICAgICAgICBuYW1lID0gdXRpbC51Y0ZpcnN0KG5hbWUpO1xyXG4gICAgICAgIHNraXAoXCI9XCIpO1xyXG4gICAgICAgIHZhciBpZCA9IHBhcnNlSWQobmV4dCgpKTtcclxuICAgICAgICB2YXIgdHlwZSA9IG5ldyBUeXBlKG5hbWUpO1xyXG4gICAgICAgIHR5cGUuZ3JvdXAgPSB0cnVlO1xyXG4gICAgICAgIHZhciBmaWVsZCA9IG5ldyBGaWVsZChmaWVsZE5hbWUsIGlkLCBuYW1lLCBydWxlKTtcclxuICAgICAgICBmaWVsZC5maWxlbmFtZSA9IHBhcnNlLmZpbGVuYW1lO1xyXG4gICAgICAgIGlmQmxvY2sodHlwZSwgZnVuY3Rpb24gcGFyc2VHcm91cF9ibG9jayh0b2tlbikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHR5cGUsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVxdWlyZWRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJvcHRpb25hbFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJlcGVhdGVkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGaWVsZCh0eXBlLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7IC8vIHRoZXJlIGFyZSBubyBncm91cHMgd2l0aCBwcm90bzMgc2VtYW50aWNzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBwYXJlbnQuYWRkKHR5cGUpXHJcbiAgICAgICAgICAgICAgLmFkZChmaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VNYXBGaWVsZChwYXJlbnQpIHtcclxuICAgICAgICBza2lwKFwiPFwiKTtcclxuICAgICAgICB2YXIga2V5VHlwZSA9IG5leHQoKTtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKHR5cGVzLm1hcEtleVtrZXlUeXBlXSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKGtleVR5cGUsIFwidHlwZVwiKTtcclxuXHJcbiAgICAgICAgc2tpcChcIixcIik7XHJcbiAgICAgICAgdmFyIHZhbHVlVHlwZSA9IG5leHQoKTtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCF0eXBlUmVmUmUudGVzdCh2YWx1ZVR5cGUpKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHZhbHVlVHlwZSwgXCJ0eXBlXCIpO1xyXG5cclxuICAgICAgICBza2lwKFwiPlwiKTtcclxuICAgICAgICB2YXIgbmFtZSA9IG5leHQoKTtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdChuYW1lKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChuYW1lLCBcIm5hbWVcIik7XHJcblxyXG4gICAgICAgIHNraXAoXCI9XCIpO1xyXG4gICAgICAgIHZhciBmaWVsZCA9IG5ldyBNYXBGaWVsZChhcHBseUNhc2UobmFtZSksIHBhcnNlSWQobmV4dCgpKSwga2V5VHlwZSwgdmFsdWVUeXBlKTtcclxuICAgICAgICBpZkJsb2NrKGZpZWxkLCBmdW5jdGlvbiBwYXJzZU1hcEZpZWxkX2Jsb2NrKHRva2VuKSB7XHJcblxyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwib3B0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKGZpZWxkLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcclxuXHJcbiAgICAgICAgfSwgZnVuY3Rpb24gcGFyc2VNYXBGaWVsZF9saW5lKCkge1xyXG4gICAgICAgICAgICBwYXJzZUlubGluZU9wdGlvbnMoZmllbGQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBhcmVudC5hZGQoZmllbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlT25lT2YocGFyZW50LCB0b2tlbikge1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xyXG5cclxuICAgICAgICB2YXIgb25lb2YgPSBuZXcgT25lT2YoYXBwbHlDYXNlKHRva2VuKSk7XHJcbiAgICAgICAgaWZCbG9jayhvbmVvZiwgZnVuY3Rpb24gcGFyc2VPbmVPZl9ibG9jayh0b2tlbikge1xyXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwib3B0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKG9uZW9mLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgcGFyc2VGaWVsZChvbmVvZiwgXCJvcHRpb25hbFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBhcmVudC5hZGQob25lb2YpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlRW51bShwYXJlbnQsIHRva2VuKSB7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICghbmFtZVJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcIm5hbWVcIik7XHJcblxyXG4gICAgICAgIHZhciBlbm0gPSBuZXcgRW51bSh0b2tlbik7XHJcbiAgICAgICAgaWZCbG9jayhlbm0sIGZ1bmN0aW9uIHBhcnNlRW51bV9ibG9jayh0b2tlbikge1xyXG4gICAgICAgICAgc3dpdGNoKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcclxuICAgICAgICAgICAgICBwYXJzZU9wdGlvbihlbm0sIHRva2VuKTtcclxuICAgICAgICAgICAgICBza2lwKFwiO1wiKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJyZXNlcnZlZFwiOlxyXG4gICAgICAgICAgICAgIHJlYWRSYW5nZXMoZW5tLnJlc2VydmVkIHx8IChlbm0ucmVzZXJ2ZWQgPSBbXSksIHRydWUpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICBwYXJzZUVudW1WYWx1ZShlbm0sIHRva2VuKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBwYXJlbnQuYWRkKGVubSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VFbnVtVmFsdWUocGFyZW50LCB0b2tlbikge1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xyXG5cclxuICAgICAgICBza2lwKFwiPVwiKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUlkKG5leHQoKSwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGR1bW15ID0ge307XHJcbiAgICAgICAgaWZCbG9jayhkdW1teSwgZnVuY3Rpb24gcGFyc2VFbnVtVmFsdWVfYmxvY2sodG9rZW4pIHtcclxuXHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gXCJvcHRpb25cIikge1xyXG4gICAgICAgICAgICAgICAgcGFyc2VPcHRpb24oZHVtbXksIHRva2VuKTsgLy8gc2tpcFxyXG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XHJcblxyXG4gICAgICAgIH0sIGZ1bmN0aW9uIHBhcnNlRW51bVZhbHVlX2xpbmUoKSB7XHJcbiAgICAgICAgICAgIHBhcnNlSW5saW5lT3B0aW9ucyhkdW1teSk7IC8vIHNraXBcclxuICAgICAgICB9KTtcclxuICAgICAgICBwYXJlbnQuYWRkKHRva2VuLCB2YWx1ZSwgZHVtbXkuY29tbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VPcHRpb24ocGFyZW50LCB0b2tlbikge1xyXG4gICAgICAgIHZhciBpc0N1c3RvbSA9IHNraXAoXCIoXCIsIHRydWUpO1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xyXG5cclxuICAgICAgICB2YXIgbmFtZSA9IHRva2VuO1xyXG4gICAgICAgIGlmIChpc0N1c3RvbSkge1xyXG4gICAgICAgICAgICBza2lwKFwiKVwiKTtcclxuICAgICAgICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKVwiO1xyXG4gICAgICAgICAgICB0b2tlbiA9IHBlZWsoKTtcclxuICAgICAgICAgICAgaWYgKGZxVHlwZVJlZlJlLnRlc3QodG9rZW4pKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lICs9IHRva2VuO1xyXG4gICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNraXAoXCI9XCIpO1xyXG4gICAgICAgIHBhcnNlT3B0aW9uVmFsdWUocGFyZW50LCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZU9wdGlvblZhbHVlKHBhcmVudCwgbmFtZSkge1xyXG4gICAgICAgIGlmIChza2lwKFwie1wiLCB0cnVlKSkgeyAvLyB7IGE6IFwiZm9vXCIgYiB7IGM6IFwiYmFyXCIgfSB9XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuYW1lUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwZWVrKCkgPT09IFwie1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uVmFsdWUocGFyZW50LCBuYW1lICsgXCIuXCIgKyB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBza2lwKFwiOlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVlaygpID09PSBcIntcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VPcHRpb25WYWx1ZShwYXJlbnQsIG5hbWUgKyBcIi5cIiArIHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbihwYXJlbnQsIG5hbWUgKyBcIi5cIiArIHRva2VuLCByZWFkVmFsdWUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2tpcChcIixcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKCFza2lwKFwifVwiLCB0cnVlKSk7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIHNldE9wdGlvbihwYXJlbnQsIG5hbWUsIHJlYWRWYWx1ZSh0cnVlKSk7XHJcbiAgICAgICAgLy8gRG9lcyBub3QgZW5mb3JjZSBhIGRlbGltaXRlciB0byBiZSB1bml2ZXJzYWxcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRPcHRpb24ocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChwYXJlbnQuc2V0T3B0aW9uKVxyXG4gICAgICAgICAgICBwYXJlbnQuc2V0T3B0aW9uKG5hbWUsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZUlubGluZU9wdGlvbnMocGFyZW50KSB7XHJcbiAgICAgICAgaWYgKHNraXAoXCJbXCIsIHRydWUpKSB7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHBhcmVudCwgXCJvcHRpb25cIik7XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKHNraXAoXCIsXCIsIHRydWUpKTtcclxuICAgICAgICAgICAgc2tpcChcIl1cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VTZXJ2aWNlKHBhcmVudCwgdG9rZW4pIHtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCFuYW1lUmUudGVzdCh0b2tlbiA9IG5leHQoKSkpXHJcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4sIFwic2VydmljZSBuYW1lXCIpO1xyXG5cclxuICAgICAgICB2YXIgc2VydmljZSA9IG5ldyBTZXJ2aWNlKHRva2VuKTtcclxuICAgICAgICBpZkJsb2NrKHNlcnZpY2UsIGZ1bmN0aW9uIHBhcnNlU2VydmljZV9ibG9jayh0b2tlbikge1xyXG4gICAgICAgICAgICBpZiAocGFyc2VDb21tb24oc2VydmljZSwgdG9rZW4pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICAgICAgaWYgKHRva2VuID09PSBcInJwY1wiKVxyXG4gICAgICAgICAgICAgICAgcGFyc2VNZXRob2Qoc2VydmljZSwgdG9rZW4pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBwYXJlbnQuYWRkKHNlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlTWV0aG9kKHBhcmVudCwgdG9rZW4pIHtcclxuICAgICAgICB2YXIgdHlwZSA9IHRva2VuO1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIW5hbWVSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbiwgXCJuYW1lXCIpO1xyXG5cclxuICAgICAgICB2YXIgbmFtZSA9IHRva2VuLFxyXG4gICAgICAgICAgICByZXF1ZXN0VHlwZSwgcmVxdWVzdFN0cmVhbSxcclxuICAgICAgICAgICAgcmVzcG9uc2VUeXBlLCByZXNwb25zZVN0cmVhbTtcclxuXHJcbiAgICAgICAgc2tpcChcIihcIik7XHJcbiAgICAgICAgaWYgKHNraXAoXCJzdHJlYW1cIiwgdHJ1ZSkpXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0gPSB0cnVlO1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XHJcblxyXG4gICAgICAgIHJlcXVlc3RUeXBlID0gdG9rZW47XHJcbiAgICAgICAgc2tpcChcIilcIik7IHNraXAoXCJyZXR1cm5zXCIpOyBza2lwKFwiKFwiKTtcclxuICAgICAgICBpZiAoc2tpcChcInN0cmVhbVwiLCB0cnVlKSlcclxuICAgICAgICAgICAgcmVzcG9uc2VTdHJlYW0gPSB0cnVlO1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIXR5cGVSZWZSZS50ZXN0KHRva2VuID0gbmV4dCgpKSlcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XHJcblxyXG4gICAgICAgIHJlc3BvbnNlVHlwZSA9IHRva2VuO1xyXG4gICAgICAgIHNraXAoXCIpXCIpO1xyXG5cclxuICAgICAgICB2YXIgbWV0aG9kID0gbmV3IE1ldGhvZChuYW1lLCB0eXBlLCByZXF1ZXN0VHlwZSwgcmVzcG9uc2VUeXBlLCByZXF1ZXN0U3RyZWFtLCByZXNwb25zZVN0cmVhbSk7XHJcbiAgICAgICAgaWZCbG9jayhtZXRob2QsIGZ1bmN0aW9uIHBhcnNlTWV0aG9kX2Jsb2NrKHRva2VuKSB7XHJcblxyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IFwib3B0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKG1ldGhvZCwgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHBhcmVudC5hZGQobWV0aG9kKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZUV4dGVuc2lvbihwYXJlbnQsIHRva2VuKSB7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICghdHlwZVJlZlJlLnRlc3QodG9rZW4gPSBuZXh0KCkpKVxyXG4gICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuLCBcInJlZmVyZW5jZVwiKTtcclxuXHJcbiAgICAgICAgdmFyIHJlZmVyZW5jZSA9IHRva2VuO1xyXG4gICAgICAgIGlmQmxvY2sobnVsbCwgZnVuY3Rpb24gcGFyc2VFeHRlbnNpb25fYmxvY2sodG9rZW4pIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0b2tlbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJlcGVhdGVkXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwib3B0aW9uYWxcIjpcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZpZWxkKHBhcmVudCwgdG9rZW4sIHJlZmVyZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvdG8zIHx8ICF0eXBlUmVmUmUudGVzdCh0b2tlbikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmllbGQocGFyZW50LCBcIm9wdGlvbmFsXCIsIHJlZmVyZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgdG9rZW47XHJcbiAgICB3aGlsZSAoKHRva2VuID0gbmV4dCgpKSAhPT0gbnVsbCkge1xyXG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJwYWNrYWdlXCI6XHJcblxyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgICAgICBpZiAoIWhlYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XHJcblxyXG4gICAgICAgICAgICAgICAgcGFyc2VQYWNrYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJpbXBvcnRcIjpcclxuXHJcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgICAgIGlmICghaGVhZClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKHRva2VuKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwYXJzZUltcG9ydCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwic3ludGF4XCI6XHJcblxyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgICAgICBpZiAoIWhlYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XHJcblxyXG4gICAgICAgICAgICAgICAgcGFyc2VTeW50YXgoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxyXG5cclxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoZWFkKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwodG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgICAgIHBhcnNlT3B0aW9uKHB0ciwgdG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgc2tpcChcIjtcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcblxyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUNvbW1vbihwdHIsIHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgaWxsZWdhbCh0b2tlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlLmZpbGVuYW1lID0gbnVsbDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgXCJwYWNrYWdlXCIgICAgIDogcGtnLFxyXG4gICAgICAgIFwiaW1wb3J0c1wiICAgICA6IGltcG9ydHMsXHJcbiAgICAgICAgIHdlYWtJbXBvcnRzICA6IHdlYWtJbXBvcnRzLFxyXG4gICAgICAgICBzeW50YXggICAgICAgOiBzeW50YXgsXHJcbiAgICAgICAgIHJvb3QgICAgICAgICA6IHJvb3RcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgdGhlIGdpdmVuIC5wcm90byBzb3VyY2UgYW5kIHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHBhcnNlZCBjb250ZW50cy5cclxuICogQG5hbWUgcGFyc2VcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgU291cmNlIGNvbnRlbnRzXHJcbiAqIEBwYXJhbSB7SVBhcnNlT3B0aW9uc30gW29wdGlvbnNdIFBhcnNlIG9wdGlvbnMuIERlZmF1bHRzIHRvIHtAbGluayBwYXJzZS5kZWZhdWx0c30gd2hlbiBvbWl0dGVkLlxyXG4gKiBAcmV0dXJucyB7SVBhcnNlclJlc3VsdH0gUGFyc2VyIHJlc3VsdFxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmlsZW5hbWU9bnVsbCBDdXJyZW50bHkgcHJvY2Vzc2luZyBmaWxlIG5hbWUgZm9yIGVycm9yIHJlcG9ydGluZywgaWYga25vd25cclxuICogQHByb3BlcnR5IHtJUGFyc2VPcHRpb25zfSBkZWZhdWx0cyBEZWZhdWx0IHtAbGluayBJUGFyc2VPcHRpb25zfVxyXG4gKiBAdmFyaWF0aW9uIDJcclxuICovXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRlcjtcclxuXHJcbnZhciB1dGlsICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XHJcblxyXG52YXIgQnVmZmVyUmVhZGVyOyAvLyBjeWNsaWNcclxuXHJcbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxyXG4gICAgdXRmOCAgICAgID0gdXRpbC51dGY4O1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gaW5kZXhPdXRPZlJhbmdlKHJlYWRlciwgd3JpdGVMZW5ndGgpIHtcclxuICAgIHJldHVybiBSYW5nZUVycm9yKFwiaW5kZXggb3V0IG9mIHJhbmdlOiBcIiArIHJlYWRlci5wb3MgKyBcIiArIFwiICsgKHdyaXRlTGVuZ3RoIHx8IDEpICsgXCIgPiBcIiArIHJlYWRlci5sZW4pO1xyXG59XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyByZWFkZXIgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXHJcbiAqIEBjbGFzc2Rlc2MgV2lyZSBmb3JtYXQgcmVhZGVyIHVzaW5nIGBVaW50OEFycmF5YCBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBgQXJyYXlgLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxyXG4gKi9cclxuZnVuY3Rpb24gUmVhZGVyKGJ1ZmZlcikge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBidWZmZXIuXHJcbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5idWYgPSBidWZmZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGJ1ZmZlciBwb3NpdGlvbi5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucG9zID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYnVmZmVyIGxlbmd0aC5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMubGVuID0gYnVmZmVyLmxlbmd0aDtcclxufVxyXG5cclxudmFyIGNyZWF0ZV9hcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICA/IGZ1bmN0aW9uIGNyZWF0ZV90eXBlZF9hcnJheShidWZmZXIpIHtcclxuICAgICAgICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBBcnJheS5pc0FycmF5KGJ1ZmZlcikpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZGVyKGJ1ZmZlcik7XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJpbGxlZ2FsIGJ1ZmZlclwiKTtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICA6IGZ1bmN0aW9uIGNyZWF0ZV9hcnJheShidWZmZXIpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShidWZmZXIpKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRlcihidWZmZXIpO1xyXG4gICAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBidWZmZXJcIik7XHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgcmVhZGVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgYnVmZmVyLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtVaW50OEFycmF5fEJ1ZmZlcn0gYnVmZmVyIEJ1ZmZlciB0byByZWFkIGZyb21cclxuICogQHJldHVybnMge1JlYWRlcnxCdWZmZXJSZWFkZXJ9IEEge0BsaW5rIEJ1ZmZlclJlYWRlcn0gaWYgYGJ1ZmZlcmAgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBhIHtAbGluayBSZWFkZXJ9XHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgYnVmZmVyYCBpcyBub3QgYSB2YWxpZCBidWZmZXJcclxuICovXHJcblJlYWRlci5jcmVhdGUgPSB1dGlsLkJ1ZmZlclxyXG4gICAgPyBmdW5jdGlvbiBjcmVhdGVfYnVmZmVyX3NldHVwKGJ1ZmZlcikge1xyXG4gICAgICAgIHJldHVybiAoUmVhZGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXIoYnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1dGlsLkJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpXHJcbiAgICAgICAgICAgICAgICA/IG5ldyBCdWZmZXJSZWFkZXIoYnVmZmVyKVxyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICAgICAgICAgIDogY3JlYXRlX2FycmF5KGJ1ZmZlcik7XHJcbiAgICAgICAgfSkoYnVmZmVyKTtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICA6IGNyZWF0ZV9hcnJheTtcclxuXHJcblJlYWRlci5wcm90b3R5cGUuX3NsaWNlID0gdXRpbC5BcnJheS5wcm90b3R5cGUuc3ViYXJyYXkgfHwgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5BcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG4vKipcclxuICogUmVhZHMgYSB2YXJpbnQgYXMgYW4gdW5zaWduZWQgMzIgYml0IHZhbHVlLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuUmVhZGVyLnByb3RvdHlwZS51aW50MzIgPSAoZnVuY3Rpb24gcmVhZF91aW50MzJfc2V0dXAoKSB7XHJcbiAgICB2YXIgdmFsdWUgPSA0Mjk0OTY3Mjk1OyAvLyBvcHRpbWl6ZXIgdHlwZS1oaW50LCB0ZW5kcyB0byBkZW9wdCBvdGhlcndpc2UgKD8hKVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlYWRfdWludDMyKCkge1xyXG4gICAgICAgIHZhbHVlID0gKCAgICAgICAgIHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNyAgICAgICApID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8ICA3KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCAxNCkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjEpID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAgMTUpIDw8IDI4KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICgodGhpcy5wb3MgKz0gNSkgPiB0aGlzLmxlbikge1xyXG4gICAgICAgICAgICB0aGlzLnBvcyA9IHRoaXMubGVuO1xyXG4gICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgMTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuUmVhZGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHJlYWRfaW50MzIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51aW50MzIoKSB8IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVhZHMgYSB6aWctemFnIGVuY29kZWQgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuUmVhZGVyLnByb3RvdHlwZS5zaW50MzIgPSBmdW5jdGlvbiByZWFkX3NpbnQzMigpIHtcclxuICAgIHZhciB2YWx1ZSA9IHRoaXMudWludDMyKCk7XHJcbiAgICByZXR1cm4gdmFsdWUgPj4+IDEgXiAtKHZhbHVlICYgMSkgfCAwO1xyXG59O1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgbm8taW52YWxpZC10aGlzICovXHJcblxyXG5mdW5jdGlvbiByZWFkTG9uZ1ZhcmludCgpIHtcclxuICAgIC8vIHRlbmRzIHRvIGRlb3B0IHdpdGggbG9jYWwgdmFycyBmb3Igb2N0ZXQgZXRjLlxyXG4gICAgdmFyIGJpdHMgPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICBpZiAodGhpcy5sZW4gLSB0aGlzLnBvcyA+IDQpIHsgLy8gZmFzdCByb3V0ZSAobG8pXHJcbiAgICAgICAgZm9yICg7IGkgPCA0OyArK2kpIHtcclxuICAgICAgICAgICAgLy8gMXN0Li40dGhcclxuICAgICAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgaSAqIDcpID4+PiAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gNXRoXHJcbiAgICAgICAgYml0cy5sbyA9IChiaXRzLmxvIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjgpID4+PiAwO1xyXG4gICAgICAgIGJpdHMuaGkgPSAoYml0cy5oaSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpID4+ICA0KSA+Pj4gMDtcclxuICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXHJcbiAgICAgICAgICAgIHJldHVybiBiaXRzO1xyXG4gICAgICAgIGkgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKDsgaSA8IDM7ICsraSkge1xyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xyXG4gICAgICAgICAgICAvLyAxc3QuLjN0aFxyXG4gICAgICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcclxuICAgICAgICAgICAgICAgIHJldHVybiBiaXRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyA0dGhcclxuICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3MrK10gJiAxMjcpIDw8IGkgKiA3KSA+Pj4gMDtcclxuICAgICAgICByZXR1cm4gYml0cztcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmxlbiAtIHRoaXMucG9zID4gNCkgeyAvLyBmYXN0IHJvdXRlIChoaSlcclxuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xyXG4gICAgICAgICAgICAvLyA2dGguLjEwdGhcclxuICAgICAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgaSAqIDcgKyAzKSA+Pj4gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xyXG4gICAgICAgICAgICAvLyA2dGguLjEwdGhcclxuICAgICAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgaSAqIDcgKyAzKSA+Pj4gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB2YXJpbnQgZW5jb2RpbmdcIik7XHJcbn1cclxuXHJcbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSB2YXJpbnQgYXMgYSBzaWduZWQgNjQgYml0IHZhbHVlLlxyXG4gKiBAbmFtZSBSZWFkZXIjaW50NjRcclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgdmFyaW50IGFzIGFuIHVuc2lnbmVkIDY0IGJpdCB2YWx1ZS5cclxuICogQG5hbWUgUmVhZGVyI3VpbnQ2NFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSB6aWctemFnIGVuY29kZWQgdmFyaW50IGFzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZS5cclxuICogQG5hbWUgUmVhZGVyI3NpbnQ2NFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSB2YXJpbnQgYXMgYSBib29sZWFuLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuUmVhZGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gcmVhZF9ib29sKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudWludDMyKCkgIT09IDA7XHJcbn07XHJcblxyXG5mdW5jdGlvbiByZWFkRml4ZWQzMl9lbmQoYnVmLCBlbmQpIHsgLy8gbm90ZSB0aGF0IHRoaXMgdXNlcyBgZW5kYCwgbm90IGBwb3NgXHJcbiAgICByZXR1cm4gKGJ1ZltlbmQgLSA0XVxyXG4gICAgICAgICAgfCBidWZbZW5kIC0gM10gPDwgOFxyXG4gICAgICAgICAgfCBidWZbZW5kIC0gMl0gPDwgMTZcclxuICAgICAgICAgIHwgYnVmW2VuZCAtIDFdIDw8IDI0KSA+Pj4gMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGZpeGVkIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgMzIgYml0IGludGVnZXIuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICovXHJcblJlYWRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfZml4ZWQzMigpIHtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICh0aGlzLnBvcyArIDQgPiB0aGlzLmxlbilcclxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XHJcblxyXG4gICAgcmV0dXJuIHJlYWRGaXhlZDMyX2VuZCh0aGlzLmJ1ZiwgdGhpcy5wb3MgKz0gNCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVhZHMgZml4ZWQgMzIgYml0cyBhcyBhIHNpZ25lZCAzMiBiaXQgaW50ZWdlci5cclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuUmVhZGVyLnByb3RvdHlwZS5zZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfc2ZpeGVkMzIoKSB7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAodGhpcy5wb3MgKyA0ID4gdGhpcy5sZW4pXHJcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xyXG5cclxuICAgIHJldHVybiByZWFkRml4ZWQzMl9lbmQodGhpcy5idWYsIHRoaXMucG9zICs9IDQpIHwgMDtcclxufTtcclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWludmFsaWQtdGhpcyAqL1xyXG5cclxuZnVuY3Rpb24gcmVhZEZpeGVkNjQoLyogdGhpczogUmVhZGVyICovKSB7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXHJcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDgpO1xyXG5cclxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMocmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSwgcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSk7XHJcbn1cclxuXHJcbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXHJcblxyXG4vKipcclxuICogUmVhZHMgZml4ZWQgNjQgYml0cy5cclxuICogQG5hbWUgUmVhZGVyI2ZpeGVkNjRcclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIHppZy16YWcgZW5jb2RlZCBmaXhlZCA2NCBiaXRzLlxyXG4gKiBAbmFtZSBSZWFkZXIjc2ZpeGVkNjRcclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgZmxvYXQgKDMyIGJpdCkgYXMgYSBudW1iZXIuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5SZWFkZXIucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24gcmVhZF9mbG9hdCgpIHtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICh0aGlzLnBvcyArIDQgPiB0aGlzLmxlbilcclxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XHJcblxyXG4gICAgdmFyIHZhbHVlID0gdXRpbC5mbG9hdC5yZWFkRmxvYXRMRSh0aGlzLmJ1ZiwgdGhpcy5wb3MpO1xyXG4gICAgdGhpcy5wb3MgKz0gNDtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIGRvdWJsZSAoNjQgYml0IGZsb2F0KSBhcyBhIG51bWJlci5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcclxuICovXHJcblJlYWRlci5wcm90b3R5cGUuZG91YmxlID0gZnVuY3Rpb24gcmVhZF9kb3VibGUoKSB7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXHJcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xyXG5cclxuICAgIHZhciB2YWx1ZSA9IHV0aWwuZmxvYXQucmVhZERvdWJsZUxFKHRoaXMuYnVmLCB0aGlzLnBvcyk7XHJcbiAgICB0aGlzLnBvcyArPSA4O1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgc2VxdWVuY2Ugb2YgYnl0ZXMgcHJlY2VlZGVkIGJ5IGl0cyBsZW5ndGggYXMgYSB2YXJpbnQuXHJcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5SZWFkZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gcmVhZF9ieXRlcygpIHtcclxuICAgIHZhciBsZW5ndGggPSB0aGlzLnVpbnQzMigpLFxyXG4gICAgICAgIHN0YXJ0ICA9IHRoaXMucG9zLFxyXG4gICAgICAgIGVuZCAgICA9IHRoaXMucG9zICsgbGVuZ3RoO1xyXG5cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGVuZCA+IHRoaXMubGVuKVxyXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCBsZW5ndGgpO1xyXG5cclxuICAgIHRoaXMucG9zICs9IGxlbmd0aDtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuYnVmKSkgLy8gcGxhaW4gYXJyYXlcclxuICAgICAgICByZXR1cm4gdGhpcy5idWYuc2xpY2Uoc3RhcnQsIGVuZCk7XHJcbiAgICByZXR1cm4gc3RhcnQgPT09IGVuZCAvLyBmaXggZm9yIElFIDEwL1dpbjggYW5kIG90aGVycycgc3ViYXJyYXkgcmV0dXJuaW5nIGFycmF5IG9mIHNpemUgMVxyXG4gICAgICAgID8gbmV3IHRoaXMuYnVmLmNvbnN0cnVjdG9yKDApXHJcbiAgICAgICAgOiB0aGlzLl9zbGljZS5jYWxsKHRoaXMuYnVmLCBzdGFydCwgZW5kKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIHN0cmluZyBwcmVjZWVkZWQgYnkgaXRzIGJ5dGUgbGVuZ3RoIGFzIGEgdmFyaW50LlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5SZWFkZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHJlYWRfc3RyaW5nKCkge1xyXG4gICAgdmFyIGJ5dGVzID0gdGhpcy5ieXRlcygpO1xyXG4gICAgcmV0dXJuIHV0ZjgucmVhZChieXRlcywgMCwgYnl0ZXMubGVuZ3RoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTa2lwcyB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBieXRlcyBpZiBzcGVjaWZpZWQsIG90aGVyd2lzZSBza2lwcyBhIHZhcmludC5cclxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIExlbmd0aCBpZiBrbm93biwgb3RoZXJ3aXNlIGEgdmFyaW50IGlzIGFzc3VtZWRcclxuICogQHJldHVybnMge1JlYWRlcn0gYHRoaXNgXHJcbiAqL1xyXG5SZWFkZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGxlbmd0aCkge1xyXG4gICAgaWYgKHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAodGhpcy5wb3MgKyBsZW5ndGggPiB0aGlzLmxlbilcclxuICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIGxlbmd0aCk7XHJcbiAgICAgICAgdGhpcy5wb3MgKz0gbGVuZ3RoO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcyk7XHJcbiAgICAgICAgfSB3aGlsZSAodGhpcy5idWZbdGhpcy5wb3MrK10gJiAxMjgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogU2tpcHMgdGhlIG5leHQgZWxlbWVudCBvZiB0aGUgc3BlY2lmaWVkIHdpcmUgdHlwZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHdpcmVUeXBlIFdpcmUgdHlwZSByZWNlaXZlZFxyXG4gKiBAcmV0dXJucyB7UmVhZGVyfSBgdGhpc2BcclxuICovXHJcblJlYWRlci5wcm90b3R5cGUuc2tpcFR5cGUgPSBmdW5jdGlvbih3aXJlVHlwZSkge1xyXG4gICAgc3dpdGNoICh3aXJlVHlwZSkge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgdGhpcy5za2lwKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgdGhpcy5za2lwKDgpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIHRoaXMuc2tpcCh0aGlzLnVpbnQzMigpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICB3aGlsZSAoKHdpcmVUeXBlID0gdGhpcy51aW50MzIoKSAmIDcpICE9PSA0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNraXBUeXBlKHdpcmVUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgIHRoaXMuc2tpcCg0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHdpcmUgdHlwZSBcIiArIHdpcmVUeXBlICsgXCIgYXQgb2Zmc2V0IFwiICsgdGhpcy5wb3MpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5SZWFkZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlclJlYWRlcl8pIHtcclxuICAgIEJ1ZmZlclJlYWRlciA9IEJ1ZmZlclJlYWRlcl87XHJcblxyXG4gICAgdmFyIGZuID0gdXRpbC5Mb25nID8gXCJ0b0xvbmdcIiA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFwidG9OdW1iZXJcIjtcclxuICAgIHV0aWwubWVyZ2UoUmVhZGVyLnByb3RvdHlwZSwge1xyXG5cclxuICAgICAgICBpbnQ2NDogZnVuY3Rpb24gcmVhZF9pbnQ2NCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcylbZm5dKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1aW50NjQ6IGZ1bmN0aW9uIHJlYWRfdWludDY0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVhZExvbmdWYXJpbnQuY2FsbCh0aGlzKVtmbl0odHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2ludDY0OiBmdW5jdGlvbiByZWFkX3NpbnQ2NCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcykuenpEZWNvZGUoKVtmbl0oZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGZpeGVkNjQ6IGZ1bmN0aW9uIHJlYWRfZml4ZWQ2NCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWRGaXhlZDY0LmNhbGwodGhpcylbZm5dKHRydWUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNmaXhlZDY0OiBmdW5jdGlvbiByZWFkX3NmaXhlZDY0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVhZEZpeGVkNjQuY2FsbCh0aGlzKVtmbl0oZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KTtcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyUmVhZGVyO1xyXG5cclxuLy8gZXh0ZW5kcyBSZWFkZXJcclxudmFyIFJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxuKEJ1ZmZlclJlYWRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlYWRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlclJlYWRlcjtcclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHJlYWRlciBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxyXG4gKiBAZXh0ZW5kcyBSZWFkZXJcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxyXG4gKi9cclxuZnVuY3Rpb24gQnVmZmVyUmVhZGVyKGJ1ZmZlcikge1xyXG4gICAgUmVhZGVyLmNhbGwodGhpcywgYnVmZmVyKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYnVmZmVyLlxyXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxyXG4gICAgICogQHR5cGUge0J1ZmZlcn1cclxuICAgICAqL1xyXG59XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG5pZiAodXRpbC5CdWZmZXIpXHJcbiAgICBCdWZmZXJSZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zbGljZTtcclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcbkJ1ZmZlclJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmdfYnVmZmVyKCkge1xyXG4gICAgdmFyIGxlbiA9IHRoaXMudWludDMyKCk7IC8vIG1vZGlmaWVzIHBvc1xyXG4gICAgcmV0dXJuIHRoaXMuYnVmLnV0ZjhTbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgPSBNYXRoLm1pbih0aGlzLnBvcyArIGxlbiwgdGhpcy5sZW4pKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxyXG4gKiBAbmFtZSBCdWZmZXJSZWFkZXIjYnl0ZXNcclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFZhbHVlIHJlYWRcclxuICovXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3Q7XHJcblxyXG4vLyBleHRlbmRzIE5hbWVzcGFjZVxyXG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpO1xyXG4oKFJvb3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOYW1lc3BhY2UucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBSb290KS5jbGFzc05hbWUgPSBcIlJvb3RcIjtcclxuXHJcbnZhciBGaWVsZCAgID0gcmVxdWlyZShcIi4vZmllbGRcIiksXHJcbiAgICBFbnVtICAgID0gcmVxdWlyZShcIi4vZW51bVwiKSxcclxuICAgIE9uZU9mICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKSxcclxuICAgIHV0aWwgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5cclxudmFyIFR5cGUsICAgLy8gY3ljbGljXHJcbiAgICBwYXJzZSwgIC8vIG1pZ2h0IGJlIGV4Y2x1ZGVkXHJcbiAgICBjb21tb247IC8vIFwiXHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyByb290IG5hbWVzcGFjZSBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBSb290IG5hbWVzcGFjZSB3cmFwcGluZyBhbGwgdHlwZXMsIGVudW1zLCBzZXJ2aWNlcywgc3ViLW5hbWVzcGFjZXMgZXRjLiB0aGF0IGJlbG9uZyB0b2dldGhlci5cclxuICogQGV4dGVuZHMgTmFtZXNwYWNlQmFzZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIFRvcCBsZXZlbCBvcHRpb25zXHJcbiAqL1xyXG5mdW5jdGlvbiBSb290KG9wdGlvbnMpIHtcclxuICAgIE5hbWVzcGFjZS5jYWxsKHRoaXMsIFwiXCIsIG9wdGlvbnMpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmZXJyZWQgZXh0ZW5zaW9uIGZpZWxkcy5cclxuICAgICAqIEB0eXBlIHtGaWVsZFtdfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmRlZmVycmVkID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlZCBmaWxlIG5hbWVzIG9mIGxvYWRlZCBmaWxlcy5cclxuICAgICAqIEB0eXBlIHtzdHJpbmdbXX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5maWxlcyA9IFtdO1xyXG59XHJcblxyXG4vKipcclxuICogTG9hZHMgYSBuYW1lc3BhY2UgZGVzY3JpcHRvciBpbnRvIGEgcm9vdCBuYW1lc3BhY2UuXHJcbiAqIEBwYXJhbSB7SU5hbWVzcGFjZX0ganNvbiBOYW1lZXNwYWNlIGRlc2NyaXB0b3JcclxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCBuYW1lc3BhY2UsIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIG5ldyBvbmUgaWYgb21pdHRlZFxyXG4gKiBAcmV0dXJucyB7Um9vdH0gUm9vdCBuYW1lc3BhY2VcclxuICovXHJcblJvb3QuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihqc29uLCByb290KSB7XHJcbiAgICBpZiAoIXJvb3QpXHJcbiAgICAgICAgcm9vdCA9IG5ldyBSb290KCk7XHJcbiAgICBpZiAoanNvbi5vcHRpb25zKVxyXG4gICAgICAgIHJvb3Quc2V0T3B0aW9ucyhqc29uLm9wdGlvbnMpO1xyXG4gICAgcmV0dXJuIHJvb3QuYWRkSlNPTihqc29uLm5lc3RlZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVzb2x2ZXMgdGhlIHBhdGggb2YgYW4gaW1wb3J0ZWQgZmlsZSwgcmVsYXRpdmUgdG8gdGhlIGltcG9ydGluZyBvcmlnaW4uXHJcbiAqIFRoaXMgbWV0aG9kIGV4aXN0cyBzbyB5b3UgY2FuIG92ZXJyaWRlIGl0IHdpdGggeW91ciBvd24gbG9naWMgaW4gY2FzZSB5b3VyIGltcG9ydHMgYXJlIHNjYXR0ZXJlZCBvdmVyIG11bHRpcGxlIGRpcmVjdG9yaWVzLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiBUaGUgZmlsZSBuYW1lIG9mIHRoZSBpbXBvcnRpbmcgZmlsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IFRoZSBmaWxlIG5hbWUgYmVpbmcgaW1wb3J0ZWRcclxuICogQHJldHVybnMge3N0cmluZ3xudWxsfSBSZXNvbHZlZCBwYXRoIHRvIGB0YXJnZXRgIG9yIGBudWxsYCB0byBza2lwIHRoZSBmaWxlXHJcbiAqL1xyXG5Sb290LnByb3RvdHlwZS5yZXNvbHZlUGF0aCA9IHV0aWwucGF0aC5yZXNvbHZlO1xyXG5cclxuLy8gQSBzeW1ib2wtbGlrZSBmdW5jdGlvbiB0byBzYWZlbHkgc2lnbmFsIHN5bmNocm9ub3VzIGxvYWRpbmdcclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gU1lOQygpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHktZnVuY3Rpb25cclxuXHJcbi8qKlxyXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIHRoaXMgcm9vdCBuYW1lc3BhY2UgYW5kIGNhbGxzIHRoZSBjYWxsYmFjay5cclxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGZpbGVuYW1lIE5hbWVzIG9mIG9uZSBvciBtdWx0aXBsZSBmaWxlcyB0byBsb2FkXHJcbiAqIEBwYXJhbSB7SVBhcnNlT3B0aW9uc30gb3B0aW9ucyBQYXJzZSBvcHRpb25zXHJcbiAqIEBwYXJhbSB7TG9hZENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuUm9vdC5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQoZmlsZW5hbWUsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcclxuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgaWYgKCFjYWxsYmFjaylcclxuICAgICAgICByZXR1cm4gdXRpbC5hc1Byb21pc2UobG9hZCwgc2VsZiwgZmlsZW5hbWUsIG9wdGlvbnMpO1xyXG5cclxuICAgIHZhciBzeW5jID0gY2FsbGJhY2sgPT09IFNZTkM7IC8vIHVuZG9jdW1lbnRlZFxyXG5cclxuICAgIC8vIEZpbmlzaGVzIGxvYWRpbmcgYnkgY2FsbGluZyB0aGUgY2FsbGJhY2sgKGV4YWN0bHkgb25jZSlcclxuICAgIGZ1bmN0aW9uIGZpbmlzaChlcnIsIHJvb3QpIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIWNhbGxiYWNrKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIGNiID0gY2FsbGJhY2s7XHJcbiAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgIGlmIChzeW5jKVxyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgY2IoZXJyLCByb290KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcm9jZXNzZXMgYSBzaW5nbGUgZmlsZVxyXG4gICAgZnVuY3Rpb24gcHJvY2VzcyhmaWxlbmFtZSwgc291cmNlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHV0aWwuaXNTdHJpbmcoc291cmNlKSAmJiBzb3VyY2UuY2hhckF0KDApID09PSBcIntcIilcclxuICAgICAgICAgICAgICAgIHNvdXJjZSA9IEpTT04ucGFyc2Uoc291cmNlKTtcclxuICAgICAgICAgICAgaWYgKCF1dGlsLmlzU3RyaW5nKHNvdXJjZSkpXHJcbiAgICAgICAgICAgICAgICBzZWxmLnNldE9wdGlvbnMoc291cmNlLm9wdGlvbnMpLmFkZEpTT04oc291cmNlLm5lc3RlZCk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyc2UuZmlsZW5hbWUgPSBmaWxlbmFtZTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZShzb3VyY2UsIHNlbGYsIG9wdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5pbXBvcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgcGFyc2VkLmltcG9ydHMubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZCA9IHNlbGYucmVzb2x2ZVBhdGgoZmlsZW5hbWUsIHBhcnNlZC5pbXBvcnRzW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoKHJlc29sdmVkKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQud2Vha0ltcG9ydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnNlZC53ZWFrSW1wb3J0cy5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkID0gc2VsZi5yZXNvbHZlUGF0aChmaWxlbmFtZSwgcGFyc2VkLndlYWtJbXBvcnRzW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoKHJlc29sdmVkLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBmaW5pc2goZXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzeW5jICYmICFxdWV1ZWQpXHJcbiAgICAgICAgICAgIGZpbmlzaChudWxsLCBzZWxmKTsgLy8gb25seSBvbmNlIGFueXdheVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZldGNoZXMgYSBzaW5nbGUgZmlsZVxyXG4gICAgZnVuY3Rpb24gZmV0Y2goZmlsZW5hbWUsIHdlYWspIHtcclxuXHJcbiAgICAgICAgLy8gU3RyaXAgcGF0aCBpZiB0aGlzIGZpbGUgcmVmZXJlbmNlcyBhIGJ1bmRsZWQgZGVmaW5pdGlvblxyXG4gICAgICAgIHZhciBpZHggPSBmaWxlbmFtZS5sYXN0SW5kZXhPZihcImdvb2dsZS9wcm90b2J1Zi9cIik7XHJcbiAgICAgICAgaWYgKGlkeCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHZhciBhbHRuYW1lID0gZmlsZW5hbWUuc3Vic3RyaW5nKGlkeCk7XHJcbiAgICAgICAgICAgIGlmIChhbHRuYW1lIGluIGNvbW1vbilcclxuICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gYWx0bmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNraXAgaWYgYWxyZWFkeSBsb2FkZWQgLyBhdHRlbXB0ZWRcclxuICAgICAgICBpZiAoc2VsZi5maWxlcy5pbmRleE9mKGZpbGVuYW1lKSA+IC0xKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgc2VsZi5maWxlcy5wdXNoKGZpbGVuYW1lKTtcclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXQgYnVuZGxlZCBkZWZpbml0aW9uc1xyXG4gICAgICAgIGlmIChmaWxlbmFtZSBpbiBjb21tb24pIHtcclxuICAgICAgICAgICAgaWYgKHN5bmMpXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzKGZpbGVuYW1lLCBjb21tb25bZmlsZW5hbWVdKTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICArK3F1ZXVlZDtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1xdWV1ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgY29tbW9uW2ZpbGVuYW1lXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBPdGhlcndpc2UgZmV0Y2ggZnJvbSBkaXNrIG9yIG5ldHdvcmtcclxuICAgICAgICBpZiAoc3luYykge1xyXG4gICAgICAgICAgICB2YXIgc291cmNlO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc291cmNlID0gdXRpbC5mcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUpLnRvU3RyaW5nKFwidXRmOFwiKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXdlYWspXHJcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoKGVycik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgc291cmNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICArK3F1ZXVlZDtcclxuICAgICAgICAgICAgdXRpbC5mZXRjaChmaWxlbmFtZSwgZnVuY3Rpb24oZXJyLCBzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIC0tcXVldWVkO1xyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gdGVybWluYXRlZCBtZWFud2hpbGVcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2VhaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXF1ZXVlZCkgLy8gY2FuJ3QgYmUgY292ZXJlZCByZWxpYWJseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2gobnVsbCwgc2VsZik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgc291cmNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIHF1ZXVlZCA9IDA7XHJcblxyXG4gICAgLy8gQXNzZW1ibGluZyB0aGUgcm9vdCBuYW1lc3BhY2UgZG9lc24ndCByZXF1aXJlIHdvcmtpbmcgdHlwZVxyXG4gICAgLy8gcmVmZXJlbmNlcyBhbnltb3JlLCBzbyB3ZSBjYW4gbG9hZCBldmVyeXRoaW5nIGluIHBhcmFsbGVsXHJcbiAgICBpZiAodXRpbC5pc1N0cmluZyhmaWxlbmFtZSkpXHJcbiAgICAgICAgZmlsZW5hbWUgPSBbIGZpbGVuYW1lIF07XHJcbiAgICBmb3IgKHZhciBpID0gMCwgcmVzb2x2ZWQ7IGkgPCBmaWxlbmFtZS5sZW5ndGg7ICsraSlcclxuICAgICAgICBpZiAocmVzb2x2ZWQgPSBzZWxmLnJlc29sdmVQYXRoKFwiXCIsIGZpbGVuYW1lW2ldKSlcclxuICAgICAgICAgICAgZmV0Y2gocmVzb2x2ZWQpO1xyXG5cclxuICAgIGlmIChzeW5jKVxyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgaWYgKCFxdWV1ZWQpXHJcbiAgICAgICAgZmluaXNoKG51bGwsIHNlbGYpO1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufTtcclxuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIG9wdGlvbnM6SVBhcnNlT3B0aW9ucywgY2FsbGJhY2s6TG9hZENhbGxiYWNrKTp1bmRlZmluZWRcclxuXHJcbi8qKlxyXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIHRoaXMgcm9vdCBuYW1lc3BhY2UgYW5kIGNhbGxzIHRoZSBjYWxsYmFjay5cclxuICogQGZ1bmN0aW9uIFJvb3QjbG9hZFxyXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgTmFtZXMgb2Ygb25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcclxuICogQHBhcmFtIHtMb2FkQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEB2YXJpYXRpb24gMlxyXG4gKi9cclxuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIGNhbGxiYWNrOkxvYWRDYWxsYmFjayk6dW5kZWZpbmVkXHJcblxyXG4vKipcclxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cclxuICogQGZ1bmN0aW9uIFJvb3QjbG9hZFxyXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgTmFtZXMgb2Ygb25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcclxuICogQHBhcmFtIHtJUGFyc2VPcHRpb25zfSBbb3B0aW9uc10gUGFyc2Ugb3B0aW9ucy4gRGVmYXVsdHMgdG8ge0BsaW5rIHBhcnNlLmRlZmF1bHRzfSB3aGVuIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPFJvb3Q+fSBQcm9taXNlXHJcbiAqIEB2YXJpYXRpb24gM1xyXG4gKi9cclxuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIFtvcHRpb25zOklQYXJzZU9wdGlvbnNdKTpQcm9taXNlPFJvb3Q+XHJcblxyXG4vKipcclxuICogU3luY2hyb25vdXNseSBsb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIHRoaXMgcm9vdCBuYW1lc3BhY2UgKG5vZGUgb25seSkuXHJcbiAqIEBmdW5jdGlvbiBSb290I2xvYWRTeW5jXHJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBOYW1lcyBvZiBvbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxyXG4gKiBAcGFyYW0ge0lQYXJzZU9wdGlvbnN9IFtvcHRpb25zXSBQYXJzZSBvcHRpb25zLiBEZWZhdWx0cyB0byB7QGxpbmsgcGFyc2UuZGVmYXVsdHN9IHdoZW4gb21pdHRlZC5cclxuICogQHJldHVybnMge1Jvb3R9IFJvb3QgbmFtZXNwYWNlXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzeW5jaHJvbm91cyBmZXRjaGluZyBpcyBub3Qgc3VwcG9ydGVkIChpLmUuIGluIGJyb3dzZXJzKSBvciBpZiBhIGZpbGUncyBzeW50YXggaXMgaW52YWxpZFxyXG4gKi9cclxuUm9vdC5wcm90b3R5cGUubG9hZFN5bmMgPSBmdW5jdGlvbiBsb2FkU3luYyhmaWxlbmFtZSwgb3B0aW9ucykge1xyXG4gICAgaWYgKCF1dGlsLmlzTm9kZSlcclxuICAgICAgICB0aHJvdyBFcnJvcihcIm5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICByZXR1cm4gdGhpcy5sb2FkKGZpbGVuYW1lLCBvcHRpb25zLCBTWU5DKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcblJvb3QucHJvdG90eXBlLnJlc29sdmVBbGwgPSBmdW5jdGlvbiByZXNvbHZlQWxsKCkge1xyXG4gICAgaWYgKHRoaXMuZGVmZXJyZWQubGVuZ3RoKVxyXG4gICAgICAgIHRocm93IEVycm9yKFwidW5yZXNvbHZhYmxlIGV4dGVuc2lvbnM6IFwiICsgdGhpcy5kZWZlcnJlZC5tYXAoZnVuY3Rpb24oZmllbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiJ2V4dGVuZCBcIiArIGZpZWxkLmV4dGVuZCArIFwiJyBpbiBcIiArIGZpZWxkLnBhcmVudC5mdWxsTmFtZTtcclxuICAgICAgICB9KS5qb2luKFwiLCBcIikpO1xyXG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUucmVzb2x2ZUFsbC5jYWxsKHRoaXMpO1xyXG59O1xyXG5cclxuLy8gb25seSB1cHBlcmNhc2VkIChhbmQgdGh1cyBjb25mbGljdC1mcmVlKSBjaGlsZHJlbiBhcmUgZXhwb3NlZCwgc2VlIGJlbG93XHJcbnZhciBleHBvc2VSZSA9IC9eW0EtWl0vO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgYSBkZWZlcnJlZCBkZWNsYXJpbmcgZXh0ZW5zaW9uIGZpZWxkIGJ5IGNyZWF0aW5nIGEgc2lzdGVyIGZpZWxkIHRvIHJlcHJlc2VudCBpdCB3aXRoaW4gaXRzIGV4dGVuZGVkIHR5cGUuXHJcbiAqIEBwYXJhbSB7Um9vdH0gcm9vdCBSb290IGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIERlY2xhcmluZyBleHRlbnNpb24gZmllbGQgd2l0aW4gdGhlIGRlY2xhcmluZyB0eXBlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIHRoZSBleHRlbmRlZCB0eXBlLCBgZmFsc2VgIG90aGVyd2lzZVxyXG4gKiBAaW5uZXJcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZnVuY3Rpb24gdHJ5SGFuZGxlRXh0ZW5zaW9uKHJvb3QsIGZpZWxkKSB7XHJcbiAgICB2YXIgZXh0ZW5kZWRUeXBlID0gZmllbGQucGFyZW50Lmxvb2t1cChmaWVsZC5leHRlbmQpO1xyXG4gICAgaWYgKGV4dGVuZGVkVHlwZSkge1xyXG4gICAgICAgIHZhciBzaXN0ZXJGaWVsZCA9IG5ldyBGaWVsZChmaWVsZC5mdWxsTmFtZSwgZmllbGQuaWQsIGZpZWxkLnR5cGUsIGZpZWxkLnJ1bGUsIHVuZGVmaW5lZCwgZmllbGQub3B0aW9ucyk7XHJcbiAgICAgICAgc2lzdGVyRmllbGQuZGVjbGFyaW5nRmllbGQgPSBmaWVsZDtcclxuICAgICAgICBmaWVsZC5leHRlbnNpb25GaWVsZCA9IHNpc3RlckZpZWxkO1xyXG4gICAgICAgIGV4dGVuZGVkVHlwZS5hZGQoc2lzdGVyRmllbGQpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsbGVkIHdoZW4gYW55IG9iamVjdCBpcyBhZGRlZCB0byB0aGlzIHJvb3Qgb3IgaXRzIHN1Yi1uYW1lc3BhY2VzLlxyXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBPYmplY3QgYWRkZWRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICogQHByaXZhdGVcclxuICovXHJcblJvb3QucHJvdG90eXBlLl9oYW5kbGVBZGQgPSBmdW5jdGlvbiBfaGFuZGxlQWRkKG9iamVjdCkge1xyXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkKSB7XHJcblxyXG4gICAgICAgIGlmICgvKiBhbiBleHRlbnNpb24gZmllbGQgKGltcGxpZXMgbm90IHBhcnQgb2YgYSBvbmVvZikgKi8gb2JqZWN0LmV4dGVuZCAhPT0gdW5kZWZpbmVkICYmIC8qIG5vdCBhbHJlYWR5IGhhbmRsZWQgKi8gIW9iamVjdC5leHRlbnNpb25GaWVsZClcclxuICAgICAgICAgICAgaWYgKCF0cnlIYW5kbGVFeHRlbnNpb24odGhpcywgb2JqZWN0KSlcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQucHVzaChvYmplY3QpO1xyXG5cclxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgRW51bSkge1xyXG5cclxuICAgICAgICBpZiAoZXhwb3NlUmUudGVzdChvYmplY3QubmFtZSkpXHJcbiAgICAgICAgICAgIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdID0gb2JqZWN0LnZhbHVlczsgLy8gZXhwb3NlIGVudW0gdmFsdWVzIGFzIHByb3BlcnR5IG9mIGl0cyBwYXJlbnRcclxuXHJcbiAgICB9IGVsc2UgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpKSAvKiBldmVyeXRoaW5nIGVsc2UgaXMgYSBuYW1lc3BhY2UgKi8ge1xyXG5cclxuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgVHlwZSkgLy8gVHJ5IHRvIGhhbmRsZSBhbnkgZGVmZXJyZWQgZXh0ZW5zaW9uc1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGVmZXJyZWQubGVuZ3RoOylcclxuICAgICAgICAgICAgICAgIGlmICh0cnlIYW5kbGVFeHRlbnNpb24odGhpcywgdGhpcy5kZWZlcnJlZFtpXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgLyogaW5pdGlhbGl6ZXMgKi8gb2JqZWN0Lm5lc3RlZEFycmF5Lmxlbmd0aDsgKytqKSAvLyByZWN1cnNlIGludG8gdGhlIG5hbWVzcGFjZVxyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVBZGQob2JqZWN0Ll9uZXN0ZWRBcnJheVtqXSk7XHJcbiAgICAgICAgaWYgKGV4cG9zZVJlLnRlc3Qob2JqZWN0Lm5hbWUpKVxyXG4gICAgICAgICAgICBvYmplY3QucGFyZW50W29iamVjdC5uYW1lXSA9IG9iamVjdDsgLy8gZXhwb3NlIG5hbWVzcGFjZSBhcyBwcm9wZXJ0eSBvZiBpdHMgcGFyZW50XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhlIGFib3ZlIGFsc28gYWRkcyB1cHBlcmNhc2VkIChhbmQgdGh1cyBjb25mbGljdC1mcmVlKSBuZXN0ZWQgdHlwZXMsIHNlcnZpY2VzIGFuZCBlbnVtcyBhc1xyXG4gICAgLy8gcHJvcGVydGllcyBvZiBuYW1lc3BhY2VzIGp1c3QgbGlrZSBzdGF0aWMgY29kZSBkb2VzLiBUaGlzIGFsbG93cyB1c2luZyBhIC5kLnRzIGdlbmVyYXRlZCBmb3JcclxuICAgIC8vIGEgc3RhdGljIG1vZHVsZSB3aXRoIHJlZmxlY3Rpb24tYmFzZWQgc29sdXRpb25zIHdoZXJlIHRoZSBjb25kaXRpb24gaXMgbWV0LlxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGxlZCB3aGVuIGFueSBvYmplY3QgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgcm9vdCBvciBpdHMgc3ViLW5hbWVzcGFjZXMuXHJcbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE9iamVjdCByZW1vdmVkXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5Sb290LnByb3RvdHlwZS5faGFuZGxlUmVtb3ZlID0gZnVuY3Rpb24gX2hhbmRsZVJlbW92ZShvYmplY3QpIHtcclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBGaWVsZCkge1xyXG5cclxuICAgICAgICBpZiAoLyogYW4gZXh0ZW5zaW9uIGZpZWxkICovIG9iamVjdC5leHRlbmQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoLyogYWxyZWFkeSBoYW5kbGVkICovIG9iamVjdC5leHRlbnNpb25GaWVsZCkgeyAvLyByZW1vdmUgaXRzIHNpc3RlciBmaWVsZFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0LmV4dGVuc2lvbkZpZWxkLnBhcmVudC5yZW1vdmUob2JqZWN0LmV4dGVuc2lvbkZpZWxkKTtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5leHRlbnNpb25GaWVsZCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGNhbmNlbCB0aGUgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRlZmVycmVkLmluZGV4T2Yob2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBFbnVtKSB7XHJcblxyXG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcclxuICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdOyAvLyB1bmV4cG9zZSBlbnVtIHZhbHVlc1xyXG5cclxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgTmFtZXNwYWNlKSB7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gb2JqZWN0Lm5lc3RlZEFycmF5Lmxlbmd0aDsgKytpKSAvLyByZWN1cnNlIGludG8gdGhlIG5hbWVzcGFjZVxyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVSZW1vdmUob2JqZWN0Ll9uZXN0ZWRBcnJheVtpXSk7XHJcblxyXG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcclxuICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdOyAvLyB1bmV4cG9zZSBuYW1lc3BhY2VzXHJcblxyXG4gICAgfVxyXG59O1xyXG5cclxuLy8gU2V0cyB1cCBjeWNsaWMgZGVwZW5kZW5jaWVzIChjYWxsZWQgaW4gaW5kZXgtbGlnaHQpXHJcblJvb3QuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKFR5cGVfLCBwYXJzZV8sIGNvbW1vbl8pIHtcclxuICAgIFR5cGUgICA9IFR5cGVfO1xyXG4gICAgcGFyc2UgID0gcGFyc2VfO1xyXG4gICAgY29tbW9uID0gY29tbW9uXztcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0ge307XHJcblxyXG4vKipcclxuICogTmFtZWQgcm9vdHMuXHJcbiAqIFRoaXMgaXMgd2hlcmUgcGJqcyBzdG9yZXMgZ2VuZXJhdGVkIHN0cnVjdHVyZXMgKHRoZSBvcHRpb24gYC1yLCAtLXJvb3RgIHNwZWNpZmllcyBhIG5hbWUpLlxyXG4gKiBDYW4gYWxzbyBiZSB1c2VkIG1hbnVhbGx5IHRvIG1ha2Ugcm9vdHMgYXZhaWxhYmxlIGFjY3Jvc3MgbW9kdWxlcy5cclxuICogQG5hbWUgcm9vdHNcclxuICogQHR5cGUge09iamVjdC48c3RyaW5nLFJvb3Q+fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBwYmpzIC1yIG15cm9vdCAtbyBjb21waWxlZC5qcyAuLi5cclxuICpcclxuICogLy8gaW4gYW5vdGhlciBtb2R1bGU6XHJcbiAqIHJlcXVpcmUoXCIuL2NvbXBpbGVkLmpzXCIpO1xyXG4gKlxyXG4gKiAvLyBpbiBhbnkgc3Vic2VxdWVudCBtb2R1bGU6XHJcbiAqIHZhciByb290ID0gcHJvdG9idWYucm9vdHNbXCJteXJvb3RcIl07XHJcbiAqL1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBTdHJlYW1pbmcgUlBDIGhlbHBlcnMuXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciBycGMgPSBleHBvcnRzO1xyXG5cclxuLyoqXHJcbiAqIFJQQyBpbXBsZW1lbnRhdGlvbiBwYXNzZWQgdG8ge0BsaW5rIFNlcnZpY2UjY3JlYXRlfSBwZXJmb3JtaW5nIGEgc2VydmljZSByZXF1ZXN0IG9uIG5ldHdvcmsgbGV2ZWwsIGkuZS4gYnkgdXRpbGl6aW5nIGh0dHAgcmVxdWVzdHMgb3Igd2Vic29ja2V0cy5cclxuICogQHR5cGVkZWYgUlBDSW1wbFxyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7TWV0aG9kfHJwYy5TZXJ2aWNlTWV0aG9kPE1lc3NhZ2U8e30+LE1lc3NhZ2U8e30+Pn0gbWV0aG9kIFJlZmxlY3RlZCBvciBzdGF0aWMgbWV0aG9kIGJlaW5nIGNhbGxlZFxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHJlcXVlc3REYXRhIFJlcXVlc3QgZGF0YVxyXG4gKiBAcGFyYW0ge1JQQ0ltcGxDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICogQGV4YW1wbGVcclxuICogZnVuY3Rpb24gcnBjSW1wbChtZXRob2QsIHJlcXVlc3REYXRhLCBjYWxsYmFjaykge1xyXG4gKiAgICAgaWYgKHByb3RvYnVmLnV0aWwubGNGaXJzdChtZXRob2QubmFtZSkgIT09IFwibXlNZXRob2RcIikgLy8gY29tcGF0aWJsZSB3aXRoIHN0YXRpYyBjb2RlXHJcbiAqICAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIG1ldGhvZFwiKTtcclxuICogICAgIGFzeW5jaHJvbm91c2x5T2J0YWluQVJlc3BvbnNlKHJlcXVlc3REYXRhLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlRGF0YSkge1xyXG4gKiAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2VEYXRhKTtcclxuICogICAgIH0pO1xyXG4gKiB9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIE5vZGUtc3R5bGUgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgUlBDSW1wbH0uXHJcbiAqIEB0eXBlZGVmIFJQQ0ltcGxDYWxsYmFja1xyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueSwgb3RoZXJ3aXNlIGBudWxsYFxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8bnVsbH0gW3Jlc3BvbnNlXSBSZXNwb25zZSBkYXRhIG9yIGBudWxsYCB0byBzaWduYWwgZW5kIG9mIHN0cmVhbSwgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG5ycGMuU2VydmljZSA9IHJlcXVpcmUoXCIuL3JwYy9zZXJ2aWNlXCIpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2aWNlO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxuLy8gRXh0ZW5kcyBFdmVudEVtaXR0ZXJcclxuKFNlcnZpY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh1dGlsLkV2ZW50RW1pdHRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IFNlcnZpY2U7XHJcblxyXG4vKipcclxuICogQSBzZXJ2aWNlIG1ldGhvZCBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBycGMuU2VydmljZU1ldGhvZHxTZXJ2aWNlTWV0aG9kfS5cclxuICpcclxuICogRGlmZmVycyBmcm9tIHtAbGluayBSUENJbXBsQ2FsbGJhY2t9IGluIHRoYXQgaXQgaXMgYW4gYWN0dWFsIGNhbGxiYWNrIG9mIGEgc2VydmljZSBtZXRob2Qgd2hpY2ggbWF5IG5vdCByZXR1cm4gYHJlc3BvbnNlID0gbnVsbGAuXHJcbiAqIEB0eXBlZGVmIHJwYy5TZXJ2aWNlTWV0aG9kQ2FsbGJhY2tcclxuICogQHRlbXBsYXRlIFRSZXMgZXh0ZW5kcyBNZXNzYWdlPFRSZXM+XHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55XHJcbiAqIEBwYXJhbSB7VFJlc30gW3Jlc3BvbnNlXSBSZXNwb25zZSBtZXNzYWdlXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2VydmljZSBtZXRob2QgcGFydCBvZiBhIHtAbGluayBycGMuU2VydmljZX0gYXMgY3JlYXRlZCBieSB7QGxpbmsgU2VydmljZS5jcmVhdGV9LlxyXG4gKiBAdHlwZWRlZiBycGMuU2VydmljZU1ldGhvZFxyXG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cclxuICogQHRlbXBsYXRlIFRSZXMgZXh0ZW5kcyBNZXNzYWdlPFRSZXM+XHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtUUmVxfFByb3BlcnRpZXM8VFJlcT59IHJlcXVlc3QgUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdFxyXG4gKiBAcGFyYW0ge3JwYy5TZXJ2aWNlTWV0aG9kQ2FsbGJhY2s8VFJlcz59IFtjYWxsYmFja10gTm9kZS1zdHlsZSBjYWxsYmFjayBjYWxsZWQgd2l0aCB0aGUgZXJyb3IsIGlmIGFueSwgYW5kIHRoZSByZXNwb25zZSBtZXNzYWdlXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPE1lc3NhZ2U8VFJlcz4+fSBQcm9taXNlIGlmIGBjYWxsYmFja2AgaGFzIGJlZW4gb21pdHRlZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgUlBDIHNlcnZpY2UgaW5zdGFuY2UuXHJcbiAqIEBjbGFzc2Rlc2MgQW4gUlBDIHNlcnZpY2UgYXMgcmV0dXJuZWQgYnkge0BsaW5rIFNlcnZpY2UjY3JlYXRlfS5cclxuICogQGV4cG9ydHMgcnBjLlNlcnZpY2VcclxuICogQGV4dGVuZHMgdXRpbC5FdmVudEVtaXR0ZXJcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7UlBDSW1wbH0gcnBjSW1wbCBSUEMgaW1wbGVtZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXNwb25zZURlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXNwb25zZXMgYXJlIGxlbmd0aC1kZWxpbWl0ZWRcclxuICovXHJcbmZ1bmN0aW9uIFNlcnZpY2UocnBjSW1wbCwgcmVxdWVzdERlbGltaXRlZCwgcmVzcG9uc2VEZWxpbWl0ZWQpIHtcclxuXHJcbiAgICBpZiAodHlwZW9mIHJwY0ltcGwgIT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJycGNJbXBsIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcclxuXHJcbiAgICB1dGlsLkV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUlBDIGltcGxlbWVudGF0aW9uLiBCZWNvbWVzIGBudWxsYCBvbmNlIHRoZSBzZXJ2aWNlIGlzIGVuZGVkLlxyXG4gICAgICogQHR5cGUge1JQQ0ltcGx8bnVsbH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5ycGNJbXBsID0gcnBjSW1wbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgcmVxdWVzdHMgYXJlIGxlbmd0aC1kZWxpbWl0ZWQuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5yZXF1ZXN0RGVsaW1pdGVkID0gQm9vbGVhbihyZXF1ZXN0RGVsaW1pdGVkKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVzcG9uc2VEZWxpbWl0ZWQgPSBCb29sZWFuKHJlc3BvbnNlRGVsaW1pdGVkKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGxzIGEgc2VydmljZSBtZXRob2QgdGhyb3VnaCB7QGxpbmsgcnBjLlNlcnZpY2UjcnBjSW1wbHxycGNJbXBsfS5cclxuICogQHBhcmFtIHtNZXRob2R8cnBjLlNlcnZpY2VNZXRob2Q8VFJlcSxUUmVzPn0gbWV0aG9kIFJlZmxlY3RlZCBvciBzdGF0aWMgbWV0aG9kXHJcbiAqIEBwYXJhbSB7Q29uc3RydWN0b3I8VFJlcT59IHJlcXVlc3RDdG9yIFJlcXVlc3QgY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVzPn0gcmVzcG9uc2VDdG9yIFJlc3BvbnNlIGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7VFJlcXxQcm9wZXJ0aWVzPFRSZXE+fSByZXF1ZXN0IFJlcXVlc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3RcclxuICogQHBhcmFtIHtycGMuU2VydmljZU1ldGhvZENhbGxiYWNrPFRSZXM+fSBjYWxsYmFjayBTZXJ2aWNlIGNhbGxiYWNrXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEB0ZW1wbGF0ZSBUUmVxIGV4dGVuZHMgTWVzc2FnZTxUUmVxPlxyXG4gKiBAdGVtcGxhdGUgVFJlcyBleHRlbmRzIE1lc3NhZ2U8VFJlcz5cclxuICovXHJcblNlcnZpY2UucHJvdG90eXBlLnJwY0NhbGwgPSBmdW5jdGlvbiBycGNDYWxsKG1ldGhvZCwgcmVxdWVzdEN0b3IsIHJlc3BvbnNlQ3RvciwgcmVxdWVzdCwgY2FsbGJhY2spIHtcclxuXHJcbiAgICBpZiAoIXJlcXVlc3QpXHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwicmVxdWVzdCBtdXN0IGJlIHNwZWNpZmllZFwiKTtcclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBpZiAoIWNhbGxiYWNrKVxyXG4gICAgICAgIHJldHVybiB1dGlsLmFzUHJvbWlzZShycGNDYWxsLCBzZWxmLCBtZXRob2QsIHJlcXVlc3RDdG9yLCByZXNwb25zZUN0b3IsIHJlcXVlc3QpO1xyXG5cclxuICAgIGlmICghc2VsZi5ycGNJbXBsKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soRXJyb3IoXCJhbHJlYWR5IGVuZGVkXCIpKTsgfSwgMCk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBzZWxmLnJwY0ltcGwoXHJcbiAgICAgICAgICAgIG1ldGhvZCxcclxuICAgICAgICAgICAgcmVxdWVzdEN0b3Jbc2VsZi5yZXF1ZXN0RGVsaW1pdGVkID8gXCJlbmNvZGVEZWxpbWl0ZWRcIiA6IFwiZW5jb2RlXCJdKHJlcXVlc3QpLmZpbmlzaCgpLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiBycGNDYWxsYmFjayhlcnIsIHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmVuZCgvKiBlbmRlZEJ5UlBDICovIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2UgaW5zdGFuY2VvZiByZXNwb25zZUN0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZUN0b3Jbc2VsZi5yZXNwb25zZURlbGltaXRlZCA/IFwiZGVjb2RlRGVsaW1pdGVkXCIgOiBcImRlY29kZVwiXShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuZW1pdChcImRhdGFcIiwgcmVzcG9uc2UsIG1ldGhvZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhlcnIpOyB9LCAwKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVuZHMgdGhpcyBzZXJ2aWNlIGFuZCBlbWl0cyB0aGUgYGVuZGAgZXZlbnQuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2VuZGVkQnlSUEM9ZmFsc2VdIFdoZXRoZXIgdGhlIHNlcnZpY2UgaGFzIGJlZW4gZW5kZWQgYnkgdGhlIFJQQyBpbXBsZW1lbnRhdGlvbi5cclxuICogQHJldHVybnMge3JwYy5TZXJ2aWNlfSBgdGhpc2BcclxuICovXHJcblNlcnZpY2UucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIGVuZChlbmRlZEJ5UlBDKSB7XHJcbiAgICBpZiAodGhpcy5ycGNJbXBsKSB7XHJcbiAgICAgICAgaWYgKCFlbmRlZEJ5UlBDKSAvLyBzaWduYWwgZW5kIHRvIHJwY0ltcGxcclxuICAgICAgICAgICAgdGhpcy5ycGNJbXBsKG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIHRoaXMucnBjSW1wbCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpLm9mZigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7XHJcblxyXG4vLyBleHRlbmRzIE5hbWVzcGFjZVxyXG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpO1xyXG4oKFNlcnZpY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOYW1lc3BhY2UucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBTZXJ2aWNlKS5jbGFzc05hbWUgPSBcIlNlcnZpY2VcIjtcclxuXHJcbnZhciBNZXRob2QgPSByZXF1aXJlKFwiLi9tZXRob2RcIiksXHJcbiAgICB1dGlsICAgPSByZXF1aXJlKFwiLi91dGlsXCIpLFxyXG4gICAgcnBjICAgID0gcmVxdWlyZShcIi4vcnBjXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgc2VydmljZSBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgc2VydmljZS5cclxuICogQGV4dGVuZHMgTmFtZXNwYWNlQmFzZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgU2VydmljZSBuYW1lXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtvcHRpb25zXSBTZXJ2aWNlIG9wdGlvbnNcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcclxuICovXHJcbmZ1bmN0aW9uIFNlcnZpY2UobmFtZSwgb3B0aW9ucykge1xyXG4gICAgTmFtZXNwYWNlLmNhbGwodGhpcywgbmFtZSwgb3B0aW9ucyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJ2aWNlIG1ldGhvZHMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsTWV0aG9kPn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5tZXRob2RzID0ge307IC8vIHRvSlNPTiwgbWFya2VyXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWNoZWQgbWV0aG9kcyBhcyBhbiBhcnJheS5cclxuICAgICAqIEB0eXBlIHtNZXRob2RbXXxudWxsfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fbWV0aG9kc0FycmF5ID0gbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgZGVzY3JpcHRvci5cclxuICogQGludGVyZmFjZSBJU2VydmljZVxyXG4gKiBAZXh0ZW5kcyBJTmFtZXNwYWNlXHJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsSU1ldGhvZD59IG1ldGhvZHMgTWV0aG9kIGRlc2NyaXB0b3JzXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBzZXJ2aWNlIGZyb20gYSBzZXJ2aWNlIGRlc2NyaXB0b3IuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFNlcnZpY2UgbmFtZVxyXG4gKiBAcGFyYW0ge0lTZXJ2aWNlfSBqc29uIFNlcnZpY2UgZGVzY3JpcHRvclxyXG4gKiBAcmV0dXJucyB7U2VydmljZX0gQ3JlYXRlZCBzZXJ2aWNlXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXHJcbiAqL1xyXG5TZXJ2aWNlLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xyXG4gICAgdmFyIHNlcnZpY2UgPSBuZXcgU2VydmljZShuYW1lLCBqc29uLm9wdGlvbnMpO1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgIGlmIChqc29uLm1ldGhvZHMpXHJcbiAgICAgICAgZm9yICh2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhqc29uLm1ldGhvZHMpLCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICBzZXJ2aWNlLmFkZChNZXRob2QuZnJvbUpTT04obmFtZXNbaV0sIGpzb24ubWV0aG9kc1tuYW1lc1tpXV0pKTtcclxuICAgIGlmIChqc29uLm5lc3RlZClcclxuICAgICAgICBzZXJ2aWNlLmFkZEpTT04oanNvbi5uZXN0ZWQpO1xyXG4gICAgc2VydmljZS5jb21tZW50ID0ganNvbi5jb21tZW50O1xyXG4gICAgcmV0dXJuIHNlcnZpY2U7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBzZXJ2aWNlIHRvIGEgc2VydmljZSBkZXNjcmlwdG9yLlxyXG4gKiBAcGFyYW0ge0lUb0pTT05PcHRpb25zfSBbdG9KU09OT3B0aW9uc10gSlNPTiBjb252ZXJzaW9uIG9wdGlvbnNcclxuICogQHJldHVybnMge0lTZXJ2aWNlfSBTZXJ2aWNlIGRlc2NyaXB0b3JcclxuICovXHJcblNlcnZpY2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XHJcbiAgICB2YXIgaW5oZXJpdGVkID0gTmFtZXNwYWNlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCB0b0pTT05PcHRpb25zKTtcclxuICAgIHZhciBrZWVwQ29tbWVudHMgPSB0b0pTT05PcHRpb25zID8gQm9vbGVhbih0b0pTT05PcHRpb25zLmtlZXBDb21tZW50cykgOiBmYWxzZTtcclxuICAgIHJldHVybiB1dGlsLnRvT2JqZWN0KFtcclxuICAgICAgICBcIm9wdGlvbnNcIiAsIGluaGVyaXRlZCAmJiBpbmhlcml0ZWQub3B0aW9ucyB8fCB1bmRlZmluZWQsXHJcbiAgICAgICAgXCJtZXRob2RzXCIgLCBOYW1lc3BhY2UuYXJyYXlUb0pTT04odGhpcy5tZXRob2RzQXJyYXksIHRvSlNPTk9wdGlvbnMpIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHt9LFxyXG4gICAgICAgIFwibmVzdGVkXCIgICwgaW5oZXJpdGVkICYmIGluaGVyaXRlZC5uZXN0ZWQgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIFwiY29tbWVudFwiICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkXHJcbiAgICBdKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNZXRob2RzIG9mIHRoaXMgc2VydmljZSBhcyBhbiBhcnJheSBmb3IgaXRlcmF0aW9uLlxyXG4gKiBAbmFtZSBTZXJ2aWNlI21ldGhvZHNBcnJheVxyXG4gKiBAdHlwZSB7TWV0aG9kW119XHJcbiAqIEByZWFkb25seVxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlcnZpY2UucHJvdG90eXBlLCBcIm1ldGhvZHNBcnJheVwiLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRob2RzQXJyYXkgfHwgKHRoaXMuX21ldGhvZHNBcnJheSA9IHV0aWwudG9BcnJheSh0aGlzLm1ldGhvZHMpKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5mdW5jdGlvbiBjbGVhckNhY2hlKHNlcnZpY2UpIHtcclxuICAgIHNlcnZpY2UuX21ldGhvZHNBcnJheSA9IG51bGw7XHJcbiAgICByZXR1cm4gc2VydmljZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuU2VydmljZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KG5hbWUpIHtcclxuICAgIHJldHVybiB0aGlzLm1ldGhvZHNbbmFtZV1cclxuICAgICAgICB8fCBOYW1lc3BhY2UucHJvdG90eXBlLmdldC5jYWxsKHRoaXMsIG5hbWUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuU2VydmljZS5wcm90b3R5cGUucmVzb2x2ZUFsbCA9IGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XHJcbiAgICB2YXIgbWV0aG9kcyA9IHRoaXMubWV0aG9kc0FycmF5O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgIG1ldGhvZHNbaV0ucmVzb2x2ZSgpO1xyXG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUucmVzb2x2ZS5jYWxsKHRoaXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuU2VydmljZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKG9iamVjdCkge1xyXG5cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKHRoaXMuZ2V0KG9iamVjdC5uYW1lKSlcclxuICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBuYW1lICdcIiArIG9iamVjdC5uYW1lICsgXCInIGluIFwiICsgdGhpcyk7XHJcblxyXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1ldGhvZCkge1xyXG4gICAgICAgIHRoaXMubWV0aG9kc1tvYmplY3QubmFtZV0gPSBvYmplY3Q7XHJcbiAgICAgICAgb2JqZWN0LnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBvYmplY3QpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuU2VydmljZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKG9iamVjdCkge1xyXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE1ldGhvZCkge1xyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAodGhpcy5tZXRob2RzW29iamVjdC5uYW1lXSAhPT0gb2JqZWN0KVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihvYmplY3QgKyBcIiBpcyBub3QgYSBtZW1iZXIgb2YgXCIgKyB0aGlzKTtcclxuXHJcbiAgICAgICAgZGVsZXRlIHRoaXMubWV0aG9kc1tvYmplY3QubmFtZV07XHJcbiAgICAgICAgb2JqZWN0LnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZW1vdmUuY2FsbCh0aGlzLCBvYmplY3QpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBydW50aW1lIHNlcnZpY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBycGMgaW1wbGVtZW50YXRpb24uXHJcbiAqIEBwYXJhbSB7UlBDSW1wbH0gcnBjSW1wbCBSUEMgaW1wbGVtZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXNwb25zZURlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXNwb25zZXMgYXJlIGxlbmd0aC1kZWxpbWl0ZWRcclxuICogQHJldHVybnMge3JwYy5TZXJ2aWNlfSBSUEMgc2VydmljZS4gVXNlZnVsIHdoZXJlIHJlcXVlc3RzIGFuZC9vciByZXNwb25zZXMgYXJlIHN0cmVhbWVkLlxyXG4gKi9cclxuU2VydmljZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHJwY0ltcGwsIHJlcXVlc3REZWxpbWl0ZWQsIHJlc3BvbnNlRGVsaW1pdGVkKSB7XHJcbiAgICB2YXIgcnBjU2VydmljZSA9IG5ldyBycGMuU2VydmljZShycGNJbXBsLCByZXF1ZXN0RGVsaW1pdGVkLCByZXNwb25zZURlbGltaXRlZCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbWV0aG9kOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gdGhpcy5tZXRob2RzQXJyYXkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IHV0aWwubGNGaXJzdCgobWV0aG9kID0gdGhpcy5fbWV0aG9kc0FycmF5W2ldKS5yZXNvbHZlKCkubmFtZSkucmVwbGFjZSgvW14kXFx3X10vZywgXCJcIik7XHJcbiAgICAgICAgcnBjU2VydmljZVttZXRob2ROYW1lXSA9IHV0aWwuY29kZWdlbihbXCJyXCIsXCJjXCJdLCB1dGlsLmlzUmVzZXJ2ZWQobWV0aG9kTmFtZSkgPyBtZXRob2ROYW1lICsgXCJfXCIgOiBtZXRob2ROYW1lKShcInJldHVybiB0aGlzLnJwY0NhbGwobSxxLHMscixjKVwiKSh7XHJcbiAgICAgICAgICAgIG06IG1ldGhvZCxcclxuICAgICAgICAgICAgcTogbWV0aG9kLnJlc29sdmVkUmVxdWVzdFR5cGUuY3RvcixcclxuICAgICAgICAgICAgczogbWV0aG9kLnJlc29sdmVkUmVzcG9uc2VUeXBlLmN0b3JcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBycGNTZXJ2aWNlO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSB0b2tlbml6ZTtcclxuXHJcbnZhciBkZWxpbVJlICAgICAgICA9IC9bXFxze309OzpbXFxdLCdcIigpPD5dL2csXHJcbiAgICBzdHJpbmdEb3VibGVSZSA9IC8oPzpcIihbXlwiXFxcXF0qKD86XFxcXC5bXlwiXFxcXF0qKSopXCIpL2csXHJcbiAgICBzdHJpbmdTaW5nbGVSZSA9IC8oPzonKFteJ1xcXFxdKig/OlxcXFwuW14nXFxcXF0qKSopJykvZztcclxuXHJcbnZhciBzZXRDb21tZW50UmUgPSAvXiAqWyovXSsgKi8sXHJcbiAgICBzZXRDb21tZW50QWx0UmUgPSAvXlxccypcXCo/XFwvKi8sXHJcbiAgICBzZXRDb21tZW50U3BsaXRSZSA9IC9cXG4vZyxcclxuICAgIHdoaXRlc3BhY2VSZSA9IC9cXHMvLFxyXG4gICAgdW5lc2NhcGVSZSA9IC9cXFxcKC4/KS9nO1xyXG5cclxudmFyIHVuZXNjYXBlTWFwID0ge1xyXG4gICAgXCIwXCI6IFwiXFwwXCIsXHJcbiAgICBcInJcIjogXCJcXHJcIixcclxuICAgIFwiblwiOiBcIlxcblwiLFxyXG4gICAgXCJ0XCI6IFwiXFx0XCJcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVbmVzY2FwZXMgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIHVuZXNjYXBlXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVuZXNjYXBlZCBzdHJpbmdcclxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBtYXAgU3BlY2lhbCBjaGFyYWN0ZXJzIG1hcFxyXG4gKiBAbWVtYmVyb2YgdG9rZW5pemVcclxuICovXHJcbmZ1bmN0aW9uIHVuZXNjYXBlKHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHVuZXNjYXBlUmUsIGZ1bmN0aW9uKCQwLCAkMSkge1xyXG4gICAgICAgIHN3aXRjaCAoJDEpIHtcclxuICAgICAgICAgICAgY2FzZSBcIlxcXFxcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQxO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZXNjYXBlTWFwWyQxXSB8fCBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG50b2tlbml6ZS51bmVzY2FwZSA9IHVuZXNjYXBlO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIG5leHQgdG9rZW4gYW5kIGFkdmFuY2VzLlxyXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVOZXh0XHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHJldHVybnMge3N0cmluZ3xudWxsfSBOZXh0IHRva2VuIG9yIGBudWxsYCBvbiBlb2ZcclxuICovXHJcblxyXG4vKipcclxuICogUGVla3MgZm9yIHRoZSBuZXh0IHRva2VuLlxyXG4gKiBAdHlwZWRlZiBUb2tlbml6ZXJIYW5kbGVQZWVrXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHJldHVybnMge3N0cmluZ3xudWxsfSBOZXh0IHRva2VuIG9yIGBudWxsYCBvbiBlb2ZcclxuICovXHJcblxyXG4vKipcclxuICogUHVzaGVzIGEgdG9rZW4gYmFjayB0byB0aGUgc3RhY2suXHJcbiAqIEB0eXBlZGVmIFRva2VuaXplckhhbmRsZVB1c2hcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gVG9rZW5cclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogU2tpcHMgdGhlIG5leHQgdG9rZW4uXHJcbiAqIEB0eXBlZGVmIFRva2VuaXplckhhbmRsZVNraXBcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwZWN0ZWQgRXhwZWN0ZWQgdG9rZW5cclxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9uYWw9ZmFsc2VdIElmIG9wdGlvbmFsXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSB0b2tlbiBtYXRjaGVkXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgdG9rZW4gZGlkbid0IG1hdGNoIGFuZCBpcyBub3Qgb3B0aW9uYWxcclxuICovXHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgY29tbWVudCBvbiB0aGUgcHJldmlvdXMgbGluZSBvciwgYWx0ZXJuYXRpdmVseSwgdGhlIGxpbmUgY29tbWVudCBvbiB0aGUgc3BlY2lmaWVkIGxpbmUuXHJcbiAqIEB0eXBlZGVmIFRva2VuaXplckhhbmRsZUNtbnRcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2xpbmVdIExpbmUgbnVtYmVyXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gQ29tbWVudCB0ZXh0IG9yIGBudWxsYCBpZiBub25lXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZSBvYmplY3QgcmV0dXJuZWQgZnJvbSB7QGxpbmsgdG9rZW5pemV9LlxyXG4gKiBAaW50ZXJmYWNlIElUb2tlbml6ZXJIYW5kbGVcclxuICogQHByb3BlcnR5IHtUb2tlbml6ZXJIYW5kbGVOZXh0fSBuZXh0IEdldHMgdGhlIG5leHQgdG9rZW4gYW5kIGFkdmFuY2VzIChgbnVsbGAgb24gZW9mKVxyXG4gKiBAcHJvcGVydHkge1Rva2VuaXplckhhbmRsZVBlZWt9IHBlZWsgUGVla3MgZm9yIHRoZSBuZXh0IHRva2VuIChgbnVsbGAgb24gZW9mKVxyXG4gKiBAcHJvcGVydHkge1Rva2VuaXplckhhbmRsZVB1c2h9IHB1c2ggUHVzaGVzIGEgdG9rZW4gYmFjayB0byB0aGUgc3RhY2tcclxuICogQHByb3BlcnR5IHtUb2tlbml6ZXJIYW5kbGVTa2lwfSBza2lwIFNraXBzIGEgdG9rZW4sIHJldHVybnMgaXRzIHByZXNlbmNlIGFuZCBhZHZhbmNlcyBvciwgaWYgbm9uLW9wdGlvbmFsIGFuZCBub3QgcHJlc2VudCwgdGhyb3dzXHJcbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVySGFuZGxlQ21udH0gY21udCBHZXRzIHRoZSBjb21tZW50IG9uIHRoZSBwcmV2aW91cyBsaW5lIG9yIHRoZSBsaW5lIGNvbW1lbnQgb24gdGhlIHNwZWNpZmllZCBsaW5lLCBpZiBhbnlcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxpbmUgQ3VycmVudCBsaW5lIG51bWJlclxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBUb2tlbml6ZXMgdGhlIGdpdmVuIC5wcm90byBzb3VyY2UgYW5kIHJldHVybnMgYW4gb2JqZWN0IHdpdGggdXNlZnVsIHV0aWxpdHkgZnVuY3Rpb25zLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFNvdXJjZSBjb250ZW50c1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGFsdGVybmF0ZUNvbW1lbnRNb2RlIFdoZXRoZXIgd2Ugc2hvdWxkIGFjdGl2YXRlIGFsdGVybmF0ZSBjb21tZW50IHBhcnNpbmcgbW9kZS5cclxuICogQHJldHVybnMge0lUb2tlbml6ZXJIYW5kbGV9IFRva2VuaXplciBoYW5kbGVcclxuICovXHJcbmZ1bmN0aW9uIHRva2VuaXplKHNvdXJjZSwgYWx0ZXJuYXRlQ29tbWVudE1vZGUpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIGNhbGxiYWNrLXJldHVybiAqL1xyXG4gICAgc291cmNlID0gc291cmNlLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgdmFyIG9mZnNldCA9IDAsXHJcbiAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aCxcclxuICAgICAgICBsaW5lID0gMSxcclxuICAgICAgICBjb21tZW50VHlwZSA9IG51bGwsXHJcbiAgICAgICAgY29tbWVudFRleHQgPSBudWxsLFxyXG4gICAgICAgIGNvbW1lbnRMaW5lID0gMCxcclxuICAgICAgICBjb21tZW50TGluZUVtcHR5ID0gZmFsc2U7XHJcblxyXG4gICAgdmFyIHN0YWNrID0gW107XHJcblxyXG4gICAgdmFyIHN0cmluZ0RlbGltID0gbnVsbDtcclxuXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGVycm9yIGZvciBpbGxlZ2FsIHN5bnRheC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdWJqZWN0IFN1YmplY3RcclxuICAgICAqIEByZXR1cm5zIHtFcnJvcn0gRXJyb3IgY3JlYXRlZFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlsbGVnYWwoc3ViamVjdCkge1xyXG4gICAgICAgIHJldHVybiBFcnJvcihcImlsbGVnYWwgXCIgKyBzdWJqZWN0ICsgXCIgKGxpbmUgXCIgKyBsaW5lICsgXCIpXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVhZHMgYSBzdHJpbmcgdGlsbCBpdHMgZW5kLlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHJlYWRcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiByZWFkU3RyaW5nKCkge1xyXG4gICAgICAgIHZhciByZSA9IHN0cmluZ0RlbGltID09PSBcIidcIiA/IHN0cmluZ1NpbmdsZVJlIDogc3RyaW5nRG91YmxlUmU7XHJcbiAgICAgICAgcmUubGFzdEluZGV4ID0gb2Zmc2V0IC0gMTtcclxuICAgICAgICB2YXIgbWF0Y2ggPSByZS5leGVjKHNvdXJjZSk7XHJcbiAgICAgICAgaWYgKCFtYXRjaClcclxuICAgICAgICAgICAgdGhyb3cgaWxsZWdhbChcInN0cmluZ1wiKTtcclxuICAgICAgICBvZmZzZXQgPSByZS5sYXN0SW5kZXg7XHJcbiAgICAgICAgcHVzaChzdHJpbmdEZWxpbSk7XHJcbiAgICAgICAgc3RyaW5nRGVsaW0gPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB1bmVzY2FwZShtYXRjaFsxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBjaGFyYWN0ZXIgYXQgYHBvc2Agd2l0aGluIHRoZSBzb3VyY2UuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zIFBvc2l0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBDaGFyYWN0ZXJcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjaGFyQXQocG9zKSB7XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5jaGFyQXQocG9zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgY29tbWVudCB0ZXh0LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFN0YXJ0IG9mZnNldFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBFbmQgb2Zmc2V0XHJcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNldENvbW1lbnQoc3RhcnQsIGVuZCkge1xyXG4gICAgICAgIGNvbW1lbnRUeXBlID0gc291cmNlLmNoYXJBdChzdGFydCsrKTtcclxuICAgICAgICBjb21tZW50TGluZSA9IGxpbmU7XHJcbiAgICAgICAgY29tbWVudExpbmVFbXB0eSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBsb29rYmFjaztcclxuICAgICAgICBpZiAoYWx0ZXJuYXRlQ29tbWVudE1vZGUpIHtcclxuICAgICAgICAgICAgbG9va2JhY2sgPSAyOyAgLy8gYWx0ZXJuYXRlIGNvbW1lbnQgcGFyc2luZzogXCIvL1wiIG9yIFwiLypcIlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxvb2tiYWNrID0gMzsgIC8vIFwiLy8vXCIgb3IgXCIvKipcIlxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29tbWVudE9mZnNldCA9IHN0YXJ0IC0gbG9va2JhY2ssXHJcbiAgICAgICAgICAgIGM7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBpZiAoLS1jb21tZW50T2Zmc2V0IDwgMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChjID0gc291cmNlLmNoYXJBdChjb21tZW50T2Zmc2V0KSkgPT09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbW1lbnRMaW5lRW1wdHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IHdoaWxlIChjID09PSBcIiBcIiB8fCBjID09PSBcIlxcdFwiKTtcclxuICAgICAgICB2YXIgbGluZXMgPSBzb3VyY2VcclxuICAgICAgICAgICAgLnN1YnN0cmluZyhzdGFydCwgZW5kKVxyXG4gICAgICAgICAgICAuc3BsaXQoc2V0Q29tbWVudFNwbGl0UmUpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgIGxpbmVzW2ldID0gbGluZXNbaV1cclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGFsdGVybmF0ZUNvbW1lbnRNb2RlID8gc2V0Q29tbWVudEFsdFJlIDogc2V0Q29tbWVudFJlLCBcIlwiKVxyXG4gICAgICAgICAgICAgICAgLnRyaW0oKTtcclxuICAgICAgICBjb21tZW50VGV4dCA9IGxpbmVzXHJcbiAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpXHJcbiAgICAgICAgICAgIC50cmltKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNEb3VibGVTbGFzaENvbW1lbnRMaW5lKHN0YXJ0T2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIGVuZE9mZnNldCA9IGZpbmRFbmRPZkxpbmUoc3RhcnRPZmZzZXQpO1xyXG5cclxuICAgICAgICAvLyBzZWUgaWYgcmVtYWluaW5nIGxpbmUgbWF0Y2hlcyBjb21tZW50IHBhdHRlcm5cclxuICAgICAgICB2YXIgbGluZVRleHQgPSBzb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0T2Zmc2V0LCBlbmRPZmZzZXQpO1xyXG4gICAgICAgIC8vIGxvb2sgZm9yIDEgb3IgMiBzbGFzaGVzIHNpbmNlIHN0YXJ0T2Zmc2V0IHdvdWxkIGFscmVhZHkgcG9pbnQgcGFzdFxyXG4gICAgICAgIC8vIHRoZSBmaXJzdCBzbGFzaCB0aGF0IHN0YXJ0ZWQgdGhlIGNvbW1lbnQuXHJcbiAgICAgICAgdmFyIGlzQ29tbWVudCA9IC9eXFxzKlxcL3sxLDJ9Ly50ZXN0KGxpbmVUZXh0KTtcclxuICAgICAgICByZXR1cm4gaXNDb21tZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZpbmRFbmRPZkxpbmUoY3Vyc29yKSB7XHJcbiAgICAgICAgLy8gZmluZCBlbmQgb2YgY3Vyc29yJ3MgbGluZVxyXG4gICAgICAgIHZhciBlbmRPZmZzZXQgPSBjdXJzb3I7XHJcbiAgICAgICAgd2hpbGUgKGVuZE9mZnNldCA8IGxlbmd0aCAmJiBjaGFyQXQoZW5kT2Zmc2V0KSAhPT0gXCJcXG5cIikge1xyXG4gICAgICAgICAgICBlbmRPZmZzZXQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVuZE9mZnNldDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9idGFpbnMgdGhlIG5leHQgdG9rZW4uXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IE5leHQgdG9rZW4gb3IgYG51bGxgIG9uIGVvZlxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIHJldHVybiBzdGFjay5zaGlmdCgpO1xyXG4gICAgICAgIGlmIChzdHJpbmdEZWxpbSlcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWRTdHJpbmcoKTtcclxuICAgICAgICB2YXIgcmVwZWF0LFxyXG4gICAgICAgICAgICBwcmV2LFxyXG4gICAgICAgICAgICBjdXJyLFxyXG4gICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgaXNEb2M7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09PSBsZW5ndGgpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgcmVwZWF0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHdoaWxlICh3aGl0ZXNwYWNlUmUudGVzdChjdXJyID0gY2hhckF0KG9mZnNldCkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyciA9PT0gXCJcXG5cIilcclxuICAgICAgICAgICAgICAgICAgICArK2xpbmU7XHJcbiAgICAgICAgICAgICAgICBpZiAoKytvZmZzZXQgPT09IGxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNoYXJBdChvZmZzZXQpID09PSBcIi9cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCsrb2Zmc2V0ID09PSBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbGxlZ2FsKFwiY29tbWVudFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjaGFyQXQob2Zmc2V0KSA9PT0gXCIvXCIpIHsgLy8gTGluZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWx0ZXJuYXRlQ29tbWVudE1vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHRyaXBsZS1zbGFzaCBjb21tZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRG9jID0gY2hhckF0KHN0YXJ0ID0gb2Zmc2V0ICsgMSkgPT09IFwiL1wiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoYXJBdCgrK29mZnNldCkgIT09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbW1lbnQoc3RhcnQsIG9mZnNldCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrbGluZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgZG91YmxlLXNsYXNoIGNvbW1lbnRzLCBjb25zb2xpZGF0aW5nIGNvbnNlY3V0aXZlIGxpbmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RvYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb3VibGVTbGFzaENvbW1lbnRMaW5lKG9mZnNldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRG9jID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBmaW5kRW5kT2ZMaW5lKG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGlzRG91YmxlU2xhc2hDb21tZW50TGluZShvZmZzZXQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWluKGxlbmd0aCwgZmluZEVuZE9mTGluZShvZmZzZXQpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb21tZW50KHN0YXJ0LCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjdXJyID0gY2hhckF0KG9mZnNldCkpID09PSBcIipcIikgeyAvKiBCbG9jayAqL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciAvKiogKHJlZ3VsYXIgY29tbWVudCBtb2RlKSBvciAvKiAoYWx0ZXJuYXRlIGNvbW1lbnQgbW9kZSlcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG9mZnNldCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNEb2MgPSBhbHRlcm5hdGVDb21tZW50TW9kZSB8fCBjaGFyQXQoc3RhcnQpID09PSBcIipcIjtcclxuICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyID09PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2xpbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCsrb2Zmc2V0ID09PSBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGlsbGVnYWwoXCJjb21tZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBjdXJyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY2hhckF0KG9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAocHJldiAhPT0gXCIqXCIgfHwgY3VyciAhPT0gXCIvXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICsrb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RvYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDb21tZW50KHN0YXJ0LCBvZmZzZXQgLSAyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiL1wiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAocmVwZWF0KTtcclxuXHJcbiAgICAgICAgLy8gb2Zmc2V0ICE9PSBsZW5ndGggaWYgd2UgZ290IGhlcmVcclxuXHJcbiAgICAgICAgdmFyIGVuZCA9IG9mZnNldDtcclxuICAgICAgICBkZWxpbVJlLmxhc3RJbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIGRlbGltID0gZGVsaW1SZS50ZXN0KGNoYXJBdChlbmQrKykpO1xyXG4gICAgICAgIGlmICghZGVsaW0pXHJcbiAgICAgICAgICAgIHdoaWxlIChlbmQgPCBsZW5ndGggJiYgIWRlbGltUmUudGVzdChjaGFyQXQoZW5kKSkpXHJcbiAgICAgICAgICAgICAgICArK2VuZDtcclxuICAgICAgICB2YXIgdG9rZW4gPSBzb3VyY2Uuc3Vic3RyaW5nKG9mZnNldCwgb2Zmc2V0ID0gZW5kKTtcclxuICAgICAgICBpZiAodG9rZW4gPT09IFwiXFxcIlwiIHx8IHRva2VuID09PSBcIidcIilcclxuICAgICAgICAgICAgc3RyaW5nRGVsaW0gPSB0b2tlbjtcclxuICAgICAgICByZXR1cm4gdG9rZW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQdXNoZXMgYSB0b2tlbiBiYWNrIHRvIHRoZSBzdGFjay5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlbiBUb2tlblxyXG4gICAgICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBwdXNoKHRva2VuKSB7XHJcbiAgICAgICAgc3RhY2sucHVzaCh0b2tlbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZWVrcyBmb3IgdGhlIG5leHQgdG9rZW4uXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFRva2VuIG9yIGBudWxsYCBvbiBlb2ZcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBwZWVrKCkge1xyXG4gICAgICAgIGlmICghc3RhY2subGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IG5leHQoKTtcclxuICAgICAgICAgICAgaWYgKHRva2VuID09PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIHB1c2godG9rZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RhY2tbMF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTa2lwcyBhIHRva2VuLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cGVjdGVkIEV4cGVjdGVkIHRva2VuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25hbD1mYWxzZV0gV2hldGhlciB0aGUgdG9rZW4gaXMgb3B0aW9uYWxcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgd2hlbiBza2lwcGVkLCBgZmFsc2VgIGlmIG5vdFxyXG4gICAgICogQHRocm93cyB7RXJyb3J9IFdoZW4gYSByZXF1aXJlZCB0b2tlbiBpcyBub3QgcHJlc2VudFxyXG4gICAgICogQGlubmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNraXAoZXhwZWN0ZWQsIG9wdGlvbmFsKSB7XHJcbiAgICAgICAgdmFyIGFjdHVhbCA9IHBlZWsoKSxcclxuICAgICAgICAgICAgZXF1YWxzID0gYWN0dWFsID09PSBleHBlY3RlZDtcclxuICAgICAgICBpZiAoZXF1YWxzKSB7XHJcbiAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghb3B0aW9uYWwpXHJcbiAgICAgICAgICAgIHRocm93IGlsbGVnYWwoXCJ0b2tlbiAnXCIgKyBhY3R1YWwgKyBcIicsICdcIiArIGV4cGVjdGVkICsgXCInIGV4cGVjdGVkXCIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYSBjb21tZW50LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt0cmFpbGluZ0xpbmVdIExpbmUgbnVtYmVyIGlmIGxvb2tpbmcgZm9yIGEgdHJhaWxpbmcgY29tbWVudFxyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBDb21tZW50IHRleHRcclxuICAgICAqIEBpbm5lclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjbW50KHRyYWlsaW5nTGluZSkge1xyXG4gICAgICAgIHZhciByZXQgPSBudWxsO1xyXG4gICAgICAgIGlmICh0cmFpbGluZ0xpbmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoY29tbWVudExpbmUgPT09IGxpbmUgLSAxICYmIChhbHRlcm5hdGVDb21tZW50TW9kZSB8fCBjb21tZW50VHlwZSA9PT0gXCIqXCIgfHwgY29tbWVudExpbmVFbXB0eSkpIHtcclxuICAgICAgICAgICAgICAgIHJldCA9IGNvbW1lbnRUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICAgICAgaWYgKGNvbW1lbnRMaW5lIDwgdHJhaWxpbmdMaW5lKSB7XHJcbiAgICAgICAgICAgICAgICBwZWVrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbW1lbnRMaW5lID09PSB0cmFpbGluZ0xpbmUgJiYgIWNvbW1lbnRMaW5lRW1wdHkgJiYgKGFsdGVybmF0ZUNvbW1lbnRNb2RlIHx8IGNvbW1lbnRUeXBlID09PSBcIi9cIikpIHtcclxuICAgICAgICAgICAgICAgIHJldCA9IGNvbW1lbnRUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7XHJcbiAgICAgICAgbmV4dDogbmV4dCxcclxuICAgICAgICBwZWVrOiBwZWVrLFxyXG4gICAgICAgIHB1c2g6IHB1c2gsXHJcbiAgICAgICAgc2tpcDogc2tpcCxcclxuICAgICAgICBjbW50OiBjbW50XHJcbiAgICB9LCBcImxpbmVcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBsaW5lOyB9XHJcbiAgICB9KTtcclxuICAgIC8qIGVzbGludC1lbmFibGUgY2FsbGJhY2stcmV0dXJuICovXHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gVHlwZTtcclxuXHJcbi8vIGV4dGVuZHMgTmFtZXNwYWNlXHJcbnZhciBOYW1lc3BhY2UgPSByZXF1aXJlKFwiLi9uYW1lc3BhY2VcIik7XHJcbigoVHlwZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5hbWVzcGFjZS5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IFR5cGUpLmNsYXNzTmFtZSA9IFwiVHlwZVwiO1xyXG5cclxudmFyIEVudW0gICAgICA9IHJlcXVpcmUoXCIuL2VudW1cIiksXHJcbiAgICBPbmVPZiAgICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKSxcclxuICAgIEZpZWxkICAgICA9IHJlcXVpcmUoXCIuL2ZpZWxkXCIpLFxyXG4gICAgTWFwRmllbGQgID0gcmVxdWlyZShcIi4vbWFwZmllbGRcIiksXHJcbiAgICBTZXJ2aWNlICAgPSByZXF1aXJlKFwiLi9zZXJ2aWNlXCIpLFxyXG4gICAgTWVzc2FnZSAgID0gcmVxdWlyZShcIi4vbWVzc2FnZVwiKSxcclxuICAgIFJlYWRlciAgICA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKSxcclxuICAgIFdyaXRlciAgICA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKSxcclxuICAgIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWxcIiksXHJcbiAgICBlbmNvZGVyICAgPSByZXF1aXJlKFwiLi9lbmNvZGVyXCIpLFxyXG4gICAgZGVjb2RlciAgID0gcmVxdWlyZShcIi4vZGVjb2RlclwiKSxcclxuICAgIHZlcmlmaWVyICA9IHJlcXVpcmUoXCIuL3ZlcmlmaWVyXCIpLFxyXG4gICAgY29udmVydGVyID0gcmVxdWlyZShcIi4vY29udmVydGVyXCIpLFxyXG4gICAgd3JhcHBlcnMgID0gcmVxdWlyZShcIi4vd3JhcHBlcnNcIik7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyByZWZsZWN0ZWQgbWVzc2FnZSB0eXBlIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIFJlZmxlY3RlZCBtZXNzYWdlIHR5cGUuXHJcbiAqIEBleHRlbmRzIE5hbWVzcGFjZUJhc2VcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE1lc3NhZ2UgbmFtZVxyXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xyXG4gKi9cclxuZnVuY3Rpb24gVHlwZShuYW1lLCBvcHRpb25zKSB7XHJcbiAgICBOYW1lc3BhY2UuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1lc3NhZ2UgZmllbGRzLlxyXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLEZpZWxkPn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5maWVsZHMgPSB7fTsgIC8vIHRvSlNPTiwgbWFya2VyXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPbmVvZnMgZGVjbGFyZWQgd2l0aGluIHRoaXMgbmFtZXNwYWNlLCBpZiBhbnkuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsT25lT2Y+fVxyXG4gICAgICovXHJcbiAgICB0aGlzLm9uZW9mcyA9IHVuZGVmaW5lZDsgLy8gdG9KU09OXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHRlbnNpb24gcmFuZ2VzLCBpZiBhbnkuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyW11bXX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5leHRlbnNpb25zID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2VydmVkIHJhbmdlcywgaWYgYW55LlxyXG4gICAgICogQHR5cGUge0FycmF5LjxudW1iZXJbXXxzdHJpbmc+fVxyXG4gICAgICovXHJcbiAgICB0aGlzLnJlc2VydmVkID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cclxuXHJcbiAgICAvKj9cclxuICAgICAqIFdoZXRoZXIgdGhpcyB0eXBlIGlzIGEgbGVnYWN5IGdyb3VwLlxyXG4gICAgICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmdyb3VwID0gdW5kZWZpbmVkOyAvLyB0b0pTT05cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhY2hlZCBmaWVsZHMgYnkgaWQuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxudW1iZXIsRmllbGQ+fG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLl9maWVsZHNCeUlkID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhY2hlZCBmaWVsZHMgYXMgYW4gYXJyYXkuXHJcbiAgICAgKiBAdHlwZSB7RmllbGRbXXxudWxsfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fZmllbGRzQXJyYXkgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FjaGVkIG9uZW9mcyBhcyBhbiBhcnJheS5cclxuICAgICAqIEB0eXBlIHtPbmVPZltdfG51bGx9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLl9vbmVvZnNBcnJheSA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWNoZWQgY29uc3RydWN0b3IuXHJcbiAgICAgKiBAdHlwZSB7Q29uc3RydWN0b3I8e30+fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fY3RvciA9IG51bGw7XHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFR5cGUucHJvdG90eXBlLCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXNzYWdlIGZpZWxkcyBieSBpZC5cclxuICAgICAqIEBuYW1lIFR5cGUjZmllbGRzQnlJZFxyXG4gICAgICogQHR5cGUge09iamVjdC48bnVtYmVyLEZpZWxkPn1cclxuICAgICAqIEByZWFkb25seVxyXG4gICAgICovXHJcbiAgICBmaWVsZHNCeUlkOiB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmllbGRzQnlJZClcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWVsZHNCeUlkO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fZmllbGRzQnlJZCA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuZmllbGRzKSwgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gdGhpcy5maWVsZHNbbmFtZXNbaV1dLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gZmllbGQuaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZmllbGRzQnlJZFtpZF0pXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJkdXBsaWNhdGUgaWQgXCIgKyBpZCArIFwiIGluIFwiICsgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmllbGRzQnlJZFtpZF0gPSBmaWVsZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmllbGRzQnlJZDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmllbGRzIG9mIHRoaXMgbWVzc2FnZSBhcyBhbiBhcnJheSBmb3IgaXRlcmF0aW9uLlxyXG4gICAgICogQG5hbWUgVHlwZSNmaWVsZHNBcnJheVxyXG4gICAgICogQHR5cGUge0ZpZWxkW119XHJcbiAgICAgKiBAcmVhZG9ubHlcclxuICAgICAqL1xyXG4gICAgZmllbGRzQXJyYXk6IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmllbGRzQXJyYXkgfHwgKHRoaXMuX2ZpZWxkc0FycmF5ID0gdXRpbC50b0FycmF5KHRoaXMuZmllbGRzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9uZW9mcyBvZiB0aGlzIG1lc3NhZ2UgYXMgYW4gYXJyYXkgZm9yIGl0ZXJhdGlvbi5cclxuICAgICAqIEBuYW1lIFR5cGUjb25lb2ZzQXJyYXlcclxuICAgICAqIEB0eXBlIHtPbmVPZltdfVxyXG4gICAgICogQHJlYWRvbmx5XHJcbiAgICAgKi9cclxuICAgIG9uZW9mc0FycmF5OiB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29uZW9mc0FycmF5IHx8ICh0aGlzLl9vbmVvZnNBcnJheSA9IHV0aWwudG9BcnJheSh0aGlzLm9uZW9mcykpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVnaXN0ZXJlZCBjb25zdHJ1Y3RvciwgaWYgYW55IHJlZ2lzdGVyZWQsIG90aGVyd2lzZSBhIGdlbmVyaWMgY29uc3RydWN0b3IuXHJcbiAgICAgKiBBc3NpZ25pbmcgYSBmdW5jdGlvbiByZXBsYWNlcyB0aGUgaW50ZXJuYWwgY29uc3RydWN0b3IuIElmIHRoZSBmdW5jdGlvbiBkb2VzIG5vdCBleHRlbmQge0BsaW5rIE1lc3NhZ2V9IHlldCwgaXRzIHByb3RvdHlwZSB3aWxsIGJlIHNldHVwIGFjY29yZGluZ2x5IGFuZCBzdGF0aWMgbWV0aG9kcyB3aWxsIGJlIHBvcHVsYXRlZC4gSWYgaXQgYWxyZWFkeSBleHRlbmRzIHtAbGluayBNZXNzYWdlfSwgaXQgd2lsbCBqdXN0IHJlcGxhY2UgdGhlIGludGVybmFsIGNvbnN0cnVjdG9yLlxyXG4gICAgICogQG5hbWUgVHlwZSNjdG9yXHJcbiAgICAgKiBAdHlwZSB7Q29uc3RydWN0b3I8e30+fVxyXG4gICAgICovXHJcbiAgICBjdG9yOiB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N0b3IgfHwgKHRoaXMuY3RvciA9IFR5cGUuZ2VuZXJhdGVDb25zdHJ1Y3Rvcih0aGlzKSgpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24oY3Rvcikge1xyXG5cclxuICAgICAgICAgICAgLy8gRW5zdXJlIHByb3BlciBwcm90b3R5cGVcclxuICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IGN0b3IucHJvdG90eXBlO1xyXG4gICAgICAgICAgICBpZiAoIShwcm90b3R5cGUgaW5zdGFuY2VvZiBNZXNzYWdlKSkge1xyXG4gICAgICAgICAgICAgICAgKGN0b3IucHJvdG90eXBlID0gbmV3IE1lc3NhZ2UoKSkuY29uc3RydWN0b3IgPSBjdG9yO1xyXG4gICAgICAgICAgICAgICAgdXRpbC5tZXJnZShjdG9yLnByb3RvdHlwZSwgcHJvdG90eXBlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ2xhc3NlcyBhbmQgbWVzc2FnZXMgcmVmZXJlbmNlIHRoZWlyIHJlZmxlY3RlZCB0eXBlXHJcbiAgICAgICAgICAgIGN0b3IuJHR5cGUgPSBjdG9yLnByb3RvdHlwZS4kdHlwZSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvLyBNaXggaW4gc3RhdGljIG1ldGhvZHNcclxuICAgICAgICAgICAgdXRpbC5tZXJnZShjdG9yLCBNZXNzYWdlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2N0b3IgPSBjdG9yO1xyXG5cclxuICAgICAgICAgICAgLy8gTWVzc2FnZXMgaGF2ZSBub24tZW51bWVyYWJsZSBkZWZhdWx0IHZhbHVlcyBvbiB0aGVpciBwcm90b3R5cGVcclxuICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKDsgaSA8IC8qIGluaXRpYWxpemVzICovIHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maWVsZHNBcnJheVtpXS5yZXNvbHZlKCk7IC8vIGVuc3VyZXMgYSBwcm9wZXIgdmFsdWVcclxuXHJcbiAgICAgICAgICAgIC8vIE1lc3NhZ2VzIGhhdmUgbm9uLWVudW1lcmFibGUgZ2V0dGVycyBhbmQgc2V0dGVycyBmb3IgZWFjaCB2aXJ0dWFsIG9uZW9mIGZpZWxkXHJcbiAgICAgICAgICAgIHZhciBjdG9yUHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gdGhpcy5vbmVvZnNBcnJheS5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgIGN0b3JQcm9wZXJ0aWVzW3RoaXMuX29uZW9mc0FycmF5W2ldLnJlc29sdmUoKS5uYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBnZXQ6IHV0aWwub25lT2ZHZXR0ZXIodGhpcy5fb25lb2ZzQXJyYXlbaV0ub25lb2YpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldDogdXRpbC5vbmVPZlNldHRlcih0aGlzLl9vbmVvZnNBcnJheVtpXS5vbmVvZilcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChpKVxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY3Rvci5wcm90b3R5cGUsIGN0b3JQcm9wZXJ0aWVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgc3BlY2lmaWVkIHR5cGUuXHJcbiAqIEBwYXJhbSB7VHlwZX0gbXR5cGUgTWVzc2FnZSB0eXBlXHJcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXHJcbiAqL1xyXG5UeXBlLmdlbmVyYXRlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBnZW5lcmF0ZUNvbnN0cnVjdG9yKG10eXBlKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xyXG4gICAgdmFyIGdlbiA9IHV0aWwuY29kZWdlbihbXCJwXCJdLCBtdHlwZS5uYW1lKTtcclxuICAgIC8vIGV4cGxpY2l0bHkgaW5pdGlhbGl6ZSBtdXRhYmxlIG9iamVjdC9hcnJheSBmaWVsZHMgc28gdGhhdCB0aGVzZSBhcmVuJ3QganVzdCBpbmhlcml0ZWQgZnJvbSB0aGUgcHJvdG90eXBlXHJcbiAgICBmb3IgKHZhciBpID0gMCwgZmllbGQ7IGkgPCBtdHlwZS5maWVsZHNBcnJheS5sZW5ndGg7ICsraSlcclxuICAgICAgICBpZiAoKGZpZWxkID0gbXR5cGUuX2ZpZWxkc0FycmF5W2ldKS5tYXApIGdlblxyXG4gICAgICAgICAgICAoXCJ0aGlzJXM9e31cIiwgdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKSk7XHJcbiAgICAgICAgZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIGdlblxyXG4gICAgICAgICAgICAoXCJ0aGlzJXM9W11cIiwgdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKSk7XHJcbiAgICByZXR1cm4gZ2VuXHJcbiAgICAoXCJpZihwKWZvcih2YXIga3M9T2JqZWN0LmtleXMocCksaT0wO2k8a3MubGVuZ3RoOysraSlpZihwW2tzW2ldXSE9bnVsbClcIikgLy8gb21pdCB1bmRlZmluZWQgb3IgbnVsbFxyXG4gICAgICAgIChcInRoaXNba3NbaV1dPXBba3NbaV1dXCIpO1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xyXG59O1xyXG5cclxuZnVuY3Rpb24gY2xlYXJDYWNoZSh0eXBlKSB7XHJcbiAgICB0eXBlLl9maWVsZHNCeUlkID0gdHlwZS5fZmllbGRzQXJyYXkgPSB0eXBlLl9vbmVvZnNBcnJheSA9IG51bGw7XHJcbiAgICBkZWxldGUgdHlwZS5lbmNvZGU7XHJcbiAgICBkZWxldGUgdHlwZS5kZWNvZGU7XHJcbiAgICBkZWxldGUgdHlwZS52ZXJpZnk7XHJcbiAgICByZXR1cm4gdHlwZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1lc3NhZ2UgdHlwZSBkZXNjcmlwdG9yLlxyXG4gKiBAaW50ZXJmYWNlIElUeXBlXHJcbiAqIEBleHRlbmRzIElOYW1lc3BhY2VcclxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxJT25lT2Y+fSBbb25lb2ZzXSBPbmVvZiBkZXNjcmlwdG9yc1xyXG4gKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElGaWVsZD59IGZpZWxkcyBGaWVsZCBkZXNjcmlwdG9yc1xyXG4gKiBAcHJvcGVydHkge251bWJlcltdW119IFtleHRlbnNpb25zXSBFeHRlbnNpb24gcmFuZ2VzXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyW11bXX0gW3Jlc2VydmVkXSBSZXNlcnZlZCByYW5nZXNcclxuICogQHByb3BlcnR5IHtib29sZWFufSBbZ3JvdXA9ZmFsc2VdIFdoZXRoZXIgYSBsZWdhY3kgZ3JvdXAgb3Igbm90XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtZXNzYWdlIHR5cGUgZnJvbSBhIG1lc3NhZ2UgdHlwZSBkZXNjcmlwdG9yLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBNZXNzYWdlIG5hbWVcclxuICogQHBhcmFtIHtJVHlwZX0ganNvbiBNZXNzYWdlIHR5cGUgZGVzY3JpcHRvclxyXG4gKiBAcmV0dXJucyB7VHlwZX0gQ3JlYXRlZCBtZXNzYWdlIHR5cGVcclxuICovXHJcblR5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihuYW1lLCBqc29uKSB7XHJcbiAgICB2YXIgdHlwZSA9IG5ldyBUeXBlKG5hbWUsIGpzb24ub3B0aW9ucyk7XHJcbiAgICB0eXBlLmV4dGVuc2lvbnMgPSBqc29uLmV4dGVuc2lvbnM7XHJcbiAgICB0eXBlLnJlc2VydmVkID0ganNvbi5yZXNlcnZlZDtcclxuICAgIHZhciBuYW1lcyA9IE9iamVjdC5rZXlzKGpzb24uZmllbGRzKSxcclxuICAgICAgICBpID0gMDtcclxuICAgIGZvciAoOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgdHlwZS5hZGQoXHJcbiAgICAgICAgICAgICggdHlwZW9mIGpzb24uZmllbGRzW25hbWVzW2ldXS5rZXlUeXBlICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgID8gTWFwRmllbGQuZnJvbUpTT05cclxuICAgICAgICAgICAgOiBGaWVsZC5mcm9tSlNPTiApKG5hbWVzW2ldLCBqc29uLmZpZWxkc1tuYW1lc1tpXV0pXHJcbiAgICAgICAgKTtcclxuICAgIGlmIChqc29uLm9uZW9mcylcclxuICAgICAgICBmb3IgKG5hbWVzID0gT2JqZWN0LmtleXMoanNvbi5vbmVvZnMpLCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICB0eXBlLmFkZChPbmVPZi5mcm9tSlNPTihuYW1lc1tpXSwganNvbi5vbmVvZnNbbmFtZXNbaV1dKSk7XHJcbiAgICBpZiAoanNvbi5uZXN0ZWQpXHJcbiAgICAgICAgZm9yIChuYW1lcyA9IE9iamVjdC5rZXlzKGpzb24ubmVzdGVkKSwgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgbmVzdGVkID0ganNvbi5uZXN0ZWRbbmFtZXNbaV1dO1xyXG4gICAgICAgICAgICB0eXBlLmFkZCggLy8gbW9zdCB0byBsZWFzdCBsaWtlbHlcclxuICAgICAgICAgICAgICAgICggbmVzdGVkLmlkICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgID8gRmllbGQuZnJvbUpTT05cclxuICAgICAgICAgICAgICAgIDogbmVzdGVkLmZpZWxkcyAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICA/IFR5cGUuZnJvbUpTT05cclxuICAgICAgICAgICAgICAgIDogbmVzdGVkLnZhbHVlcyAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICA/IEVudW0uZnJvbUpTT05cclxuICAgICAgICAgICAgICAgIDogbmVzdGVkLm1ldGhvZHMgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgPyBTZXJ2aWNlLmZyb21KU09OXHJcbiAgICAgICAgICAgICAgICA6IE5hbWVzcGFjZS5mcm9tSlNPTiApKG5hbWVzW2ldLCBuZXN0ZWQpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgaWYgKGpzb24uZXh0ZW5zaW9ucyAmJiBqc29uLmV4dGVuc2lvbnMubGVuZ3RoKVxyXG4gICAgICAgIHR5cGUuZXh0ZW5zaW9ucyA9IGpzb24uZXh0ZW5zaW9ucztcclxuICAgIGlmIChqc29uLnJlc2VydmVkICYmIGpzb24ucmVzZXJ2ZWQubGVuZ3RoKVxyXG4gICAgICAgIHR5cGUucmVzZXJ2ZWQgPSBqc29uLnJlc2VydmVkO1xyXG4gICAgaWYgKGpzb24uZ3JvdXApXHJcbiAgICAgICAgdHlwZS5ncm91cCA9IHRydWU7XHJcbiAgICBpZiAoanNvbi5jb21tZW50KVxyXG4gICAgICAgIHR5cGUuY29tbWVudCA9IGpzb24uY29tbWVudDtcclxuICAgIHJldHVybiB0eXBlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgbWVzc2FnZSB0eXBlIHRvIGEgbWVzc2FnZSB0eXBlIGRlc2NyaXB0b3IuXHJcbiAqIEBwYXJhbSB7SVRvSlNPTk9wdGlvbnN9IFt0b0pTT05PcHRpb25zXSBKU09OIGNvbnZlcnNpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7SVR5cGV9IE1lc3NhZ2UgdHlwZSBkZXNjcmlwdG9yXHJcbiAqL1xyXG5UeXBlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04odG9KU09OT3B0aW9ucykge1xyXG4gICAgdmFyIGluaGVyaXRlZCA9IE5hbWVzcGFjZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgdG9KU09OT3B0aW9ucyk7XHJcbiAgICB2YXIga2VlcENvbW1lbnRzID0gdG9KU09OT3B0aW9ucyA/IEJvb2xlYW4odG9KU09OT3B0aW9ucy5rZWVwQ29tbWVudHMpIDogZmFsc2U7XHJcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXHJcbiAgICAgICAgXCJvcHRpb25zXCIgICAgLCBpbmhlcml0ZWQgJiYgaW5oZXJpdGVkLm9wdGlvbnMgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIFwib25lb2ZzXCIgICAgICwgTmFtZXNwYWNlLmFycmF5VG9KU09OKHRoaXMub25lb2ZzQXJyYXksIHRvSlNPTk9wdGlvbnMpLFxyXG4gICAgICAgIFwiZmllbGRzXCIgICAgICwgTmFtZXNwYWNlLmFycmF5VG9KU09OKHRoaXMuZmllbGRzQXJyYXkuZmlsdGVyKGZ1bmN0aW9uKG9iaikgeyByZXR1cm4gIW9iai5kZWNsYXJpbmdGaWVsZDsgfSksIHRvSlNPTk9wdGlvbnMpIHx8IHt9LFxyXG4gICAgICAgIFwiZXh0ZW5zaW9uc1wiICwgdGhpcy5leHRlbnNpb25zICYmIHRoaXMuZXh0ZW5zaW9ucy5sZW5ndGggPyB0aGlzLmV4dGVuc2lvbnMgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgXCJyZXNlcnZlZFwiICAgLCB0aGlzLnJlc2VydmVkICYmIHRoaXMucmVzZXJ2ZWQubGVuZ3RoID8gdGhpcy5yZXNlcnZlZCA6IHVuZGVmaW5lZCxcclxuICAgICAgICBcImdyb3VwXCIgICAgICAsIHRoaXMuZ3JvdXAgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIFwibmVzdGVkXCIgICAgICwgaW5oZXJpdGVkICYmIGluaGVyaXRlZC5uZXN0ZWQgfHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIFwiY29tbWVudFwiICAgICwga2VlcENvbW1lbnRzID8gdGhpcy5jb21tZW50IDogdW5kZWZpbmVkXHJcbiAgICBdKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcblR5cGUucHJvdG90eXBlLnJlc29sdmVBbGwgPSBmdW5jdGlvbiByZXNvbHZlQWxsKCkge1xyXG4gICAgdmFyIGZpZWxkcyA9IHRoaXMuZmllbGRzQXJyYXksIGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBmaWVsZHMubGVuZ3RoKVxyXG4gICAgICAgIGZpZWxkc1tpKytdLnJlc29sdmUoKTtcclxuICAgIHZhciBvbmVvZnMgPSB0aGlzLm9uZW9mc0FycmF5OyBpID0gMDtcclxuICAgIHdoaWxlIChpIDwgb25lb2ZzLmxlbmd0aClcclxuICAgICAgICBvbmVvZnNbaSsrXS5yZXNvbHZlKCk7XHJcbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5yZXNvbHZlQWxsLmNhbGwodGhpcyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQG92ZXJyaWRlXHJcbiAqL1xyXG5UeXBlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZmllbGRzW25hbWVdXHJcbiAgICAgICAgfHwgdGhpcy5vbmVvZnMgJiYgdGhpcy5vbmVvZnNbbmFtZV1cclxuICAgICAgICB8fCB0aGlzLm5lc3RlZCAmJiB0aGlzLm5lc3RlZFtuYW1lXVxyXG4gICAgICAgIHx8IG51bGw7XHJcbn07XHJcblxyXG4vKipcclxuICogQWRkcyBhIG5lc3RlZCBvYmplY3QgdG8gdGhpcyB0eXBlLlxyXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBOZXN0ZWQgb2JqZWN0IHRvIGFkZFxyXG4gKiBAcmV0dXJucyB7VHlwZX0gYHRoaXNgXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgbmVzdGVkIG9iamVjdCB3aXRoIHRoaXMgbmFtZSBvciwgaWYgYSBmaWVsZCwgd2hlbiB0aGVyZSBpcyBhbHJlYWR5IGEgZmllbGQgd2l0aCB0aGlzIGlkXHJcbiAqL1xyXG5UeXBlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQob2JqZWN0KSB7XHJcblxyXG4gICAgaWYgKHRoaXMuZ2V0KG9iamVjdC5uYW1lKSlcclxuICAgICAgICB0aHJvdyBFcnJvcihcImR1cGxpY2F0ZSBuYW1lICdcIiArIG9iamVjdC5uYW1lICsgXCInIGluIFwiICsgdGhpcyk7XHJcblxyXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkICYmIG9iamVjdC5leHRlbmQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vIE5PVEU6IEV4dGVuc2lvbiBmaWVsZHMgYXJlbid0IGFjdHVhbCBmaWVsZHMgb24gdGhlIGRlY2xhcmluZyB0eXBlLCBidXQgbmVzdGVkIG9iamVjdHMuXHJcbiAgICAgICAgLy8gVGhlIHJvb3Qgb2JqZWN0IHRha2VzIGNhcmUgb2YgYWRkaW5nIGRpc3RpbmN0IHNpc3Rlci1maWVsZHMgdG8gdGhlIHJlc3BlY3RpdmUgZXh0ZW5kZWRcclxuICAgICAgICAvLyB0eXBlIGluc3RlYWQuXHJcblxyXG4gICAgICAgIC8vIGF2b2lkcyBjYWxsaW5nIHRoZSBnZXR0ZXIgaWYgbm90IGFic29sdXRlbHkgbmVjZXNzYXJ5IGJlY2F1c2UgaXQncyBjYWxsZWQgcXVpdGUgZnJlcXVlbnRseVxyXG4gICAgICAgIGlmICh0aGlzLl9maWVsZHNCeUlkID8gLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdGhpcy5fZmllbGRzQnlJZFtvYmplY3QuaWRdIDogdGhpcy5maWVsZHNCeUlkW29iamVjdC5pZF0pXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiZHVwbGljYXRlIGlkIFwiICsgb2JqZWN0LmlkICsgXCIgaW4gXCIgKyB0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5pc1Jlc2VydmVkSWQob2JqZWN0LmlkKSlcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpZCBcIiArIG9iamVjdC5pZCArIFwiIGlzIHJlc2VydmVkIGluIFwiICsgdGhpcyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZXNlcnZlZE5hbWUob2JqZWN0Lm5hbWUpKVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm5hbWUgJ1wiICsgb2JqZWN0Lm5hbWUgKyBcIicgaXMgcmVzZXJ2ZWQgaW4gXCIgKyB0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKG9iamVjdC5wYXJlbnQpXHJcbiAgICAgICAgICAgIG9iamVjdC5wYXJlbnQucmVtb3ZlKG9iamVjdCk7XHJcbiAgICAgICAgdGhpcy5maWVsZHNbb2JqZWN0Lm5hbWVdID0gb2JqZWN0O1xyXG4gICAgICAgIG9iamVjdC5tZXNzYWdlID0gdGhpcztcclxuICAgICAgICBvYmplY3Qub25BZGQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XHJcbiAgICB9XHJcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpIHtcclxuICAgICAgICBpZiAoIXRoaXMub25lb2ZzKVxyXG4gICAgICAgICAgICB0aGlzLm9uZW9mcyA9IHt9O1xyXG4gICAgICAgIHRoaXMub25lb2ZzW29iamVjdC5uYW1lXSA9IG9iamVjdDtcclxuICAgICAgICBvYmplY3Qub25BZGQodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTmFtZXNwYWNlLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBvYmplY3QpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYSBuZXN0ZWQgb2JqZWN0IGZyb20gdGhpcyB0eXBlLlxyXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBOZXN0ZWQgb2JqZWN0IHRvIHJlbW92ZVxyXG4gKiBAcmV0dXJucyB7VHlwZX0gYHRoaXNgXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYXJndW1lbnRzIGFyZSBpbnZhbGlkXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgb2JqZWN0YCBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyB0eXBlXHJcbiAqL1xyXG5UeXBlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUob2JqZWN0KSB7XHJcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgRmllbGQgJiYgb2JqZWN0LmV4dGVuZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgLy8gU2VlIFR5cGUjYWRkIGZvciB0aGUgcmVhc29uIHdoeSBleHRlbnNpb24gZmllbGRzIGFyZSBleGNsdWRlZCBoZXJlLlxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIXRoaXMuZmllbGRzIHx8IHRoaXMuZmllbGRzW29iamVjdC5uYW1lXSAhPT0gb2JqZWN0KVxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihvYmplY3QgKyBcIiBpcyBub3QgYSBtZW1iZXIgb2YgXCIgKyB0aGlzKTtcclxuXHJcbiAgICAgICAgZGVsZXRlIHRoaXMuZmllbGRzW29iamVjdC5uYW1lXTtcclxuICAgICAgICBvYmplY3QucGFyZW50ID0gbnVsbDtcclxuICAgICAgICBvYmplY3Qub25SZW1vdmUodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyQ2FjaGUodGhpcyk7XHJcbiAgICB9XHJcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpIHtcclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCF0aGlzLm9uZW9mcyB8fCB0aGlzLm9uZW9mc1tvYmplY3QubmFtZV0gIT09IG9iamVjdClcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3Iob2JqZWN0ICsgXCIgaXMgbm90IGEgbWVtYmVyIG9mIFwiICsgdGhpcyk7XHJcblxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9uZW9mc1tvYmplY3QubmFtZV07XHJcbiAgICAgICAgb2JqZWN0LnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgb2JqZWN0Lm9uUmVtb3ZlKHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBjbGVhckNhY2hlKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUucmVtb3ZlLmNhbGwodGhpcywgb2JqZWN0KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIGlkIGlzIHJlc2VydmVkLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaWQgSWQgdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHJlc2VydmVkLCBvdGhlcndpc2UgYGZhbHNlYFxyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUuaXNSZXNlcnZlZElkID0gZnVuY3Rpb24gaXNSZXNlcnZlZElkKGlkKSB7XHJcbiAgICByZXR1cm4gTmFtZXNwYWNlLmlzUmVzZXJ2ZWRJZCh0aGlzLnJlc2VydmVkLCBpZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBuYW1lIGlzIHJlc2VydmVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIHRvIHRlc3RcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiByZXNlcnZlZCwgb3RoZXJ3aXNlIGBmYWxzZWBcclxuICovXHJcblR5cGUucHJvdG90eXBlLmlzUmVzZXJ2ZWROYW1lID0gZnVuY3Rpb24gaXNSZXNlcnZlZE5hbWUobmFtZSkge1xyXG4gICAgcmV0dXJuIE5hbWVzcGFjZS5pc1Jlc2VydmVkTmFtZSh0aGlzLnJlc2VydmVkLCBuYW1lKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XHJcbiAqIEByZXR1cm5zIHtNZXNzYWdlPHt9Pn0gTWVzc2FnZSBpbnN0YW5jZVxyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcy5jdG9yKHByb3BlcnRpZXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgdXAge0BsaW5rIFR5cGUjZW5jb2RlfGVuY29kZX0sIHtAbGluayBUeXBlI2RlY29kZXxkZWNvZGV9IGFuZCB7QGxpbmsgVHlwZSN2ZXJpZnl8dmVyaWZ5fS5cclxuICogQHJldHVybnMge1R5cGV9IGB0aGlzYFxyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiBzZXR1cCgpIHtcclxuICAgIC8vIFNldHMgdXAgZXZlcnl0aGluZyBhdCBvbmNlIHNvIHRoYXQgdGhlIHByb3RvdHlwZSBjaGFpbiBkb2VzIG5vdCBoYXZlIHRvIGJlIHJlLWV2YWx1YXRlZFxyXG4gICAgLy8gbXVsdGlwbGUgdGltZXMgKFY4LCBzb2Z0LWRlb3B0IHByb3RvdHlwZS1jaGVjaykuXHJcblxyXG4gICAgdmFyIGZ1bGxOYW1lID0gdGhpcy5mdWxsTmFtZSxcclxuICAgICAgICB0eXBlcyAgICA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAvKiBpbml0aWFsaXplcyAqLyB0aGlzLmZpZWxkc0FycmF5Lmxlbmd0aDsgKytpKVxyXG4gICAgICAgIHR5cGVzLnB1c2godGhpcy5fZmllbGRzQXJyYXlbaV0ucmVzb2x2ZSgpLnJlc29sdmVkVHlwZSk7XHJcblxyXG4gICAgLy8gUmVwbGFjZSBzZXR1cCBtZXRob2RzIHdpdGggdHlwZS1zcGVjaWZpYyBnZW5lcmF0ZWQgZnVuY3Rpb25zXHJcbiAgICB0aGlzLmVuY29kZSA9IGVuY29kZXIodGhpcykoe1xyXG4gICAgICAgIFdyaXRlciA6IFdyaXRlcixcclxuICAgICAgICB0eXBlcyAgOiB0eXBlcyxcclxuICAgICAgICB1dGlsICAgOiB1dGlsXHJcbiAgICB9KTtcclxuICAgIHRoaXMuZGVjb2RlID0gZGVjb2Rlcih0aGlzKSh7XHJcbiAgICAgICAgUmVhZGVyIDogUmVhZGVyLFxyXG4gICAgICAgIHR5cGVzICA6IHR5cGVzLFxyXG4gICAgICAgIHV0aWwgICA6IHV0aWxcclxuICAgIH0pO1xyXG4gICAgdGhpcy52ZXJpZnkgPSB2ZXJpZmllcih0aGlzKSh7XHJcbiAgICAgICAgdHlwZXMgOiB0eXBlcyxcclxuICAgICAgICB1dGlsICA6IHV0aWxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5mcm9tT2JqZWN0ID0gY29udmVydGVyLmZyb21PYmplY3QodGhpcykoe1xyXG4gICAgICAgIHR5cGVzIDogdHlwZXMsXHJcbiAgICAgICAgdXRpbCAgOiB1dGlsXHJcbiAgICB9KTtcclxuICAgIHRoaXMudG9PYmplY3QgPSBjb252ZXJ0ZXIudG9PYmplY3QodGhpcykoe1xyXG4gICAgICAgIHR5cGVzIDogdHlwZXMsXHJcbiAgICAgICAgdXRpbCAgOiB1dGlsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBJbmplY3QgY3VzdG9tIHdyYXBwZXJzIGZvciBjb21tb24gdHlwZXNcclxuICAgIHZhciB3cmFwcGVyID0gd3JhcHBlcnNbZnVsbE5hbWVdO1xyXG4gICAgaWYgKHdyYXBwZXIpIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxUaGlzID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcclxuICAgICAgICAvLyBpZiAod3JhcHBlci5mcm9tT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsVGhpcy5mcm9tT2JqZWN0ID0gdGhpcy5mcm9tT2JqZWN0O1xyXG4gICAgICAgICAgICB0aGlzLmZyb21PYmplY3QgPSB3cmFwcGVyLmZyb21PYmplY3QuYmluZChvcmlnaW5hbFRoaXMpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBpZiAod3JhcHBlci50b09iamVjdCkge1xyXG4gICAgICAgICAgICBvcmlnaW5hbFRoaXMudG9PYmplY3QgPSB0aGlzLnRvT2JqZWN0O1xyXG4gICAgICAgICAgICB0aGlzLnRvT2JqZWN0ID0gd3JhcHBlci50b09iamVjdC5iaW5kKG9yaWdpbmFsVGhpcyk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHlwZSN2ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cclxuICogQHBhcmFtIHtNZXNzYWdlPHt9PnxPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBNZXNzYWdlIGluc3RhbmNlIG9yIHBsYWluIG9iamVjdFxyXG4gKiBAcGFyYW0ge1dyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSB3cml0ZXJcclxuICovXHJcblR5cGUucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZV9zZXR1cChtZXNzYWdlLCB3cml0ZXIpIHtcclxuICAgIHJldHVybiB0aGlzLnNldHVwKCkuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcik7IC8vIG92ZXJyaWRlcyB0aGlzIG1ldGhvZFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVuY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGJ5dGUgbGVuZ3RoIGFzIGEgdmFyaW50LiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUeXBlI3ZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxyXG4gKiBAcGFyYW0ge01lc3NhZ2U8e30+fE9iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2Ugb3IgcGxhaW4gb2JqZWN0XHJcbiAqIEBwYXJhbSB7V3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXHJcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IHdyaXRlclxyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlciAmJiB3cml0ZXIubGVuID8gd3JpdGVyLmZvcmsoKSA6IHdyaXRlcikubGRlbGltKCk7XHJcbn07XHJcblxyXG4vKipcclxuICogRGVjb2RlcyBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLlxyXG4gKiBAcGFyYW0ge1JlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTGVuZ3RoIG9mIHRoZSBtZXNzYWdlLCBpZiBrbm93biBiZWZvcmVoYW5kXHJcbiAqIEByZXR1cm5zIHtNZXNzYWdlPHt9Pn0gRGVjb2RlZCBtZXNzYWdlXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXHJcbiAqIEB0aHJvd3Mge3V0aWwuUHJvdG9jb2xFcnJvcjx7fT59IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlX3NldHVwKHJlYWRlciwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXR1cCgpLmRlY29kZShyZWFkZXIsIGxlbmd0aCk7IC8vIG92ZXJyaWRlcyB0aGlzIG1ldGhvZFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlY29kZXMgYSBtZXNzYWdlIG9mIHRoaXMgdHlwZSBwcmVjZWVkZWQgYnkgaXRzIGJ5dGUgbGVuZ3RoIGFzIGEgdmFyaW50LlxyXG4gKiBAcGFyYW0ge1JlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxyXG4gKiBAcmV0dXJucyB7TWVzc2FnZTx7fT59IERlY29kZWQgbWVzc2FnZVxyXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxyXG4gKiBAdGhyb3dzIHt1dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xyXG4gICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgUmVhZGVyKSlcclxuICAgICAgICByZWFkZXIgPSBSZWFkZXIuY3JlYXRlKHJlYWRlcik7XHJcbiAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFZlcmlmaWVzIHRoYXQgZmllbGQgdmFsdWVzIGFyZSB2YWxpZCBhbmQgdGhhdCByZXF1aXJlZCBmaWVsZHMgYXJlIHByZXNlbnQuXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxyXG4gKiBAcmV0dXJucyB7bnVsbHxzdHJpbmd9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5X3NldHVwKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiB0aGlzLnNldHVwKCkudmVyaWZ5KG1lc3NhZ2UpOyAvLyBvdmVycmlkZXMgdGhpcyBtZXRob2RcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IG1lc3NhZ2Ugb2YgdGhpcyB0eXBlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG9iamVjdCBQbGFpbiBvYmplY3QgdG8gY29udmVydFxyXG4gKiBAcmV0dXJucyB7TWVzc2FnZTx7fT59IE1lc3NhZ2UgaW5zdGFuY2VcclxuICovXHJcblR5cGUucHJvdG90eXBlLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KG9iamVjdCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2V0dXAoKS5mcm9tT2JqZWN0KG9iamVjdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVyc2lvbiBvcHRpb25zIGFzIHVzZWQgYnkge0BsaW5rIFR5cGUjdG9PYmplY3R9IGFuZCB7QGxpbmsgTWVzc2FnZS50b09iamVjdH0uXHJcbiAqIEBpbnRlcmZhY2UgSUNvbnZlcnNpb25PcHRpb25zXHJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtsb25nc10gTG9uZyBjb252ZXJzaW9uIHR5cGUuXHJcbiAqIFZhbGlkIHZhbHVlcyBhcmUgYFN0cmluZ2AgYW5kIGBOdW1iZXJgICh0aGUgZ2xvYmFsIHR5cGVzKS5cclxuICogRGVmYXVsdHMgdG8gY29weSB0aGUgcHJlc2VudCB2YWx1ZSwgd2hpY2ggaXMgYSBwb3NzaWJseSB1bnNhZmUgbnVtYmVyIHdpdGhvdXQgYW5kIGEge0BsaW5rIExvbmd9IHdpdGggYSBsb25nIGxpYnJhcnkuXHJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtlbnVtc10gRW51bSB2YWx1ZSBjb252ZXJzaW9uIHR5cGUuXHJcbiAqIE9ubHkgdmFsaWQgdmFsdWUgaXMgYFN0cmluZ2AgKHRoZSBnbG9iYWwgdHlwZSkuXHJcbiAqIERlZmF1bHRzIHRvIGNvcHkgdGhlIHByZXNlbnQgdmFsdWUsIHdoaWNoIGlzIHRoZSBudW1lcmljIGlkLlxyXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbYnl0ZXNdIEJ5dGVzIHZhbHVlIGNvbnZlcnNpb24gdHlwZS5cclxuICogVmFsaWQgdmFsdWVzIGFyZSBgQXJyYXlgIGFuZCAoYSBiYXNlNjQgZW5jb2RlZCkgYFN0cmluZ2AgKHRoZSBnbG9iYWwgdHlwZXMpLlxyXG4gKiBEZWZhdWx0cyB0byBjb3B5IHRoZSBwcmVzZW50IHZhbHVlLCB3aGljaCB1c3VhbGx5IGlzIGEgQnVmZmVyIHVuZGVyIG5vZGUgYW5kIGFuIFVpbnQ4QXJyYXkgaW4gdGhlIGJyb3dzZXIuXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2RlZmF1bHRzPWZhbHNlXSBBbHNvIHNldHMgZGVmYXVsdCB2YWx1ZXMgb24gdGhlIHJlc3VsdGluZyBvYmplY3RcclxuICogQHByb3BlcnR5IHtib29sZWFufSBbYXJyYXlzPWZhbHNlXSBTZXRzIGVtcHR5IGFycmF5cyBmb3IgbWlzc2luZyByZXBlYXRlZCBmaWVsZHMgZXZlbiBpZiBgZGVmYXVsdHM9ZmFsc2VgXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW29iamVjdHM9ZmFsc2VdIFNldHMgZW1wdHkgb2JqZWN0cyBmb3IgbWlzc2luZyBtYXAgZmllbGRzIGV2ZW4gaWYgYGRlZmF1bHRzPWZhbHNlYFxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtvbmVvZnM9ZmFsc2VdIEluY2x1ZGVzIHZpcnR1YWwgb25lb2YgcHJvcGVydGllcyBzZXQgdG8gdGhlIHByZXNlbnQgZmllbGQncyBuYW1lLCBpZiBhbnlcclxuICogQHByb3BlcnR5IHtib29sZWFufSBbanNvbj1mYWxzZV0gUGVyZm9ybXMgYWRkaXRpb25hbCBKU09OIGNvbXBhdGliaWxpdHkgY29udmVyc2lvbnMsIGkuZS4gTmFOIGFuZCBJbmZpbml0eSB0byBzdHJpbmdzXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIG1lc3NhZ2Ugb2YgdGhpcyB0eXBlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXHJcbiAqIEBwYXJhbSB7TWVzc2FnZTx7fT59IG1lc3NhZ2UgTWVzc2FnZSBpbnN0YW5jZVxyXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxyXG4gKi9cclxuVHlwZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXR1cCgpLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciBmdW5jdGlvbiBhcyByZXR1cm5lZCBieSB7QGxpbmsgVHlwZS5kfSAoVHlwZVNjcmlwdCkuXHJcbiAqIEB0eXBlZGVmIFR5cGVEZWNvcmF0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge0NvbnN0cnVjdG9yPFQ+fSB0YXJnZXQgVGFyZ2V0IGNvbnN0cnVjdG9yXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBUeXBlIGRlY29yYXRvciAoVHlwZVNjcmlwdCkuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZU5hbWVdIFR5cGUgbmFtZSwgZGVmYXVsdHMgdG8gdGhlIGNvbnN0cnVjdG9yJ3MgbmFtZVxyXG4gKiBAcmV0dXJucyB7VHlwZURlY29yYXRvcjxUPn0gRGVjb3JhdG9yIGZ1bmN0aW9uXHJcbiAqIEB0ZW1wbGF0ZSBUIGV4dGVuZHMgTWVzc2FnZTxUPlxyXG4gKi9cclxuVHlwZS5kID0gZnVuY3Rpb24gZGVjb3JhdGVUeXBlKHR5cGVOYW1lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gdHlwZURlY29yYXRvcih0YXJnZXQpIHtcclxuICAgICAgICB1dGlsLmRlY29yYXRlVHlwZSh0YXJnZXQsIHR5cGVOYW1lKTtcclxuICAgIH07XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIENvbW1vbiB0eXBlIGNvbnN0YW50cy5cclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHR5cGVzID0gZXhwb3J0cztcclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxuXHJcbnZhciBzID0gW1xyXG4gICAgXCJkb3VibGVcIiwgICAvLyAwXHJcbiAgICBcImZsb2F0XCIsICAgIC8vIDFcclxuICAgIFwiaW50MzJcIiwgICAgLy8gMlxyXG4gICAgXCJ1aW50MzJcIiwgICAvLyAzXHJcbiAgICBcInNpbnQzMlwiLCAgIC8vIDRcclxuICAgIFwiZml4ZWQzMlwiLCAgLy8gNVxyXG4gICAgXCJzZml4ZWQzMlwiLCAvLyA2XHJcbiAgICBcImludDY0XCIsICAgIC8vIDdcclxuICAgIFwidWludDY0XCIsICAgLy8gOFxyXG4gICAgXCJzaW50NjRcIiwgICAvLyA5XHJcbiAgICBcImZpeGVkNjRcIiwgIC8vIDEwXHJcbiAgICBcInNmaXhlZDY0XCIsIC8vIDExXHJcbiAgICBcImJvb2xcIiwgICAgIC8vIDEyXHJcbiAgICBcInN0cmluZ1wiLCAgIC8vIDEzXHJcbiAgICBcImJ5dGVzXCIgICAgIC8vIDE0XHJcbl07XHJcblxyXG5mdW5jdGlvbiBiYWtlKHZhbHVlcywgb2Zmc2V0KSB7XHJcbiAgICB2YXIgaSA9IDAsIG8gPSB7fTtcclxuICAgIG9mZnNldCB8PSAwO1xyXG4gICAgd2hpbGUgKGkgPCB2YWx1ZXMubGVuZ3RoKSBvW3NbaSArIG9mZnNldF1dID0gdmFsdWVzW2krK107XHJcbiAgICByZXR1cm4gbztcclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2ljIHR5cGUgd2lyZSB0eXBlcy5cclxuICogQHR5cGUge09iamVjdC48c3RyaW5nLG51bWJlcj59XHJcbiAqIEBjb25zdFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gZG91YmxlPTEgRml4ZWQ2NCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZsb2F0PTUgRml4ZWQzMiB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDMyPTAgVmFyaW50IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQzMj01IEZpeGVkMzIgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQ2ND0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkNjQ9MSBGaXhlZDY0IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm9vbD0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHN0cmluZz0yIExkZWxpbSB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJ5dGVzPTIgTGRlbGltIHdpcmUgdHlwZVxyXG4gKi9cclxudHlwZXMuYmFzaWMgPSBiYWtlKFtcclxuICAgIC8qIGRvdWJsZSAgICovIDEsXHJcbiAgICAvKiBmbG9hdCAgICAqLyA1LFxyXG4gICAgLyogaW50MzIgICAgKi8gMCxcclxuICAgIC8qIHVpbnQzMiAgICovIDAsXHJcbiAgICAvKiBzaW50MzIgICAqLyAwLFxyXG4gICAgLyogZml4ZWQzMiAgKi8gNSxcclxuICAgIC8qIHNmaXhlZDMyICovIDUsXHJcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxyXG4gICAgLyogdWludDY0ICAgKi8gMCxcclxuICAgIC8qIHNpbnQ2NCAgICovIDAsXHJcbiAgICAvKiBmaXhlZDY0ICAqLyAxLFxyXG4gICAgLyogc2ZpeGVkNjQgKi8gMSxcclxuICAgIC8qIGJvb2wgICAgICovIDAsXHJcbiAgICAvKiBzdHJpbmcgICAqLyAyLFxyXG4gICAgLyogYnl0ZXMgICAgKi8gMlxyXG5dKTtcclxuXHJcbi8qKlxyXG4gKiBCYXNpYyB0eXBlIGRlZmF1bHRzLlxyXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XHJcbiAqIEBjb25zdFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gZG91YmxlPTAgRG91YmxlIGRlZmF1bHRcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZsb2F0PTAgRmxvYXQgZGVmYXVsdFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50MzI9MCBJbnQzMiBkZWZhdWx0XHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50MzI9MCBVaW50MzIgZGVmYXVsdFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDMyPTAgU2ludDMyIGRlZmF1bHRcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkMzI9MCBGaXhlZDMyIGRlZmF1bHRcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDMyPTAgU2ZpeGVkMzIgZGVmYXVsdFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBJbnQ2NCBkZWZhdWx0XHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50NjQ9MCBVaW50NjQgZGVmYXVsdFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDY0PTAgU2ludDMyIGRlZmF1bHRcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkNjQ9MCBGaXhlZDY0IGRlZmF1bHRcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDY0PTAgU2ZpeGVkNjQgZGVmYXVsdFxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGJvb2w9ZmFsc2UgQm9vbCBkZWZhdWx0XHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdHJpbmc9XCJcIiBTdHJpbmcgZGVmYXVsdFxyXG4gKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fSBieXRlcz1BcnJheSgwKSBCeXRlcyBkZWZhdWx0XHJcbiAqIEBwcm9wZXJ0eSB7bnVsbH0gbWVzc2FnZT1udWxsIE1lc3NhZ2UgZGVmYXVsdFxyXG4gKi9cclxudHlwZXMuZGVmYXVsdHMgPSBiYWtlKFtcclxuICAgIC8qIGRvdWJsZSAgICovIDAsXHJcbiAgICAvKiBmbG9hdCAgICAqLyAwLFxyXG4gICAgLyogaW50MzIgICAgKi8gMCxcclxuICAgIC8qIHVpbnQzMiAgICovIDAsXHJcbiAgICAvKiBzaW50MzIgICAqLyAwLFxyXG4gICAgLyogZml4ZWQzMiAgKi8gMCxcclxuICAgIC8qIHNmaXhlZDMyICovIDAsXHJcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxyXG4gICAgLyogdWludDY0ICAgKi8gMCxcclxuICAgIC8qIHNpbnQ2NCAgICovIDAsXHJcbiAgICAvKiBmaXhlZDY0ICAqLyAwLFxyXG4gICAgLyogc2ZpeGVkNjQgKi8gMCxcclxuICAgIC8qIGJvb2wgICAgICovIGZhbHNlLFxyXG4gICAgLyogc3RyaW5nICAgKi8gXCJcIixcclxuICAgIC8qIGJ5dGVzICAgICovIHV0aWwuZW1wdHlBcnJheSxcclxuICAgIC8qIG1lc3NhZ2UgICovIG51bGxcclxuXSk7XHJcblxyXG4vKipcclxuICogQmFzaWMgbG9uZyB0eXBlIHdpcmUgdHlwZXMuXHJcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxyXG4gKiBAY29uc3RcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gdWludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ludDY0PTAgVmFyaW50IHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZml4ZWQ2ND0xIEZpeGVkNjQgd2lyZSB0eXBlXHJcbiAqL1xyXG50eXBlcy5sb25nID0gYmFrZShbXHJcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxyXG4gICAgLyogdWludDY0ICAgKi8gMCxcclxuICAgIC8qIHNpbnQ2NCAgICovIDAsXHJcbiAgICAvKiBmaXhlZDY0ICAqLyAxLFxyXG4gICAgLyogc2ZpeGVkNjQgKi8gMVxyXG5dLCA3KTtcclxuXHJcbi8qKlxyXG4gKiBBbGxvd2VkIHR5cGVzIGZvciBtYXAga2V5cyB3aXRoIHRoZWlyIGFzc29jaWF0ZWQgd2lyZSB0eXBlLlxyXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsbnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvb2w9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdHJpbmc9MiBMZGVsaW0gd2lyZSB0eXBlXHJcbiAqL1xyXG50eXBlcy5tYXBLZXkgPSBiYWtlKFtcclxuICAgIC8qIGludDMyICAgICovIDAsXHJcbiAgICAvKiB1aW50MzIgICAqLyAwLFxyXG4gICAgLyogc2ludDMyICAgKi8gMCxcclxuICAgIC8qIGZpeGVkMzIgICovIDUsXHJcbiAgICAvKiBzZml4ZWQzMiAqLyA1LFxyXG4gICAgLyogaW50NjQgICAgKi8gMCxcclxuICAgIC8qIHVpbnQ2NCAgICovIDAsXHJcbiAgICAvKiBzaW50NjQgICAqLyAwLFxyXG4gICAgLyogZml4ZWQ2NCAgKi8gMSxcclxuICAgIC8qIHNmaXhlZDY0ICovIDEsXHJcbiAgICAvKiBib29sICAgICAqLyAwLFxyXG4gICAgLyogc3RyaW5nICAgKi8gMlxyXG5dLCAyKTtcclxuXHJcbi8qKlxyXG4gKiBBbGxvd2VkIHR5cGVzIGZvciBwYWNrZWQgcmVwZWF0ZWQgZmllbGRzIHdpdGggdGhlaXIgYXNzb2NpYXRlZCB3aXJlIHR5cGUuXHJcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxudW1iZXI+fVxyXG4gKiBAY29uc3RcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRvdWJsZT0xIEZpeGVkNjQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmbG9hdD01IEZpeGVkMzIgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHVpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNpbnQzMj0wIFZhcmludCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gc2ZpeGVkMzI9NSBGaXhlZDMyIHdpcmUgdHlwZVxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB1aW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaW50NjQ9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNmaXhlZDY0PTEgRml4ZWQ2NCB3aXJlIHR5cGVcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvb2w9MCBWYXJpbnQgd2lyZSB0eXBlXHJcbiAqL1xyXG50eXBlcy5wYWNrZWQgPSBiYWtlKFtcclxuICAgIC8qIGRvdWJsZSAgICovIDEsXHJcbiAgICAvKiBmbG9hdCAgICAqLyA1LFxyXG4gICAgLyogaW50MzIgICAgKi8gMCxcclxuICAgIC8qIHVpbnQzMiAgICovIDAsXHJcbiAgICAvKiBzaW50MzIgICAqLyAwLFxyXG4gICAgLyogZml4ZWQzMiAgKi8gNSxcclxuICAgIC8qIHNmaXhlZDMyICovIDUsXHJcbiAgICAvKiBpbnQ2NCAgICAqLyAwLFxyXG4gICAgLyogdWludDY0ICAgKi8gMCxcclxuICAgIC8qIHNpbnQ2NCAgICovIDAsXHJcbiAgICAvKiBmaXhlZDY0ICAqLyAxLFxyXG4gICAgLyogc2ZpeGVkNjQgKi8gMSxcclxuICAgIC8qIGJvb2wgICAgICovIDBcclxuXSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIFZhcmlvdXMgdXRpbGl0eSBmdW5jdGlvbnMuXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciB1dGlsID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XHJcblxyXG52YXIgcm9vdHMgPSByZXF1aXJlKFwiLi9yb290c1wiKTtcclxuXHJcbnZhciBUeXBlLCAvLyBjeWNsaWNcclxuICAgIEVudW07XHJcblxyXG51dGlsLmNvZGVnZW4gPSByZXF1aXJlKFwiQHByb3RvYnVmanMvY29kZWdlblwiKTtcclxudXRpbC5mZXRjaCAgID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2ZldGNoXCIpO1xyXG51dGlsLnBhdGggICAgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvcGF0aFwiKTtcclxuXHJcbi8qKlxyXG4gKiBOb2RlJ3MgZnMgbW9kdWxlIGlmIGF2YWlsYWJsZS5cclxuICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxyXG4gKi9cclxudXRpbC5mcyA9IHV0aWwuaW5xdWlyZShcImZzXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGFuIG9iamVjdCdzIHZhbHVlcyB0byBhbiBhcnJheS5cclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gb2JqZWN0IE9iamVjdCB0byBjb252ZXJ0XHJcbiAqIEByZXR1cm5zIHtBcnJheS48Kj59IENvbnZlcnRlZCBhcnJheVxyXG4gKi9cclxudXRpbC50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheShvYmplY3QpIHtcclxuICAgIGlmIChvYmplY3QpIHtcclxuICAgICAgICB2YXIga2V5cyAgPSBPYmplY3Qua2V5cyhvYmplY3QpLFxyXG4gICAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCksXHJcbiAgICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICB3aGlsZSAoaW5kZXggPCBrZXlzLmxlbmd0aClcclxuICAgICAgICAgICAgYXJyYXlbaW5kZXhdID0gb2JqZWN0W2tleXNbaW5kZXgrK11dO1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuICAgIHJldHVybiBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBvZiBrZXlzIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZWlyIHJlc3BlY3RpdmUgdmFsdWUgdG8gYW4gb2JqZWN0LCBvbWl0dGluZyB1bmRlZmluZWQgdmFsdWVzLlxyXG4gKiBAcGFyYW0ge0FycmF5LjwqPn0gYXJyYXkgQXJyYXkgdG8gY29udmVydFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IENvbnZlcnRlZCBvYmplY3RcclxuICovXHJcbnV0aWwudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChhcnJheSkge1xyXG4gICAgdmFyIG9iamVjdCA9IHt9LFxyXG4gICAgICAgIGluZGV4ICA9IDA7XHJcbiAgICB3aGlsZSAoaW5kZXggPCBhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICB2YXIga2V5ID0gYXJyYXlbaW5kZXgrK10sXHJcbiAgICAgICAgICAgIHZhbCA9IGFycmF5W2luZGV4KytdO1xyXG4gICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSB2YWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG59O1xyXG5cclxudmFyIHNhZmVQcm9wQmFja3NsYXNoUmUgPSAvXFxcXC9nLFxyXG4gICAgc2FmZVByb3BRdW90ZVJlICAgICA9IC9cIi9nO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBuYW1lIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBKUy5cclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byB0ZXN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgcmVzZXJ2ZWQsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAqL1xyXG51dGlsLmlzUmVzZXJ2ZWQgPSBmdW5jdGlvbiBpc1Jlc2VydmVkKG5hbWUpIHtcclxuICAgIHJldHVybiAvXig/OmRvfGlmfGlufGZvcnxsZXR8bmV3fHRyeXx2YXJ8Y2FzZXxlbHNlfGVudW18ZXZhbHxmYWxzZXxudWxsfHRoaXN8dHJ1ZXx2b2lkfHdpdGh8YnJlYWt8Y2F0Y2h8Y2xhc3N8Y29uc3R8c3VwZXJ8dGhyb3d8d2hpbGV8eWllbGR8ZGVsZXRlfGV4cG9ydHxpbXBvcnR8cHVibGljfHJldHVybnxzdGF0aWN8c3dpdGNofHR5cGVvZnxkZWZhdWx0fGV4dGVuZHN8ZmluYWxseXxwYWNrYWdlfHByaXZhdGV8Y29udGludWV8ZGVidWdnZXJ8ZnVuY3Rpb258YXJndW1lbnRzfGludGVyZmFjZXxwcm90ZWN0ZWR8aW1wbGVtZW50c3xpbnN0YW5jZW9mKSQvLnRlc3QobmFtZSk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHNhZmUgcHJvcGVydHkgYWNjZXNzb3IgZm9yIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgbmFtZS5cclxuICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgbmFtZVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBTYWZlIGFjY2Vzc29yXHJcbiAqL1xyXG51dGlsLnNhZmVQcm9wID0gZnVuY3Rpb24gc2FmZVByb3AocHJvcCkge1xyXG4gICAgaWYgKCEvXlskXFx3X10rJC8udGVzdChwcm9wKSB8fCB1dGlsLmlzUmVzZXJ2ZWQocHJvcCkpXHJcbiAgICAgICAgcmV0dXJuIFwiW1xcXCJcIiArIHByb3AucmVwbGFjZShzYWZlUHJvcEJhY2tzbGFzaFJlLCBcIlxcXFxcXFxcXCIpLnJlcGxhY2Uoc2FmZVByb3BRdW90ZVJlLCBcIlxcXFxcXFwiXCIpICsgXCJcXFwiXVwiO1xyXG4gICAgcmV0dXJuIFwiLlwiICsgcHJvcDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nIHRvIHVwcGVyIGNhc2UuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgU3RyaW5nIHRvIGNvbnZlcnRcclxuICogQHJldHVybnMge3N0cmluZ30gQ29udmVydGVkIHN0cmluZ1xyXG4gKi9cclxudXRpbC51Y0ZpcnN0ID0gZnVuY3Rpb24gdWNGaXJzdChzdHIpIHtcclxuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpO1xyXG59O1xyXG5cclxudmFyIGNhbWVsQ2FzZVJlID0gL18oW2Etel0pL2c7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgYSBzdHJpbmcgdG8gY2FtZWwgY2FzZS5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBTdHJpbmcgdG8gY29udmVydFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb252ZXJ0ZWQgc3RyaW5nXHJcbiAqL1xyXG51dGlsLmNhbWVsQ2FzZSA9IGZ1bmN0aW9uIGNhbWVsQ2FzZShzdHIpIHtcclxuICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIDEpXHJcbiAgICAgICAgICsgc3RyLnN1YnN0cmluZygxKVxyXG4gICAgICAgICAgICAgICAucmVwbGFjZShjYW1lbENhc2VSZSwgZnVuY3Rpb24oJDAsICQxKSB7IHJldHVybiAkMS50b1VwcGVyQ2FzZSgpOyB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJlcyByZWZsZWN0ZWQgZmllbGRzIGJ5IGlkLlxyXG4gKiBAcGFyYW0ge0ZpZWxkfSBhIEZpcnN0IGZpZWxkXHJcbiAqIEBwYXJhbSB7RmllbGR9IGIgU2Vjb25kIGZpZWxkXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IENvbXBhcmlzb24gdmFsdWVcclxuICovXHJcbnV0aWwuY29tcGFyZUZpZWxkc0J5SWQgPSBmdW5jdGlvbiBjb21wYXJlRmllbGRzQnlJZChhLCBiKSB7XHJcbiAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XHJcbn07XHJcblxyXG4vKipcclxuICogRGVjb3JhdG9yIGhlbHBlciBmb3IgdHlwZXMgKFR5cGVTY3JpcHQpLlxyXG4gKiBAcGFyYW0ge0NvbnN0cnVjdG9yPFQ+fSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZU5hbWVdIFR5cGUgbmFtZSwgZGVmYXVsdHMgdG8gdGhlIGNvbnN0cnVjdG9yJ3MgbmFtZVxyXG4gKiBAcmV0dXJucyB7VHlwZX0gUmVmbGVjdGVkIHR5cGVcclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XHJcbiAqIEBwcm9wZXJ0eSB7Um9vdH0gcm9vdCBEZWNvcmF0b3JzIHJvb3RcclxuICovXHJcbnV0aWwuZGVjb3JhdGVUeXBlID0gZnVuY3Rpb24gZGVjb3JhdGVUeXBlKGN0b3IsIHR5cGVOYW1lKSB7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoY3Rvci4kdHlwZSkge1xyXG4gICAgICAgIGlmICh0eXBlTmFtZSAmJiBjdG9yLiR0eXBlLm5hbWUgIT09IHR5cGVOYW1lKSB7XHJcbiAgICAgICAgICAgIHV0aWwuZGVjb3JhdGVSb290LnJlbW92ZShjdG9yLiR0eXBlKTtcclxuICAgICAgICAgICAgY3Rvci4kdHlwZS5uYW1lID0gdHlwZU5hbWU7XHJcbiAgICAgICAgICAgIHV0aWwuZGVjb3JhdGVSb290LmFkZChjdG9yLiR0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN0b3IuJHR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIGlmICghVHlwZSlcclxuICAgICAgICBUeXBlID0gcmVxdWlyZShcIi4vdHlwZVwiKTtcclxuXHJcbiAgICB2YXIgdHlwZSA9IG5ldyBUeXBlKHR5cGVOYW1lIHx8IGN0b3IubmFtZSk7XHJcbiAgICB1dGlsLmRlY29yYXRlUm9vdC5hZGQodHlwZSk7XHJcbiAgICB0eXBlLmN0b3IgPSBjdG9yOyAvLyBzZXRzIHVwIC5lbmNvZGUsIC5kZWNvZGUgZXRjLlxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0b3IsIFwiJHR5cGVcIiwgeyB2YWx1ZTogdHlwZSwgZW51bWVyYWJsZTogZmFsc2UgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3Rvci5wcm90b3R5cGUsIFwiJHR5cGVcIiwgeyB2YWx1ZTogdHlwZSwgZW51bWVyYWJsZTogZmFsc2UgfSk7XHJcbiAgICByZXR1cm4gdHlwZTtcclxufTtcclxuXHJcbnZhciBkZWNvcmF0ZUVudW1JbmRleCA9IDA7XHJcblxyXG4vKipcclxuICogRGVjb3JhdG9yIGhlbHBlciBmb3IgZW51bXMgKFR5cGVTY3JpcHQpLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IEVudW0gb2JqZWN0XHJcbiAqIEByZXR1cm5zIHtFbnVtfSBSZWZsZWN0ZWQgZW51bVxyXG4gKi9cclxudXRpbC5kZWNvcmF0ZUVudW0gPSBmdW5jdGlvbiBkZWNvcmF0ZUVudW0ob2JqZWN0KSB7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAob2JqZWN0LiR0eXBlKVxyXG4gICAgICAgIHJldHVybiBvYmplY3QuJHR5cGU7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIGlmICghRW51bSlcclxuICAgICAgICBFbnVtID0gcmVxdWlyZShcIi4vZW51bVwiKTtcclxuXHJcbiAgICB2YXIgZW5tID0gbmV3IEVudW0oXCJFbnVtXCIgKyBkZWNvcmF0ZUVudW1JbmRleCsrLCBvYmplY3QpO1xyXG4gICAgdXRpbC5kZWNvcmF0ZVJvb3QuYWRkKGVubSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBcIiR0eXBlXCIsIHsgdmFsdWU6IGVubSwgZW51bWVyYWJsZTogZmFsc2UgfSk7XHJcbiAgICByZXR1cm4gZW5tO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciByb290IChUeXBlU2NyaXB0KS5cclxuICogQG5hbWUgdXRpbC5kZWNvcmF0ZVJvb3RcclxuICogQHR5cGUge1Jvb3R9XHJcbiAqIEByZWFkb25seVxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHV0aWwsIFwiZGVjb3JhdGVSb290XCIsIHtcclxuICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHJvb3RzW1wiZGVjb3JhdGVkXCJdIHx8IChyb290c1tcImRlY29yYXRlZFwiXSA9IG5ldyAocmVxdWlyZShcIi4vcm9vdFwiKSkoKSk7XHJcbiAgICB9XHJcbn0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBMb25nQml0cztcclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMuXHJcbiAqIEBjbGFzc2Rlc2MgSGVscGVyIGNsYXNzIGZvciB3b3JraW5nIHdpdGggdGhlIGxvdyBhbmQgaGlnaCBiaXRzIG9mIGEgNjQgYml0IHZhbHVlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtudW1iZXJ9IGxvIExvdyAzMiBiaXRzLCB1bnNpZ25lZFxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGkgSGlnaCAzMiBiaXRzLCB1bnNpZ25lZFxyXG4gKi9cclxuZnVuY3Rpb24gTG9uZ0JpdHMobG8sIGhpKSB7XHJcblxyXG4gICAgLy8gbm90ZSB0aGF0IHRoZSBjYXN0cyBiZWxvdyBhcmUgdGhlb3JldGljYWxseSB1bm5lY2Vzc2FyeSBhcyBvZiB0b2RheSwgYnV0IG9sZGVyIHN0YXRpY2FsbHlcclxuICAgIC8vIGdlbmVyYXRlZCBjb252ZXJ0ZXIgY29kZSBtaWdodCBzdGlsbCBjYWxsIHRoZSBjdG9yIHdpdGggc2lnbmVkIDMyYml0cy4ga2VwdCBmb3IgY29tcGF0LlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG93IGJpdHMuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxvID0gbG8gPj4+IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWdoIGJpdHMuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmhpID0gaGkgPj4+IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBaZXJvIGJpdHMuXHJcbiAqIEBtZW1iZXJvZiB1dGlsLkxvbmdCaXRzXHJcbiAqIEB0eXBlIHt1dGlsLkxvbmdCaXRzfVxyXG4gKi9cclxudmFyIHplcm8gPSBMb25nQml0cy56ZXJvID0gbmV3IExvbmdCaXRzKDAsIDApO1xyXG5cclxuemVyby50b051bWJlciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcclxuemVyby56ekVuY29kZSA9IHplcm8uenpEZWNvZGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH07XHJcbnplcm8ubGVuZ3RoID0gZnVuY3Rpb24oKSB7IHJldHVybiAxOyB9O1xyXG5cclxuLyoqXHJcbiAqIFplcm8gaGFzaC5cclxuICogQG1lbWJlcm9mIHV0aWwuTG9uZ0JpdHNcclxuICogQHR5cGUge3N0cmluZ31cclxuICovXHJcbnZhciB6ZXJvSGFzaCA9IExvbmdCaXRzLnplcm9IYXNoID0gXCJcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcIjtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSB0aGUgc3BlY2lmaWVkIG51bWJlci5cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlXHJcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBJbnN0YW5jZVxyXG4gKi9cclxuTG9uZ0JpdHMuZnJvbU51bWJlciA9IGZ1bmN0aW9uIGZyb21OdW1iZXIodmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gMClcclxuICAgICAgICByZXR1cm4gemVybztcclxuICAgIHZhciBzaWduID0gdmFsdWUgPCAwO1xyXG4gICAgaWYgKHNpZ24pXHJcbiAgICAgICAgdmFsdWUgPSAtdmFsdWU7XHJcbiAgICB2YXIgbG8gPSB2YWx1ZSA+Pj4gMCxcclxuICAgICAgICBoaSA9ICh2YWx1ZSAtIGxvKSAvIDQyOTQ5NjcyOTYgPj4+IDA7XHJcbiAgICBpZiAoc2lnbikge1xyXG4gICAgICAgIGhpID0gfmhpID4+PiAwO1xyXG4gICAgICAgIGxvID0gfmxvID4+PiAwO1xyXG4gICAgICAgIGlmICgrK2xvID4gNDI5NDk2NzI5NSkge1xyXG4gICAgICAgICAgICBsbyA9IDA7XHJcbiAgICAgICAgICAgIGlmICgrK2hpID4gNDI5NDk2NzI5NSlcclxuICAgICAgICAgICAgICAgIGhpID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IExvbmdCaXRzKGxvLCBoaSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gYSBudW1iZXIsIGxvbmcgb3Igc3RyaW5nLlxyXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWVcclxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEluc3RhbmNlXHJcbiAqL1xyXG5Mb25nQml0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIilcclxuICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcih2YWx1ZSk7XHJcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgIGlmICh1dGlsLkxvbmcpXHJcbiAgICAgICAgICAgIHZhbHVlID0gdXRpbC5Mb25nLmZyb21TdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIExvbmdCaXRzLmZyb21OdW1iZXIocGFyc2VJbnQodmFsdWUsIDEwKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUubG93IHx8IHZhbHVlLmhpZ2ggPyBuZXcgTG9uZ0JpdHModmFsdWUubG93ID4+PiAwLCB2YWx1ZS5oaWdoID4+PiAwKSA6IHplcm87XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSBwb3NzaWJseSB1bnNhZmUgSmF2YVNjcmlwdCBudW1iZXIuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBQb3NzaWJseSB1bnNhZmUgbnVtYmVyXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlcih1bnNpZ25lZCkge1xyXG4gICAgaWYgKCF1bnNpZ25lZCAmJiB0aGlzLmhpID4+PiAzMSkge1xyXG4gICAgICAgIHZhciBsbyA9IH50aGlzLmxvICsgMSA+Pj4gMCxcclxuICAgICAgICAgICAgaGkgPSB+dGhpcy5oaSAgICAgPj4+IDA7XHJcbiAgICAgICAgaWYgKCFsbylcclxuICAgICAgICAgICAgaGkgPSBoaSArIDEgPj4+IDA7XHJcbiAgICAgICAgcmV0dXJuIC0obG8gKyBoaSAqIDQyOTQ5NjcyOTYpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMubG8gKyB0aGlzLmhpICogNDI5NDk2NzI5NjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIGxvbmcuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxyXG4gKiBAcmV0dXJucyB7TG9uZ30gTG9uZ1xyXG4gKi9cclxuTG9uZ0JpdHMucHJvdG90eXBlLnRvTG9uZyA9IGZ1bmN0aW9uIHRvTG9uZyh1bnNpZ25lZCkge1xyXG4gICAgcmV0dXJuIHV0aWwuTG9uZ1xyXG4gICAgICAgID8gbmV3IHV0aWwuTG9uZyh0aGlzLmxvIHwgMCwgdGhpcy5oaSB8IDAsIEJvb2xlYW4odW5zaWduZWQpKVxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgOiB7IGxvdzogdGhpcy5sbyB8IDAsIGhpZ2g6IHRoaXMuaGkgfCAwLCB1bnNpZ25lZDogQm9vbGVhbih1bnNpZ25lZCkgfTtcclxufTtcclxuXHJcbnZhciBjaGFyQ29kZUF0ID0gU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0O1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgOCBjaGFyYWN0ZXJzIGxvbmcgaGFzaC5cclxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2ggSGFzaFxyXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gQml0c1xyXG4gKi9cclxuTG9uZ0JpdHMuZnJvbUhhc2ggPSBmdW5jdGlvbiBmcm9tSGFzaChoYXNoKSB7XHJcbiAgICBpZiAoaGFzaCA9PT0gemVyb0hhc2gpXHJcbiAgICAgICAgcmV0dXJuIHplcm87XHJcbiAgICByZXR1cm4gbmV3IExvbmdCaXRzKFxyXG4gICAgICAgICggY2hhckNvZGVBdC5jYWxsKGhhc2gsIDApXHJcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMSkgPDwgOFxyXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDIpIDw8IDE2XHJcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMykgPDwgMjQpID4+PiAwXHJcbiAgICAsXHJcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNClcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA1KSA8PCA4XHJcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNikgPDwgMTZcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA3KSA8PCAyNCkgPj4+IDBcclxuICAgICk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBsb25nIGJpdHMgdG8gYSA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUudG9IYXNoID0gZnVuY3Rpb24gdG9IYXNoKCkge1xyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXHJcbiAgICAgICAgdGhpcy5sbyAgICAgICAgJiAyNTUsXHJcbiAgICAgICAgdGhpcy5sbyA+Pj4gOCAgJiAyNTUsXHJcbiAgICAgICAgdGhpcy5sbyA+Pj4gMTYgJiAyNTUsXHJcbiAgICAgICAgdGhpcy5sbyA+Pj4gMjQgICAgICAsXHJcbiAgICAgICAgdGhpcy5oaSAgICAgICAgJiAyNTUsXHJcbiAgICAgICAgdGhpcy5oaSA+Pj4gOCAgJiAyNTUsXHJcbiAgICAgICAgdGhpcy5oaSA+Pj4gMTYgJiAyNTUsXHJcbiAgICAgICAgdGhpcy5oaSA+Pj4gMjRcclxuICAgICk7XHJcbn07XHJcblxyXG4vKipcclxuICogWmlnLXphZyBlbmNvZGVzIHRoaXMgbG9uZyBiaXRzLlxyXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gYHRoaXNgXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUuenpFbmNvZGUgPSBmdW5jdGlvbiB6ekVuY29kZSgpIHtcclxuICAgIHZhciBtYXNrID0gICB0aGlzLmhpID4+IDMxO1xyXG4gICAgdGhpcy5oaSAgPSAoKHRoaXMuaGkgPDwgMSB8IHRoaXMubG8gPj4+IDMxKSBeIG1hc2spID4+PiAwO1xyXG4gICAgdGhpcy5sbyAgPSAoIHRoaXMubG8gPDwgMSAgICAgICAgICAgICAgICAgICBeIG1hc2spID4+PiAwO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogWmlnLXphZyBkZWNvZGVzIHRoaXMgbG9uZyBiaXRzLlxyXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gYHRoaXNgXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUuenpEZWNvZGUgPSBmdW5jdGlvbiB6ekRlY29kZSgpIHtcclxuICAgIHZhciBtYXNrID0gLSh0aGlzLmxvICYgMSk7XHJcbiAgICB0aGlzLmxvICA9ICgodGhpcy5sbyA+Pj4gMSB8IHRoaXMuaGkgPDwgMzEpIF4gbWFzaykgPj4+IDA7XHJcbiAgICB0aGlzLmhpICA9ICggdGhpcy5oaSA+Pj4gMSAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgdGhpcyBsb25nYml0cyB3aGVuIGVuY29kZWQgYXMgYSB2YXJpbnQuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IExlbmd0aFxyXG4gKi9cclxuTG9uZ0JpdHMucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uIGxlbmd0aCgpIHtcclxuICAgIHZhciBwYXJ0MCA9ICB0aGlzLmxvLFxyXG4gICAgICAgIHBhcnQxID0gKHRoaXMubG8gPj4+IDI4IHwgdGhpcy5oaSA8PCA0KSA+Pj4gMCxcclxuICAgICAgICBwYXJ0MiA9ICB0aGlzLmhpID4+PiAyNDtcclxuICAgIHJldHVybiBwYXJ0MiA9PT0gMFxyXG4gICAgICAgICA/IHBhcnQxID09PSAwXHJcbiAgICAgICAgICAgPyBwYXJ0MCA8IDE2Mzg0XHJcbiAgICAgICAgICAgICA/IHBhcnQwIDwgMTI4ID8gMSA6IDJcclxuICAgICAgICAgICAgIDogcGFydDAgPCAyMDk3MTUyID8gMyA6IDRcclxuICAgICAgICAgICA6IHBhcnQxIDwgMTYzODRcclxuICAgICAgICAgICAgID8gcGFydDEgPCAxMjggPyA1IDogNlxyXG4gICAgICAgICAgICAgOiBwYXJ0MSA8IDIwOTcxNTIgPyA3IDogOFxyXG4gICAgICAgICA6IHBhcnQyIDwgMTI4ID8gOSA6IDEwO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIHV0aWwgPSBleHBvcnRzO1xyXG5cclxuLy8gdXNlZCB0byByZXR1cm4gYSBQcm9taXNlIHdoZXJlIGNhbGxiYWNrIGlzIG9taXR0ZWRcclxudXRpbC5hc1Byb21pc2UgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvYXNwcm9taXNlXCIpO1xyXG5cclxuLy8gY29udmVydHMgdG8gLyBmcm9tIGJhc2U2NCBlbmNvZGVkIHN0cmluZ3NcclxudXRpbC5iYXNlNjQgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvYmFzZTY0XCIpO1xyXG5cclxuLy8gYmFzZSBjbGFzcyBvZiBycGMuU2VydmljZVxyXG51dGlsLkV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9ldmVudGVtaXR0ZXJcIik7XHJcblxyXG4vLyBmbG9hdCBoYW5kbGluZyBhY2Nyb3NzIGJyb3dzZXJzXHJcbnV0aWwuZmxvYXQgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvZmxvYXRcIik7XHJcblxyXG4vLyByZXF1aXJlcyBtb2R1bGVzIG9wdGlvbmFsbHkgYW5kIGhpZGVzIHRoZSBjYWxsIGZyb20gYnVuZGxlcnNcclxudXRpbC5pbnF1aXJlID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2lucXVpcmVcIik7XHJcblxyXG4vLyBjb252ZXJ0cyB0byAvIGZyb20gdXRmOCBlbmNvZGVkIHN0cmluZ3NcclxudXRpbC51dGY4ID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL3V0ZjhcIik7XHJcblxyXG4vLyBwcm92aWRlcyBhIG5vZGUtbGlrZSBidWZmZXIgcG9vbCBpbiB0aGUgYnJvd3NlclxyXG51dGlsLnBvb2wgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvcG9vbFwiKTtcclxuXHJcbi8vIHV0aWxpdHkgdG8gd29yayB3aXRoIHRoZSBsb3cgYW5kIGhpZ2ggYml0cyBvZiBhIDY0IGJpdCB2YWx1ZVxyXG51dGlsLkxvbmdCaXRzID0gcmVxdWlyZShcIi4vbG9uZ2JpdHNcIik7XHJcblxyXG4vLyBnbG9iYWwgb2JqZWN0IHJlZmVyZW5jZVxyXG51dGlsLmdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93XHJcbiAgICAgICAgICAgfHwgdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWxcclxuICAgICAgICAgICB8fCB0eXBlb2Ygc2VsZiAgICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGZcclxuICAgICAgICAgICB8fCB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xyXG5cclxuLyoqXHJcbiAqIEFuIGltbXVhYmxlIGVtcHR5IGFycmF5LlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAdHlwZSB7QXJyYXkuPCo+fVxyXG4gKiBAY29uc3RcclxuICovXHJcbnV0aWwuZW1wdHlBcnJheSA9IE9iamVjdC5mcmVlemUgPyBPYmplY3QuZnJlZXplKFtdKSA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFtdOyAvLyB1c2VkIG9uIHByb3RvdHlwZXNcclxuXHJcbi8qKlxyXG4gKiBBbiBpbW11dGFibGUgZW1wdHkgb2JqZWN0LlxyXG4gKiBAdHlwZSB7T2JqZWN0fVxyXG4gKiBAY29uc3RcclxuICovXHJcbnV0aWwuZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplID8gT2JqZWN0LmZyZWV6ZSh7fSkgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7fTsgLy8gdXNlZCBvbiBwcm90b3R5cGVzXHJcblxyXG4vKipcclxuICogV2hldGhlciBydW5uaW5nIHdpdGhpbiBub2RlIG9yIG5vdC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQHR5cGUge2Jvb2xlYW59XHJcbiAqIEBjb25zdFxyXG4gKi9cclxudXRpbC5pc05vZGUgPSBCb29sZWFuKHV0aWwuZ2xvYmFsLnByb2Nlc3MgJiYgdXRpbC5nbG9iYWwucHJvY2Vzcy52ZXJzaW9ucyAmJiB1dGlsLmdsb2JhbC5wcm9jZXNzLnZlcnNpb25zLm5vZGUpO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gaW50ZWdlci5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhbiBpbnRlZ2VyXHJcbiAqL1xyXG51dGlsLmlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIgfHwgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIHN0cmluZy5cclxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byB0ZXN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgc3RyaW5nXHJcbiAqL1xyXG51dGlsLmlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG5vbi1udWxsIG9iamVjdC5cclxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byB0ZXN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgbm9uLW51bGwgb2JqZWN0XHJcbiAqL1xyXG51dGlsLmlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIGEgcHJvcGVydHkgb24gYSBtZXNzYWdlIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudC5cclxuICogVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgdXRpbC5pc1NldH0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG5hbWVcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAqL1xyXG51dGlsLmlzc2V0ID1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBwcm9wZXJ0eSBvbiBhIG1lc3NhZ2UgaXMgY29uc2lkZXJlZCB0byBiZSBwcmVzZW50LlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wIFByb3BlcnR5IG5hbWVcclxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQsIG90aGVyd2lzZSBgZmFsc2VgXHJcbiAqL1xyXG51dGlsLmlzU2V0ID0gZnVuY3Rpb24gaXNTZXQob2JqLCBwcm9wKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcF07XHJcbiAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiBvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxLCBuby1wcm90b3R5cGUtYnVpbHRpbnNcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA6IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgpID4gMDtcclxuICAgIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBbnkgY29tcGF0aWJsZSBCdWZmZXIgaW5zdGFuY2UuXHJcbiAqIFRoaXMgaXMgYSBtaW5pbWFsIHN0YW5kLWFsb25lIGRlZmluaXRpb24gb2YgYSBCdWZmZXIgaW5zdGFuY2UuIFRoZSBhY3R1YWwgdHlwZSBpcyB0aGF0IGV4cG9ydGVkIGJ5IG5vZGUncyB0eXBpbmdzLlxyXG4gKiBAaW50ZXJmYWNlIEJ1ZmZlclxyXG4gKiBAZXh0ZW5kcyBVaW50OEFycmF5XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIE5vZGUncyBCdWZmZXIgY2xhc3MgaWYgYXZhaWxhYmxlLlxyXG4gKiBAdHlwZSB7Q29uc3RydWN0b3I8QnVmZmVyPn1cclxuICovXHJcbnV0aWwuQnVmZmVyID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgQnVmZmVyID0gdXRpbC5pbnF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcjtcclxuICAgICAgICAvLyByZWZ1c2UgdG8gdXNlIG5vbi1ub2RlIGJ1ZmZlcnMgaWYgbm90IGV4cGxpY2l0bHkgYXNzaWduZWQgKHBlcmYgcmVhc29ucyk6XHJcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5wcm90b3R5cGUudXRmOFdyaXRlID8gQnVmZmVyIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gbnVsbDtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuLy8gSW50ZXJuYWwgYWxpYXMgb2Ygb3IgcG9seWZ1bGwgZm9yIEJ1ZmZlci5mcm9tLlxyXG51dGlsLl9CdWZmZXJfZnJvbSA9IG51bGw7XHJcblxyXG4vLyBJbnRlcm5hbCBhbGlhcyBvZiBvciBwb2x5ZmlsbCBmb3IgQnVmZmVyLmFsbG9jVW5zYWZlLlxyXG51dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUgPSBudWxsO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgYnVmZmVyIG9mIHdoYXRldmVyIHR5cGUgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudC5cclxuICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW119IFtzaXplT3JBcnJheT0wXSBCdWZmZXIgc2l6ZSBvciBudW1iZXIgYXJyYXlcclxuICogQHJldHVybnMge1VpbnQ4QXJyYXl8QnVmZmVyfSBCdWZmZXJcclxuICovXHJcbnV0aWwubmV3QnVmZmVyID0gZnVuY3Rpb24gbmV3QnVmZmVyKHNpemVPckFycmF5KSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzaXplT3JBcnJheSA9PT0gXCJudW1iZXJcIlxyXG4gICAgICAgID8gdXRpbC5CdWZmZXJcclxuICAgICAgICAgICAgPyB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUoc2l6ZU9yQXJyYXkpXHJcbiAgICAgICAgICAgIDogbmV3IHV0aWwuQXJyYXkoc2l6ZU9yQXJyYXkpXHJcbiAgICAgICAgOiB1dGlsLkJ1ZmZlclxyXG4gICAgICAgICAgICA/IHV0aWwuX0J1ZmZlcl9mcm9tKHNpemVPckFycmF5KVxyXG4gICAgICAgICAgICA6IHR5cGVvZiBVaW50OEFycmF5ID09PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgICAgICAgICA/IHNpemVPckFycmF5XHJcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KHNpemVPckFycmF5KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBcnJheSBpbXBsZW1lbnRhdGlvbiB1c2VkIGluIHRoZSBicm93c2VyLiBgVWludDhBcnJheWAgaWYgc3VwcG9ydGVkLCBvdGhlcndpc2UgYEFycmF5YC5cclxuICogQHR5cGUge0NvbnN0cnVjdG9yPFVpbnQ4QXJyYXk+fVxyXG4gKi9cclxudXRpbC5BcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiID8gVWludDhBcnJheSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyA6IEFycmF5O1xyXG5cclxuLyoqXHJcbiAqIEFueSBjb21wYXRpYmxlIExvbmcgaW5zdGFuY2UuXHJcbiAqIFRoaXMgaXMgYSBtaW5pbWFsIHN0YW5kLWFsb25lIGRlZmluaXRpb24gb2YgYSBMb25nIGluc3RhbmNlLiBUaGUgYWN0dWFsIHR5cGUgaXMgdGhhdCBleHBvcnRlZCBieSBsb25nLmpzLlxyXG4gKiBAaW50ZXJmYWNlIExvbmdcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvdyBMb3cgYml0c1xyXG4gKiBAcHJvcGVydHkge251bWJlcn0gaGlnaCBIaWdoIGJpdHNcclxuICogQHByb3BlcnR5IHtib29sZWFufSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBMb25nLmpzJ3MgTG9uZyBjbGFzcyBpZiBhdmFpbGFibGUuXHJcbiAqIEB0eXBlIHtDb25zdHJ1Y3RvcjxMb25nPn1cclxuICovXHJcbnV0aWwuTG9uZyA9IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLmRjb2RlSU8gJiYgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5nbG9iYWwuZGNvZGVJTy5Mb25nXHJcbiAgICAgICAgIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLkxvbmdcclxuICAgICAgICAgfHwgdXRpbC5pbnF1aXJlKFwibG9uZ1wiKTtcclxuXHJcbi8qKlxyXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byB2ZXJpZnkgMiBiaXQgKGBib29sYCkgbWFwIGtleXMuXHJcbiAqIEB0eXBlIHtSZWdFeHB9XHJcbiAqIEBjb25zdFxyXG4gKi9cclxudXRpbC5rZXkyUmUgPSAvXnRydWV8ZmFsc2V8MHwxJC87XHJcblxyXG4vKipcclxuICogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gdmVyaWZ5IDMyIGJpdCAoYGludDMyYCBldGMuKSBtYXAga2V5cy5cclxuICogQHR5cGUge1JlZ0V4cH1cclxuICogQGNvbnN0XHJcbiAqL1xyXG51dGlsLmtleTMyUmUgPSAvXi0/KD86MHxbMS05XVswLTldKikkLztcclxuXHJcbi8qKlxyXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byB2ZXJpZnkgNjQgYml0IChgaW50NjRgIGV0Yy4pIG1hcCBrZXlzLlxyXG4gKiBAdHlwZSB7UmVnRXhwfVxyXG4gKiBAY29uc3RcclxuICovXHJcbnV0aWwua2V5NjRSZSA9IC9eKD86W1xcXFx4MDAtXFxcXHhmZl17OH18LT8oPzowfFsxLTldWzAtOV0qKSkkLztcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIG51bWJlciBvciBsb25nIHRvIGFuIDggY2hhcmFjdGVycyBsb25nIGhhc2ggc3RyaW5nLlxyXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBjb252ZXJ0XHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEhhc2hcclxuICovXHJcbnV0aWwubG9uZ1RvSGFzaCA9IGZ1bmN0aW9uIGxvbmdUb0hhc2godmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZVxyXG4gICAgICAgID8gdXRpbC5Mb25nQml0cy5mcm9tKHZhbHVlKS50b0hhc2goKVxyXG4gICAgICAgIDogdXRpbC5Mb25nQml0cy56ZXJvSGFzaDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoIHN0cmluZyB0byBhIGxvbmcgb3IgbnVtYmVyLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCBIYXNoXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxyXG4gKiBAcmV0dXJucyB7TG9uZ3xudW1iZXJ9IE9yaWdpbmFsIHZhbHVlXHJcbiAqL1xyXG51dGlsLmxvbmdGcm9tSGFzaCA9IGZ1bmN0aW9uIGxvbmdGcm9tSGFzaChoYXNoLCB1bnNpZ25lZCkge1xyXG4gICAgdmFyIGJpdHMgPSB1dGlsLkxvbmdCaXRzLmZyb21IYXNoKGhhc2gpO1xyXG4gICAgaWYgKHV0aWwuTG9uZylcclxuICAgICAgICByZXR1cm4gdXRpbC5Mb25nLmZyb21CaXRzKGJpdHMubG8sIGJpdHMuaGksIHVuc2lnbmVkKTtcclxuICAgIHJldHVybiBiaXRzLnRvTnVtYmVyKEJvb2xlYW4odW5zaWduZWQpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBNZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QgaW50byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0XHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IHNyYyBTb3VyY2Ugb2JqZWN0XHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lmTm90U2V0PWZhbHNlXSBNZXJnZXMgb25seSBpZiB0aGUga2V5IGlzIG5vdCBhbHJlYWR5IHNldFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IERlc3RpbmF0aW9uIG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gbWVyZ2UoZHN0LCBzcmMsIGlmTm90U2V0KSB7IC8vIHVzZWQgYnkgY29udmVydGVyc1xyXG4gICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNyYyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcclxuICAgICAgICBpZiAoZHN0W2tleXNbaV1dID09PSB1bmRlZmluZWQgfHwgIWlmTm90U2V0KVxyXG4gICAgICAgICAgICBkc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XHJcbiAgICByZXR1cm4gZHN0O1xyXG59XHJcblxyXG51dGlsLm1lcmdlID0gbWVyZ2U7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIHN0cmluZyB0byBsb3dlciBjYXNlLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjb252ZXJ0XHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbnZlcnRlZCBzdHJpbmdcclxuICovXHJcbnV0aWwubGNGaXJzdCA9IGZ1bmN0aW9uIGxjRmlyc3Qoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgY3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFcnJvciBuYW1lXHJcbiAqIEByZXR1cm5zIHtDb25zdHJ1Y3RvcjxFcnJvcj59IEN1c3RvbSBlcnJvciBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gbmV3RXJyb3IobmFtZSkge1xyXG5cclxuICAgIGZ1bmN0aW9uIEN1c3RvbUVycm9yKG1lc3NhZ2UsIHByb3BlcnRpZXMpIHtcclxuXHJcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEN1c3RvbUVycm9yKSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21FcnJvcihtZXNzYWdlLCBwcm9wZXJ0aWVzKTtcclxuXHJcbiAgICAgICAgLy8gRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcclxuICAgICAgICAvLyBeIGp1c3QgcmV0dXJucyBhIG5ldyBlcnJvciBpbnN0YW5jZSBiZWNhdXNlIHRoZSBjdG9yIGNhbiBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvblxyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXNzYWdlXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1lc3NhZ2U7IH0gfSk7XHJcblxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSAvLyBub2RlXHJcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEN1c3RvbUVycm9yKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0YWNrXCIsIHsgdmFsdWU6IChuZXcgRXJyb3IoKSkuc3RhY2sgfHwgXCJcIiB9KTtcclxuXHJcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpXHJcbiAgICAgICAgICAgIG1lcmdlKHRoaXMsIHByb3BlcnRpZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIChDdXN0b21FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQ3VzdG9tRXJyb3I7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEN1c3RvbUVycm9yLnByb3RvdHlwZSwgXCJuYW1lXCIsIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG5hbWU7IH0gfSk7XHJcblxyXG4gICAgQ3VzdG9tRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArIFwiOiBcIiArIHRoaXMubWVzc2FnZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIEN1c3RvbUVycm9yO1xyXG59XHJcblxyXG51dGlsLm5ld0Vycm9yID0gbmV3RXJyb3I7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBwcm90b2NvbCBlcnJvci5cclxuICogQGNsYXNzZGVzYyBFcnJvciBzdWJjbGFzcyBpbmRpY2F0aW5nIGEgcHJvdG9jb2wgc3BlY2lmYyBlcnJvci5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGV4dGVuZHMgRXJyb3JcclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlXHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwcm9wZXJ0aWVzXSBBZGRpdGlvbmFsIHByb3BlcnRpZXNcclxuICogQGV4YW1wbGVcclxuICogdHJ5IHtcclxuICogICAgIE15TWVzc2FnZS5kZWNvZGUoc29tZUJ1ZmZlcik7IC8vIHRocm93cyBpZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcclxuICogfSBjYXRjaCAoZSkge1xyXG4gKiAgICAgaWYgKGUgaW5zdGFuY2VvZiBQcm90b2NvbEVycm9yICYmIGUuaW5zdGFuY2UpXHJcbiAqICAgICAgICAgY29uc29sZS5sb2coXCJkZWNvZGVkIHNvIGZhcjogXCIgKyBKU09OLnN0cmluZ2lmeShlLmluc3RhbmNlKSk7XHJcbiAqIH1cclxuICovXHJcbnV0aWwuUHJvdG9jb2xFcnJvciA9IG5ld0Vycm9yKFwiUHJvdG9jb2xFcnJvclwiKTtcclxuXHJcbi8qKlxyXG4gKiBTbyBmYXIgZGVjb2RlZCBtZXNzYWdlIGluc3RhbmNlLlxyXG4gKiBAbmFtZSB1dGlsLlByb3RvY29sRXJyb3IjaW5zdGFuY2VcclxuICogQHR5cGUge01lc3NhZ2U8VD59XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgT25lT2YgZ2V0dGVyIGFzIHJldHVybmVkIGJ5IHtAbGluayB1dGlsLm9uZU9mR2V0dGVyfS5cclxuICogQHR5cGVkZWYgT25lT2ZHZXR0ZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gU2V0IGZpZWxkIG5hbWUsIGlmIGFueVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBCdWlsZHMgYSBnZXR0ZXIgZm9yIGEgb25lb2YncyBwcmVzZW50IGZpZWxkIG5hbWUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IGZpZWxkTmFtZXMgRmllbGQgbmFtZXNcclxuICogQHJldHVybnMge09uZU9mR2V0dGVyfSBVbmJvdW5kIGdldHRlclxyXG4gKi9cclxudXRpbC5vbmVPZkdldHRlciA9IGZ1bmN0aW9uIGdldE9uZU9mKGZpZWxkTmFtZXMpIHtcclxuICAgIHZhciBmaWVsZE1hcCA9IHt9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgIGZpZWxkTWFwW2ZpZWxkTmFtZXNbaV1dID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBTZXQgZmllbGQgbmFtZSwgaWYgYW55XHJcbiAgICAgKiBAdGhpcyBPYmplY3RcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXHJcbiAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpLCBpID0ga2V5cy5sZW5ndGggLSAxOyBpID4gLTE7IC0taSlcclxuICAgICAgICAgICAgaWYgKGZpZWxkTWFwW2tleXNbaV1dID09PSAxICYmIHRoaXNba2V5c1tpXV0gIT09IHVuZGVmaW5lZCAmJiB0aGlzW2tleXNbaV1dICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXNbaV07XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgT25lT2Ygc2V0dGVyIGFzIHJldHVybmVkIGJ5IHtAbGluayB1dGlsLm9uZU9mU2V0dGVyfS5cclxuICogQHR5cGVkZWYgT25lT2ZTZXR0ZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IHZhbHVlIEZpZWxkIG5hbWVcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogQnVpbGRzIGEgc2V0dGVyIGZvciBhIG9uZW9mJ3MgcHJlc2VudCBmaWVsZCBuYW1lLlxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBmaWVsZE5hbWVzIEZpZWxkIG5hbWVzXHJcbiAqIEByZXR1cm5zIHtPbmVPZlNldHRlcn0gVW5ib3VuZCBzZXR0ZXJcclxuICovXHJcbnV0aWwub25lT2ZTZXR0ZXIgPSBmdW5jdGlvbiBzZXRPbmVPZihmaWVsZE5hbWVzKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWVsZCBuYW1lXHJcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gICAgICogQHRoaXMgT2JqZWN0XHJcbiAgICAgKiBAaWdub3JlXHJcbiAgICAgKi9cclxuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZE5hbWVzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICBpZiAoZmllbGROYW1lc1tpXSAhPT0gbmFtZSlcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2ZpZWxkTmFtZXNbaV1dO1xyXG4gICAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IGNvbnZlcnNpb24gb3B0aW9ucyB1c2VkIGZvciB7QGxpbmsgTWVzc2FnZSN0b0pTT059IGltcGxlbWVudGF0aW9ucy5cclxuICpcclxuICogVGhlc2Ugb3B0aW9ucyBhcmUgY2xvc2UgdG8gcHJvdG8zJ3MgSlNPTiBtYXBwaW5nIHdpdGggdGhlIGV4Y2VwdGlvbiB0aGF0IGludGVybmFsIHR5cGVzIGxpa2UgQW55IGFyZSBoYW5kbGVkIGp1c3QgbGlrZSBtZXNzYWdlcy4gTW9yZSBwcmVjaXNlbHk6XHJcbiAqXHJcbiAqIC0gTG9uZ3MgYmVjb21lIHN0cmluZ3NcclxuICogLSBFbnVtcyBiZWNvbWUgc3RyaW5nIGtleXNcclxuICogLSBCeXRlcyBiZWNvbWUgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xyXG4gKiAtIChTdWItKU1lc3NhZ2VzIGJlY29tZSBwbGFpbiBvYmplY3RzXHJcbiAqIC0gTWFwcyBiZWNvbWUgcGxhaW4gb2JqZWN0cyB3aXRoIGFsbCBzdHJpbmcga2V5c1xyXG4gKiAtIFJlcGVhdGVkIGZpZWxkcyBiZWNvbWUgYXJyYXlzXHJcbiAqIC0gTmFOIGFuZCBJbmZpbml0eSBmb3IgZmxvYXQgYW5kIGRvdWJsZSBmaWVsZHMgYmVjb21lIHN0cmluZ3NcclxuICpcclxuICogQHR5cGUge0lDb252ZXJzaW9uT3B0aW9uc31cclxuICogQHNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm90b2NvbC1idWZmZXJzL2RvY3MvcHJvdG8zP2hsPWVuI2pzb25cclxuICovXHJcbnV0aWwudG9KU09OT3B0aW9ucyA9IHtcclxuICAgIGxvbmdzOiBTdHJpbmcsXHJcbiAgICBlbnVtczogU3RyaW5nLFxyXG4gICAgYnl0ZXM6IFN0cmluZyxcclxuICAgIGpzb246IHRydWVcclxufTtcclxuXHJcbi8vIFNldHMgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudCAoY2FsbGVkIGluIGluZGV4LW1pbmltYWwpXHJcbnV0aWwuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIEJ1ZmZlciA9IHV0aWwuQnVmZmVyO1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoIUJ1ZmZlcikge1xyXG4gICAgICAgIHV0aWwuX0J1ZmZlcl9mcm9tID0gdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gbnVsbDtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBiZWNhdXNlIG5vZGUgNC54IGJ1ZmZlcnMgYXJlIGluY29tcGF0aWJsZSAmIGltbXV0YWJsZVxyXG4gICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNvZGVJTy9wcm90b2J1Zi5qcy9wdWxsLzY2NVxyXG4gICAgdXRpbC5fQnVmZmVyX2Zyb20gPSBCdWZmZXIuZnJvbSAhPT0gVWludDhBcnJheS5mcm9tICYmIEJ1ZmZlci5mcm9tIHx8XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfZnJvbSh2YWx1ZSwgZW5jb2RpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXIodmFsdWUsIGVuY29kaW5nKTtcclxuICAgICAgICB9O1xyXG4gICAgdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gQnVmZmVyLmFsbG9jVW5zYWZlIHx8XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfYWxsb2NVbnNhZmUoc2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcihzaXplKTtcclxuICAgICAgICB9O1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZmllcjtcclxuXHJcbnZhciBFbnVtICAgICAgPSByZXF1aXJlKFwiLi9lbnVtXCIpLFxyXG4gICAgdXRpbCAgICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxuXHJcbmZ1bmN0aW9uIGludmFsaWQoZmllbGQsIGV4cGVjdGVkKSB7XHJcbiAgICByZXR1cm4gZmllbGQubmFtZSArIFwiOiBcIiArIGV4cGVjdGVkICsgKGZpZWxkLnJlcGVhdGVkICYmIGV4cGVjdGVkICE9PSBcImFycmF5XCIgPyBcIltdXCIgOiBmaWVsZC5tYXAgJiYgZXhwZWN0ZWQgIT09IFwib2JqZWN0XCIgPyBcIntrOlwiK2ZpZWxkLmtleVR5cGUrXCJ9XCIgOiBcIlwiKSArIFwiIGV4cGVjdGVkXCI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBwYXJ0aWFsIHZhbHVlIHZlcmlmaWVyLlxyXG4gKiBAcGFyYW0ge0NvZGVnZW59IGdlbiBDb2RlZ2VuIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIFJlZmxlY3RlZCBmaWVsZFxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJbmRleCBGaWVsZCBpbmRleFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmIFZhcmlhYmxlIHJlZmVyZW5jZVxyXG4gKiBAcmV0dXJucyB7Q29kZWdlbn0gQ29kZWdlbiBpbnN0YW5jZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBmaWVsZEluZGV4LCByZWYpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXHJcbiAgICBpZiAoZmllbGQucmVzb2x2ZWRUeXBlKSB7XHJcbiAgICAgICAgaWYgKGZpZWxkLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIEVudW0pIHsgZ2VuXHJcbiAgICAgICAgICAgIChcInN3aXRjaCglcyl7XCIsIHJlZilcclxuICAgICAgICAgICAgICAgIChcImRlZmF1bHQ6XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJlbnVtIHZhbHVlXCIpKTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZpZWxkLnJlc29sdmVkVHlwZS52YWx1ZXMpLCBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIGdlblxyXG4gICAgICAgICAgICAgICAgKFwiY2FzZSAlaTpcIiwgZmllbGQucmVzb2x2ZWRUeXBlLnZhbHVlc1trZXlzW2pdXSk7XHJcbiAgICAgICAgICAgIGdlblxyXG4gICAgICAgICAgICAgICAgICAgIChcImJyZWFrXCIpXHJcbiAgICAgICAgICAgIChcIn1cIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ2VuXHJcbiAgICAgICAgICAgIChcIntcIilcclxuICAgICAgICAgICAgICAgIChcInZhciBlPXR5cGVzWyVpXS52ZXJpZnkoJXMpO1wiLCBmaWVsZEluZGV4LCByZWYpXHJcbiAgICAgICAgICAgICAgICAoXCJpZihlKVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqK2VcIiwgZmllbGQubmFtZSArIFwiLlwiKVxyXG4gICAgICAgICAgICAoXCJ9XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbnQzMlwiOlxyXG4gICAgICAgICAgICBjYXNlIFwidWludDMyXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzaW50MzJcIjpcclxuICAgICAgICAgICAgY2FzZSBcImZpeGVkMzJcIjpcclxuICAgICAgICAgICAgY2FzZSBcInNmaXhlZDMyXCI6IGdlblxyXG4gICAgICAgICAgICAgICAgKFwiaWYoIXV0aWwuaXNJbnRlZ2VyKCVzKSlcIiwgcmVmKVxyXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiaW50ZWdlclwiKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImludDY0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1aW50NjRcIjpcclxuICAgICAgICAgICAgY2FzZSBcInNpbnQ2NFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwic2ZpeGVkNjRcIjogZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCJpZighdXRpbC5pc0ludGVnZXIoJXMpJiYhKCVzJiZ1dGlsLmlzSW50ZWdlciglcy5sb3cpJiZ1dGlsLmlzSW50ZWdlciglcy5oaWdoKSkpXCIsIHJlZiwgcmVmLCByZWYsIHJlZilcclxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImludGVnZXJ8TG9uZ1wiKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImZsb2F0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJkb3VibGVcIjogZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCJpZih0eXBlb2YgJXMhPT1cXFwibnVtYmVyXFxcIilcIiwgcmVmKVxyXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwibnVtYmVyXCIpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOiBnZW5cclxuICAgICAgICAgICAgICAgIChcImlmKHR5cGVvZiAlcyE9PVxcXCJib29sZWFuXFxcIilcIiwgcmVmKVxyXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiYm9vbGVhblwiKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiBnZW5cclxuICAgICAgICAgICAgICAgIChcImlmKCF1dGlsLmlzU3RyaW5nKCVzKSlcIiwgcmVmKVxyXG4gICAgICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwic3RyaW5nXCIpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYnl0ZXNcIjogZ2VuXHJcbiAgICAgICAgICAgICAgICAoXCJpZighKCVzJiZ0eXBlb2YgJXMubGVuZ3RoPT09XFxcIm51bWJlclxcXCJ8fHV0aWwuaXNTdHJpbmcoJXMpKSlcIiwgcmVmLCByZWYsIHJlZilcclxuICAgICAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImJ1ZmZlclwiKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2VuO1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgcGFydGlhbCBrZXkgdmVyaWZpZXIuXHJcbiAqIEBwYXJhbSB7Q29kZWdlbn0gZ2VuIENvZGVnZW4gaW5zdGFuY2VcclxuICogQHBhcmFtIHtGaWVsZH0gZmllbGQgUmVmbGVjdGVkIGZpZWxkXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWYgVmFyaWFibGUgcmVmZXJlbmNlXHJcbiAqIEByZXR1cm5zIHtDb2RlZ2VufSBDb2RlZ2VuIGluc3RhbmNlXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbmZ1bmN0aW9uIGdlblZlcmlmeUtleShnZW4sIGZpZWxkLCByZWYpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXHJcbiAgICBzd2l0Y2ggKGZpZWxkLmtleVR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiaW50MzJcIjpcclxuICAgICAgICBjYXNlIFwidWludDMyXCI6XHJcbiAgICAgICAgY2FzZSBcInNpbnQzMlwiOlxyXG4gICAgICAgIGNhc2UgXCJmaXhlZDMyXCI6XHJcbiAgICAgICAgY2FzZSBcInNmaXhlZDMyXCI6IGdlblxyXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXkzMlJlLnRlc3QoJXMpKVwiLCByZWYpXHJcbiAgICAgICAgICAgICAgICAoXCJyZXR1cm4lalwiLCBpbnZhbGlkKGZpZWxkLCBcImludGVnZXIga2V5XCIpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImludDY0XCI6XHJcbiAgICAgICAgY2FzZSBcInVpbnQ2NFwiOlxyXG4gICAgICAgIGNhc2UgXCJzaW50NjRcIjpcclxuICAgICAgICBjYXNlIFwiZml4ZWQ2NFwiOlxyXG4gICAgICAgIGNhc2UgXCJzZml4ZWQ2NFwiOiBnZW5cclxuICAgICAgICAgICAgKFwiaWYoIXV0aWwua2V5NjRSZS50ZXN0KCVzKSlcIiwgcmVmKSAvLyBzZWUgY29tbWVudCBhYm92ZTogeCBpcyBvaywgZCBpcyBub3RcclxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiaW50ZWdlcnxMb25nIGtleVwiKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJib29sXCI6IGdlblxyXG4gICAgICAgICAgICAoXCJpZighdXRpbC5rZXkyUmUudGVzdCglcykpXCIsIHJlZilcclxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwiYm9vbGVhbiBrZXlcIikpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHJldHVybiBnZW47XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZXhwZWN0ZWQtbXVsdGlsaW5lICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSB2ZXJpZmllciBzcGVjaWZpYyB0byB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZS5cclxuICogQHBhcmFtIHtUeXBlfSBtdHlwZSBNZXNzYWdlIHR5cGVcclxuICogQHJldHVybnMge0NvZGVnZW59IENvZGVnZW4gaW5zdGFuY2VcclxuICovXHJcbmZ1bmN0aW9uIHZlcmlmaWVyKG10eXBlKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmV4cGVjdGVkLW11bHRpbGluZSAqL1xyXG5cclxuICAgIHZhciBnZW4gPSB1dGlsLmNvZGVnZW4oW1wibVwiXSwgbXR5cGUubmFtZSArIFwiJHZlcmlmeVwiKVxyXG4gICAgKFwiaWYodHlwZW9mIG0hPT1cXFwib2JqZWN0XFxcInx8bT09PW51bGwpXCIpXHJcbiAgICAgICAgKFwicmV0dXJuJWpcIiwgXCJvYmplY3QgZXhwZWN0ZWRcIik7XHJcbiAgICB2YXIgb25lb2ZzID0gbXR5cGUub25lb2ZzQXJyYXksXHJcbiAgICAgICAgc2VlbkZpcnN0RmllbGQgPSB7fTtcclxuICAgIGlmIChvbmVvZnMubGVuZ3RoKSBnZW5cclxuICAgIChcInZhciBwPXt9XCIpO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gbXR5cGUuZmllbGRzQXJyYXkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgZmllbGQgPSBtdHlwZS5fZmllbGRzQXJyYXlbaV0ucmVzb2x2ZSgpLFxyXG4gICAgICAgICAgICByZWYgICA9IFwibVwiICsgdXRpbC5zYWZlUHJvcChmaWVsZC5uYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKGZpZWxkLm9wdGlvbmFsKSBnZW5cclxuICAgICAgICAoXCJpZiglcyE9bnVsbCYmbS5oYXNPd25Qcm9wZXJ0eSglaikpe1wiLCByZWYsIGZpZWxkLm5hbWUpOyAvLyAhPT0gdW5kZWZpbmVkICYmICE9PSBudWxsXHJcblxyXG4gICAgICAgIC8vIG1hcCBmaWVsZHNcclxuICAgICAgICBpZiAoZmllbGQubWFwKSB7IGdlblxyXG4gICAgICAgICAgICAoXCJpZighdXRpbC5pc09iamVjdCglcykpXCIsIHJlZilcclxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGludmFsaWQoZmllbGQsIFwib2JqZWN0XCIpKVxyXG4gICAgICAgICAgICAoXCJ2YXIgaz1PYmplY3Qua2V5cyglcylcIiwgcmVmKVxyXG4gICAgICAgICAgICAoXCJmb3IodmFyIGk9MDtpPGsubGVuZ3RoOysraSl7XCIpO1xyXG4gICAgICAgICAgICAgICAgZ2VuVmVyaWZ5S2V5KGdlbiwgZmllbGQsIFwia1tpXVwiKTtcclxuICAgICAgICAgICAgICAgIGdlblZlcmlmeVZhbHVlKGdlbiwgZmllbGQsIGksIHJlZiArIFwiW2tbaV1dXCIpXHJcbiAgICAgICAgICAgIChcIn1cIik7XHJcblxyXG4gICAgICAgIC8vIHJlcGVhdGVkIGZpZWxkc1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHsgZ2VuXHJcbiAgICAgICAgICAgIChcImlmKCFBcnJheS5pc0FycmF5KCVzKSlcIiwgcmVmKVxyXG4gICAgICAgICAgICAgICAgKFwicmV0dXJuJWpcIiwgaW52YWxpZChmaWVsZCwgXCJhcnJheVwiKSlcclxuICAgICAgICAgICAgKFwiZm9yKHZhciBpPTA7aTwlcy5sZW5ndGg7KytpKXtcIiwgcmVmKTtcclxuICAgICAgICAgICAgICAgIGdlblZlcmlmeVZhbHVlKGdlbiwgZmllbGQsIGksIHJlZiArIFwiW2ldXCIpXHJcbiAgICAgICAgICAgIChcIn1cIik7XHJcblxyXG4gICAgICAgIC8vIHJlcXVpcmVkIG9yIHByZXNlbnQgZmllbGRzXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLnBhcnRPZikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9uZW9mUHJvcCA9IHV0aWwuc2FmZVByb3AoZmllbGQucGFydE9mLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlZW5GaXJzdEZpZWxkW2ZpZWxkLnBhcnRPZi5uYW1lXSA9PT0gMSkgZ2VuXHJcbiAgICAgICAgICAgIChcImlmKHAlcz09PTEpXCIsIG9uZW9mUHJvcClcclxuICAgICAgICAgICAgICAgIChcInJldHVybiVqXCIsIGZpZWxkLnBhcnRPZi5uYW1lICsgXCI6IG11bHRpcGxlIHZhbHVlc1wiKTtcclxuICAgICAgICAgICAgICAgIHNlZW5GaXJzdEZpZWxkW2ZpZWxkLnBhcnRPZi5uYW1lXSA9IDE7XHJcbiAgICAgICAgICAgICAgICBnZW5cclxuICAgICAgICAgICAgKFwicCVzPTFcIiwgb25lb2ZQcm9wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnZW5WZXJpZnlWYWx1ZShnZW4sIGZpZWxkLCBpLCByZWYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmllbGQub3B0aW9uYWwpIGdlblxyXG4gICAgICAgIChcIn1cIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2VuXHJcbiAgICAoXCJyZXR1cm4gbnVsbFwiKTtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5leHBlY3RlZC1tdWx0aWxpbmUgKi9cclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIFdyYXBwZXJzIGZvciBjb21tb24gdHlwZXMuXHJcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxJV3JhcHBlcj59XHJcbiAqIEBjb25zdFxyXG4gKi9cclxudmFyIHdyYXBwZXJzID0gZXhwb3J0cztcclxuXHJcbnZhciBNZXNzYWdlID0gcmVxdWlyZShcIi4vbWVzc2FnZVwiKTtcclxuXHJcbi8qKlxyXG4gKiBGcm9tIG9iamVjdCBjb252ZXJ0ZXIgcGFydCBvZiBhbiB7QGxpbmsgSVdyYXBwZXJ9LlxyXG4gKiBAdHlwZWRlZiBXcmFwcGVyRnJvbU9iamVjdENvbnZlcnRlclxyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG9iamVjdCBQbGFpbiBvYmplY3RcclxuICogQHJldHVybnMge01lc3NhZ2U8e30+fSBNZXNzYWdlIGluc3RhbmNlXHJcbiAqIEB0aGlzIFR5cGVcclxuICovXHJcblxyXG4vKipcclxuICogVG8gb2JqZWN0IGNvbnZlcnRlciBwYXJ0IG9mIGFuIHtAbGluayBJV3JhcHBlcn0uXHJcbiAqIEB0eXBlZGVmIFdyYXBwZXJUb09iamVjdENvbnZlcnRlclxyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XHJcbiAqIEBwYXJhbSB7TWVzc2FnZTx7fT59IG1lc3NhZ2UgTWVzc2FnZSBpbnN0YW5jZVxyXG4gKiBAcGFyYW0ge0lDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxyXG4gKiBAdGhpcyBUeXBlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbW1vbiB0eXBlIHdyYXBwZXIgcGFydCBvZiB7QGxpbmsgd3JhcHBlcnN9LlxyXG4gKiBAaW50ZXJmYWNlIElXcmFwcGVyXHJcbiAqIEBwcm9wZXJ0eSB7V3JhcHBlckZyb21PYmplY3RDb252ZXJ0ZXJ9IFtmcm9tT2JqZWN0XSBGcm9tIG9iamVjdCBjb252ZXJ0ZXJcclxuICogQHByb3BlcnR5IHtXcmFwcGVyVG9PYmplY3RDb252ZXJ0ZXJ9IFt0b09iamVjdF0gVG8gb2JqZWN0IGNvbnZlcnRlclxyXG4gKi9cclxuXHJcbi8vIEN1c3RvbSB3cmFwcGVyIGZvciBBbnlcclxud3JhcHBlcnNbXCIuZ29vZ2xlLnByb3RvYnVmLkFueVwiXSA9IHtcclxuXHJcbiAgICBmcm9tT2JqZWN0OiBmdW5jdGlvbihvYmplY3QpIHtcclxuXHJcbiAgICAgICAgLy8gdW53cmFwIHZhbHVlIHR5cGUgaWYgbWFwcGVkXHJcbiAgICAgICAgaWYgKG9iamVjdCAmJiBvYmplY3RbXCJAdHlwZVwiXSkge1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMubG9va3VwKG9iamVjdFtcIkB0eXBlXCJdKTtcclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHR5cGVfdXJsIGRvZXMgbm90IGFjY2VwdCBsZWFkaW5nIFwiLlwiXHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZV91cmwgPSBvYmplY3RbXCJAdHlwZVwiXS5jaGFyQXQoMCkgPT09IFwiLlwiID9cclxuICAgICAgICAgICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXS5zdWJzdHIoMSkgOiBvYmplY3RbXCJAdHlwZVwiXTtcclxuICAgICAgICAgICAgICAgIC8vIHR5cGVfdXJsIHByZWZpeCBpcyBvcHRpb25hbCwgYnV0IHBhdGggc2VwZXJhdG9yIGlzIHJlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVfdXJsOiBcIi9cIiArIHR5cGVfdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlLmVuY29kZSh0eXBlLmZyb21PYmplY3Qob2JqZWN0KSkuZmluaXNoKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tT2JqZWN0KG9iamVjdCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihtZXNzYWdlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIC8vIGRlY29kZSB2YWx1ZSBpZiByZXF1ZXN0ZWQgYW5kIHVubWFwcGVkXHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5qc29uICYmIG1lc3NhZ2UudHlwZV91cmwgJiYgbWVzc2FnZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAvLyBPbmx5IHVzZSBmdWxseSBxdWFsaWZpZWQgdHlwZSBuYW1lIGFmdGVyIHRoZSBsYXN0ICcvJ1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IG1lc3NhZ2UudHlwZV91cmwuc3Vic3RyaW5nKG1lc3NhZ2UudHlwZV91cmwubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5sb29rdXAobmFtZSk7XHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgICAgIGlmICh0eXBlKVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IHR5cGUuZGVjb2RlKG1lc3NhZ2UudmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gd3JhcCB2YWx1ZSBpZiB1bm1hcHBlZFxyXG4gICAgICAgIGlmICghKG1lc3NhZ2UgaW5zdGFuY2VvZiB0aGlzLmN0b3IpICYmIG1lc3NhZ2UgaW5zdGFuY2VvZiBNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBtZXNzYWdlLiR0eXBlLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXSA9IG1lc3NhZ2UuJHR5cGUuZnVsbE5hbWU7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcclxuICAgIH1cclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gV3JpdGVyO1xyXG5cclxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcclxuXHJcbnZhciBCdWZmZXJXcml0ZXI7IC8vIGN5Y2xpY1xyXG5cclxudmFyIExvbmdCaXRzICA9IHV0aWwuTG9uZ0JpdHMsXHJcbiAgICBiYXNlNjQgICAgPSB1dGlsLmJhc2U2NCxcclxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXHJcbiAqIEBjbGFzc2Rlc2MgU2NoZWR1bGVkIHdyaXRlciBvcGVyYXRpb24uXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIFVpbnQ4QXJyYXksIG51bWJlcil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcclxuICogQHBhcmFtIHtudW1iZXJ9IGxlbiBWYWx1ZSBieXRlIGxlbmd0aFxyXG4gKiBAcGFyYW0geyp9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5mdW5jdGlvbiBPcChmbiwgbGVuLCB2YWwpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZ1bmN0aW9uIHRvIGNhbGwuXHJcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oVWludDhBcnJheSwgbnVtYmVyLCAqKX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5mbiA9IGZuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsdWUgYnl0ZSBsZW5ndGguXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxlbiA9IGxlbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE5leHQgb3BlcmF0aW9uLlxyXG4gICAgICogQHR5cGUge1dyaXRlci5PcHx1bmRlZmluZWR9XHJcbiAgICAgKi9cclxuICAgIHRoaXMubmV4dCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbHVlIHRvIHdyaXRlLlxyXG4gICAgICogQHR5cGUgeyp9XHJcbiAgICAgKi9cclxuICAgIHRoaXMudmFsID0gdmFsOyAvLyB0eXBlIHZhcmllc1xyXG59XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBub29wKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eS1mdW5jdGlvblxyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIHN0YXRlIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIENvcGllZCB3cml0ZXIgc3RhdGUuXHJcbiAqIEBtZW1iZXJvZiBXcml0ZXJcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7V3JpdGVyfSB3cml0ZXIgV3JpdGVyIHRvIGNvcHkgc3RhdGUgZnJvbVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5mdW5jdGlvbiBTdGF0ZSh3cml0ZXIpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEN1cnJlbnQgaGVhZC5cclxuICAgICAqIEB0eXBlIHtXcml0ZXIuT3B9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGVhZCA9IHdyaXRlci5oZWFkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudCB0YWlsLlxyXG4gICAgICogQHR5cGUge1dyaXRlci5PcH1cclxuICAgICAqL1xyXG4gICAgdGhpcy50YWlsID0gd3JpdGVyLnRhaWw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDdXJyZW50IGJ1ZmZlciBsZW5ndGguXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxlbiA9IHdyaXRlci5sZW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOZXh0IHN0YXRlLlxyXG4gICAgICogQHR5cGUge1N0YXRlfG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMubmV4dCA9IHdyaXRlci5zdGF0ZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gV3JpdGVyKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudCBsZW5ndGguXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxlbiA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVyYXRpb25zIGhlYWQuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB0aGlzLmhlYWQgPSBuZXcgT3Aobm9vcCwgMCwgMCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVyYXRpb25zIHRhaWxcclxuICAgICAqIEB0eXBlIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRoaXMudGFpbCA9IHRoaXMuaGVhZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpbmtlZCBmb3JrZWQgc3RhdGVzLlxyXG4gICAgICogQHR5cGUge09iamVjdHxudWxsfVxyXG4gICAgICovXHJcbiAgICB0aGlzLnN0YXRlcyA9IG51bGw7XHJcblxyXG4gICAgLy8gV2hlbiBhIHZhbHVlIGlzIHdyaXR0ZW4sIHRoZSB3cml0ZXIgY2FsY3VsYXRlcyBpdHMgYnl0ZSBsZW5ndGggYW5kIHB1dHMgaXQgaW50byBhIGxpbmtlZFxyXG4gICAgLy8gbGlzdCBvZiBvcGVyYXRpb25zIHRvIHBlcmZvcm0gd2hlbiBmaW5pc2goKSBpcyBjYWxsZWQuIFRoaXMgYm90aCBhbGxvd3MgdXMgdG8gYWxsb2NhdGVcclxuICAgIC8vIGJ1ZmZlcnMgb2YgdGhlIGV4YWN0IHJlcXVpcmVkIHNpemUgYW5kIHJlZHVjZXMgdGhlIGFtb3VudCBvZiB3b3JrIHdlIGhhdmUgdG8gZG8gY29tcGFyZWRcclxuICAgIC8vIHRvIGZpcnN0IGNhbGN1bGF0aW5nIG92ZXIgb2JqZWN0cyBhbmQgdGhlbiBlbmNvZGluZyBvdmVyIG9iamVjdHMuIEluIG91ciBjYXNlLCB0aGUgZW5jb2RpbmdcclxuICAgIC8vIHBhcnQgaXMganVzdCBhIGxpbmtlZCBsaXN0IHdhbGsgY2FsbGluZyBvcGVyYXRpb25zIHdpdGggYWxyZWFkeSBwcmVwYXJlZCB2YWx1ZXMuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHdyaXRlci5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJXcml0ZXJ8V3JpdGVyfSBBIHtAbGluayBCdWZmZXJXcml0ZXJ9IHdoZW4gQnVmZmVycyBhcmUgc3VwcG9ydGVkLCBvdGhlcndpc2UgYSB7QGxpbmsgV3JpdGVyfVxyXG4gKi9cclxuV3JpdGVyLmNyZWF0ZSA9IHV0aWwuQnVmZmVyXHJcbiAgICA/IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXJfc2V0dXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIChXcml0ZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJXcml0ZXIoKTtcclxuICAgICAgICB9KSgpO1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIDogZnVuY3Rpb24gY3JlYXRlX2FycmF5KCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgV3JpdGVyKCk7XHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIEFsbG9jYXRlcyBhIGJ1ZmZlciBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIEJ1ZmZlciBzaXplXHJcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBCdWZmZXJcclxuICovXHJcbldyaXRlci5hbGxvYyA9IGZ1bmN0aW9uIGFsbG9jKHNpemUpIHtcclxuICAgIHJldHVybiBuZXcgdXRpbC5BcnJheShzaXplKTtcclxufTtcclxuXHJcbi8vIFVzZSBVaW50OEFycmF5IGJ1ZmZlciBwb29sIGluIHRoZSBicm93c2VyLCBqdXN0IGxpa2Ugbm9kZSBkb2VzIHdpdGggYnVmZmVyc1xyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG5pZiAodXRpbC5BcnJheSAhPT0gQXJyYXkpXHJcbiAgICBXcml0ZXIuYWxsb2MgPSB1dGlsLnBvb2woV3JpdGVyLmFsbG9jLCB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSk7XHJcblxyXG4vKipcclxuICogUHVzaGVzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVWludDhBcnJheSwgbnVtYmVyLCAqKX0gZm4gRnVuY3Rpb24gdG8gY2FsbFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuIFZhbHVlIGJ5dGUgbGVuZ3RoXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcclxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5Xcml0ZXIucHJvdG90eXBlLl9wdXNoID0gZnVuY3Rpb24gcHVzaChmbiwgbGVuLCB2YWwpIHtcclxuICAgIHRoaXMudGFpbCA9IHRoaXMudGFpbC5uZXh0ID0gbmV3IE9wKGZuLCBsZW4sIHZhbCk7XHJcbiAgICB0aGlzLmxlbiArPSBsZW47XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbmZ1bmN0aW9uIHdyaXRlQnl0ZSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zXSA9IHZhbCAmIDI1NTtcclxufVxyXG5cclxuZnVuY3Rpb24gd3JpdGVWYXJpbnQzMih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICB3aGlsZSAodmFsID4gMTI3KSB7XHJcbiAgICAgICAgYnVmW3BvcysrXSA9IHZhbCAmIDEyNyB8IDEyODtcclxuICAgICAgICB2YWwgPj4+PSA3O1xyXG4gICAgfVxyXG4gICAgYnVmW3Bvc10gPSB2YWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHZhcmludCB3cml0ZXIgb3BlcmF0aW9uIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB2YXJpbnQgd3JpdGVyIG9wZXJhdGlvbi5cclxuICogQGV4dGVuZHMgT3BcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5mdW5jdGlvbiBWYXJpbnRPcChsZW4sIHZhbCkge1xyXG4gICAgdGhpcy5sZW4gPSBsZW47XHJcbiAgICB0aGlzLm5leHQgPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLnZhbCA9IHZhbDtcclxufVxyXG5cclxuVmFyaW50T3AucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShPcC5wcm90b3R5cGUpO1xyXG5WYXJpbnRPcC5wcm90b3R5cGUuZm4gPSB3cml0ZVZhcmludDMyO1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgYSB2YXJpbnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUudWludDMyID0gZnVuY3Rpb24gd3JpdGVfdWludDMyKHZhbHVlKSB7XHJcbiAgICAvLyBoZXJlLCB0aGUgY2FsbCB0byB0aGlzLnB1c2ggaGFzIGJlZW4gaW5saW5lZCBhbmQgYSB2YXJpbnQgc3BlY2lmaWMgT3Agc3ViY2xhc3MgaXMgdXNlZC5cclxuICAgIC8vIHVpbnQzMiBpcyBieSBmYXIgdGhlIG1vc3QgZnJlcXVlbnRseSB1c2VkIG9wZXJhdGlvbiBhbmQgYmVuZWZpdHMgc2lnbmlmaWNhbnRseSBmcm9tIHRoaXMuXHJcbiAgICB0aGlzLmxlbiArPSAodGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgVmFyaW50T3AoXHJcbiAgICAgICAgKHZhbHVlID0gdmFsdWUgPj4+IDApXHJcbiAgICAgICAgICAgICAgICA8IDEyOCAgICAgICA/IDFcclxuICAgICAgICA6IHZhbHVlIDwgMTYzODQgICAgID8gMlxyXG4gICAgICAgIDogdmFsdWUgPCAyMDk3MTUyICAgPyAzXHJcbiAgICAgICAgOiB2YWx1ZSA8IDI2ODQzNTQ1NiA/IDRcclxuICAgICAgICA6ICAgICAgICAgICAgICAgICAgICAgNSxcclxuICAgIHZhbHVlKSkubGVuO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuaW50MzIgPSBmdW5jdGlvbiB3cml0ZV9pbnQzMih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlIDwgMFxyXG4gICAgICAgID8gdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCAxMCwgTG9uZ0JpdHMuZnJvbU51bWJlcih2YWx1ZSkpIC8vIDEwIGJ5dGVzIHBlciBzcGVjXHJcbiAgICAgICAgOiB0aGlzLnVpbnQzMih2YWx1ZSk7XHJcbn07XHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgMzIgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuc2ludDMyID0gZnVuY3Rpb24gd3JpdGVfc2ludDMyKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdGhpcy51aW50MzIoKHZhbHVlIDw8IDEgXiB2YWx1ZSA+PiAzMSkgPj4+IDApO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gd3JpdGVWYXJpbnQ2NCh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICB3aGlsZSAodmFsLmhpKSB7XHJcbiAgICAgICAgYnVmW3BvcysrXSA9IHZhbC5sbyAmIDEyNyB8IDEyODtcclxuICAgICAgICB2YWwubG8gPSAodmFsLmxvID4+PiA3IHwgdmFsLmhpIDw8IDI1KSA+Pj4gMDtcclxuICAgICAgICB2YWwuaGkgPj4+PSA3O1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKHZhbC5sbyA+IDEyNykge1xyXG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XHJcbiAgICAgICAgdmFsLmxvID0gdmFsLmxvID4+PiA3O1xyXG4gICAgfVxyXG4gICAgYnVmW3BvcysrXSA9IHZhbC5sbztcclxufVxyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgYSB2YXJpbnQuXHJcbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cclxuICovXHJcbldyaXRlci5wcm90b3R5cGUudWludDY0ID0gZnVuY3Rpb24gd3JpdGVfdWludDY0KHZhbHVlKSB7XHJcbiAgICB2YXIgYml0cyA9IExvbmdCaXRzLmZyb20odmFsdWUpO1xyXG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgYml0cy5sZW5ndGgoKSwgYml0cyk7XHJcbn07XHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuaW50NjQgPSBXcml0ZXIucHJvdG90eXBlLnVpbnQ2NDtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBzaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXHJcbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuc2ludDY0ID0gZnVuY3Rpb24gd3JpdGVfc2ludDY0KHZhbHVlKSB7XHJcbiAgICB2YXIgYml0cyA9IExvbmdCaXRzLmZyb20odmFsdWUpLnp6RW5jb2RlKCk7XHJcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCBiaXRzLmxlbmd0aCgpLCBiaXRzKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBib29saXNoIHZhbHVlIGFzIGEgdmFyaW50LlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuV3JpdGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gd3JpdGVfYm9vbCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVCeXRlLCAxLCB2YWx1ZSA/IDEgOiAwKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHdyaXRlRml4ZWQzMih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsICAgICAgICAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgMV0gPSAgdmFsID4+PiA4ICAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgMl0gPSAgdmFsID4+PiAxNiAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgM10gPSAgdmFsID4+PiAyNDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgZml4ZWQgMzIgYml0cy5cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuV3JpdGVyLnByb3RvdHlwZS5maXhlZDMyID0gZnVuY3Rpb24gd3JpdGVfZml4ZWQzMih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVGaXhlZDMyLCA0LCB2YWx1ZSA+Pj4gMCk7XHJcbn07XHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBmaXhlZCAzMiBiaXRzLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuV3JpdGVyLnByb3RvdHlwZS5zZml4ZWQzMiA9IFdyaXRlci5wcm90b3R5cGUuZml4ZWQzMjtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYW4gdW5zaWduZWQgNjQgYml0IHZhbHVlIGFzIGZpeGVkIDY0IGJpdHMuXHJcbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuZml4ZWQ2NCA9IGZ1bmN0aW9uIHdyaXRlX2ZpeGVkNjQodmFsdWUpIHtcclxuICAgIHZhciBiaXRzID0gTG9uZ0JpdHMuZnJvbSh2YWx1ZSk7XHJcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIGJpdHMubG8pLl9wdXNoKHdyaXRlRml4ZWQzMiwgNCwgYml0cy5oaSk7XHJcbn07XHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBmaXhlZCA2NCBiaXRzLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxyXG4gKi9cclxuV3JpdGVyLnByb3RvdHlwZS5zZml4ZWQ2NCA9IFdyaXRlci5wcm90b3R5cGUuZml4ZWQ2NDtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBmbG9hdCAoMzIgYml0KS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiB3cml0ZV9mbG9hdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3B1c2godXRpbC5mbG9hdC53cml0ZUZsb2F0TEUsIDQsIHZhbHVlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBkb3VibGUgKDY0IGJpdCBmbG9hdCkuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcclxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXHJcbiAqL1xyXG5Xcml0ZXIucHJvdG90eXBlLmRvdWJsZSA9IGZ1bmN0aW9uIHdyaXRlX2RvdWJsZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3B1c2godXRpbC5mbG9hdC53cml0ZURvdWJsZUxFLCA4LCB2YWx1ZSk7XHJcbn07XHJcblxyXG52YXIgd3JpdGVCeXRlcyA9IHV0aWwuQXJyYXkucHJvdG90eXBlLnNldFxyXG4gICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGFsc28gd29ya3MgZm9yIHBsYWluIGFycmF5IHZhbHVlc1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIDogZnVuY3Rpb24gd3JpdGVCeXRlc19mb3IodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICBidWZbcG9zICsgaV0gPSB2YWxbaV07XHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhIHNlcXVlbmNlIG9mIGJ5dGVzLlxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8c3RyaW5nfSB2YWx1ZSBCdWZmZXIgb3IgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIHdyaXRlXHJcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuV3JpdGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHdyaXRlX2J5dGVzKHZhbHVlKSB7XHJcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xyXG4gICAgaWYgKCFsZW4pXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVCeXRlLCAxLCAwKTtcclxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHZhciBidWYgPSBXcml0ZXIuYWxsb2MobGVuID0gYmFzZTY0Lmxlbmd0aCh2YWx1ZSkpO1xyXG4gICAgICAgIGJhc2U2NC5kZWNvZGUodmFsdWUsIGJ1ZiwgMCk7XHJcbiAgICAgICAgdmFsdWUgPSBidWY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy51aW50MzIobGVuKS5fcHVzaCh3cml0ZUJ5dGVzLCBsZW4sIHZhbHVlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gd3JpdGVfc3RyaW5nKHZhbHVlKSB7XHJcbiAgICB2YXIgbGVuID0gdXRmOC5sZW5ndGgodmFsdWUpO1xyXG4gICAgcmV0dXJuIGxlblxyXG4gICAgICAgID8gdGhpcy51aW50MzIobGVuKS5fcHVzaCh1dGY4LndyaXRlLCBsZW4sIHZhbHVlKVxyXG4gICAgICAgIDogdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIDApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZvcmtzIHRoaXMgd3JpdGVyJ3Mgc3RhdGUgYnkgcHVzaGluZyBpdCB0byBhIHN0YWNrLlxyXG4gKiBDYWxsaW5nIHtAbGluayBXcml0ZXIjcmVzZXR8cmVzZXR9IG9yIHtAbGluayBXcml0ZXIjbGRlbGltfGxkZWxpbX0gcmVzZXRzIHRoZSB3cml0ZXIgdG8gdGhlIHByZXZpb3VzIHN0YXRlLlxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUuZm9yayA9IGZ1bmN0aW9uIGZvcmsoKSB7XHJcbiAgICB0aGlzLnN0YXRlcyA9IG5ldyBTdGF0ZSh0aGlzKTtcclxuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyBPcChub29wLCAwLCAwKTtcclxuICAgIHRoaXMubGVuID0gMDtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlc2V0cyB0aGlzIGluc3RhbmNlIHRvIHRoZSBsYXN0IHN0YXRlLlxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlcykge1xyXG4gICAgICAgIHRoaXMuaGVhZCAgID0gdGhpcy5zdGF0ZXMuaGVhZDtcclxuICAgICAgICB0aGlzLnRhaWwgICA9IHRoaXMuc3RhdGVzLnRhaWw7XHJcbiAgICAgICAgdGhpcy5sZW4gICAgPSB0aGlzLnN0YXRlcy5sZW47XHJcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSB0aGlzLnN0YXRlcy5uZXh0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBuZXcgT3Aobm9vcCwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5sZW4gID0gMDtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlc2V0cyB0byB0aGUgbGFzdCBzdGF0ZSBhbmQgYXBwZW5kcyB0aGUgZm9yayBzdGF0ZSdzIGN1cnJlbnQgd3JpdGUgbGVuZ3RoIGFzIGEgdmFyaW50IGZvbGxvd2VkIGJ5IGl0cyBvcGVyYXRpb25zLlxyXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcclxuICovXHJcbldyaXRlci5wcm90b3R5cGUubGRlbGltID0gZnVuY3Rpb24gbGRlbGltKCkge1xyXG4gICAgdmFyIGhlYWQgPSB0aGlzLmhlYWQsXHJcbiAgICAgICAgdGFpbCA9IHRoaXMudGFpbCxcclxuICAgICAgICBsZW4gID0gdGhpcy5sZW47XHJcbiAgICB0aGlzLnJlc2V0KCkudWludDMyKGxlbik7XHJcbiAgICBpZiAobGVuKSB7XHJcbiAgICAgICAgdGhpcy50YWlsLm5leHQgPSBoZWFkLm5leHQ7IC8vIHNraXAgbm9vcFxyXG4gICAgICAgIHRoaXMudGFpbCA9IHRhaWw7XHJcbiAgICAgICAgdGhpcy5sZW4gKz0gbGVuO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRmluaXNoZXMgdGhlIHdyaXRlIG9wZXJhdGlvbi5cclxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IEZpbmlzaGVkIGJ1ZmZlclxyXG4gKi9cclxuV3JpdGVyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbiBmaW5pc2goKSB7XHJcbiAgICB2YXIgaGVhZCA9IHRoaXMuaGVhZC5uZXh0LCAvLyBza2lwIG5vb3BcclxuICAgICAgICBidWYgID0gdGhpcy5jb25zdHJ1Y3Rvci5hbGxvYyh0aGlzLmxlbiksXHJcbiAgICAgICAgcG9zICA9IDA7XHJcbiAgICB3aGlsZSAoaGVhZCkge1xyXG4gICAgICAgIGhlYWQuZm4oaGVhZC52YWwsIGJ1ZiwgcG9zKTtcclxuICAgICAgICBwb3MgKz0gaGVhZC5sZW47XHJcbiAgICAgICAgaGVhZCA9IGhlYWQubmV4dDtcclxuICAgIH1cclxuICAgIC8vIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XHJcbiAgICByZXR1cm4gYnVmO1xyXG59O1xyXG5cclxuV3JpdGVyLl9jb25maWd1cmUgPSBmdW5jdGlvbihCdWZmZXJXcml0ZXJfKSB7XHJcbiAgICBCdWZmZXJXcml0ZXIgPSBCdWZmZXJXcml0ZXJfO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJXcml0ZXI7XHJcblxyXG4vLyBleHRlbmRzIFdyaXRlclxyXG52YXIgV3JpdGVyID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xyXG4oQnVmZmVyV3JpdGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoV3JpdGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyV3JpdGVyO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XHJcblxyXG52YXIgQnVmZmVyID0gdXRpbC5CdWZmZXI7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgd3JpdGVyIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHdyaXRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXHJcbiAqIEBleHRlbmRzIFdyaXRlclxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIEJ1ZmZlcldyaXRlcigpIHtcclxuICAgIFdyaXRlci5jYWxsKHRoaXMpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcclxuICogQHJldHVybnMge0J1ZmZlcn0gQnVmZmVyXHJcbiAqL1xyXG5CdWZmZXJXcml0ZXIuYWxsb2MgPSBmdW5jdGlvbiBhbGxvY19idWZmZXIoc2l6ZSkge1xyXG4gICAgcmV0dXJuIChCdWZmZXJXcml0ZXIuYWxsb2MgPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUpKHNpemUpO1xyXG59O1xyXG5cclxudmFyIHdyaXRlQnl0ZXNCdWZmZXIgPSBCdWZmZXIgJiYgQnVmZmVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgQnVmZmVyLnByb3RvdHlwZS5zZXQubmFtZSA9PT0gXCJzZXRcIlxyXG4gICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGZhc3RlciB0aGFuIGNvcHkgKHJlcXVpcmVzIG5vZGUgPj0gNCB3aGVyZSBCdWZmZXJzIGV4dGVuZCBVaW50OEFycmF5IGFuZCBzZXQgaXMgcHJvcGVybHkgaW5oZXJpdGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfY29weSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgaWYgKHZhbC5jb3B5KSAvLyBCdWZmZXIgdmFsdWVzXHJcbiAgICAgICAgICAgIHZhbC5jb3B5KGJ1ZiwgcG9zLCAwLCB2YWwubGVuZ3RoKTtcclxuICAgICAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDspIC8vIHBsYWluIGFycmF5IHZhbHVlc1xyXG4gICAgICAgICAgICBidWZbcG9zKytdID0gdmFsW2krK107XHJcbiAgICB9O1xyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHdyaXRlX2J5dGVzX2J1ZmZlcih2YWx1ZSkge1xyXG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKVxyXG4gICAgICAgIHZhbHVlID0gdXRpbC5fQnVmZmVyX2Zyb20odmFsdWUsIFwiYmFzZTY0XCIpO1xyXG4gICAgdmFyIGxlbiA9IHZhbHVlLmxlbmd0aCA+Pj4gMDtcclxuICAgIHRoaXMudWludDMyKGxlbik7XHJcbiAgICBpZiAobGVuKVxyXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVCeXRlc0J1ZmZlciwgbGVuLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbmZ1bmN0aW9uIHdyaXRlU3RyaW5nQnVmZmVyKHZhbCwgYnVmLCBwb3MpIHtcclxuICAgIGlmICh2YWwubGVuZ3RoIDwgNDApIC8vIHBsYWluIGpzIGlzIGZhc3RlciBmb3Igc2hvcnQgc3RyaW5ncyAocHJvYmFibHkgZHVlIHRvIHJlZHVuZGFudCBhc3NlcnRpb25zKVxyXG4gICAgICAgIHV0aWwudXRmOC53cml0ZSh2YWwsIGJ1ZiwgcG9zKTtcclxuICAgIGVsc2VcclxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiB3cml0ZV9zdHJpbmdfYnVmZmVyKHZhbHVlKSB7XHJcbiAgICB2YXIgbGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xyXG4gICAgdGhpcy51aW50MzIobGVuKTtcclxuICAgIGlmIChsZW4pXHJcbiAgICAgICAgdGhpcy5fcHVzaCh3cml0ZVN0cmluZ0J1ZmZlciwgbGVuLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRmluaXNoZXMgdGhlIHdyaXRlIG9wZXJhdGlvbi5cclxuICogQG5hbWUgQnVmZmVyV3JpdGVyI2ZpbmlzaFxyXG4gKiBAZnVuY3Rpb25cclxuICogQHJldHVybnMge0J1ZmZlcn0gRmluaXNoZWQgYnVmZmVyXHJcbiAqL1xyXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8vIEEgSmF2YXNjcmlwdCBpbXBsZW1lbnRhaW9uIG9mIHRoZSBcInhvcjEyOFwiIHBybmcgYWxnb3JpdGhtIGJ5XG4vLyBHZW9yZ2UgTWFyc2FnbGlhLiAgU2VlIGh0dHA6Ly93d3cuanN0YXRzb2Z0Lm9yZy92MDgvaTE0L3BhcGVyXG5cbihmdW5jdGlvbihnbG9iYWwsIG1vZHVsZSwgZGVmaW5lKSB7XG5cbmZ1bmN0aW9uIFhvckdlbihzZWVkKSB7XG4gIHZhciBtZSA9IHRoaXMsIHN0cnNlZWQgPSAnJztcblxuICBtZS54ID0gMDtcbiAgbWUueSA9IDA7XG4gIG1lLnogPSAwO1xuICBtZS53ID0gMDtcblxuICAvLyBTZXQgdXAgZ2VuZXJhdG9yIGZ1bmN0aW9uLlxuICBtZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHQgPSBtZS54IF4gKG1lLnggPDwgMTEpO1xuICAgIG1lLnggPSBtZS55O1xuICAgIG1lLnkgPSBtZS56O1xuICAgIG1lLnogPSBtZS53O1xuICAgIHJldHVybiBtZS53IF49IChtZS53ID4+PiAxOSkgXiB0IF4gKHQgPj4+IDgpO1xuICB9O1xuXG4gIGlmIChzZWVkID09PSAoc2VlZCB8IDApKSB7XG4gICAgLy8gSW50ZWdlciBzZWVkLlxuICAgIG1lLnggPSBzZWVkO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0cmluZyBzZWVkLlxuICAgIHN0cnNlZWQgKz0gc2VlZDtcbiAgfVxuXG4gIC8vIE1peCBpbiBzdHJpbmcgc2VlZCwgdGhlbiBkaXNjYXJkIGFuIGluaXRpYWwgYmF0Y2ggb2YgNjQgdmFsdWVzLlxuICBmb3IgKHZhciBrID0gMDsgayA8IHN0cnNlZWQubGVuZ3RoICsgNjQ7IGsrKykge1xuICAgIG1lLnggXj0gc3Ryc2VlZC5jaGFyQ29kZUF0KGspIHwgMDtcbiAgICBtZS5uZXh0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShmLCB0KSB7XG4gIHQueCA9IGYueDtcbiAgdC55ID0gZi55O1xuICB0LnogPSBmLno7XG4gIHQudyA9IGYudztcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGltcGwoc2VlZCwgb3B0cykge1xuICB2YXIgeGcgPSBuZXcgWG9yR2VuKHNlZWQpLFxuICAgICAgc3RhdGUgPSBvcHRzICYmIG9wdHMuc3RhdGUsXG4gICAgICBwcm5nID0gZnVuY3Rpb24oKSB7IHJldHVybiAoeGcubmV4dCgpID4+PiAwKSAvIDB4MTAwMDAwMDAwOyB9O1xuICBwcm5nLmRvdWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRvIHtcbiAgICAgIHZhciB0b3AgPSB4Zy5uZXh0KCkgPj4+IDExLFxuICAgICAgICAgIGJvdCA9ICh4Zy5uZXh0KCkgPj4+IDApIC8gMHgxMDAwMDAwMDAsXG4gICAgICAgICAgcmVzdWx0ID0gKHRvcCArIGJvdCkgLyAoMSA8PCAyMSk7XG4gICAgfSB3aGlsZSAocmVzdWx0ID09PSAwKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBwcm5nLmludDMyID0geGcubmV4dDtcbiAgcHJuZy5xdWljayA9IHBybmc7XG4gIGlmIChzdGF0ZSkge1xuICAgIGlmICh0eXBlb2Yoc3RhdGUpID09ICdvYmplY3QnKSBjb3B5KHN0YXRlLCB4Zyk7XG4gICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29weSh4Zywge30pOyB9XG4gIH1cbiAgcmV0dXJuIHBybmc7XG59XG5cbmlmIChtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbXBsO1xufSBlbHNlIGlmIChkZWZpbmUgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBpbXBsOyB9KTtcbn0gZWxzZSB7XG4gIHRoaXMueG9yMTI4ID0gaW1wbDtcbn1cblxufSkoXG4gIHRoaXMsXG4gICh0eXBlb2YgbW9kdWxlKSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUsICAgIC8vIHByZXNlbnQgaW4gbm9kZS5qc1xuICAodHlwZW9mIGRlZmluZSkgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUgICAvLyBwcmVzZW50IHdpdGggYW4gQU1EIGxvYWRlclxuKTtcblxuXG4iLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjkuMVxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxOCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIChgc2VsZmApIGluIHRoZSBicm93c2VyLCBgZ2xvYmFsYFxuICAvLyBvbiB0aGUgc2VydmVyLCBvciBgdGhpc2AgaW4gc29tZSB2aXJ0dWFsIG1hY2hpbmVzLiBXZSB1c2UgYHNlbGZgXG4gIC8vIGluc3RlYWQgb2YgYHdpbmRvd2AgZm9yIGBXZWJXb3JrZXJgIHN1cHBvcnQuXG4gIHZhciByb290ID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZi5zZWxmID09PSBzZWxmICYmIHNlbGYgfHxcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsLmdsb2JhbCA9PT0gZ2xvYmFsICYmIGdsb2JhbCB8fFxuICAgICAgICAgICAgdGhpcyB8fFxuICAgICAgICAgICAge307XG5cbiAgLy8gU2F2ZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGBfYCB2YXJpYWJsZS5cbiAgdmFyIHByZXZpb3VzVW5kZXJzY29yZSA9IHJvb3QuXztcblxuICAvLyBTYXZlIGJ5dGVzIGluIHRoZSBtaW5pZmllZCAoYnV0IG5vdCBnemlwcGVkKSB2ZXJzaW9uOlxuICB2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSwgT2JqUHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgU3ltYm9sUHJvdG8gPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5wcm90b3R5cGUgOiBudWxsO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXIgcHVzaCA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICAgIHNsaWNlID0gQXJyYXlQcm90by5zbGljZSxcbiAgICAgIHRvU3RyaW5nID0gT2JqUHJvdG8udG9TdHJpbmcsXG4gICAgICBoYXNPd25Qcm9wZXJ0eSA9IE9ialByb3RvLmhhc093blByb3BlcnR5O1xuXG4gIC8vIEFsbCAqKkVDTUFTY3JpcHQgNSoqIG5hdGl2ZSBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbnMgdGhhdCB3ZSBob3BlIHRvIHVzZVxuICAvLyBhcmUgZGVjbGFyZWQgaGVyZS5cbiAgdmFyIG5hdGl2ZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5LFxuICAgICAgbmF0aXZlS2V5cyA9IE9iamVjdC5rZXlzLFxuICAgICAgbmF0aXZlQ3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuICAvLyBOYWtlZCBmdW5jdGlvbiByZWZlcmVuY2UgZm9yIHN1cnJvZ2F0ZS1wcm90b3R5cGUtc3dhcHBpbmcuXG4gIHZhciBDdG9yID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZSBhIHNhZmUgcmVmZXJlbmNlIHRvIHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgdXNlIGJlbG93LlxuICB2YXIgXyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBfKSByZXR1cm4gb2JqO1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBfKSkgcmV0dXJuIG5ldyBfKG9iaik7XG4gICAgdGhpcy5fd3JhcHBlZCA9IG9iajtcbiAgfTtcblxuICAvLyBFeHBvcnQgdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciAqKk5vZGUuanMqKiwgd2l0aFxuICAvLyBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBmb3IgdGhlaXIgb2xkIG1vZHVsZSBBUEkuIElmIHdlJ3JlIGluXG4gIC8vIHRoZSBicm93c2VyLCBhZGQgYF9gIGFzIGEgZ2xvYmFsIG9iamVjdC5cbiAgLy8gKGBub2RlVHlwZWAgaXMgY2hlY2tlZCB0byBlbnN1cmUgdGhhdCBgbW9kdWxlYFxuICAvLyBhbmQgYGV4cG9ydHNgIGFyZSBub3QgSFRNTCBlbGVtZW50cy4pXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiAhZXhwb3J0cy5ub2RlVHlwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOS4xJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgLy8gVGhlIDItYXJndW1lbnQgY2FzZSBpcyBvbWl0dGVkIGJlY2F1c2Ugd2XigJlyZSBub3QgdXNpbmcgaXQuXG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgYnVpbHRpbkl0ZXJhdGVlO1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSBhcHBsaWVkIHRvIGVhY2hcbiAgLy8gZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24sIHJldHVybmluZyB0aGUgZGVzaXJlZCByZXN1bHQg4oCUIGVpdGhlciBgaWRlbnRpdHlgLFxuICAvLyBhbiBhcmJpdHJhcnkgY2FsbGJhY2ssIGEgcHJvcGVydHkgbWF0Y2hlciwgb3IgYSBwcm9wZXJ0eSBhY2Nlc3Nvci5cbiAgdmFyIGNiID0gZnVuY3Rpb24odmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KSB7XG4gICAgaWYgKF8uaXRlcmF0ZWUgIT09IGJ1aWx0aW5JdGVyYXRlZSkgcmV0dXJuIF8uaXRlcmF0ZWUodmFsdWUsIGNvbnRleHQpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gXy5pZGVudGl0eTtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuIG9wdGltaXplQ2IodmFsdWUsIGNvbnRleHQsIGFyZ0NvdW50KTtcbiAgICBpZiAoXy5pc09iamVjdCh2YWx1ZSkgJiYgIV8uaXNBcnJheSh2YWx1ZSkpIHJldHVybiBfLm1hdGNoZXIodmFsdWUpO1xuICAgIHJldHVybiBfLnByb3BlcnR5KHZhbHVlKTtcbiAgfTtcblxuICAvLyBFeHRlcm5hbCB3cmFwcGVyIGZvciBvdXIgY2FsbGJhY2sgZ2VuZXJhdG9yLiBVc2VycyBtYXkgY3VzdG9taXplXG4gIC8vIGBfLml0ZXJhdGVlYCBpZiB0aGV5IHdhbnQgYWRkaXRpb25hbCBwcmVkaWNhdGUvaXRlcmF0ZWUgc2hvcnRoYW5kIHN0eWxlcy5cbiAgLy8gVGhpcyBhYnN0cmFjdGlvbiBoaWRlcyB0aGUgaW50ZXJuYWwtb25seSBhcmdDb3VudCBhcmd1bWVudC5cbiAgXy5pdGVyYXRlZSA9IGJ1aWx0aW5JdGVyYXRlZSA9IGZ1bmN0aW9uKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNiKHZhbHVlLCBjb250ZXh0LCBJbmZpbml0eSk7XG4gIH07XG5cbiAgLy8gU29tZSBmdW5jdGlvbnMgdGFrZSBhIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMsIG9yIGEgZmV3IGV4cGVjdGVkXG4gIC8vIGFyZ3VtZW50cyBhdCB0aGUgYmVnaW5uaW5nIGFuZCB0aGVuIGEgdmFyaWFibGUgbnVtYmVyIG9mIHZhbHVlcyB0byBvcGVyYXRlXG4gIC8vIG9uLiBUaGlzIGhlbHBlciBhY2N1bXVsYXRlcyBhbGwgcmVtYWluaW5nIGFyZ3VtZW50cyBwYXN0IHRoZSBmdW5jdGlvbuKAmXNcbiAgLy8gYXJndW1lbnQgbGVuZ3RoIChvciBhbiBleHBsaWNpdCBgc3RhcnRJbmRleGApLCBpbnRvIGFuIGFycmF5IHRoYXQgYmVjb21lc1xuICAvLyB0aGUgbGFzdCBhcmd1bWVudC4gU2ltaWxhciB0byBFUzbigJlzIFwicmVzdCBwYXJhbWV0ZXJcIi5cbiAgdmFyIHJlc3RBcmd1bWVudHMgPSBmdW5jdGlvbihmdW5jLCBzdGFydEluZGV4KSB7XG4gICAgc3RhcnRJbmRleCA9IHN0YXJ0SW5kZXggPT0gbnVsbCA/IGZ1bmMubGVuZ3RoIC0gMSA6ICtzdGFydEluZGV4O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChhcmd1bWVudHMubGVuZ3RoIC0gc3RhcnRJbmRleCwgMCksXG4gICAgICAgICAgcmVzdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3RbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4ICsgc3RhcnRJbmRleF07XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIHJlc3QpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpcywgYXJndW1lbnRzWzBdLCByZXN0KTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXMsIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCByZXN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkoc3RhcnRJbmRleCArIDEpO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgc3RhcnRJbmRleDsgaW5kZXgrKykge1xuICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICBhcmdzW3N0YXJ0SW5kZXhdID0gcmVzdDtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gYW5vdGhlci5cbiAgdmFyIGJhc2VDcmVhdGUgPSBmdW5jdGlvbihwcm90b3R5cGUpIHtcbiAgICBpZiAoIV8uaXNPYmplY3QocHJvdG90eXBlKSkgcmV0dXJuIHt9O1xuICAgIGlmIChuYXRpdmVDcmVhdGUpIHJldHVybiBuYXRpdmVDcmVhdGUocHJvdG90eXBlKTtcbiAgICBDdG9yLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEN0b3I7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBudWxsO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIHNoYWxsb3dQcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhcyA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcGF0aCk7XG4gIH1cblxuICB2YXIgZGVlcEdldCA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgICBvYmogPSBvYmpbcGF0aFtpXV07XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGggPyBvYmogOiB2b2lkIDA7XG4gIH07XG5cbiAgLy8gSGVscGVyIGZvciBjb2xsZWN0aW9uIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBjb2xsZWN0aW9uXG4gIC8vIHNob3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBhcnJheSBvciBhcyBhbiBvYmplY3QuXG4gIC8vIFJlbGF0ZWQ6IGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvbGVuZ3RoXG4gIC8vIEF2b2lkcyBhIHZlcnkgbmFzdHkgaU9TIDggSklUIGJ1ZyBvbiBBUk0tNjQuICMyMDk0XG4gIHZhciBNQVhfQVJSQVlfSU5ERVggPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuICB2YXIgZ2V0TGVuZ3RoID0gc2hhbGxvd1Byb3BlcnR5KCdsZW5ndGgnKTtcbiAgdmFyIGlzQXJyYXlMaWtlID0gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgIHZhciBsZW5ndGggPSBnZXRMZW5ndGgoY29sbGVjdGlvbik7XG4gICAgcmV0dXJuIHR5cGVvZiBsZW5ndGggPT0gJ251bWJlcicgJiYgbGVuZ3RoID49IDAgJiYgbGVuZ3RoIDw9IE1BWF9BUlJBWV9JTkRFWDtcbiAgfTtcblxuICAvLyBDb2xsZWN0aW9uIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFRoZSBjb3JuZXJzdG9uZSwgYW4gYGVhY2hgIGltcGxlbWVudGF0aW9uLCBha2EgYGZvckVhY2hgLlxuICAvLyBIYW5kbGVzIHJhdyBvYmplY3RzIGluIGFkZGl0aW9uIHRvIGFycmF5LWxpa2VzLiBUcmVhdHMgYWxsXG4gIC8vIHNwYXJzZSBhcnJheS1saWtlcyBhcyBpZiB0aGV5IHdlcmUgZGVuc2UuXG4gIF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBpLCBsZW5ndGg7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdGVlKG9ialtrZXlzW2ldXSwga2V5c1tpXSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIHJlc3VsdHMgb2YgYXBwbHlpbmcgdGhlIGl0ZXJhdGVlIHRvIGVhY2ggZWxlbWVudC5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgbGVuZ3RoID0gKGtleXMgfHwgb2JqKS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IGl0ZXJhdGVlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ3JlYXRlIGEgcmVkdWNpbmcgZnVuY3Rpb24gaXRlcmF0aW5nIGxlZnQgb3IgcmlnaHQuXG4gIHZhciBjcmVhdGVSZWR1Y2UgPSBmdW5jdGlvbihkaXIpIHtcbiAgICAvLyBXcmFwIGNvZGUgdGhhdCByZWFzc2lnbnMgYXJndW1lbnQgdmFyaWFibGVzIGluIGEgc2VwYXJhdGUgZnVuY3Rpb24gdGhhblxuICAgIC8vIHRoZSBvbmUgdGhhdCBhY2Nlc3NlcyBgYXJndW1lbnRzLmxlbmd0aGAgdG8gYXZvaWQgYSBwZXJmIGhpdC4gKCMxOTkxKVxuICAgIHZhciByZWR1Y2VyID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgbWVtbywgaW5pdGlhbCkge1xuICAgICAgdmFyIGtleXMgPSAhaXNBcnJheUxpa2Uob2JqKSAmJiBfLmtleXMob2JqKSxcbiAgICAgICAgICBsZW5ndGggPSAoa2V5cyB8fCBvYmopLmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gb2JqW2tleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4XTtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuICAgICAgfVxuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMztcbiAgICAgIHJldHVybiByZWR1Y2VyKG9iaiwgb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCksIG1lbW8sIGluaXRpYWwpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBrZXlGaW5kZXIgPSBpc0FycmF5TGlrZShvYmopID8gXy5maW5kSW5kZXggOiBfLmZpbmRLZXk7XG4gICAgdmFyIGtleSA9IGtleUZpbmRlcihvYmosIHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIGl0ZW0gKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IGd1YXJkKSBmcm9tSW5kZXggPSAwO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihvYmosIHBhdGgsIGFyZ3MpIHtcbiAgICB2YXIgY29udGV4dFBhdGgsIGZ1bmM7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihwYXRoKSkge1xuICAgICAgZnVuYyA9IHBhdGg7XG4gICAgfSBlbHNlIGlmIChfLmlzQXJyYXkocGF0aCkpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XG4gICAgICBwYXRoID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICB2YXIgbWV0aG9kID0gZnVuYztcbiAgICAgIGlmICghbWV0aG9kKSB7XG4gICAgICAgIGlmIChjb250ZXh0UGF0aCAmJiBjb250ZXh0UGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICBjb250ZXh0ID0gZGVlcEdldChjb250ZXh0LCBjb250ZXh0UGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgbWV0aG9kID0gY29udGV4dFtwYXRoXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXRob2QgPT0gbnVsbCA/IG1ldGhvZCA6IG1ldGhvZC5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCB8fCB0eXBlb2YgaXRlcmF0ZWUgPT0gJ251bWJlcicgJiYgdHlwZW9mIG9ialswXSAhPSAnb2JqZWN0JyAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSA+IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odiwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2LCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdjtcbiAgICAgICAgICBsYXN0Q29tcHV0ZWQgPSBjb21wdXRlZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gSW5maW5pdHksIGxhc3RDb21wdXRlZCA9IEluZmluaXR5LFxuICAgICAgICB2YWx1ZSwgY29tcHV0ZWQ7XG4gICAgaWYgKGl0ZXJhdGVlID09IG51bGwgfHwgdHlwZW9mIGl0ZXJhdGVlID09ICdudW1iZXInICYmIHR5cGVvZiBvYmpbMF0gIT0gJ29iamVjdCcgJiYgb2JqICE9IG51bGwpIHtcbiAgICAgIG9iaiA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZSA9IG9ialtpXTtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgPCByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHYsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodiwgaW5kZXgsIGxpc3QpO1xuICAgICAgICBpZiAoY29tcHV0ZWQgPCBsYXN0Q29tcHV0ZWQgfHwgY29tcHV0ZWQgPT09IEluZmluaXR5ICYmIHJlc3VsdCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXN1bHQgPSB2O1xuICAgICAgICAgIGxhc3RDb21wdXRlZCA9IGNvbXB1dGVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBTaHVmZmxlIGEgY29sbGVjdGlvbi5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uc2FtcGxlKG9iaiwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGVcbiAgLy8gW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlcuKAk1lhdGVzX3NodWZmbGUpLlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICBpZiAoIWlzQXJyYXlMaWtlKG9iaikpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07XG4gICAgfVxuICAgIHZhciBzYW1wbGUgPSBpc0FycmF5TGlrZShvYmopID8gXy5jbG9uZShvYmopIDogXy52YWx1ZXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKHNhbXBsZSk7XG4gICAgbiA9IE1hdGgubWF4KE1hdGgubWluKG4sIGxlbmd0aCksIDApO1xuICAgIHZhciBsYXN0ID0gbGVuZ3RoIC0gMTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbjsgaW5kZXgrKykge1xuICAgICAgdmFyIHJhbmQgPSBfLnJhbmRvbShpbmRleCwgbGFzdCk7XG4gICAgICB2YXIgdGVtcCA9IHNhbXBsZVtpbmRleF07XG4gICAgICBzYW1wbGVbaW5kZXhdID0gc2FtcGxlW3JhbmRdO1xuICAgICAgc2FtcGxlW3JhbmRdID0gdGVtcDtcbiAgICB9XG4gICAgcmV0dXJuIHNhbXBsZS5zbGljZSgwLCBuKTtcbiAgfTtcblxuICAvLyBTb3J0IHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24gcHJvZHVjZWQgYnkgYW4gaXRlcmF0ZWUuXG4gIF8uc29ydEJ5ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGluZGV4OiBpbmRleCsrLFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGtleSwgbGlzdClcbiAgICAgIH07XG4gICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICAgIH0pLCAndmFsdWUnKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG4gIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yLCBwYXJ0aXRpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHBhcnRpdGlvbiA/IFtbXSwgW11dIDoge307XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBvYmopO1xuICAgICAgICBiZWhhdmlvcihyZXN1bHQsIHZhbHVlLCBrZXkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gR3JvdXBzIHRoZSBvYmplY3QncyB2YWx1ZXMgYnkgYSBjcml0ZXJpb24uIFBhc3MgZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZVxuICAvLyB0byBncm91cCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNyaXRlcmlvbi5cbiAgXy5ncm91cEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoaGFzKHJlc3VsdCwga2V5KSkgcmVzdWx0W2tleV0rKzsgZWxzZSByZXN1bHRba2V5XSA9IDE7XG4gIH0pO1xuXG4gIHZhciByZVN0clN5bWJvbCA9IC9bXlxcdWQ4MDAtXFx1ZGZmZl18W1xcdWQ4MDAtXFx1ZGJmZl1bXFx1ZGMwMC1cXHVkZmZmXXxbXFx1ZDgwMC1cXHVkZmZmXS9nO1xuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAoXy5pc1N0cmluZyhvYmopKSB7XG4gICAgICAvLyBLZWVwIHN1cnJvZ2F0ZSBwYWlyIGNoYXJhY3RlcnMgdG9nZXRoZXJcbiAgICAgIHJldHVybiBvYmoubWF0Y2gocmVTdHJTeW1ib2wpO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSkgcmV0dXJuIF8ubWFwKG9iaiwgXy5pZGVudGl0eSk7XG4gICAgcmV0dXJuIF8udmFsdWVzKG9iaik7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gYW4gb2JqZWN0LlxuICBfLnNpemUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiAwO1xuICAgIHJldHVybiBpc0FycmF5TGlrZShvYmopID8gb2JqLmxlbmd0aCA6IF8ua2V5cyhvYmopLmxlbmd0aDtcbiAgfTtcblxuICAvLyBTcGxpdCBhIGNvbGxlY3Rpb24gaW50byB0d28gYXJyYXlzOiBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIHNhdGlzZnkgdGhlIGdpdmVuXG4gIC8vIHByZWRpY2F0ZSwgYW5kIG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgZG8gbm90IHNhdGlzZnkgdGhlIHByZWRpY2F0ZS5cbiAgXy5wYXJ0aXRpb24gPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBwYXNzKSB7XG4gICAgcmVzdWx0W3Bhc3MgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gIH0sIHRydWUpO1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCB8fCBhcnJheS5sZW5ndGggPCAxKSByZXR1cm4gbiA9PSBudWxsID8gdm9pZCAwIDogW107XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkgcmV0dXJuIGFycmF5WzBdO1xuICAgIHJldHVybiBfLmluaXRpYWwoYXJyYXksIGFycmF5Lmxlbmd0aCAtIG4pO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGxhc3QgZW50cnkgb2YgdGhlIGFycmF5LiBFc3BlY2lhbGx5IHVzZWZ1bCBvblxuICAvLyB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiBhbGwgdGhlIHZhbHVlcyBpblxuICAvLyB0aGUgYXJyYXksIGV4Y2x1ZGluZyB0aGUgbGFzdCBOLlxuICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gKG4gPT0gbnVsbCB8fCBndWFyZCA/IDEgOiBuKSkpO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS5cbiAgXy5sYXN0ID0gZnVuY3Rpb24oYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwgfHwgYXJyYXkubGVuZ3RoIDwgMSkgcmV0dXJuIG4gPT0gbnVsbCA/IHZvaWQgMCA6IFtdO1xuICAgIGlmIChuID09IG51bGwgfHwgZ3VhcmQpIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gXy5yZXN0KGFycmF5LCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSBuKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuXG4gIF8ucmVzdCA9IF8udGFpbCA9IF8uZHJvcCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBuID09IG51bGwgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgQm9vbGVhbik7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCkge1xuICAgIG91dHB1dCA9IG91dHB1dCB8fCBbXTtcbiAgICB2YXIgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGlucHV0KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiYgKF8uaXNBcnJheSh2YWx1ZSkgfHwgXy5pc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIC8vIEZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0LlxuICAgICAgICBpZiAoc2hhbGxvdykge1xuICAgICAgICAgIHZhciBqID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChqIDwgbGVuKSBvdXRwdXRbaWR4KytdID0gdmFsdWVbaisrXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QsIG91dHB1dCk7XG4gICAgICAgICAgaWR4ID0gb3V0cHV0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghc3RyaWN0KSB7XG4gICAgICAgIG91dHB1dFtpZHgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICAvLyBGbGF0dGVuIG91dCBhbiBhcnJheSwgZWl0aGVyIHJlY3Vyc2l2ZWx5IChieSBkZWZhdWx0KSwgb3IganVzdCBvbmUgbGV2ZWwuXG4gIF8uZmxhdHRlbiA9IGZ1bmN0aW9uKGFycmF5LCBzaGFsbG93KSB7XG4gICAgcmV0dXJuIGZsYXR0ZW4oYXJyYXksIHNoYWxsb3csIGZhbHNlKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSB2ZXJzaW9uIG9mIHRoZSBhcnJheSB0aGF0IGRvZXMgbm90IGNvbnRhaW4gdGhlIHNwZWNpZmllZCB2YWx1ZShzKS5cbiAgXy53aXRob3V0ID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihhcnJheSwgb3RoZXJBcnJheXMpIHtcbiAgICByZXR1cm4gXy5kaWZmZXJlbmNlKGFycmF5LCBvdGhlckFycmF5cyk7XG4gIH0pO1xuXG4gIC8vIFByb2R1Y2UgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIHRoZSBhcnJheS4gSWYgdGhlIGFycmF5IGhhcyBhbHJlYWR5XG4gIC8vIGJlZW4gc29ydGVkLCB5b3UgaGF2ZSB0aGUgb3B0aW9uIG9mIHVzaW5nIGEgZmFzdGVyIGFsZ29yaXRobS5cbiAgLy8gVGhlIGZhc3RlciBhbGdvcml0aG0gd2lsbCBub3Qgd29yayB3aXRoIGFuIGl0ZXJhdGVlIGlmIHRoZSBpdGVyYXRlZVxuICAvLyBpcyBub3QgYSBvbmUtdG8tb25lIGZ1bmN0aW9uLCBzbyBwcm92aWRpbmcgYW4gaXRlcmF0ZWUgd2lsbCBkaXNhYmxlXG4gIC8vIHRoZSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpZiAoIV8uaXNCb29sZWFuKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdGVlO1xuICAgICAgaXRlcmF0ZWUgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpdGVyYXRlZSAhPSBudWxsKSBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHNlZW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpXSxcbiAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUsIGksIGFycmF5KSA6IHZhbHVlO1xuICAgICAgaWYgKGlzU29ydGVkICYmICFpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIWkgfHwgc2VlbiAhPT0gY29tcHV0ZWQpIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoc2VlbiwgY29tcHV0ZWQpKSB7XG4gICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIV8uY29udGFpbnMocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgcmV0dXJuIF8udW5pcShmbGF0dGVuKGFycmF5cywgdHJ1ZSwgdHJ1ZSkpO1xuICB9KTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgZXZlcnkgaXRlbSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlXG4gIC8vIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8uaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gYXJyYXlbaV07XG4gICAgICBpZiAoXy5jb250YWlucyhyZXN1bHQsIGl0ZW0pKSBjb250aW51ZTtcbiAgICAgIHZhciBqO1xuICAgICAgZm9yIChqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGFycmF5LCByZXN0KSB7XG4gICAgcmVzdCA9IGZsYXR0ZW4ocmVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKGFycmF5LCBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICByZXR1cm4gIV8uY29udGFpbnMocmVzdCwgdmFsdWUpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBDb21wbGVtZW50IG9mIF8uemlwLiBVbnppcCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyBhbmQgZ3JvdXBzXG4gIC8vIGVhY2ggYXJyYXkncyBlbGVtZW50cyBvbiBzaGFyZWQgaW5kaWNlcy5cbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCBnZXRMZW5ndGgpLmxlbmd0aCB8fCAwO1xuICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IHJlc3RBcmd1bWVudHMoXy51bnppcCk7XG5cbiAgLy8gQ29udmVydHMgbGlzdHMgaW50byBvYmplY3RzLiBQYXNzIGVpdGhlciBhIHNpbmdsZSBhcnJheSBvZiBgW2tleSwgdmFsdWVdYFxuICAvLyBwYWlycywgb3IgdHdvIHBhcmFsbGVsIGFycmF5cyBvZiB0aGUgc2FtZSBsZW5ndGggLS0gb25lIG9mIGtleXMsIGFuZCBvbmUgb2ZcbiAgLy8gdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzLiBQYXNzaW5nIGJ5IHBhaXJzIGlzIHRoZSByZXZlcnNlIG9mIF8ucGFpcnMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgobGlzdCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpbmRJbmRleCBhbmQgZmluZExhc3RJbmRleCBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVQcmVkaWNhdGVJbmRleEZpbmRlciA9IGZ1bmN0aW9uKGRpcikge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgICAgdmFyIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICB2YXIgaW5kZXggPSBkaXIgPiAwID8gMCA6IGxlbmd0aCAtIDE7XG4gICAgICBmb3IgKDsgaW5kZXggPj0gMCAmJiBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gZGlyKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBpbmRleCBvbiBhbiBhcnJheS1saWtlIHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3QuXG4gIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4gIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKC0xKTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBpbmRleE9mIGFuZCBsYXN0SW5kZXhPZiBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVJbmRleEZpbmRlciA9IGZ1bmN0aW9uKGRpciwgcHJlZGljYXRlRmluZCwgc29ydGVkSW5kZXgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlkeCkge1xuICAgICAgdmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpO1xuICAgICAgaWYgKHR5cGVvZiBpZHggPT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKGRpciA+IDApIHtcbiAgICAgICAgICBpID0gaWR4ID49IDAgPyBpZHggOiBNYXRoLm1heChpZHggKyBsZW5ndGgsIGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc29ydGVkSW5kZXggJiYgaWR4ICYmIGxlbmd0aCkge1xuICAgICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpZHhdID09PSBpdGVtID8gaWR4IDogLTE7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgICBpZHggPSBwcmVkaWNhdGVGaW5kKHNsaWNlLmNhbGwoYXJyYXksIGksIGxlbmd0aCksIF8uaXNOYU4pO1xuICAgICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgICB9XG4gICAgICBmb3IgKGlkeCA9IGRpciA+IDAgPyBpIDogbGVuZ3RoIC0gMTsgaWR4ID49IDAgJiYgaWR4IDwgbGVuZ3RoOyBpZHggKz0gZGlyKSB7XG4gICAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhbiBpdGVtIGluIGFuIGFycmF5LFxuICAvLyBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gY3JlYXRlSW5kZXhGaW5kZXIoMSwgXy5maW5kSW5kZXgsIF8uc29ydGVkSW5kZXgpO1xuICBfLmxhc3RJbmRleE9mID0gY3JlYXRlSW5kZXhGaW5kZXIoLTEsIF8uZmluZExhc3RJbmRleCk7XG5cbiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoc3RvcCA9PSBudWxsKSB7XG4gICAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgaWYgKCFzdGVwKSB7XG4gICAgICBzdGVwID0gc3RvcCA8IHN0YXJ0ID8gLTEgOiAxO1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIHJhbmdlID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyssIHN0YXJ0ICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlW2lkeF0gPSBzdGFydDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gQ2h1bmsgYSBzaW5nbGUgYXJyYXkgaW50byBtdWx0aXBsZSBhcnJheXMsIGVhY2ggY29udGFpbmluZyBgY291bnRgIG9yIGZld2VyXG4gIC8vIGl0ZW1zLlxuICBfLmNodW5rID0gZnVuY3Rpb24oYXJyYXksIGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwgfHwgY291bnQgPCAxKSByZXR1cm4gW107XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHQucHVzaChzbGljZS5jYWxsKGFycmF5LCBpLCBpICs9IGNvdW50KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZXhlY3V0ZSBhIGZ1bmN0aW9uIGFzIGEgY29uc3RydWN0b3JcbiAgLy8gb3IgYSBub3JtYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICB2YXIgZXhlY3V0ZUJvdW5kID0gZnVuY3Rpb24oc291cmNlRnVuYywgYm91bmRGdW5jLCBjb250ZXh0LCBjYWxsaW5nQ29udGV4dCwgYXJncykge1xuICAgIGlmICghKGNhbGxpbmdDb250ZXh0IGluc3RhbmNlb2YgYm91bmRGdW5jKSkgcmV0dXJuIHNvdXJjZUZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgdmFyIHNlbGYgPSBiYXNlQ3JlYXRlKHNvdXJjZUZ1bmMucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gc291cmNlRnVuYy5hcHBseShzZWxmLCBhcmdzKTtcbiAgICBpZiAoXy5pc09iamVjdChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLFxuICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmXG4gIC8vIGF2YWlsYWJsZS5cbiAgXy5iaW5kID0gcmVzdEFyZ3VtZW50cyhmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICAgIHZhciBib3VuZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oY2FsbEFyZ3MpIHtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIGNvbnRleHQsIHRoaXMsIGFyZ3MuY29uY2F0KGNhbGxBcmdzKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9KTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBfIGFjdHNcbiAgLy8gYXMgYSBwbGFjZWhvbGRlciBieSBkZWZhdWx0LCBhbGxvd2luZyBhbnkgY29tYmluYXRpb24gb2YgYXJndW1lbnRzIHRvIGJlXG4gIC8vIHByZS1maWxsZWQuIFNldCBgXy5wYXJ0aWFsLnBsYWNlaG9sZGVyYCBmb3IgYSBjdXN0b20gcGxhY2Vob2xkZXIgYXJndW1lbnQuXG4gIF8ucGFydGlhbCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oZnVuYywgYm91bmRBcmdzKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0gXy5wYXJ0aWFsLnBsYWNlaG9sZGVyO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gYm91bmRBcmdzLmxlbmd0aDtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpXSA9IGJvdW5kQXJnc1tpXSA9PT0gcGxhY2Vob2xkZXIgPyBhcmd1bWVudHNbcG9zaXRpb24rK10gOiBib3VuZEFyZ3NbaV07XG4gICAgICB9XG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBhcmd1bWVudHMubGVuZ3RoKSBhcmdzLnB1c2goYXJndW1lbnRzW3Bvc2l0aW9uKytdKTtcbiAgICAgIHJldHVybiBleGVjdXRlQm91bmQoZnVuYywgYm91bmQsIHRoaXMsIHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgcmV0dXJuIGJvdW5kO1xuICB9KTtcblxuICBfLnBhcnRpYWwucGxhY2Vob2xkZXIgPSBfO1xuXG4gIC8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuICAvLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3NcbiAgLy8gZGVmaW5lZCBvbiBhbiBvYmplY3QgYmVsb25nIHRvIGl0LlxuICBfLmJpbmRBbGwgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgdmFyIGluZGV4ID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKGluZGV4IDwgMSkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIG9ialtrZXldID0gXy5iaW5kKG9ialtrZXldLCBvYmopO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgICB2YXIgYWRkcmVzcyA9ICcnICsgKGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5KTtcbiAgICAgIGlmICghaGFzKGNhY2hlLCBhZGRyZXNzKSkgY2FjaGVbYWRkcmVzc10gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY2FjaGVbYWRkcmVzc107XG4gICAgfTtcbiAgICBtZW1vaXplLmNhY2hlID0ge307XG4gICAgcmV0dXJuIG1lbW9pemU7XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0sIHdhaXQpO1xuICB9KTtcblxuICAvLyBEZWZlcnMgYSBmdW5jdGlvbiwgc2NoZWR1bGluZyBpdCB0byBydW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXNcbiAgLy8gY2xlYXJlZC5cbiAgXy5kZWZlciA9IF8ucGFydGlhbChfLmRlbGF5LCBfLCAxKTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIHdoZW4gaW52b2tlZCwgd2lsbCBvbmx5IGJlIHRyaWdnZXJlZCBhdCBtb3N0IG9uY2VcbiAgLy8gZHVyaW5nIGEgZ2l2ZW4gd2luZG93IG9mIHRpbWUuIE5vcm1hbGx5LCB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgcnVuXG4gIC8vIGFzIG11Y2ggYXMgaXQgY2FuLCB3aXRob3V0IGV2ZXIgZ29pbmcgbW9yZSB0aGFuIG9uY2UgcGVyIGB3YWl0YCBkdXJhdGlvbjtcbiAgLy8gYnV0IGlmIHlvdSdkIGxpa2UgdG8gZGlzYWJsZSB0aGUgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIHBhc3NcbiAgLy8gYHtsZWFkaW5nOiBmYWxzZX1gLiBUbyBkaXNhYmxlIGV4ZWN1dGlvbiBvbiB0aGUgdHJhaWxpbmcgZWRnZSwgZGl0dG8uXG4gIF8udGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgdmFyIHRpbWVvdXQsIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogXy5ub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgdGhyb3R0bGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbm93ID0gXy5ub3coKTtcbiAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDAgfHwgcmVtYWluaW5nID4gd2FpdCkge1xuICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgdGhyb3R0bGVkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgcHJldmlvdXMgPSAwO1xuICAgICAgdGltZW91dCA9IGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRocm90dGxlZDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgcmVzdWx0O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oY29udGV4dCwgYXJncykge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoYXJncykgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgdmFyIGRlYm91bmNlZCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24oYXJncykge1xuICAgICAgaWYgKHRpbWVvdXQpIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgICAgdmFyIGNhbGxOb3cgPSAhdGltZW91dDtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICBpZiAoY2FsbE5vdykgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWVvdXQgPSBfLmRlbGF5KGxhdGVyLCB3YWl0LCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIGRlYm91bmNlZC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gZGVib3VuY2VkO1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcbiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG4gIF8ubmVnYXRlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgb24gYW5kIGFmdGVyIHRoZSBOdGggY2FsbC5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGUgTnRoIGNhbGwuXG4gIF8uYmVmb3JlID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICB2YXIgbWVtbztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lcyA8PSAxKSBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7XG5cbiAgXy5yZXN0QXJndW1lbnRzID0gcmVzdEFyZ3VtZW50cztcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBLZXlzIGluIElFIDwgOSB0aGF0IHdvbid0IGJlIGl0ZXJhdGVkIGJ5IGBmb3Iga2V5IGluIC4uLmAgYW5kIHRodXMgbWlzc2VkLlxuICB2YXIgaGFzRW51bUJ1ZyA9ICF7dG9TdHJpbmc6IG51bGx9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpO1xuICB2YXIgbm9uRW51bWVyYWJsZVByb3BzID0gWyd2YWx1ZU9mJywgJ2lzUHJvdG90eXBlT2YnLCAndG9TdHJpbmcnLFxuICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdoYXNPd25Qcm9wZXJ0eScsICd0b0xvY2FsZVN0cmluZyddO1xuXG4gIHZhciBjb2xsZWN0Tm9uRW51bVByb3BzID0gZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIG5vbkVudW1JZHggPSBub25FbnVtZXJhYmxlUHJvcHMubGVuZ3RoO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IG9iai5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgcHJvdG8gPSBfLmlzRnVuY3Rpb24oY29uc3RydWN0b3IpICYmIGNvbnN0cnVjdG9yLnByb3RvdHlwZSB8fCBPYmpQcm90bztcblxuICAgIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICAgIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcbiAgICBpZiAoaGFzKG9iaiwgcHJvcCkgJiYgIV8uY29udGFpbnMoa2V5cywgcHJvcCkpIGtleXMucHVzaChwcm9wKTtcblxuICAgIHdoaWxlIChub25FbnVtSWR4LS0pIHtcbiAgICAgIHByb3AgPSBub25FbnVtZXJhYmxlUHJvcHNbbm9uRW51bUlkeF07XG4gICAgICBpZiAocHJvcCBpbiBvYmogJiYgb2JqW3Byb3BdICE9PSBwcm90b1twcm9wXSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkge1xuICAgICAgICBrZXlzLnB1c2gocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBvd24gcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYC5cbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChoYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgICAvLyBBaGVtLCBJRSA8IDkuXG4gICAgaWYgKGhhc0VudW1CdWcpIGNvbGxlY3ROb25FbnVtUHJvcHMob2JqLCBrZXlzKTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSBhbGwgdGhlIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdC5cbiAgXy5hbGxLZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIHRoZSB2YWx1ZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgXy52YWx1ZXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0cyBvZiBhcHBseWluZyB0aGUgaXRlcmF0ZWUgdG8gZWFjaCBlbGVtZW50IG9mIHRoZSBvYmplY3QuXG4gIC8vIEluIGNvbnRyYXN0IHRvIF8ubWFwIGl0IHJldHVybnMgYW4gb2JqZWN0LlxuICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLFxuICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgcmVzdWx0cyA9IHt9O1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5c1tpbmRleF07XG4gICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgLy8gVGhlIG9wcG9zaXRlIG9mIF8ub2JqZWN0LlxuICBfLnBhaXJzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHBhaXJzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyc1tpXSA9IFtrZXlzW2ldLCBvYmpba2V5c1tpXV1dO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYC5cbiAgXy5mdW5jdGlvbnMgPSBfLm1ldGhvZHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoXy5pc0Z1bmN0aW9uKG9ialtrZXldKSkgbmFtZXMucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXMuc29ydCgpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCBkZWZhdWx0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKGRlZmF1bHRzKSBvYmogPSBPYmplY3Qob2JqKTtcbiAgICAgIGlmIChsZW5ndGggPCAyIHx8IG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XSxcbiAgICAgICAgICAgIGtleXMgPSBrZXlzRnVuYyhzb3VyY2UpLFxuICAgICAgICAgICAgbCA9IGtleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmICghZGVmYXVsdHMgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEV4dGVuZCBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgcHJvcGVydGllcyBpbiBwYXNzZWQtaW4gb2JqZWN0KHMpLlxuICBfLmV4dGVuZCA9IGNyZWF0ZUFzc2lnbmVyKF8uYWxsS2V5cyk7XG5cbiAgLy8gQXNzaWducyBhIGdpdmVuIG9iamVjdCB3aXRoIGFsbCB0aGUgb3duIHByb3BlcnRpZXMgaW4gdGhlIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIC8vIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduKVxuICBfLmV4dGVuZE93biA9IF8uYXNzaWduID0gY3JlYXRlQXNzaWduZXIoXy5rZXlzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3QuXG4gIF8uZmluZEtleSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlID0gY2IocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopLCBrZXk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtrZXldLCBrZXksIG9iaikpIHJldHVybiBrZXk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEludGVybmFsIHBpY2sgaGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiBgb2JqYCBoYXMga2V5IGBrZXlgLlxuICB2YXIga2V5SW5PYmogPSBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICByZXR1cm4ga2V5IGluIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLnBpY2sgPSByZXN0QXJndW1lbnRzKGZ1bmN0aW9uKG9iaiwga2V5cykge1xuICAgIHZhciByZXN1bHQgPSB7fSwgaXRlcmF0ZWUgPSBrZXlzWzBdO1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBrZXlzWzFdKTtcbiAgICAgIGtleXMgPSBfLmFsbEtleXMob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUgPSBrZXlJbk9iajtcbiAgICAgIGtleXMgPSBmbGF0dGVuKGtleXMsIGZhbHNlLCBmYWxzZSk7XG4gICAgICBvYmogPSBPYmplY3Qob2JqKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICBpZiAoaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqKSkgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ub21pdCA9IHJlc3RBcmd1bWVudHMoZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgdmFyIGl0ZXJhdGVlID0ga2V5c1swXSwgY29udGV4dDtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGl0ZXJhdGVlKSkge1xuICAgICAgaXRlcmF0ZWUgPSBfLm5lZ2F0ZShpdGVyYXRlZSk7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSBjb250ZXh0ID0ga2V5c1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IF8ubWFwKGZsYXR0ZW4oa2V5cywgZmFsc2UsIGZhbHNlKSwgU3RyaW5nKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gIV8uY29udGFpbnMoa2V5cywga2V5KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfLnBpY2sob2JqLCBpdGVyYXRlZSwgY29udGV4dCk7XG4gIH0pO1xuXG4gIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gIF8uZGVmYXVsdHMgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMsIHRydWUpO1xuXG4gIC8vIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgZ2l2ZW4gcHJvdG90eXBlIG9iamVjdC5cbiAgLy8gSWYgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBwcm92aWRlZCB0aGVuIHRoZXkgd2lsbCBiZSBhZGRlZCB0byB0aGVcbiAgLy8gY3JlYXRlZCBvYmplY3QuXG4gIF8uY3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlLCBwcm9wcykge1xuICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgaWYgKHByb3BzKSBfLmV4dGVuZE93bihyZXN1bHQsIHByb3BzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cbiAgXy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7XG4gIH07XG5cbiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLlxuICAvLyBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiwgaW5cbiAgLy8gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpbiB0aGUgY2hhaW4uXG4gIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikge1xuICAgIGludGVyY2VwdG9yKG9iaik7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZiBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5pc01hdGNoID0gZnVuY3Rpb24ob2JqZWN0LCBhdHRycykge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKGF0dHJzKSwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gIWxlbmd0aDtcbiAgICB2YXIgb2JqID0gT2JqZWN0KG9iamVjdCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoYXR0cnNba2V5XSAhPT0gb2JqW2tleV0gfHwgIShrZXkgaW4gb2JqKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuXG4gIC8vIEludGVybmFsIHJlY3Vyc2l2ZSBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciBgaXNFcXVhbGAuXG4gIHZhciBlcSwgZGVlcEVxO1xuICBlcSA9IGZ1bmN0aW9uKGEsIGIsIGFTdGFjaywgYlN0YWNrKSB7XG4gICAgLy8gSWRlbnRpY2FsIG9iamVjdHMgYXJlIGVxdWFsLiBgMCA9PT0gLTBgLCBidXQgdGhleSBhcmVuJ3QgaWRlbnRpY2FsLlxuICAgIC8vIFNlZSB0aGUgW0hhcm1vbnkgYGVnYWxgIHByb3Bvc2FsXShodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1oYXJtb255OmVnYWwpLlxuICAgIGlmIChhID09PSBiKSByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGI7XG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgIGlmIChhICE9PSBhKSByZXR1cm4gYiAhPT0gYjtcbiAgICAvLyBFeGhhdXN0IHByaW1pdGl2ZSBjaGVja3NcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmICh0eXBlICE9PSAnZnVuY3Rpb24nICYmIHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGRlZXBFcShhLCBiLCBhU3RhY2ssIGJTdGFjayk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgZGVlcEVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xuICAgIGlmIChiIGluc3RhbmNlb2YgXykgYiA9IGIuX3dyYXBwZWQ7XG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcbiAgICBpZiAoY2xhc3NOYW1lICE9PSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncyBmb3IgY29tcGFyaXNvbiAoTm90ZTogJycgKyAvYS9pID09PSAnL2EvaScpXG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgIHJldHVybiAnJyArIGEgPT09ICcnICsgYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxuICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICAgIGNhc2UgJ1tvYmplY3QgU3ltYm9sXSc6XG4gICAgICAgIHJldHVybiBTeW1ib2xQcm90by52YWx1ZU9mLmNhbGwoYSkgPT09IFN5bWJvbFByb3RvLnZhbHVlT2YuY2FsbChiKTtcbiAgICB9XG5cbiAgICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgaWYgKF8ua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XG4gICAgICAgIGlmICghKGhhcyhiLCBrZXkpICYmIGVxKGFba2V5XSwgYltrZXldLCBhU3RhY2ssIGJTdGFjaykpKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wb3AoKTtcbiAgICBiU3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gUGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbiB0byBjaGVjayBpZiB0d28gb2JqZWN0cyBhcmUgZXF1YWwuXG4gIF8uaXNFcXVhbCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gZXEoYSwgYik7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiBhcnJheSwgc3RyaW5nLCBvciBvYmplY3QgZW1wdHk/XG4gIC8vIEFuIFwiZW1wdHlcIiBvYmplY3QgaGFzIG5vIGVudW1lcmFibGUgb3duLXByb3BlcnRpZXMuXG4gIF8uaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikgJiYgKF8uaXNBcnJheShvYmopIHx8IF8uaXNTdHJpbmcob2JqKSB8fCBfLmlzQXJndW1lbnRzKG9iaikpKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICByZXR1cm4gXy5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYSBET00gZWxlbWVudD9cbiAgXy5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gISEob2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMSk7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhbiBhcnJheT9cbiAgLy8gRGVsZWdhdGVzIHRvIEVDTUE1J3MgbmF0aXZlIEFycmF5LmlzQXJyYXlcbiAgXy5pc0FycmF5ID0gbmF0aXZlSXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0P1xuICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygb2JqO1xuICAgIHJldHVybiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGUgPT09ICdvYmplY3QnICYmICEhb2JqO1xuICB9O1xuXG4gIC8vIEFkZCBzb21lIGlzVHlwZSBtZXRob2RzOiBpc0FyZ3VtZW50cywgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0RhdGUsIGlzUmVnRXhwLCBpc0Vycm9yLCBpc01hcCwgaXNXZWFrTWFwLCBpc1NldCwgaXNXZWFrU2V0LlxuICBfLmVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCcsICdFcnJvcicsICdTeW1ib2wnLCAnTWFwJywgJ1dlYWtNYXAnLCAnU2V0JywgJ1dlYWtTZXQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIF9bJ2lzJyArIG5hbWVdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCAnICsgbmFtZSArICddJztcbiAgICB9O1xuICB9KTtcblxuICAvLyBEZWZpbmUgYSBmYWxsYmFjayB2ZXJzaW9uIG9mIHRoZSBtZXRob2QgaW4gYnJvd3NlcnMgKGFoZW0sIElFIDwgOSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIGhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgU2FmYXJpIDggKCMxOTI5KSwgYW5kIFBoYW50b21KUyAoIzIyMzYpLlxuICB2YXIgbm9kZWxpc3QgPSByb290LmRvY3VtZW50ICYmIHJvb3QuZG9jdW1lbnQuY2hpbGROb2RlcztcbiAgaWYgKHR5cGVvZiAvLi8gIT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSW50OEFycmF5ICE9ICdvYmplY3QnICYmIHR5cGVvZiBub2RlbGlzdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgXy5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nIHx8IGZhbHNlO1xuICAgIH07XG4gIH1cblxuICAvLyBJcyBhIGdpdmVuIG9iamVjdCBhIGZpbml0ZSBudW1iZXI/XG4gIF8uaXNGaW5pdGUgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gIV8uaXNTeW1ib2wob2JqKSAmJiBpc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xuICB9O1xuXG4gIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD9cbiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgaXNOYU4ob2JqKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgYm9vbGVhbj9cbiAgXy5pc0Jvb2xlYW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB0cnVlIHx8IG9iaiA9PT0gZmFsc2UgfHwgdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gaGFzKG9iaiwgcGF0aCk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcGF0aFtpXTtcbiAgICAgIGlmIChvYmogPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqID0gb2JqW2tleV07XG4gICAgfVxuICAgIHJldHVybiAhIWxlbmd0aDtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIHBhc3NlZCBhbiBvYmplY3QsIHdpbGwgdHJhdmVyc2UgdGhhdCBvYmplY3TigJlzXG4gIC8vIHByb3BlcnRpZXMgZG93biB0aGUgZ2l2ZW4gYHBhdGhgLCBzcGVjaWZpZWQgYXMgYW4gYXJyYXkgb2Yga2V5cyBvciBpbmRleGVzLlxuICBfLnByb3BlcnR5ID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIGlmICghXy5pc0FycmF5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gc2hhbGxvd1Byb3BlcnR5KHBhdGgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gZGVlcEdldChvYmosIHBhdGgpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gR2VuZXJhdGVzIGEgZnVuY3Rpb24gZm9yIGEgZ2l2ZW4gb2JqZWN0IHRoYXQgcmV0dXJucyBhIGdpdmVuIHByb3BlcnR5LlxuICBfLnByb3BlcnR5T2YgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpe307XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gIV8uaXNBcnJheShwYXRoKSA/IG9ialtwYXRoXSA6IGRlZXBHZXQob2JqLCBwYXRoKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBwcmVkaWNhdGUgZm9yIGNoZWNraW5nIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyBhIGdpdmVuIHNldCBvZlxuICAvLyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy5tYXRjaGVyID0gXy5tYXRjaGVzID0gZnVuY3Rpb24oYXR0cnMpIHtcbiAgICBhdHRycyA9IF8uZXh0ZW5kT3duKHt9LCBhdHRycyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIF8uaXNNYXRjaChvYmosIGF0dHJzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJ1biBhIGZ1bmN0aW9uICoqbioqIHRpbWVzLlxuICBfLnRpbWVzID0gZnVuY3Rpb24obiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgYWNjdW0gPSBBcnJheShNYXRoLm1heCgwLCBuKSk7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0LCAxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRlZShpKTtcbiAgICByZXR1cm4gYWNjdW07XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gYW5kIG1heCAoaW5jbHVzaXZlKS5cbiAgXy5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIG1pbiArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSk7XG4gIH07XG5cbiAgLy8gQSAocG9zc2libHkgZmFzdGVyKSB3YXkgdG8gZ2V0IHRoZSBjdXJyZW50IHRpbWVzdGFtcCBhcyBhbiBpbnRlZ2VyLlxuICBfLm5vdyA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfTtcblxuICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZC5cbiAgICB2YXIgc291cmNlID0gJyg/OicgKyBfLmtleXMobWFwKS5qb2luKCd8JykgKyAnKSc7XG4gICAgdmFyIHRlc3RSZWdleHAgPSBSZWdFeHAoc291cmNlKTtcbiAgICB2YXIgcmVwbGFjZVJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UsICdnJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nID09IG51bGwgPyAnJyA6ICcnICsgc3RyaW5nO1xuICAgICAgcmV0dXJuIHRlc3RSZWdleHAudGVzdChzdHJpbmcpID8gc3RyaW5nLnJlcGxhY2UocmVwbGFjZVJlZ2V4cCwgZXNjYXBlcikgOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgXy5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKGVzY2FwZU1hcCk7XG4gIF8udW5lc2NhcGUgPSBjcmVhdGVFc2NhcGVyKHVuZXNjYXBlTWFwKTtcblxuICAvLyBUcmF2ZXJzZXMgdGhlIGNoaWxkcmVuIG9mIGBvYmpgIGFsb25nIGBwYXRoYC4gSWYgYSBjaGlsZCBpcyBhIGZ1bmN0aW9uLCBpdFxuICAvLyBpcyBpbnZva2VkIHdpdGggaXRzIHBhcmVudCBhcyBjb250ZXh0LiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmluYWxcbiAgLy8gY2hpbGQsIG9yIGBmYWxsYmFja2AgaWYgYW55IGNoaWxkIGlzIHVuZGVmaW5lZC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmosIHBhdGgsIGZhbGxiYWNrKSB7XG4gICAgaWYgKCFfLmlzQXJyYXkocGF0aCkpIHBhdGggPSBbcGF0aF07XG4gICAgdmFyIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKGZhbGxiYWNrKSA/IGZhbGxiYWNrLmNhbGwob2JqKSA6IGZhbGxiYWNrO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcCA9IG9iaiA9PSBudWxsID8gdm9pZCAwIDogb2JqW3BhdGhbaV1dO1xuICAgICAgaWYgKHByb3AgPT09IHZvaWQgMCkge1xuICAgICAgICBwcm9wID0gZmFsbGJhY2s7XG4gICAgICAgIGkgPSBsZW5ndGg7IC8vIEVuc3VyZSB3ZSBkb24ndCBjb250aW51ZSBpdGVyYXRpbmcuXG4gICAgICB9XG4gICAgICBvYmogPSBfLmlzRnVuY3Rpb24ocHJvcCkgPyBwcm9wLmNhbGwob2JqKSA6IHByb3A7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZTogLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICBpbnRlcnBvbGF0ZTogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiBcIidcIixcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAgICdcXHUyMDI5JzogJ3UyMDI5J1xuICB9O1xuXG4gIHZhciBlc2NhcGVSZWdFeHAgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVSZWdFeHAsIGVzY2FwZUNoYXIpO1xuICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBlc2NhcGUgKyBcIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xcbidcIjtcbiAgICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGV2YWx1YXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZSArIFwiXFxuX19wKz0nXCI7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkb2JlIFZNcyBuZWVkIHRoZSBtYXRjaCByZXR1cm5lZCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IG9mZnNldC5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgLy8gSWYgYSB2YXJpYWJsZSBpcyBub3Qgc3BlY2lmaWVkLCBwbGFjZSBkYXRhIHZhbHVlcyBpbiBsb2NhbCBzY29wZS5cbiAgICBpZiAoIXNldHRpbmdzLnZhcmlhYmxlKSBzb3VyY2UgPSAnd2l0aChvYmp8fHt9KXtcXG4nICsgc291cmNlICsgJ31cXG4nO1xuXG4gICAgc291cmNlID0gXCJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sXCIgK1xuICAgICAgXCJwcmludD1mdW5jdGlvbigpe19fcCs9X19qLmNhbGwoYXJndW1lbnRzLCcnKTt9O1xcblwiICtcbiAgICAgIHNvdXJjZSArICdyZXR1cm4gX19wO1xcbic7XG5cbiAgICB2YXIgcmVuZGVyO1xuICAgIHRyeSB7XG4gICAgICByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIGNoYWluUmVzdWx0ID0gZnVuY3Rpb24oaW5zdGFuY2UsIG9iaikge1xuICAgIHJldHVybiBpbnN0YW5jZS5fY2hhaW4gPyBfKG9iaikuY2hhaW4oKSA6IG9iajtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBfLmVhY2goXy5mdW5jdGlvbnMob2JqKSwgZnVuY3Rpb24obmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBfW25hbWVdID0gb2JqW25hbWVdO1xuICAgICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbdGhpcy5fd3JhcHBlZF07XG4gICAgICAgIHB1c2guYXBwbHkoYXJncywgYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIGZ1bmMuYXBwbHkoXywgYXJncykpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gXztcbiAgfTtcblxuICAvLyBBZGQgYWxsIG9mIHRoZSBVbmRlcnNjb3JlIGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlciBvYmplY3QuXG4gIF8ubWl4aW4oXyk7XG5cbiAgLy8gQWRkIGFsbCBtdXRhdG9yIEFycmF5IGZ1bmN0aW9ucyB0byB0aGUgd3JhcHBlci5cbiAgXy5lYWNoKFsncG9wJywgJ3B1c2gnLCAncmV2ZXJzZScsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9iaiA9IHRoaXMuX3dyYXBwZWQ7XG4gICAgICBtZXRob2QuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKChuYW1lID09PSAnc2hpZnQnIHx8IG5hbWUgPT09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNoYWluUmVzdWx0KHRoaXMsIG1ldGhvZC5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBFeHRyYWN0cyB0aGUgcmVzdWx0IGZyb20gYSB3cmFwcGVkIGFuZCBjaGFpbmVkIG9iamVjdC5cbiAgXy5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JhcHBlZDtcbiAgfTtcblxuICAvLyBQcm92aWRlIHVud3JhcHBpbmcgcHJveHkgZm9yIHNvbWUgbWV0aG9kcyB1c2VkIGluIGVuZ2luZSBvcGVyYXRpb25zXG4gIC8vIHN1Y2ggYXMgYXJpdGhtZXRpYyBhbmQgSlNPTiBzdHJpbmdpZmljYXRpb24uXG4gIF8ucHJvdG90eXBlLnZhbHVlT2YgPSBfLnByb3RvdHlwZS50b0pTT04gPSBfLnByb3RvdHlwZS52YWx1ZTtcblxuICBfLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5fd3JhcHBlZCk7XG4gIH07XG5cbiAgLy8gQU1EIHJlZ2lzdHJhdGlvbiBoYXBwZW5zIGF0IHRoZSBlbmQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQgbG9hZGVyc1xuICAvLyB0aGF0IG1heSBub3QgZW5mb3JjZSBuZXh0LXR1cm4gc2VtYW50aWNzIG9uIG1vZHVsZXMuIEV2ZW4gdGhvdWdoIGdlbmVyYWxcbiAgLy8gcHJhY3RpY2UgZm9yIEFNRCByZWdpc3RyYXRpb24gaXMgdG8gYmUgYW5vbnltb3VzLCB1bmRlcnNjb3JlIHJlZ2lzdGVyc1xuICAvLyBhcyBhIG5hbWVkIG1vZHVsZSBiZWNhdXNlLCBsaWtlIGpRdWVyeSwgaXQgaXMgYSBiYXNlIGxpYnJhcnkgdGhhdCBpc1xuICAvLyBwb3B1bGFyIGVub3VnaCB0byBiZSBidW5kbGVkIGluIGEgdGhpcmQgcGFydHkgbGliLCBidXQgbm90IGJlIHBhcnQgb2ZcbiAgLy8gYW4gQU1EIGxvYWQgcmVxdWVzdC4gVGhvc2UgY2FzZXMgY291bGQgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBhblxuICAvLyBhbm9ueW1vdXMgZGVmaW5lKCkgaXMgY2FsbGVkIG91dHNpZGUgb2YgYSBsb2FkZXIgcmVxdWVzdC5cbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKCd1bmRlcnNjb3JlJywgW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbn0oKSk7XG4iXX0="}